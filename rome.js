(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Rome = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){
(function (process,global,Buffer){
module.exports = (function(global) {
  'use strict';
  // project-rome/@romejs/ob1/index.ts
















	function ___R$project$rome$$romejs$ob1$index_ts$ob1Add(a, b) {
		// @ts-ignore
		return a + b;
	}








	function ___R$project$rome$$romejs$ob1$index_ts$ob1Sub(a, b) {
		// @ts-ignore
		return a - b;
	}



	function ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(x) {
		// @ts-ignore
		return x;
	}



	function ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(x) {
		// @ts-ignore
		return x;
	}




	function ___R$project$rome$$romejs$ob1$index_ts$ob1Get(x) {
		// @ts-ignore
		return x;
	}




	function ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(x) {
		return (x);
	}

	const ___R$project$rome$$romejs$ob1$index_ts$ob1Number0 = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
		0,
	);
	const ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1 = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
		-1,
	);




	function ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(x) {
		return (x);
	}

	const ___R$project$rome$$romejs$ob1$index_ts$ob1Number1 = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(
		1,
	);
	const ___R$project$rome$$romejs$ob1$index_ts$ob1Number1Neg1 = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(
		-1,
	);

	function ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0To1(x) {
		// @ts-ignore
		return (x + 1);
	}

	function ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1To0(x) {
		// @ts-ignore
		return (x - 1);
	}



	function ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(x) {
		// @ts-ignore
		return x + 1;
	}



	function ___R$project$rome$$romejs$ob1$index_ts$ob1Dec(x) {
		// @ts-ignore
		return x - 1;
	}


  // project-rome/@romejs/parser-core/types.ts
const ___R$project$rome$$romejs$parser$core$types_ts = {
		get UNKNOWN_POSITION() {
			return ___R$project$rome$$romejs$parser$core$types_ts$UNKNOWN_POSITION;
		},
	};






























	const ___R$project$rome$$romejs$parser$core$types_ts$UNKNOWN_POSITION = {
		index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1,
		line: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(-1),
		column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1,
	};


  // project-rome/@romejs/cli-diagnostics/types.ts
const ___R$project$rome$$romejs$cli$diagnostics$types_ts = {};









  // project-rome/@romejs/string-utils/dedent.ts
function ___R$project$rome$$romejs$string$utils$dedent_ts$dedent(
		literals,
		...values
	) {
		var ___R$;
		let string = "";

		if (typeof literals === "string") {
			string = literals;
		} else {
			const parts = [];

			// Perform the interpolation
			for (let i = 0; i < literals.raw.length; i++) {
				parts.push(literals.raw[i]);
				if (i < values.length) {
					parts.push(values[i]);
				}
			}

			string = parts.join("");
		}

		// Find min indentation
		const match = string.match(/^[ \t]*(?=\S)/gm);
		if (match === null) {
			return string;
		}

		const indent =
			(___R$ = Math, ___R$.min.apply(___R$, [...match.map((x) => x.length)]));

		// Remove indentation
		return string.replace(new RegExp("^[ \\t]{" + indent + "}", "gm"), "").trim();
	}


  // project-rome/@romejs/string-utils/isEscaped.ts
function ___R$project$rome$$romejs$string$utils$isEscaped_ts$isEscaped(
		index,
		input,
	) {
		const prevChar = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) -
		1];

		if (prevChar === "\\") {
			return !___R$project$rome$$romejs$string$utils$isEscaped_ts$isEscaped(
				___R$project$rome$$romejs$ob1$index_ts$ob1Dec(index),
				input,
			);
		} else {
			return false;
		}
	}


  // project-rome/@romejs/string-utils/escapeSplit.ts
function ___R$project$rome$$romejs$string$utils$escapeSplit_ts$escapeSplit(
		input,
		splitChar,
	) {
		const parts = [];
		const unescapeRegex = new RegExp("\\\\" + splitChar, "g");

		let buff = "";

		function push() {
			buff = buff.replace(unescapeRegex, splitChar);
			parts.push(buff);
			buff = "";
		}

		for (let i = 0; i < input.length; i++) {
			let char = input[i];

			if (
				!___R$project$rome$$romejs$string$utils$isEscaped_ts$isEscaped(
					___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(i),
					input,
				) &&
				char === splitChar
			) {
				push();
			} else {
				buff += char;
			}
		}

		push();

		return parts;
	}


  // project-rome/@romejs/string-utils/orderBySimilarity.ts
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

	function ___R$$priv$project$rome$$romejs$string$utils$orderBySimilarity_ts$getMap(
		map,
		key,
		defaultValue,
	) {
		const existing = map.get(key);

		if (existing === undefined) {
			if (defaultValue === undefined) {
				throw new Error("Key didn't exist and no defaultValue passed");
			}

			map.set(key, defaultValue);
			return defaultValue;
		} else {
			return existing;
		}
	}

	/**
 * Forked from the project https://github.com/aceakash/string-similarity by Akash K, licensed under ISC
 */
	function ___R$project$rome$$romejs$string$utils$orderBySimilarity_ts$compareTwoStrings(
		aStr,
		bStr,
	) {
		const a = aStr.replace(/\s+/g, "");
		const b = bStr.replace(/\s+/g, "");

		// If both are empty strings
		if (!a.length && !b.length) {
			return 1;
		}

		// If only one is empty string
		if (!a.length || !b.length) {
			return 0;
		}

		// Identical
		if (a === b) {
			return 1;
		}

		// Both are 1-letter strings
		if (a.length === 1 && b.length === 1) {
			return 0;
		}

		// If either is a 1-letter string
		if (a.length < 2 || b.length < 2) {
			return 0;
		}

		let firstBigrams = new Map();
		for (let i = 0; i < a.length - 1; i++) {
			const bigram = a.substring(i, i + 2);

			const count = firstBigrams.has(bigram)
				? ___R$$priv$project$rome$$romejs$string$utils$orderBySimilarity_ts$getMap(
						firstBigrams,
						bigram,
					) + 1
				: 1;
			if (count === undefined) {
				throw new Error("Already used has() above");
			}

			firstBigrams.set(bigram, count);
		}

		let intersectionSize = 0;
		for (let i = 0; i < b.length - 1; i++) {
			const bigram = b.substring(i, i + 2);

			const count = ___R$$priv$project$rome$$romejs$string$utils$orderBySimilarity_ts$getMap(
				firstBigrams,
				bigram,
				0,
			);
			if (count === undefined) {
				throw new Error("Already used has() above");
			}

			if (count > 0) {
				firstBigrams.set(bigram, count - 1);
				intersectionSize++;
			}
		}

		return 2 * intersectionSize / (a.length + b.length - 2);
	}







	function ___R$project$rome$$romejs$string$utils$orderBySimilarity_ts$orderBySimilarity(
		compareStr,
		targets,
		{minRating, formatItem, ignoreCase = false} = {},
	) {
		if (targets.length === 0) {
			return [];
		}

		// Calculate the rating for each target string
		const ratings = Array.from(
			targets,
			(target) => {
				let compareTarget = target;
				if (formatItem !== undefined) {
					compareTarget = formatItem(target);
				}

				if (ignoreCase) {
					return {
						target,
						rating: ___R$project$rome$$romejs$string$utils$orderBySimilarity_ts$compareTwoStrings(
							compareStr.toLowerCase(),
							compareTarget.toLowerCase(),
						),
					};
				}

				return {
					target,
					rating: ___R$project$rome$$romejs$string$utils$orderBySimilarity_ts$compareTwoStrings(
						compareStr,
						compareTarget,
					),
				};
			},
		);

		// Sort ratings, with the highest at the beginning
		const sortedRatings = ratings.sort((a, b) => {
			return b.rating - a.rating;
		}).filter((item) => minRating === undefined || item.rating >= minRating);

		return sortedRatings;
	}


  // project-rome/@romejs/string-utils/findClosestStringMatch.ts
function ___R$project$rome$$romejs$string$utils$findClosestStringMatch_ts$findClosestStringMatch(
		name,
		matches,
		minRating = 0.8,
	) {
		if (matches.length === 0) {
			return undefined;
		}

		if (matches.length === 1) {
			return matches[0];
		}

		const ratings = ___R$project$rome$$romejs$string$utils$orderBySimilarity_ts$orderBySimilarity(
			name,
			matches,
		);
		const bestMatch = ratings[0];

		if (bestMatch.rating >= minRating) {
			return bestMatch.target;
		} else {
			return undefined;
		}
	}


  // project-rome/@romejs/string-utils/humanizeNumber.ts
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

	const ___R$$priv$project$rome$$romejs$string$utils$humanizeNumber_ts$SCIENTIFIC_NOTATION = /e/i;

	function ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
		num,
		sep = "_",
	) {
		let str = String(num);

		if (num < 1000) {
			return str;
		}

		if (
			___R$$priv$project$rome$$romejs$string$utils$humanizeNumber_ts$SCIENTIFIC_NOTATION.test(
				str,
			)
		) {
			return str;
		}

		const decimals = str.split(".");

		let intChars = String(decimals.shift()).split("");
		let intParts = [];

		while (intChars.length > 0) {
			const part = intChars.slice(-3).join("");
			intParts.unshift(part);

			intChars = intChars.slice(0, -3);
		}

		return [intParts.join(sep), ...decimals].join(".");
	}


  // project-rome/@romejs/string-utils/humanizeFileSize.ts
const ___R$$priv$project$rome$$romejs$string$utils$humanizeFileSize_ts$UNITS = [
		"B",
		"kB",
		"MB",
		"GB",
		"TB",
		"PB",
		"EB",
		"ZB",
		"YB",
	];

	function ___R$project$rome$$romejs$string$utils$humanizeFileSize_ts$humanizeFileSize(
		bytes,
	) {
		const exponent = Math.min(
			Math.floor(Math.log10(bytes) / 3),
			___R$$priv$project$rome$$romejs$string$utils$humanizeFileSize_ts$UNITS.length -
			1,
		);
		const specific = Number((bytes / Math.pow(1000, exponent)).toPrecision(3));
		const unit = ___R$$priv$project$rome$$romejs$string$utils$humanizeFileSize_ts$UNITS[exponent];
		return (
			___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
				specific,
			) + unit
		);
	}


  // project-rome/@romejs/string-utils/humanizeTime.ts
function ___R$project$rome$$romejs$string$utils$humanizeTime_ts$humanizeTime(
		ms,
		allowMilliseconds = false,
	) {
		const s = Math.floor(ms / 1000);
		const m = Math.floor(s / 60);
		const h = Math.floor(m / 60);

		if (h === 0 && m === 0 && s === 0) {
			if (allowMilliseconds) {
				return ms + "ms";
			} else {
				return (ms / 1000).toFixed(2) + "s";
			}
		}

		let buf = "";
		if (h > 0) {
			buf += String(h) + "h";
		}
		if (m > 0) {
			buf += String(m % 60) + "m";
		}
		buf += String(s % 60) + "s";
		return buf;
	}


  // project-rome/@romejs/string-charcodes/index.ts
const ___R$project$rome$$romejs$string$charcodes$index_ts = {
		get backSpace() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$backSpace;
		},
		get tab() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$tab;
		},
		get lineFeed() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lineFeed;
		},
		get carriageReturn() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$carriageReturn;
		},
		get shiftOut() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$shiftOut;
		},
		get space() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$space;
		},
		get exclamationMark() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$exclamationMark;
		},
		get quotationMark() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$quotationMark;
		},
		get numberSign() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$numberSign;
		},
		get dollarSign() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$dollarSign;
		},
		get percentSign() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$percentSign;
		},
		get ampersand() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$ampersand;
		},
		get apostrophe() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$apostrophe;
		},
		get leftParenthesis() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$leftParenthesis;
		},
		get rightParenthesis() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$rightParenthesis;
		},
		get asterisk() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$asterisk;
		},
		get plusSign() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$plusSign;
		},
		get comma() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$comma;
		},
		get dash() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$dash;
		},
		get dot() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$dot;
		},
		get slash() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$slash;
		},
		get digit0() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit0;
		},
		get digit1() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit1;
		},
		get digit2() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit2;
		},
		get digit3() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit3;
		},
		get digit4() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit4;
		},
		get digit5() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit5;
		},
		get digit6() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit6;
		},
		get digit7() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit7;
		},
		get digit8() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit8;
		},
		get digit9() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$digit9;
		},
		get colon() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$colon;
		},
		get semicolon() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$semicolon;
		},
		get lessThan() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lessThan;
		},
		get equalsTo() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$equalsTo;
		},
		get greaterThan() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$greaterThan;
		},
		get questionMark() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$questionMark;
		},
		get atSign() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$atSign;
		},
		get uppercaseA() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseA;
		},
		get uppercaseB() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseB;
		},
		get uppercaseC() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseC;
		},
		get uppercaseD() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseD;
		},
		get uppercaseE() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseE;
		},
		get uppercaseF() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseF;
		},
		get uppercaseG() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseG;
		},
		get uppercaseH() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseH;
		},
		get uppercaseI() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseI;
		},
		get uppercaseJ() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseJ;
		},
		get uppercaseK() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseK;
		},
		get uppercaseL() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseL;
		},
		get uppercaseM() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseM;
		},
		get uppercaseN() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseN;
		},
		get uppercaseO() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseO;
		},
		get uppercaseP() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseP;
		},
		get uppercaseQ() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseQ;
		},
		get uppercaseR() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseR;
		},
		get uppercaseS() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseS;
		},
		get uppercaseT() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseT;
		},
		get uppercaseU() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseU;
		},
		get uppercaseV() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseV;
		},
		get uppercaseW() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseW;
		},
		get uppercaseX() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseX;
		},
		get uppercaseY() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseY;
		},
		get uppercaseZ() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseZ;
		},
		get leftSquareBracket() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$leftSquareBracket;
		},
		get backslash() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$backslash;
		},
		get rightSquareBracket() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$rightSquareBracket;
		},
		get caret() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$caret;
		},
		get underscore() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$underscore;
		},
		get graveAccent() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$graveAccent;
		},
		get lowercaseA() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseA;
		},
		get lowercaseB() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseB;
		},
		get lowercaseC() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseC;
		},
		get lowercaseD() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseD;
		},
		get lowercaseE() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseE;
		},
		get lowercaseF() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseF;
		},
		get lowercaseG() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseG;
		},
		get lowercaseH() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseH;
		},
		get lowercaseI() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseI;
		},
		get lowercaseJ() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseJ;
		},
		get lowercaseK() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseK;
		},
		get lowercaseL() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseL;
		},
		get lowercaseM() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseM;
		},
		get lowercaseN() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseN;
		},
		get lowercaseO() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseO;
		},
		get lowercaseP() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseP;
		},
		get lowercaseQ() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseQ;
		},
		get lowercaseR() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseR;
		},
		get lowercaseS() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseS;
		},
		get lowercaseT() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseT;
		},
		get lowercaseU() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseU;
		},
		get lowercaseV() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseV;
		},
		get lowercaseW() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseW;
		},
		get lowercaseX() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseX;
		},
		get lowercaseY() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseY;
		},
		get lowercaseZ() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseZ;
		},
		get leftCurlyBrace() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$leftCurlyBrace;
		},
		get verticalBar() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$verticalBar;
		},
		get rightCurlyBrace() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$rightCurlyBrace;
		},
		get tilde() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$tilde;
		},
		get nonBreakingSpace() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$nonBreakingSpace;
		},
		get oghamSpaceMark() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$oghamSpaceMark;
		},
		get lineSeparator() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$lineSeparator;
		},
		get paragraphSeparator() {
			return ___R$project$rome$$romejs$string$charcodes$index_ts$paragraphSeparator;
		},
		isDigit: ___R$project$rome$$romejs$string$charcodes$index_ts$isDigit,
	};
	const ___R$project$rome$$romejs$string$charcodes$index_ts$backSpace = 8;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$tab = 9;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lineFeed = 10;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$carriageReturn = 13;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$shiftOut = 14;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$space = 32;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$exclamationMark = 33;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$quotationMark = 34;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$numberSign = 35;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$dollarSign = 36;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$percentSign = 37;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$ampersand = 38;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$apostrophe = 39;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$leftParenthesis = 40;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$rightParenthesis = 41;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$asterisk = 42;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$plusSign = 43;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$comma = 44;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$dash = 45;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$dot = 46;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$slash = 47;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit0 = 48;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit1 = 49;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit2 = 50;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit3 = 51;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit4 = 52;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit5 = 53;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit6 = 54;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit7 = 55;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit8 = 56;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$digit9 = 57;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$colon = 58;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$semicolon = 59;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lessThan = 60;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$equalsTo = 61;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$greaterThan = 62;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$questionMark = 63;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$atSign = 64;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseA = 65;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseB = 66;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseC = 67;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseD = 68;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseE = 69;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseF = 70;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseG = 71;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseH = 72;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseI = 73;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseJ = 74;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseK = 75;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseL = 76;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseM = 77;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseN = 78;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseO = 79;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseP = 80;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseQ = 81;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseR = 82;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseS = 83;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseT = 84;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseU = 85;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseV = 86;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseW = 87;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseX = 88;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseY = 89;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$uppercaseZ = 90;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$leftSquareBracket = 91;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$backslash = 92;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$rightSquareBracket = 93;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$caret = 94;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$underscore = 95;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$graveAccent = 96;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseA = 97;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseB = 98;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseC = 99;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseD = 100;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseE = 101;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseF = 102;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseG = 103;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseH = 104;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseI = 105;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseJ = 106;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseK = 107;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseL = 108;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseM = 109;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseN = 110;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseO = 111;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseP = 112;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseQ = 113;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseR = 114;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseS = 115;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseT = 116;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseU = 117;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseV = 118;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseW = 119;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseX = 120;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseY = 121;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lowercaseZ = 122;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$leftCurlyBrace = 123;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$verticalBar = 124;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$rightCurlyBrace = 125;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$tilde = 126;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$nonBreakingSpace = 160;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$oghamSpaceMark = 5760;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$lineSeparator = 8232;
	const ___R$project$rome$$romejs$string$charcodes$index_ts$paragraphSeparator = 8233;

	function ___R$project$rome$$romejs$string$charcodes$index_ts$isDigit(code) {
		return (
			code >= ___R$project$rome$$romejs$string$charcodes$index_ts$digit0 &&
			code <= ___R$project$rome$$romejs$string$charcodes$index_ts$digit9
		);
	}


  // project-rome/@romejs/string-utils/naturalCompare.ts
function ___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare(
		a,
		b,
		insensitive = true,
	) {
		if (insensitive) {
			a = a.toLowerCase();
			b = b.toLowerCase();
		}

		const lengthA = a.length;
		const lengthB = b.length;

		let aIndex = 0;
		let bIndex = 0;

		while (aIndex < lengthA && bIndex < lengthB) {
			let charCodeA = a.charCodeAt(aIndex);
			let charCodeB = b.charCodeAt(bIndex);

			if (___R$project$rome$$romejs$string$charcodes$index_ts$isDigit(charCodeA)) {
				if (
					!___R$project$rome$$romejs$string$charcodes$index_ts$isDigit(
						charCodeB,
					)
				) {
					return charCodeA - charCodeB;
				}

				let numStartA = aIndex;
				let numStartB = bIndex;

				while (charCodeA === 48 && ++numStartA < lengthA) {
					charCodeA = a.charCodeAt(numStartA);
				}
				while (charCodeB === 48 && ++numStartB < lengthB) {
					charCodeB = b.charCodeAt(numStartB);
				}

				let numEndA = numStartA;
				let numEndB = numStartB;

				while (
					numEndA < lengthA &&
					___R$project$rome$$romejs$string$charcodes$index_ts$isDigit(
						a.charCodeAt(numEndA),
					)
				) {
					++numEndA;
				}
				while (
					numEndB < lengthB &&
					___R$project$rome$$romejs$string$charcodes$index_ts$isDigit(
						b.charCodeAt(numEndB),
					)
				) {
					++numEndB;
				}

				let difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length
				if (difference) {
					return difference;
				}

				while (numStartA < numEndA) {
					difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);
					if (difference) {
						return difference;
					}
				}

				aIndex = numEndA;
				bIndex = numEndB;
				continue;
			}

			if (charCodeA !== charCodeB) {
				return charCodeA - charCodeB;
			}

			++aIndex;
			++bIndex;
		}

		return lengthA - lengthB;
	}


  // project-rome/@romejs/string-utils/orderByNatural.ts
function ___R$project$rome$$romejs$string$utils$orderByNatural_ts$orderByNatural(
		strs,
		insensitive = true,
	) {
		return strs.sort((a, b) =>
			___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare(
				a,
				b,
				insensitive,
			)
		);
	}


  // project-rome/@romejs/string-utils/preserveCasing.ts
function ___R$project$rome$$romejs$string$utils$preserveCasing_ts$preserveCasing(
		a,
		b,
	) {
		if (a === a.toUpperCase()) {
			// If a is upper case then make b uppercase
			return b.toUpperCase();
		} else if (a[0] === a[0].toUpperCase()) {
			// First letter is capitalized
			return b[0].toUpperCase() + b.slice(1);
		} else {
			return b;
		}
	}


  // project-rome/@romejs/string-utils/removeCarriageReturn.ts
function ___R$project$rome$$romejs$string$utils$removeCarriageReturn_ts$removeCarriageReturn(
		str,
	) {
		return str.replace(/\r/g, "");
	}


  // project-rome/@romejs/string-utils/removePrefix.ts
function ___R$project$rome$$romejs$string$utils$removePrefix_ts$removePrefix(
		value,
		prefix,
	) {
		if (value.startsWith(prefix)) {
			return value.slice(prefix.length);
		} else {
			return value;
		}
	}


  // project-rome/@romejs/string-utils/removeSuffix.ts
function ___R$project$rome$$romejs$string$utils$removeSuffix_ts$removeSuffix(
		value,
		suffix,
	) {
		if (value.endsWith(suffix)) {
			return value.slice(0, -suffix.length);
		} else {
			return value;
		}
	}


  // project-rome/@romejs/string-utils/toCamelCase.ts
function ___R$project$rome$$romejs$string$utils$toCamelCase_ts$toCamelCase(
		str,
		forceCapitalize,
	) {
		// Rest of the code expects at least 1 character
		if (str.length === 0) {
			return str;
		}

		// Prepend uppercase letters with a space
		str = str.replace(/([A-Z+])/g, " $1");

		// We no longer care about the casing
		str = str.toLowerCase();

		// Capitalize all characters after a symbol or space
		str = str.replace(/[_.\- ]+(\w|$)/g, (_, p1) => p1.toUpperCase());

		// Capitalize characters after a number
		str = str.replace(/\d+(\w|$)/g, (m) => m.toUpperCase());

		// Force capitalize if necessary
		if (forceCapitalize) {
			str = str[0].toUpperCase() + str.slice(1);
		}

		return str;
	}


  // project-rome/@romejs/string-utils/toKebabCase.ts
function ___R$project$rome$$romejs$string$utils$toKebabCase_ts$toKebabCase(str) {
		return str.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[\s_]+/g, "-").toLowerCase();
	}


  // project-rome/@romejs/string-utils/sliceEscaped.ts
function ___R$project$rome$$romejs$string$utils$sliceEscaped_ts$sliceEscaped(
		str,
		end,
	) {
		if (str.length > end) {
			let sliced = str.slice(0, end);
			while (
				sliced[sliced.length - 1] === "\\" &&
				!___R$project$rome$$romejs$string$utils$isEscaped_ts$isEscaped(
					___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(str.length - 1),
					str,
				)
			) {
				sliced = sliced.slice(0, -1);
			}
			return sliced;
		} else {
			return str;
		}
	}


  // project-rome/@romejs/string-utils/index.ts



  // project-rome/@romejs/string-markup/escape.ts
const ___R$project$rome$$romejs$string$markup$escape_ts = {
		markup: ___R$project$rome$$romejs$string$markup$escape_ts$markup,
		safeMarkup: ___R$project$rome$$romejs$string$markup$escape_ts$safeMarkup,
		escapeMarkup: ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup,
		markupTag: ___R$project$rome$$romejs$string$markup$escape_ts$markupTag,
		unescapeTextValue: ___R$project$rome$$romejs$string$markup$escape_ts$unescapeTextValue,
	};
	function ___R$project$rome$$romejs$string$markup$escape_ts$markup(
		strs,
		...values
	) {
		let out = "";

		for (let i = 0; i < strs.length; i++) {
			const str = strs[i];
			out += str;

			const interpolated = values[i];

			if (
				interpolated instanceof
				___R$$priv$project$rome$$romejs$string$markup$escape_ts$SafeMarkup
			) {
				out += interpolated.value;
				continue;
			}

			if (interpolated !== undefined) {
				out += ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
					String(interpolated),
				);
			}
		}

		return out;
	}

	class ___R$$priv$project$rome$$romejs$string$markup$escape_ts$SafeMarkup {
		constructor(value) {
			this.value = value;
		}
	}

	function ___R$project$rome$$romejs$string$markup$escape_ts$safeMarkup(input) {
		return new ___R$$priv$project$rome$$romejs$string$markup$escape_ts$SafeMarkup(
			input,
		);
	}

	function ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(input) {
		let escaped = "";
		for (let i = 0; i < input.length; i++) {
			const char = input[i];

			if (char === "<") {
				escaped += "\\<";
			} else if (char === "\\") {
				escaped += "\\\\";
			} else {
				escaped += char;
			}
		}
		return escaped;
	}

	function ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
		tagName,
		text,
		attrs,
	) {
		let ret = "<" + tagName;

		if (attrs !== undefined) {
			for (const key in attrs) {
				const value = attrs[key];
				if (value !== undefined) {
					ret += ___R$project$rome$$romejs$string$markup$escape_ts$markup` ${key}="${String(
						value,
					)}"`;
				}
			}
		}

		ret += ">" + text + "</" + tagName + ">";

		return ret;
	}

	function ___R$project$rome$$romejs$string$markup$escape_ts$unescapeTextValue(
		str,
	) {
		let unescaped = "";

		for (let i = 0; i < str.length; i++) {
			const char = str[i];

			// Unescape \\< to just <
			// Unescape \\\\ to just \\
			if (char === "\\") {
				const nextChar = str[i + 1];
				if (nextChar === "<" || nextChar === "\\") {
					i++;
					unescaped += nextChar;
					continue;
				}
			}

			unescaped += char;
		}

		return unescaped;
	}


  // project-rome/@romejs/string-markup/parse.ts
const ___R$project$rome$$romejs$string$markup$parse_ts = {
		isTagStartChar: ___R$project$rome$$romejs$string$markup$parse_ts$isTagStartChar,
		parseMarkup: ___R$project$rome$$romejs$string$markup$parse_ts$parseMarkup,
	};
	const ___R$$priv$project$rome$$romejs$string$markup$parse_ts$globalAttributes = [
		"emphasis",
		"dim",
	];

	// Tags and their corresponding supported attributes
	const ___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags = new Map();
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"emphasis",
		[],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"number",
		["approx", "pluralSuffix", "singularSuffix"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"grammarNumber",
		["plural", "singular", "none"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"hyperlink",
		["target"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"filelink",
		["target", "column", "line"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("inverse", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("dim", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"filesize",
		[],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"duration",
		["approx"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("italic", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"underline",
		[],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("strike", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("error", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("success", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("warn", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("info", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("command", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"color",
		["fg", "bg"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"highlight",
		["i"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("table", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("tr", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"td",
		["align"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("hr", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"pad",
		["width", "align"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("nobr", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("li", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set("ul", []);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.set(
		"ol",
		["reversed", "start"],
	);

	// Tags that only support certain other tags as their children
	const ___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyChildren = new Map();
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyChildren.set(
		"table",
		["tr"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyChildren.set(
		"tr",
		["td"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyChildren.set(
		"ol",
		["li"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyChildren.set(
		"ul",
		["li"],
	);

	// Tags that should only be children of other tags
	const ___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyParent = new Map();
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyParent.set(
		"tr",
		["table"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyParent.set(
		"td",
		["tr"],
	);
	___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyParent.set(
		"li",
		["ol", "ul"],
	);

	//
	function ___R$$priv$project$rome$$romejs$string$markup$parse_ts$isStringValueChar(
		char,
		index,
		input,
	) {
		if (
			char === '"' &&
			!___R$project$rome$$romejs$string$utils$isEscaped_ts$isEscaped(
				index,
				input,
			)
		) {
			return false;
		}

		return true;
	}

	function ___R$$priv$project$rome$$romejs$string$markup$parse_ts$isTextChar(
		char,
		index,
		input,
	) {
		return !___R$project$rome$$romejs$string$markup$parse_ts$isTagStartChar(
			index,
			input,
		);
	}

	function ___R$project$rome$$romejs$string$markup$parse_ts$isTagStartChar(
		index,
		input,
	) {
		const i = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index);
		return (
			input[i] === "<" &&
			!___R$project$rome$$romejs$string$utils$isEscaped_ts$isEscaped(
				index,
				input,
			)
		);
	}





	const ___R$$priv$project$rome$$romejs$string$markup$parse_ts$createStringMarkupParser = ___R$project$rome$$romejs$parser$core$index_ts$createParser((
		ParserCore,
	) =>
		class StringMarkupParser extends ParserCore {
			constructor(opts) {
				super(opts, "parse/stringMarkup", {inTagHead: false});
			}

			tokenizeWithState(index, input, state) {
				const escaped = ___R$project$rome$$romejs$string$utils$isEscaped_ts$isEscaped(
					index,
					input,
				);
				const char = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index)];

				if (!escaped && state.inTagHead) {
					if (char === " ") {
						return this.lookahead(
							___R$project$rome$$romejs$ob1$index_ts$ob1Inc(index),
						);
					}

					if (char === "=") {
						return {
							state,
							token: this.finishToken("Equals"),
						};
					}

					if (char === "/") {
						return {
							state,
							token: this.finishToken("Slash"),
						};
					}

					if (___R$project$rome$$romejs$parser$core$index_ts$isAlpha(char)) {
						const [value, end] = this.readInputFrom(
							index,
							___R$project$rome$$romejs$parser$core$index_ts$isAlpha,
						);
						return {
							state,
							token: this.finishValueToken("Word", value, end),
						};
					}

					if (char === '"') {
						const [value, stringValueEnd, unclosed] = this.readInputFrom(
							___R$project$rome$$romejs$ob1$index_ts$ob1Inc(index),
							___R$$priv$project$rome$$romejs$string$markup$parse_ts$isStringValueChar,
						);

						if (unclosed) {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.UNCLOSED_STRING,
								start: this.getPositionFromIndex(stringValueEnd),
							});
						}

						const end = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							stringValueEnd,
							1,
						);
						return {
							state,
							token: this.finishValueToken(
								"String",
								___R$project$rome$$romejs$string$markup$escape_ts$unescapeTextValue(
									value,
								),
								end,
							),
						};
					}

					if (char === ">") {
						return {
							state: {
								inTagHead: false,
							},
							token: this.finishToken("Greater"),
						};
					}
				}

				if (
					___R$project$rome$$romejs$string$markup$parse_ts$isTagStartChar(
						index,
						input,
					)
				) {
					return {
						state: {
							inTagHead: true,
						},
						token: this.finishToken("Less"),
					};
				}

				// Keep eating text until we hit a <
				const [value, end] = this.readInputFrom(
					index,
					___R$$priv$project$rome$$romejs$string$markup$parse_ts$isTextChar,
				);
				return {
					state,
					token: {
						type: "Text",
						value: ___R$project$rome$$romejs$string$markup$escape_ts$unescapeTextValue(
							value,
						),
						start: index,
						end,
					},
				};
			}

			atTagEnd() {
				return (
					this.matchToken("Less") && this.lookahead().token.type === "Slash"
				);
			}

			parseTag(headStart, parentTagName) {
				const nameToken = this.expectToken("Word");
				const tagName = (nameToken.value);

				const allowedAttributes = ___R$$priv$project$rome$$romejs$string$markup$parse_ts$tags.get(
					tagName,
				);
				if (allowedAttributes === undefined) {
					throw this.unexpected({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.UNKNOWN_TAG_NAME(
							tagName,
						),
						token: nameToken,
					});
				}

				// Check if this tag is restricted to certain parents
				const onlyAllowedAsChild = ___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyParent.get(
					tagName,
				);
				if (onlyAllowedAsChild !== undefined) {
					if (
						parentTagName === undefined ||
						!onlyAllowedAsChild.includes(parentTagName)
					) {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.RESTRICTED_CHILD(
								tagName,
								onlyAllowedAsChild,
								parentTagName,
							),
							token: nameToken,
						});
					}
				}

				// Check if the parent only allows certain children
				if (parentTagName !== undefined) {
					const onlyAllowedAsParent = ___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyChildren.get(
						parentTagName,
					);
					if (
						onlyAllowedAsParent !== undefined &&
						!onlyAllowedAsParent.includes(tagName)
					) {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.RESTRICTED_PARENT(
								parentTagName,
								onlyAllowedAsParent,
								tagName,
							),
							token: nameToken,
						});
					}
				}

				const attributes = {};
				const children = [];
				let selfClosing = false;

				// Parse attributes
				while (!this.matchToken("EOF") && !this.matchToken("Greater")) {
					const keyToken = this.getToken();

					let key;
					if (keyToken.type === "Word") {
						key = keyToken.value;

						if (
							!allowedAttributes.includes(key) &&
							!___R$$priv$project$rome$$romejs$string$markup$parse_ts$globalAttributes.includes(
								key,
							)
						) {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.INVALID_ATTRIBUTE_NAME_FOR_TAG(
									tagName,
									key,
									[
										...allowedAttributes,
										...___R$$priv$project$rome$$romejs$string$markup$parse_ts$globalAttributes,
									],
								),
							});
						}

						this.nextToken();

						// Shorthand properties
						if (
							this.matchToken("Word") ||
							this.matchToken("Slash") ||
							this.matchToken("Greater")
						) {
							attributes[key] = "true";
							continue;
						}

						this.expectToken("Equals");

						const valueToken = this.expectToken("String");
						if (valueToken.type !== "String") {
							throw new Error("Expected String");
						}
						const value = valueToken.value;

						attributes[key] = value;
					} else if (keyToken.type === "Slash") {
						this.nextToken();
						selfClosing = true;
					} else {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.EXPECTED_ATTRIBUTE_NAME,
						});
					}
				}

				this.expectToken("Greater");

				const headEnd = this.getPosition();

				// Verify closing tag
				if (!selfClosing) {
					while (
						// Build children
						!this.matchToken("EOF") &&
						!this.atTagEnd()
					) {
						const child = this.parseChild(tagName);
						if (child !== undefined) {
							children.push(child);
						}
					}

					if (this.matchToken("EOF")) {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.UNCLOSED_TAG(
								tagName,
								this.finishLocAt(headStart, headEnd),
							),
						});
					} else {
						this.expectToken("Less");
						this.expectToken("Slash");

						const name = this.getToken();
						if (name.type === "Word") {
							if (name.value !== tagName) {
								throw this.unexpected({
									description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.INCORRECT_CLOSING_TAG_NAME(
										tagName,
										name.value,
									),
								});
							}

							this.nextToken();
						} else {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.EXPECTED_CLOSING_TAG_NAME,
							});
						}

						this.expectToken("Greater");
					}
				}

				return {
					type: "Tag",
					attributes,
					name: tagName,
					children,
				};
			}

			parseChild(parentTagName) {
				const start = this.getPosition();
				const token = this.getToken();
				this.nextToken();

				if (token.type === "Text") {
					// If this tag has restricted children then no text is allowed
					if (parentTagName !== undefined) {
						const onlyAllowedAsParent = ___R$$priv$project$rome$$romejs$string$markup$parse_ts$tagsToOnlyChildren.get(
							parentTagName,
						);
						if (onlyAllowedAsParent !== undefined) {
							// Ignore text that's just whitespace
							if (token.value.trim() === "") {
								return undefined;
							} else {
								throw this.unexpected({
									description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.RESTRICTED_PARENT_TEXT(
										parentTagName,
									),
									token,
								});
							}
						}
					}

					return {
						type: "Text",
						value: token.value,
					};
				} else if (token.type === "Less") {
					return this.parseTag(start, parentTagName);
				} else {
					throw this.unexpected({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_MARKUP.UNKNOWN_START,
					});
				}
			}

			parse() {
				const children = [];
				while (!this.matchToken("EOF")) {
					const child = this.parseChild(undefined);
					if (child !== undefined) {
						children.push(child);
					}
				}
				return children;
			}
		}
	);

	function ___R$project$rome$$romejs$string$markup$parse_ts$parseMarkup(input) {
		try {
			return ___R$$priv$project$rome$$romejs$string$markup$parse_ts$createStringMarkupParser({
				input,
			}).parse();
		} catch (err) {
			throw err;
		}
	}


  // project-rome/@romejs/string-markup/types.ts

























  // project-rome/@romejs/string-markup/ansi.ts
const ___R$project$rome$$romejs$string$markup$ansi_ts = {
		get pattern() {
			return ___R$project$rome$$romejs$string$markup$ansi_ts$pattern;
		},
		get regex() {
			return ___R$project$rome$$romejs$string$markup$ansi_ts$regex;
		},
		get formatAnsi() {
			return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi;
		},
		stripAnsi: ___R$project$rome$$romejs$string$markup$ansi_ts$stripAnsi,
		hasAnsi: ___R$project$rome$$romejs$string$markup$ansi_ts$hasAnsi,
		get ansiEscapes() {
			return ___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes;
		},
	};
	/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

	const ___R$$priv$project$rome$$romejs$string$markup$ansi_ts$ESC = "\x1b[";

	const ___R$project$rome$$romejs$string$markup$ansi_ts$pattern = [
		"[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
		"(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))",
	].join("|");

	const ___R$project$rome$$romejs$string$markup$ansi_ts$regex = new RegExp(
		___R$project$rome$$romejs$string$markup$ansi_ts$pattern,
		"g",
	);

	function ___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(
		num,
	) {
		return (
			"" +
			___R$$priv$project$rome$$romejs$string$markup$ansi_ts$ESC +
			String(num) +
			"m"
		);
	}

	const ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi = {
		reset(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(0) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(0)
			);
		},
		fileHyperlink(name, filename) {
			let href = "file://";
			const {HOSTNAME} = process.env;
			if (HOSTNAME != null) {
				href += HOSTNAME + "/";
			}
			href += filename;
			return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.hyperlink(
				name,
				href,
			);
		},
		hyperlink(name, href) {
			return "\x1b]8;;" + href + "\x07" + name + "\x1b]8;;\x07";
		},
		rgb(str, color) {
			return (
				"\x1b[38;2;" +
				String(color.r) +
				";" +
				String(color.g) +
				";" +
				String(color.b) +
				"m" +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		bgRgb(str, color) {
			return (
				"\x1b[48;2;" +
				String(color.r) +
				";" +
				String(color.g) +
				";" +
				String(color.b) +
				"m" +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bold(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(1) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(22)
			);
		},
		dim(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(2) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(22)
			);
		},
		italic(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(3) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(23)
			);
		},
		underline(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(4) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(24)
			);
		},
		inverse(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(7) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(27)
			);
		},
		hidden(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(8) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(28)
			);
		},
		strikethrough(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(9) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(29)
			);
		},
		black(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(30) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		brightBlack(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(90) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		red(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(31) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		brightRed(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(91) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		green(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(32) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		brightGreen(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(92) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		yellow(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(33) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		brightYellow(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(93) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		blue(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(34) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		brightBlue(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(94) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		magenta(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(35) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		brightMagenta(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(95) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		cyan(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(36) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		brightCyan(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(96) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		white(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(37) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		brightWhite(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(97) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(39)
			);
		},
		bgBlack(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(40) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBrightBlack(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(100) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgRed(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(41) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBrightRed(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(101) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgGreen(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(42) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBrightGreen(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(102) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgYellow(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(43) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBrightYellow(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(103) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBlue(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(44) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBrightBlue(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(104) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgMagenta(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(45) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBrightMagenta(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(105) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgCyan(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(46) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBrightCyan(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(106) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgWhite(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(47) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
		bgBrightWhite(str) {
			return (
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(107) +
				str +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$createEscape(49)
			);
		},
	};

	function ___R$project$rome$$romejs$string$markup$ansi_ts$stripAnsi(str) {
		return str.replace(
			___R$project$rome$$romejs$string$markup$ansi_ts$regex,
			"",
		);
	}

	function ___R$project$rome$$romejs$string$markup$ansi_ts$hasAnsi(str) {
		return ___R$project$rome$$romejs$string$markup$ansi_ts$regex.test(str);
	}

	const ___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes = {
		clearScreen: "\x1bc",
		eraseLine: ___R$$priv$project$rome$$romejs$string$markup$ansi_ts$ESC + "2K",
		cursorUp(count = 1) {
			return (
				"" +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$ESC +
				count +
				"A"
			);
		},
		cursorTo(x, y) {
			if (y === undefined) {
				return (
					"" +
					___R$$priv$project$rome$$romejs$string$markup$ansi_ts$ESC +
					(x + 1) +
					"G"
				);
			}

			return (
				"" +
				___R$$priv$project$rome$$romejs$string$markup$ansi_ts$ESC +
				(y + 1) +
				";" +
				(x + 1) +
				"H"
			);
		},
	};


  // project-rome/@romejs/path/collections.ts
const ___R$project$rome$$romejs$path$collections_ts = {
		get AbsoluteFilePathMap() {
			return ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathMap;
		},
		get RelativeFilePathMap() {
			return ___R$project$rome$$romejs$path$collections_ts$RelativeFilePathMap;
		},
		get UnknownFilePathMap() {
			return ___R$project$rome$$romejs$path$collections_ts$UnknownFilePathMap;
		},
		get AbsoluteFilePathSet() {
			return ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet;
		},
		get RelativeFilePathSet() {
			return ___R$project$rome$$romejs$path$collections_ts$RelativeFilePathSet;
		},
		get UnknownFilePathSet() {
			return ___R$project$rome$$romejs$path$collections_ts$UnknownFilePathSet;
		},
	};
	// Sometimes we don't want to have to deal with what a FilePath serializes into
	// For those purposes we have these wrappers around Map and Set. Here we can add some custom logic
	// to speed up the usage of FilePaths in these scenarios.
	// The API here attempts to match what is expected from the native classes, however we may deviate from it
	// to avoid the usage of getters and generator/symbol indirection for iteration.
	class ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathMap {
		constructor(entries) {
			this.joinedToValue = new Map();
			this.joinedToPath = new Map();
			this.size = 0;

			if (entries !== undefined) {
				for (const [key, value] of entries) {
					this.set(key, value);
				}
			}
		}

		_updateSize() {
			this.size = this.joinedToValue.size;
		}

		*[Symbol.iterator]() {
			for (const [joined, value] of this.joinedToValue) {
				const path = this.joinedToPath.get(joined);
				yield [path, value];
			}
		}

		clear() {
			this.joinedToValue.clear();
			this.joinedToPath.clear();
			this._updateSize();
		}

		keys() {
			return this.joinedToPath.values();
		}

		values() {
			return this.joinedToValue.values();
		}

		delete(path) {
			const joined = path.getUnique().join();
			this.joinedToValue.delete(joined);
			this.joinedToPath.delete(joined);
			this._updateSize();
		}

		has(path) {
			return this.joinedToValue.has(path.getUnique().join());
		}

		get(path) {
			return this.joinedToValue.get(path.getUnique().join());
		}

		set(path, value) {
			const uniq = (path.getUnique());
			const joined = uniq.join();
			this.joinedToValue.set(joined, value);
			this.joinedToPath.set(joined, uniq);
			this._updateSize();
		}
	}

	class ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathSet {
		constructor(entries) {
			this.map = new ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathMap();
			this.size = 0;

			if (entries !== undefined) {
				for (const path of entries) {
					this.add(path);
				}
			}
		}

		_updateSize() {
			this.size = this.map.size;
		}

		[Symbol.iterator]() {
			return this.map.keys()[Symbol.iterator]();
		}

		has(path) {
			return this.map.has(path);
		}

		add(path) {
			this.map.set(path);
			this._updateSize();
		}

		delete(path) {
			this.map.delete(path);
			this._updateSize();
		}

		clear() {
			this.map.clear();
			this._updateSize();
		}
	}

	class ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathMap
		extends ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathMap {
		constructor(...args) {
			super(...args);
			this.type = "absolute";
		}
	}

	class ___R$project$rome$$romejs$path$collections_ts$RelativeFilePathMap
		extends ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathMap {
		constructor(...args) {
			super(...args);
			this.type = "relative";
		}
	}

	class ___R$project$rome$$romejs$path$collections_ts$UnknownFilePathMap
		extends ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathMap {
		constructor(...args) {
			super(...args);
			this.type = "unknown";
		}
	}

	class ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet
		extends ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathSet {
		constructor(...args) {
			super(...args);
			this.type = "absolute";
		}
	}

	class ___R$project$rome$$romejs$path$collections_ts$RelativeFilePathSet
		extends ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathSet {
		constructor(...args) {
			super(...args);
			this.type = "relative";
		}
	}

	class ___R$project$rome$$romejs$path$collections_ts$UnknownFilePathSet
		extends ___R$$priv$project$rome$$romejs$path$collections_ts$FilePathSet {
		constructor(...args) {
			super(...args);
			this.type = "unknown";
		}
	}


  // project-rome/@romejs/path/index.ts
const ___R$$priv$project$rome$$romejs$path$index_ts$os = _dereq_("os");




	function ___R$$priv$project$rome$$romejs$path$index_ts$toFilePath(
		pathOrString,
	) {
		if (typeof pathOrString === "string") {
			return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
				pathOrString,
			);
		} else {
			return pathOrString;
		}
	}





	class ___R$$priv$project$rome$$romejs$path$index_ts$BaseFilePath {
		constructor(parsed, opts) {
			if (parsed.segments.length === 0) {
				throw new Error("Cannot construct a FilePath with zero segments");
			}

			this.segments = parsed.segments;
			this.absoluteTarget = parsed.absoluteTarget;
			this.absoluteType = parsed.absoluteType;

			// Memoized
			this.memoizedUnique = undefined;
			this.memoizedParent = opts.parent;
			this.memoizedFilename = opts.filename;
			this.memoizedExtension = opts.ext;
			this.memoizedChildren = new Map();
		}

		getParsed() {
			return {
				segments: this.segments,
				absoluteTarget: this.absoluteTarget,
				absoluteType: this.absoluteType,
			};
		}

		// These methods ensure the correct return classes
		_assert() {
			throw new Error("Unimplemented");
		}

		_fork(parsed, opts) {
			throw new Error("Unimplemented");
		}

		addExtension(ext, clearExt = false) {
			const newBasename = clearExt
				? this.getExtensionlessBasename()
				: this.getBasename();
			const newExt = clearExt ? ext : this.memoizedExtension + ext;
			const segments = this.getParentSegments(false).concat(newBasename + ext);

			return this._fork(
				Object.assign({}, this.getParsed(), {segments}),
				{
					ext: newExt,
					parent: this.memoizedParent,
				},
			);
		}

		changeBasename(newBasename) {
			const segments = this.getParentSegments(false).concat(newBasename);
			return this._fork(
				Object.assign({}, this.getParsed(), {segments}),
				{
					parent: this.memoizedParent,
				},
			);
		}

		getBasename() {
			const {segments} = this;
			const offset = this.isExplicitFolder() ? 2 : 1;
			return segments[segments.length - offset] || "";
		}

		getExtensionlessBasename() {
			const basename = this.getBasename();
			const ext = this.getExtensions();

			if (ext === "") {
				return basename;
			} else {
				return basename.slice(0, -ext.length);
			}
		}

		hasParent() {
			return this.getParentSegments().length > 0;
		}

		getParent() {
			if (this.memoizedParent !== undefined) {
				return this.memoizedParent;
			}

			const segments = this.getParentSegments();
			if (segments.length === 0) {
				throw new Error("No parent segments");
			}

			const parent = this._fork(
				Object.assign({}, this.getParsed(), {segments}),
				{},
			);
			this.memoizedParent = parent;
			return parent;
		}

		getParentSegments(explicit = true) {
			// Should we throw an error?
			if (this.isRoot()) {
				return this.segments;
			}

			const segments = this.getSegments().slice(0, -1);

			// Always make this an explicit folder
			if (explicit && segments.length > 0 && segments[0] !== "") {
				segments.push("");
			}

			return segments;
		}

		toExplicitRelative() {
			const relative = this.assertRelative();
			if (relative.isExplicitRelative()) {
				return relative;
			} else {
				return ___R$project$rome$$romejs$path$index_ts$createRelativeFilePath(
					".",
				).append(relative);
			}
		}

		assertRelative() {
			if (this.isAbsolute()) {
				throw new Error("Expected relative file path but got: " + this.join());
			} else {
				return new ___R$project$rome$$romejs$path$index_ts$RelativeFilePath(
					this.getParsed(),
					{
						ext: this.memoizedExtension,
						filename: this.memoizedFilename,
					},
				);
			}
		}

		assertAbsolute() {
			if (this.isAbsolute()) {
				return new ___R$project$rome$$romejs$path$index_ts$AbsoluteFilePath(
					this.getParsed(),
					{
						ext: this.memoizedExtension,
						filename: this.memoizedFilename,
					},
				);
			} else {
				throw new Error("Expected absolute file path but got: " + this.join());
			}
		}

		assertURL() {
			if (this.isURL()) {
				return new ___R$project$rome$$romejs$path$index_ts$URLFilePath(
					this.getParsed(),
					{
						ext: this.memoizedExtension,
						filename: this.memoizedFilename,
					},
				);
			} else {
				throw new Error("Expected URL file path but got: " + this.join());
			}
		}

		isRoot() {
			if (this.segments.length === 1) {
				return true;
			}

			if (this.segments.length === 2) {
				// Explicit folder reference
				return this.segments[1] === "";
			}

			if (this.segments.length === 3) {
				return this.absoluteType === "windows-unc";
			}

			return false;
		}

		isWindows() {
			return (
				this.absoluteType === "windows-drive" ||
				this.absoluteType === "windows-unc"
			);
		}

		isPosix() {
			return !this.isWindows();
		}

		isURL() {
			return this.absoluteType === "url";
		}

		isAbsolute() {
			return this.absoluteTarget !== undefined && this.absoluteType !== "url";
		}

		isRelative() {
			return !this.isAbsolute();
		}

		isRelativeTo(otherRaw) {
			const other = ___R$$priv$project$rome$$romejs$path$index_ts$toFilePath(
				otherRaw,
			);
			const otherSegments = other.getSegments();
			const ourSegments = this.getSegments();

			// We can't be relative to a path with more segments than us
			if (otherSegments.length > ourSegments.length) {
				return false;
			}

			// Check that we start with the same segments as the other
			for (let i = 0; i < otherSegments.length; i++) {
				if (otherSegments[i] !== ourSegments[i]) {
					return false;
				}
			}

			return true;
		}

		isImplicitRelative() {
			return !this.isExplicitRelative() && !this.isAbsolute() && !this.isURL();
		}

		isExplicitRelative() {
			const [firstSeg] = this.segments;
			return !this.isURL() && (firstSeg === "." || firstSeg === "..");
		}

		isExplicitFolder() {
			const {segments} = this;
			return segments[segments.length - 1] === "";
		}

		hasEndExtension(ext) {
			return this.getExtensions().endsWith("." + ext);
		}

		hasExtension(ext) {
			return (
				this.hasEndExtension(ext) ||
				this.getExtensions().includes("." + ext + ".")
			);
		}

		getExtensions() {
			if (this.memoizedExtension === undefined) {
				const ext = ___R$$priv$project$rome$$romejs$path$index_ts$getExtension(
					this.getBasename(),
				);
				this.memoizedExtension = ext;
				return ext;
			} else {
				return this.memoizedExtension;
			}
		}

		hasExtensions() {
			return this.getExtensions() !== "";
		}

		getSegments() {
			let {segments} = this;

			if (!this.isRoot()) {
				if (this.isExplicitFolder()) {
					segments = segments.slice(0, -1);
				}

				if (segments[0] === ".") {
					segments = segments.slice(1);
				}
			}

			return segments;
		}

		getRawSegments() {
			return this.segments;
		}

		getUnique() {
			if (this.memoizedUnique !== undefined) {
				return this.memoizedUnique;
			}

			let segments;

			if (!this.isRoot()) {
				if (this.isExplicitFolder()) {
					segments = this.getSegments();

					if (this.isExplicitRelative()) {
						segments = segments.slice(1);
					}
				} else if (this.isExplicitRelative()) {
					segments = this.getRawSegments().slice(1);
				}
			}

			if (segments === undefined) {
				return this._assert();
			} else {
				const path = this._fork(
					___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments(
						segments,
					),
					{},
				);
				this.memoizedUnique = path;
				return path;
			}
		}

		// Support some bad string coercion. Such as serialization in CLI flags.
		toString() {
			return this.join();
		}

		join() {
			if (this.memoizedFilename !== undefined) {
				return this.memoizedFilename;
			}

			const {segments} = this;

			let filename;
			if (this.isWindows()) {
				filename = segments.join("\\");
			} else {
				filename = segments.join("/");
			}
			this.memoizedFilename = filename;
			return filename;
		}

		// This does some weird optimizations to avoid materializing complete filenames

		// Might not be relevant... TODO benchmark this or something lol
		equal(other) {
			// Quick check if we've materalized the filename on both instances
			if (
				this.memoizedFilename !== undefined &&
				other.memoizedFilename !== undefined
			) {
				return this.memoizedFilename === other.memoizedFilename;
			}

			const a = this.getSegments();
			const b = other.getSegments();

			// Quick check
			if (a.length !== b.length) {
				return false;
			}

			for (let i = 0; i < a.length; i++) {
				if (a[i] !== b[i]) {
					return false;
				}
			}

			return true;
		}

		format(cwd) {
			const filename = this.join();
			const names = [];
			names.push(filename);

			// Get a path relative to HOME
			if (this.isRelativeTo(___R$project$rome$$romejs$path$index_ts$HOME_PATH)) {
				// Path starts with the home directory, so let's trim it off
				const relativeToHome = ___R$project$rome$$romejs$path$index_ts$HOME_PATH.relative(
					this._assert(),
				);

				// Add tilde and push it as a possible name

				// We construct this manually to get around the segment normalization which would explode ~
				names.push(
					new ___R$project$rome$$romejs$path$index_ts$RelativeFilePath(
						{
							segments: ["~", ...relativeToHome.getSegments()],
							absoluteType: "posix",
							absoluteTarget: undefined,
						},
						{},
					).join(),
				);
			}

			// Get a path relative to the cwd
			if (cwd !== undefined) {
				names.push(cwd.relative(filename).join());
			}

			// Get the shortest name
			const human = names.sort((a, b) => a.length - b.length)[0];
			if (human === "") {
				return "./";
			} else {
				return human;
			}
		}

		append(raw) {
			// Check if we have a memoized instance
			if (typeof raw === "string") {
				const cached = this.memoizedChildren.get(raw);
				if (cached !== undefined) {
					return cached;
				}
			}

			const items = Array.isArray(raw) ? raw : [raw];

			if (items.length === 0) {
				return this._assert();
			}

			let segments = this.getSegments();

			for (const item of items) {
				segments = segments.concat(
					___R$$priv$project$rome$$romejs$path$index_ts$toFilePath(item).getSegments(),
				);
			}

			const parsed = ___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments(
				segments,
			);
			const child = this._fork(parsed, {});

			// Set memoized child if possible
			if (typeof raw === "string") {
				this.memoizedChildren.set(raw, child);
			}

			return child;
		}
	}

	class ___R$project$rome$$romejs$path$index_ts$RelativeFilePath
		extends ___R$$priv$project$rome$$romejs$path$index_ts$BaseFilePath {
		constructor(...args) {
			super(...args);
			this.type = "relative";
		}
		_assert() {
			return this;
		}

		_fork(parsed, opts) {
			return new ___R$project$rome$$romejs$path$index_ts$RelativeFilePath(
				parsed,
				opts,
			);
		}

		assertRelative() {
			return this;
		}
	}

	class ___R$project$rome$$romejs$path$index_ts$AbsoluteFilePath
		extends ___R$$priv$project$rome$$romejs$path$index_ts$BaseFilePath {
		constructor(...args) {
			super(...args);
			this.type = "absolute";
		}
		_assert() {
			return this;
		}

		_fork(parsed, opts) {
			return new ___R$project$rome$$romejs$path$index_ts$AbsoluteFilePath(
				parsed,
				opts,
			);
		}

		assertAbsolute() {
			return this;
		}

		getChain() {
			if (this.chain !== undefined) {
				return this.chain;
			}

			const paths = [];
			this.chain = paths;

			// We use getParent here so we can reuse as much memoized information as possible
			let target = this;
			while (true) {
				paths.push(target);
				if (target.isRoot()) {
					break;
				} else {
					target = target.getParent();
				}
			}

			return paths;
		}

		resolveMaybeUrl(otherRaw) {
			const other = ___R$$priv$project$rome$$romejs$path$index_ts$toFilePath(
				otherRaw,
			);
			if (other.isURL()) {
				return other.assertURL();
			} else {
				return this.resolve(other);
			}
		}

		resolve(otherRaw) {
			const other = ___R$$priv$project$rome$$romejs$path$index_ts$toFilePath(
				otherRaw,
			);
			if (other.isAbsolute()) {
				return other.assertAbsolute();
			}

			return new ___R$project$rome$$romejs$path$index_ts$AbsoluteFilePath(
				___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments([
					...this.getSegments(),
					...other.getSegments(),
				]),
				{},
			);
		}

		relative(otherRaw) {
			const other = this.resolve(
				___R$$priv$project$rome$$romejs$path$index_ts$toFilePath(otherRaw),
			);

			if (other.equal(this)) {
				return ___R$project$rome$$romejs$path$index_ts$createRelativeFilePath(
					".",
				);
			}

			const absolute = this.getSegments().slice();
			const relative = other.getSegments().slice();

			// Impossible to relativize two absolute paths with different roots
			if (absolute[0] !== relative[0]) {
				return other;
			}

			// Remove common starting segments
			while (absolute[0] === relative[0]) {
				absolute.shift();
				relative.shift();
			}

			let finalSegments = [];
			for (let i = 0; i < absolute.length; i++) {
				finalSegments.push("..");
			}
			finalSegments = finalSegments.concat(relative);

			return ___R$$priv$project$rome$$romejs$path$index_ts$createUnknownFilePathFromSegments(
				___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments(
					finalSegments,
				),
			);
		}
	}

	class ___R$project$rome$$romejs$path$index_ts$URLFilePath
		extends ___R$$priv$project$rome$$romejs$path$index_ts$BaseFilePath {
		constructor(...args) {
			super(...args);
			this.type = "url";
		}
		_assert() {
			return this;
		}

		_fork(parsed, opts) {
			return new ___R$project$rome$$romejs$path$index_ts$URLFilePath(
				parsed,
				opts,
			);
		}

		assertURL() {
			return this;
		}

		isURL() {
			return true;
		}

		getDomain() {
			return this.segments[2];
		}

		getProtocol() {
			const {absoluteTarget} = this;
			if (absoluteTarget === undefined) {
				throw new Error(
					"Expected a URLFilePath to always have an absoluteTarget",
				);
			}
			return absoluteTarget;
		}

		resolve(path) {
			if (path.isURL()) {
				return path.assertURL();
			} else if (path.isAbsolute()) {
				// Get the segments that include the protocol and domain
				const domainSegments = this.getSegments().slice(0, 3);
				const finalSegments = [...domainSegments, ...path.getSegments()];
				return new ___R$project$rome$$romejs$path$index_ts$URLFilePath(
					___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments(
						finalSegments,
					),
					{},
				);
			} else {
				return this.append(path);
			}
		}
	}

	const ___R$project$rome$$romejs$path$index_ts$HOME_PATH = ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
		"",
	);
	const ___R$project$rome$$romejs$path$index_ts$TEMP_PATH = ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
		___R$$priv$project$rome$$romejs$path$index_ts$os.tmpdir(),
	);
	const ___R$project$rome$$romejs$path$index_ts$CWD_PATH = ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
		process.cwd(),
	);

	function ___R$$priv$project$rome$$romejs$path$index_ts$getExtension(basename) {
		const match = basename.match(/\.(.*?)$/);
		if (match == null) {
			return "";
		} else {
			return match[0];
		}
	}

	function ___R$$priv$project$rome$$romejs$path$index_ts$isWindowsDrive(first) {
		return first.length === 2 && first[1] === ":" && /[A-Z]/i.test(first[0]);
	}





	function ___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments(
		segments,
	) {
		if (segments.length === 0) {
			throw new Error("Cannot construct a FilePath with zero segments");
		}

		let absoluteType = "posix";
		let absoluteTarget;
		let firstSeg = segments[0];

		// Detect URL
		if (
			!___R$$priv$project$rome$$romejs$path$index_ts$isWindowsDrive(firstSeg) &&
			firstSeg[firstSeg.length - 1] === ":" &&
			segments[1] === ""
		) {
			absoluteTarget = firstSeg.slice(0, -1);

			switch (absoluteTarget) {
				case "file":
					// Automatically normalize a file scheme into an absolute path
					return ___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments(
						segments.slice(2).map((segment) => decodeURIComponent(segment)),
					);

				default: {
					const absoluteSegments = segments.slice(0, 3);
					return {
						segments: ___R$$priv$project$rome$$romejs$path$index_ts$normalizeSegments(
							segments,
							absoluteSegments.length,
							absoluteSegments,
						),
						absoluteType: "url",
						absoluteTarget,
					};
				}
			}
		}

		// Explode home directory
		if (firstSeg === "~") {
			segments = [
				...___R$project$rome$$romejs$path$index_ts$HOME_PATH.getSegments(),
			];
			firstSeg = segments[0];
		}

		let segmentOffset = 0;

		// We first extract the "absolute" portion of a path, this includes any Windows drive letters, UNC hostnames etc
		const absoluteSegments = [];
		if (firstSeg === "") {
			// POSIX path
			absoluteSegments.push("");
			absoluteTarget = "posix";
			segmentOffset++;

			// Windows UNC
			if (segments[1] === "" && segments.length >= 3 && segments[2] !== "") {
				const name = segments[2];
				segmentOffset += 2;
				absoluteSegments.push("");
				absoluteSegments.push(name);
				absoluteType = "windows-unc";
				absoluteTarget = "unc:" + name;
			}
		} else if (
			___R$$priv$project$rome$$romejs$path$index_ts$isWindowsDrive(firstSeg)
		) {
			const drive = firstSeg.toUpperCase();
			absoluteSegments.push(drive);
			absoluteType = "windows-drive";
			absoluteTarget = "drive:" + drive;
			segmentOffset++;
		}

		const pathSegments = ___R$$priv$project$rome$$romejs$path$index_ts$normalizeSegments(
			segments,
			segmentOffset,
			absoluteSegments,
		);
		return {
			segments: pathSegments,
			absoluteType,
			absoluteTarget,
		};
	}

	function ___R$$priv$project$rome$$romejs$path$index_ts$normalizeSegments(
		segments,
		offset,
		absoluteSegments,
	) {
		const relativeSegments = [];
		for (let i = offset; i < segments.length; i++) {
			let seg = segments[i];

			// Only allow a dot part in the first position, otherwise it's a noop
			if (
				seg === "." &&
				(segments[1] === ".." || i > 0 || absoluteSegments.length > 0)
			) {
				continue;
			}

			// Ignore empty segments
			if (seg === "") {
				continue;
			}

			// Remove the previous segment, as long as it's not also ..
			if (
				seg === ".." &&
				relativeSegments.length > 0 &&
				relativeSegments[relativeSegments.length - 1] !== ".."
			) {
				relativeSegments.pop();
				continue;
			}

			relativeSegments.push(seg);
		}

		const finalSegments = [...absoluteSegments, ...relativeSegments];

		// Retain explicit folder
		if (
			segments[segments.length - 1] === "" &&
			finalSegments[finalSegments.length - 1] !== "" &&
			relativeSegments.length !== 0
		) {
			finalSegments.push("");
		}

		return finalSegments;
	}

	function ___R$$priv$project$rome$$romejs$path$index_ts$createUnknownFilePathFromSegments(
		parsed,
	) {
		const path = new ___R$$priv$project$rome$$romejs$path$index_ts$BaseFilePath(
			parsed,
			{},
		);

		if (path.isAbsolute()) {
			return path.assertAbsolute();
		} else {
			return path.assertRelative();
		}
	}



	function ___R$project$rome$$romejs$path$index_ts$createFilePathFromSegments(
		segments,
	) {
		const parsed = ___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments(
			segments,
		);
		return ___R$$priv$project$rome$$romejs$path$index_ts$createUnknownFilePathFromSegments(
			parsed,
		);
	}

	function ___R$project$rome$$romejs$path$index_ts$toJoinedFilePath(filename) {
		if (typeof filename === "string") {
			return filename;
		} else {
			return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
				filename,
			).join();
		}
	}

	function ___R$project$rome$$romejs$path$index_ts$createRelativeFilePath(
		filename,
	) {
		return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
			filename,
		).assertRelative();
	}

	function ___R$project$rome$$romejs$path$index_ts$createURLFilePath(filename) {
		return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
			filename,
		).assertURL();
	}

	function ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
		filename,
	) {
		return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
			filename,
		).assertAbsolute();
	}

	function ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
		filename,
	) {
		// Allows using the create methods above to be used in places where strings are more ergonomic (eg. in third-party code)
		if (
			filename instanceof
			___R$$priv$project$rome$$romejs$path$index_ts$BaseFilePath
		) {
			return filename;
		}

		// Might be better to do a manual loop to detect escaped slashes or some other weirdness
		const segments = filename.split(/[\\\/]/g);
		const parsed = ___R$$priv$project$rome$$romejs$path$index_ts$parsePathSegments(
			segments,
		);
		return ___R$$priv$project$rome$$romejs$path$index_ts$createUnknownFilePathFromSegments(
			parsed,
		);
	}

	function ___R$project$rome$$romejs$path$index_ts$maybeCreateURLFilePath(
		filename,
	) {
		if (filename !== undefined) {
			return ___R$project$rome$$romejs$path$index_ts$createURLFilePath(filename);
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$path$index_ts$maybeCreateRelativeFilePath(
		filename,
	) {
		if (filename !== undefined) {
			return ___R$project$rome$$romejs$path$index_ts$createRelativeFilePath(
				filename,
			);
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$path$index_ts$maybeCreateAbsoluteFilePath(
		filename,
	) {
		if (filename !== undefined) {
			return ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
				filename,
			);
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$path$index_ts$maybeCreateUnknownFilePath(
		filename,
	) {
		if (filename !== undefined) {
			return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
				filename,
			);
		} else {
			return undefined;
		}
	}


  // project-rome/@romejs/string-markup/tagFormatters.ts
function ___R$project$rome$$romejs$string$markup$tagFormatters_ts$humanizeMarkupFilename(
		filename,
		opts = {},
	) {
		if (opts.humanizeFilename !== undefined) {
			const override = opts.humanizeFilename(filename);
			if (override !== undefined) {
				return override;
			}
		}

		return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
			filename,
		).format(opts.cwd);
	}

	function ___R$project$rome$$romejs$string$markup$tagFormatters_ts$getFileLinkText(
		filename,
		attributes,
		opts,
	) {
		let text = ___R$project$rome$$romejs$string$markup$tagFormatters_ts$humanizeMarkupFilename(
			filename,
			opts,
		);

		const line = attributes.line;
		if (line !== undefined) {
			text += ":" + line;

			const column = attributes.column;
			// Ignore a 0 column and just target the line
			if (column !== undefined && column !== "0") {
				text += ":" + column;
			}
		}

		return text;
	}

	function ___R$project$rome$$romejs$string$markup$tagFormatters_ts$getFileLinkFilename(
		attributes,
		opts,
	) {
		let filename = attributes.target || "";
		if (opts.normalizeFilename !== undefined) {
			filename = opts.normalizeFilename(filename);
		}
		return filename;
	}

	function ___R$project$rome$$romejs$string$markup$tagFormatters_ts$formatApprox(
		attributes,
		value,
	) {
		if (attributes.approx === "true") {
			return "~" + value;
		} else {
			return value;
		}
	}

	function ___R$project$rome$$romejs$string$markup$tagFormatters_ts$formatGrammarNumber(
		attributes,
		value,
	) {
		const num = Number(value);

		const none = attributes.none;
		if (none !== undefined && num === 0) {
			return none;
		}

		const singular = attributes.singular;
		if (singular !== undefined && num === 1) {
			return singular;
		}

		const plural = attributes.plural;
		if (plural !== undefined) {
			return plural;
		}

		return "";
	}

	function ___R$project$rome$$romejs$string$markup$tagFormatters_ts$formatNumber(
		attributes,
		value,
	) {
		const num = Number(value);
		const human = ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
			num,
		);
		const humanWithApprox = ___R$project$rome$$romejs$string$markup$tagFormatters_ts$formatApprox(
			attributes,
			human,
		);
		return humanWithApprox;
	}


  // project-rome/@romejs/string-markup/Grid.ts


	function ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$cursorToIndex(
		cursor,
	) {
		return {
			line: ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(cursor.line) - 1,
			column: ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(cursor.column) - 1,
		};
	}



	function ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$createTag(
		name,
		attributes,
		children = [],
	) {
		return {
			type: "Tag",
			name,
			attributes,
			children,
		};
	}

	class ___R$project$rome$$romejs$string$markup$Grid_ts$default {
		constructor(opts) {
			this.viewportWidth =
				opts.columns === undefined
					? undefined
					: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(opts.columns);
			this.markupOptions = opts;

			this.cursor = {
				line: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
				column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
			};

			this.canLineWrap = true;
			this.width = ___R$project$rome$$romejs$ob1$index_ts$ob1Number1;

			this.lines = [];
		}

		alignRight() {
			const viewportWidth = ___R$project$rome$$romejs$ob1$index_ts$ob1Get(
				this.viewportWidth,
			);
			if (viewportWidth === undefined) {
				return;
			}

			this.lines = this.lines.map(({ranges, columns}) => {
				const newColumns = [...columns];

				// Pad out line to viewport width
				while (newColumns.length < viewportWidth) {
					newColumns.push(" ");
				}

				// Skip if all it contains is spaces

				let onlySpaces = true;
				for (const char of newColumns) {
					if (char !== " ") {
						onlySpaces = false;
					}
				}
				if (onlySpaces) {
					return {
						columns: newColumns,
						ranges,
					};
				}

				let offset = 0;

				// Shift whitespace from right to left
				while (newColumns[newColumns.length - 1] === " ") {
					offset++;
					newColumns.pop();
					newColumns.unshift(" ");
				}

				const newRanges = ranges.map((range) => {
					return {
						start: range.start + offset,
						end: range.end + offset,
						ancestry: range.ancestry,
					};
				});

				return {
					ranges: newRanges,
					columns: newColumns,
				};
			});
		}

		doesOverflowViewport(column) {
			return (
				this.canLineWrap &&
				this.viewportWidth !== undefined &&
				___R$project$rome$$romejs$ob1$index_ts$ob1Get1(column) >
				___R$project$rome$$romejs$ob1$index_ts$ob1Get1(this.viewportWidth)
			);
		}

		getHeight() {
			return ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(
				this.lines.length,
			);
		}

		getLineWidth(lineIndex) {
			const line = this.lines[lineIndex];
			return line === undefined ? 0 : line.columns.length;
		}

		getWidth() {
			return this.width;
		}

		getSize() {
			return {
				height: this.getHeight(),
				width: this.getWidth(),
			};
		}

		getCursor() {
			return Object.assign({}, this.cursor);
		}

		getLines() {
			return this.lines.map(({columns}) => columns.join(""));
		}

		getFormattedLines() {
			const lines = [];

			for (const {ranges, columns} of this.lines) {
				let content = columns.join("");

				// Sort ranges from last to first
				const sortedRanges = ranges.sort((a, b) => b.end - a.end);

				for (const {start, end, ancestry} of sortedRanges) {
					let substr = content.slice(start, end);

					// Format tags in reverse
					for (let i = ancestry.length - 1; i >= 0; i--) {
						const tag = ancestry[i];
						substr = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$ansiFormatText(
							tag,
							substr,
							this.markupOptions,
						);
					}

					substr = ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.reset(
						substr,
					);

					content = content.slice(0, start) + substr + content.slice(end);
				}

				lines.push(content);
			}

			return lines;
		}

		fillCursor(cursor) {
			const {line: lineIndex, column: colIndex} = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$cursorToIndex(
				cursor,
			);

			// Pad lines
			for (let i = lineIndex; i >= 0 && this.lines[i] === undefined; i--) {
				this.lines[i] = {ranges: [], columns: []};
			}

			// Pad columns
			const line = this.lines[lineIndex];
			for (let i = colIndex - 1; i >= 0 && line.columns[i] === undefined; i--) {
				line.columns[i] = " ";
			}
		}

		moveCursor(cursor) {
			this.cursor = cursor;
		}

		moveCursorBottomStart() {
			this.moveCursor({
				line: ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(this.getHeight()),
				column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
			});
		}

		moveCursorRight(columns = ___R$project$rome$$romejs$ob1$index_ts$ob1Number1) {
			if (this.doesOverflowViewport(this.cursor.column)) {
				this.newline();
			} else {
				this.moveCursor({
					line: this.cursor.line,
					column: ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
						this.cursor.column,
						columns,
					),
				});
			}
		}

		ensureNewline() {
			if (
				this.cursor.column !==
				___R$project$rome$$romejs$ob1$index_ts$ob1Number1
			) {
				this.newline();
			}
		}

		newline() {
			this.moveCursorDown();
			this.moveCursorStart();
		}

		moveCursorStart() {
			this.moveCursor({
				line: this.cursor.line,
				column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
			});
		}

		moveCursorDown() {
			this.moveCursor({
				line: ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(this.cursor.line),
				column: this.cursor.column,
			});
		}

		writeToCursor(cursor, char) {
			this.fillCursor(cursor);

			const {line: lineIndex, column: colIndex} = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$cursorToIndex(
				cursor,
			);
			this.lines[lineIndex].columns[colIndex] = char;

			if (cursor.column > this.width) {
				this.width = cursor.column;
			}
		}

		writeChar(char) {
			if (char === "\n") {
				this.newline();
				return;
			}

			this.writeToCursor(this.cursor, char);
			this.moveCursorRight();
		}

		writeText(text, ancestry) {
			if (text === "") {
				return;
			}

			const start = this.getCursor();

			const words = text.split(" ");

			for (let i = 0; i < words.length; i++) {
				const word = words[i];
				const isLastWord = i === words.length - 1;

				// Check if printing this word would overflow the viewport
				// If the whole word itself wouldn't fit on it's own line then we will
				// perform hard line wrapping in writeChar
				const willOverflow =
					this.doesOverflowViewport(
						___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							this.cursor.column,
							word.length - 1,
						),
					) &&
					!this.doesOverflowViewport(
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(word.length),
					);
				if (willOverflow) {
					this.newline();
				}

				for (const char of word) {
					this.writeChar(char);
				}

				let ignoreTrailingSpace = false;

				// Start of a sentence that was caused by line wrapping
				if (
					!word.endsWith("\n") &&
					this.cursor.column ===
					___R$project$rome$$romejs$ob1$index_ts$ob1Number1 &&
					word !== ""
				) {
					ignoreTrailingSpace = true;
				}

				// If the next word will cause an overflow then don't print a leading space as it will be pointless
				const nextWord = words[i + 1];
				if (
					nextWord !== undefined &&
					this.doesOverflowViewport(
						___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							this.cursor.column,
							nextWord.length,
						),
					)
				) {
					ignoreTrailingSpace = true;
				}

				if (isLastWord) {
					ignoreTrailingSpace = true;
				}

				if (!ignoreTrailingSpace) {
					this.writeChar(" ");
				}
			}

			const end = this.getCursor();
			this.addCursorRange(start, end, ancestry);
		}

		setRange(line, start, end, ancestry) {
			if (start === end) {
				// Nothing to format. Empty tag.
				return;
			}

			if (end < start) {
				throw new Error("end(" + end + ") < start(" + start + ")");
			}

			this.lines[line].ranges.push({
				start,
				end,
				ancestry,
			});
		}

		addCursorRange(_start, _end, ancestry) {
			if (ancestry.length === 0) {
				// No point storing a range without ancestry
				return;
			}

			const start = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$cursorToIndex(
				_start,
			);
			const end = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$cursorToIndex(
				_end,
			);

			if (start.line === end.line) {
				if (start.column === end.column) {
					// Empty range
					return;
				}

				this.setRange(start.line, start.column, end.column, ancestry);
			} else {
				// Add first line
				this.setRange(
					start.line,
					start.column,
					this.getLineWidth(start.line),
					ancestry,
				);

				// Add middle lines
				for (let line = start.line + 1; line < end.line; line++) {
					this.setRange(line, 0, this.getLineWidth(line), ancestry);
				}

				// Add last line
				this.setRange(end.line, 0, end.column, ancestry);
			}
		}

		drawList(tag, ancestry) {
			let items = [];
			for (const child of tag.children) {
				if (child.type === "Tag" && child.name === "li") {
					items.push(child);
				}
			}
			if (items.length === 0) {
				return;
			}

			this.ensureNewline();

			const ordered = tag.name === "ol";

			if (ordered) {
				const reversed = tag.attributes.reversed === "true";
				const startOffset = Number(tag.attributes.start) || 0;

				const highestNumSize = ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
					items.length + startOffset,
				).length;

				for (let i = 0; i < items.length; i++) {
					const item = items[i];

					let num = startOffset;
					if (reversed) {
						num += items.length - i;
					} else {
						num += i + 1;
					}

					const humanNum = ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
						num,
					);
					const padding = " ".repeat(highestNumSize - humanNum.length);
					this.writeText(
						"" + padding + humanNum + ". ",
						[
							___R$$priv$project$rome$$romejs$string$markup$Grid_ts$createTag(
								"dim",
								{},
							),
						],
					);
					this.drawListItem(item, ancestry);
				}
			} else {
				for (const item of items) {
					this.writeText(
						"- ",
						[
							___R$$priv$project$rome$$romejs$string$markup$Grid_ts$createTag(
								"dim",
								{},
							),
						],
					);
					this.drawListItem(item, ancestry);
				}
			}
		}

		drawListItem(item, ancestry) {
			const grid = new ___R$project$rome$$romejs$string$markup$Grid_ts$default(
				Object.assign(
					{},
					this.markupOptions,
					{
						columns: this.viewportWidth === undefined
							? undefined
							: ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(
									___R$project$rome$$romejs$ob1$index_ts$ob1Sub(
										this.viewportWidth,
										this.cursor.column,
									),
								),
					},
				),
			);
			grid.drawTag(item, ancestry);
			this.drawGrid(grid);
			this.moveCursorBottomStart();
		}

		drawTable(tag, ancestry) {
			var ___R$;
			const rows = [];

			for (const child of tag.children) {
				if (child.type === "Tag" && child.name === "tr") {
					const row = [];

					for (const field of child.children) {
						if (field.type === "Tag" && field.name === "td") {
							row.push(field);
						} else {
							// Probably error?
						}
					}

					rows.push(row);
				} else {
					// Probably error?
				}
			}

			// Get the max number of columns for a row
			const columnCount =
				(___R$ = Math,
				___R$.max.apply(___R$, [...rows.map((columns) => columns.length)]));

			// Get column widths
			const columnWidths = [];
			for (let i = 0; i < columnCount; i++) {
				var ___R$1;
				const widths = rows.map((row) => {
					const field = row[i];
					if (field === undefined) {
						// Could be an excessive column
						return 0;
					} else {
						const grid = new ___R$project$rome$$romejs$string$markup$Grid_ts$default(
							Object.assign({}, this.markupOptions, {columns: undefined}),
						);
						grid.drawTag(field, ancestry);
						return ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(
							grid.getSize().width,
						);
					}
				});
				columnWidths[i] = (___R$1 = Math, ___R$1.max.apply(___R$1, [...widths]));
			}

			// If the column size exceed the stream columns then scale them all down
			const colsNeeded = columnWidths.reduce((a, b) => a + b, 0);
			const {viewportWidth} = this;
			let availableCols =
				viewportWidth === undefined
					? undefined
					: ___R$project$rome$$romejs$ob1$index_ts$ob1Get(viewportWidth) -
						columnCount -
						1;
			if (availableCols !== undefined && colsNeeded > availableCols) {
				// Find the biggest column
				let biggestColIndex = 0;
				for (let i = 0; i < columnWidths.length; i++) {
					const ourSize = columnWidths[i];
					const biggestSize = columnWidths[biggestColIndex];

					if (ourSize > biggestSize) {
						biggestColIndex = i;
					}
				}

				// Remove all columns from availableCols
				for (let i = 0; i < columnWidths.length; i++) {
					if (i !== biggestColIndex) {
						availableCols -= columnWidths[i];
					}
				}

				// Set biggest column to the availableCols
				columnWidths[biggestColIndex] = availableCols;
			}

			for (const row of rows) {
				for (let colIndex = 0; colIndex < row.length; colIndex++) {
					const field = row[colIndex];
					const width = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(
						columnWidths[colIndex],
					);

					const grid = new ___R$project$rome$$romejs$string$markup$Grid_ts$default(
						Object.assign(
							{},
							this.markupOptions,
							{columns: ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(width)},
						),
					);
					grid.drawTag(field, ancestry);
					if (field.attributes.align === "right") {
						grid.alignRight();
					}

					this.drawGrid(grid);
					this.moveCursorRight(
						___R$project$rome$$romejs$ob1$index_ts$ob1Inc(width),
					);
				}

				this.moveCursorBottomStart();
			}
		}

		drawGrid(grid) {
			const {lines} = grid;
			const cursor = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$cursorToIndex(
				this.getCursor(),
			);

			// Write
			for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
				const {columns, ranges} = lines[lineIndex];

				const correctLine = cursor.line + lineIndex;

				for (let colIndex = 0; colIndex < columns.length; colIndex++) {
					const char = columns[colIndex];

					this.writeToCursor(
						{
							line: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(
								correctLine + 1,
							),
							column: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(
								cursor.column + colIndex + 1,
							),
						},
						char,
					);
				}

				for (const range of ranges) {
					this.setRange(
						correctLine,
						cursor.column + range.start,
						cursor.column + range.end,
						range.ancestry,
					);
				}
			}
		}

		drawTag(tag, ancestry) {
			const hook = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$hooks.get(
				tag.name,
			);

			const subAncestry = [...ancestry, tag];

			const oldCanLineWrap = this.canLineWrap;

			if (tag.name === "nobr") {
				this.canLineWrap = false;
			}

			if (hook !== undefined && hook.before !== undefined) {
				hook.before(tag, this, ancestry);
			}

			switch (tag.name) {
				case "ol":
				case "ul": {
					this.drawList(tag, subAncestry);
					break;
				}

				case "table": {
					this.drawTable(tag, subAncestry);
					break;
				}

				default: {
					this.drawChildren(tag.children, subAncestry);
					break;
				}
			}

			if (hook !== undefined && hook.after !== undefined) {
				hook.after(tag, this, ancestry);
			}

			this.canLineWrap = oldCanLineWrap;
		}

		drawChildren(children, ancestry) {
			for (const child of children) {
				if (child.type === "Text") {
					this.writeText(child.value, ancestry);
				} else {
					this.drawTag(child, ancestry);
				}
			}
		}

		drawRoot(children) {
			this.drawChildren(this.normalizeChildren(children), []);
		}

		normalizeChildren(children) {
			let newChildren = [];

			for (const child of children) {
				newChildren = newChildren.concat(this.normalizeChild(child));
			}

			return newChildren;
		}

		normalizeChild(child) {
			if (child.type === "Text") {
				let {value} = child;

				// Replace '\t' with '  '
				// Remove '\r' in case it snuck in as file contents
				value = value.replace(/\t/g, "  ");
				value = value.replace(/\r/g, "");

				return [
					{
						type: "Text",
						value,
					},
				];
			}

			const tag = child;
			const children = this.normalizeChildren(tag.children);
			const textLength = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$getChildrenTextLength(
				children,
			);
			const hasText = textLength > 0;
			const ___R$2 = tag.attributes;
			const attributesWithoutEmphasis = Object.assign({}, ___R$2);
			delete attributesWithoutEmphasis.emphasis;
			const {emphasis} = ___R$2;
			if (emphasis === "true") {
				return this.normalizeChild(
					___R$$priv$project$rome$$romejs$string$markup$Grid_ts$createTag(
						"emphasis",
						{},
						[Object.assign({}, tag, {attributes: attributesWithoutEmphasis})],
					),
				);
			}
			const ___R$3 = attributesWithoutEmphasis;
			const attributes = Object.assign({}, ___R$3);
			delete attributes.dim;
			const {dim} = ___R$3;
			if (dim === "true") {
				return this.normalizeChild(
					___R$$priv$project$rome$$romejs$string$markup$Grid_ts$createTag(
						"dim",
						{},
						[Object.assign({}, tag, {attributes})],
					),
				);
			}

			// Insert padding
			if (tag.name === "pad") {
				const width = Number(tag.attributes.width) || 0;
				const paddingSize = width - textLength;
				if (paddingSize > 0) {
					const paddingTextNode = {
						type: "Text",
						value: " ".repeat(paddingSize),
					};
					if (tag.attributes.align === "right") {
						return [paddingTextNode, ...tag.children];
					} else {
						return [...tag.children, paddingTextNode];
					}
				} else {
					return tag.children;
				}
			}

			// Insert highlight legend
			if (tag.name === "highlight") {
				const ___R$4 = attributes;
				const attributesWithoutLegend = Object.assign({}, ___R$4);
				delete attributesWithoutLegend.legend;
				const {legend} = ___R$4;
				const index = Math.min(0, Number(attributes.i) || 0);
				if (legend === "true") {
					return [
						Object.assign({}, tag, {attributes: attributesWithoutLegend}),
						___R$$priv$project$rome$$romejs$string$markup$Grid_ts$createTag(
							"dim",
							{},
							[
								{
									type: "Text",
									value: "[" + String(index + 1) + "]",
								},
							],
						),
					];
				}
			}

			if (hasText) {
				// Wrap hr text in spaces
				if (tag.name === "hr") {
					return [
						Object.assign(
							{},
							tag,
							{
								children: [
									{
										type: "Text",
										value: " ",
									},
									...children,
									{
										type: "Text",
										value: " ",
									},
								],
							},
						),
					];
				}
			} else {
				if (tag.name === "filelink") {
					return [
						Object.assign(
							{},
							tag,
							{
								children: [
									{
										type: "Text",
										value: ___R$project$rome$$romejs$string$markup$tagFormatters_ts$getFileLinkText(
											___R$project$rome$$romejs$string$markup$tagFormatters_ts$getFileLinkFilename(
												tag.attributes,
												this.markupOptions,
											),
											tag.attributes,
											this.markupOptions,
										),
									},
								],
							},
						),
					];
				} else if (tag.name === "hyperlink") {
					return [
						Object.assign(
							{},
							tag,
							{children: [{type: "Text", value: tag.attributes.target || ""}]},
						),
					];
				}
			}

			// These tags only expect text inside off them
			const singleInnerText =
				children.length === 1 && children[0].type === "Text"
					? children[0].value
					: undefined;
			if (singleInnerText !== undefined) {
				switch (tag.name) {
					case "filesize":
						return [
							{
								type: "Text",
								value: ___R$project$rome$$romejs$string$utils$humanizeFileSize_ts$humanizeFileSize(
									Number(singleInnerText),
								),
							},
						];

					case "duration":
						return [
							{
								type: "Text",
								value: ___R$project$rome$$romejs$string$markup$tagFormatters_ts$formatApprox(
									attributes,
									___R$project$rome$$romejs$string$utils$humanizeTime_ts$humanizeTime(
										Number(singleInnerText),
										true,
									),
								),
							},
						];

					case "number":
						return [
							{
								type: "Text",
								value: ___R$project$rome$$romejs$string$markup$tagFormatters_ts$formatNumber(
									attributes,
									singleInnerText,
								),
							},
						];

					case "grammarNumber":
						return [
							{
								type: "Text",
								value: ___R$project$rome$$romejs$string$markup$tagFormatters_ts$formatGrammarNumber(
									attributes,
									singleInnerText,
								),
							},
						];
				}
			}

			return [Object.assign({}, tag, {children})];
		}
	}

	function ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$getChildrenTextLength(
		children,
	) {
		let length = 0;

		for (const child of children) {
			if (child.type === "Text") {
				length += child.value.length;
			}

			if (child.type === "Tag") {
				length += ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$getChildrenTextLength(
					child.children,
				);
			}
		}

		return length;
	}

	const ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$hooks = new Map();

	___R$$priv$project$rome$$romejs$string$markup$Grid_ts$hooks.set(
		"hr",
		{
			after: (tag, grid, ancestry) => {
				const size =
					grid.viewportWidth === undefined
						? 100
						: ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(grid.viewportWidth) -
							___R$project$rome$$romejs$ob1$index_ts$ob1Get1(grid.cursor.column) +
							1;
				grid.writeText("\u2501".repeat(size), ancestry);
			},
		},
	);

	function ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$ansiFormatText(
		{name: tagName, attributes},
		value,
		opts,
	) {
		switch (tagName) {
			case "hyperlink": {
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.hyperlink(
					attributes.target || "",
					value,
				);
			}

			case "filelink": {
				const filename = ___R$project$rome$$romejs$string$markup$tagFormatters_ts$getFileLinkFilename(
					attributes,
					opts,
				);
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.hyperlink(
					value,
					"file://" + filename,
				);
			}

			case "inverse":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.inverse(
					" " + value + " ",
				);

			case "emphasis":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bold(
					value,
				);

			case "dim":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.dim(
					value,
				);

			case "italic":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.italic(
					value,
				);

			case "underline":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.underline(
					value,
				);

			case "strike":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.strikethrough(
					value,
				);

			case "error":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.red(
					value,
				);

			case "success":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.green(
					value,
				);

			case "warn":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.yellow(
					value,
				);

			case "info":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.blue(
					value,
				);

			case "command":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.italic(
					value,
				);

			case "highlight": {
				const index = Math.min(0, Number(attributes.i) || 0);
				const fn = ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$ansiHighlightFactories[index %
				___R$$priv$project$rome$$romejs$string$markup$Grid_ts$ansiHighlightFactories.length];
				return fn(value);
			}

			case "color":
				return ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$formatAnsiBackground(
					attributes.bg,
					___R$$priv$project$rome$$romejs$string$markup$Grid_ts$formatAnsiForeground(
						attributes.fg,
						value,
					),
				);

			default:
				return value;
		}
	}

	// TODO fill this
	const ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$ansiHighlightFactories = [
		___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.magenta,
		___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.cyan,
	];

	function ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$formatAnsiBackground(
		bg,
		text,
	) {
		if (bg === undefined) {
			return text;
		}

		switch (bg) {
			case "black":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBlack(
					text,
				);

			case "brightBlack":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBrightBlack(
					text,
				);

			case "red":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgRed(
					text,
				);

			case "brightRed":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBrightRed(
					text,
				);

			case "green":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgGreen(
					text,
				);

			case "brightGreen":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBrightGreen(
					text,
				);

			case "yellow":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgYellow(
					text,
				);

			case "brightYellow":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBrightYellow(
					text,
				);

			case "blue":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBlue(
					text,
				);

			case "brightBlue":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBrightBlue(
					text,
				);

			case "magenta":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgMagenta(
					text,
				);

			case "brightMagenta":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBrightMagenta(
					text,
				);

			case "cyan":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgCyan(
					text,
				);

			case "brightCyan":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBrightCyan(
					text,
				);

			case "white":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgWhite(
					text,
				);

			case "brightWhite":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgBrightWhite(
					text,
				);

			default:
				return text;
		}
	}

	function ___R$$priv$project$rome$$romejs$string$markup$Grid_ts$formatAnsiForeground(
		fg,
		text,
	) {
		if (fg === undefined) {
			return text;
		}

		switch (fg) {
			case "black":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.black(
					text,
				);

			case "brightBlack":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.brightBlack(
					text,
				);

			case "red":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.red(
					text,
				);

			case "brightRed":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.brightRed(
					text,
				);

			case "green":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.green(
					text,
				);

			case "brightGreen":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.brightGreen(
					text,
				);

			case "yellow":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.yellow(
					text,
				);

			case "brightYellow":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.brightYellow(
					text,
				);

			case "blue":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.blue(
					text,
				);

			case "brightBlue":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.brightBlue(
					text,
				);

			case "magenta":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.magenta(
					text,
				);

			case "brightMagenta":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.brightMagenta(
					text,
				);

			case "cyan":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.cyan(
					text,
				);

			case "brightCyan":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.brightCyan(
					text,
				);

			case "white":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.white(
					text,
				);

			case "brightWhite":
				return ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.brightWhite(
					text,
				);

			default:
				return text;
		}
	}


  // project-rome/@romejs/string-markup/format.ts
function ___R$$priv$project$rome$$romejs$string$markup$format_ts$buildTag(
		tag,
		inner,
		opts,
	) {
		let {attributes} = tag;

		switch (tag.name) {
			case // Normalize filename of <filelink target>
			"filelink": {
				// Clone
				attributes = Object.assign({}, attributes);

				const filename = ___R$project$rome$$romejs$string$markup$tagFormatters_ts$getFileLinkFilename(
					attributes,
					opts,
				);
				const text = ___R$project$rome$$romejs$string$markup$tagFormatters_ts$getFileLinkText(
					filename,
					attributes,
					opts,
				);
				attributes.target = filename;
				if (opts.stripPositions) {
					attributes.line = undefined;
					attributes.column = undefined;
				}
				inner = text;
				break;
			}

			// We don't technically need to normalize this but it's one less tag to have to support
			// if other tools need to consume it
			case "grammarNumber":
				return ___R$project$rome$$romejs$string$markup$tagFormatters_ts$formatGrammarNumber(
					attributes,
					inner,
				);
		}

		let open = "<" + tag.name;

		// Print attributes
		for (const key in attributes) {
			const value = attributes[key];
			if (value === undefined) {
				continue;
			}

			if (value === "true") {
				open += " " + key;
			} else {
				const escapedValue = ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
					value,
				);
				open += " " + key + '="' + escapedValue + '"';
			}
		}

		if (inner === "") {
			return open + " />";
		} else {
			return open + ">" + inner + "</" + tag.name + ">";
		}
	}

	function ___R$$priv$project$rome$$romejs$string$markup$format_ts$normalizeMarkupChildren(
		children,
		opts,
		remainingChars,
	) {
		// Sometimes we'll populate the inner text of a tag with no children
		if (children.length === 0) {
			return {text: "", textLength: 0};
		}

		let textLength = 0;

		let buff = "";
		for (const child of children) {
			if (child.type === "Text") {
				let text = ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
					child.value,
				);
				textLength += text.length;
				const isVisible = remainingChars > 0;
				if (text.length > remainingChars) {
					text = ___R$project$rome$$romejs$string$utils$sliceEscaped_ts$sliceEscaped(
						text,
						remainingChars,
					);
				}
				remainingChars -= text.length;
				if (isVisible) {
					buff += text;
				}
			} else if (child.type === "Tag") {
				const inner = ___R$$priv$project$rome$$romejs$string$markup$format_ts$normalizeMarkupChildren(
					child.children,
					opts,
					remainingChars,
				);

				if (remainingChars > 0) {
					buff += ___R$$priv$project$rome$$romejs$string$markup$format_ts$buildTag(
						child,
						inner.text,
						opts,
					);
				}
				textLength += inner.textLength;
				remainingChars -= inner.textLength;
			} else {
				throw new Error("Unknown child node type");
			}
		}

		return {
			text: buff,
			textLength,
		};
	}

	function ___R$project$rome$$romejs$string$markup$format_ts$markupToPlainTextString(
		input,
		opts = {},
	) {
		return ___R$project$rome$$romejs$string$markup$format_ts$markupToPlainText(
			input,
			opts,
		).lines.join("\n");
	}

	function ___R$project$rome$$romejs$string$markup$format_ts$markupToPlainText(
		input,
		opts = {},
	) {
		const grid = new ___R$project$rome$$romejs$string$markup$Grid_ts$default(
			opts,
		);
		grid.drawRoot(
			___R$project$rome$$romejs$string$markup$parse_ts$parseMarkup(input),
		);
		return {
			width: ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(grid.getWidth()),
			lines: grid.getLines(),
		};
	}



	function ___R$project$rome$$romejs$string$markup$format_ts$markupToAnsi(
		input,
		opts = {},
	) {
		const grid = new ___R$project$rome$$romejs$string$markup$Grid_ts$default(
			opts,
		);

		grid.drawRoot(
			___R$project$rome$$romejs$string$markup$parse_ts$parseMarkup(input),
		);

		return {
			width: ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(grid.getWidth()),
			lines: grid.getFormattedLines(),
		};
	}

	function ___R$project$rome$$romejs$string$markup$format_ts$normalizeMarkup(
		input,
		opts = {},
		maxLength = Infinity,
	) {
		const {textLength, text} = ___R$$priv$project$rome$$romejs$string$markup$format_ts$normalizeMarkupChildren(
			___R$project$rome$$romejs$string$markup$parse_ts$parseMarkup(input),
			opts,
			maxLength,
		);

		const isTruncated = textLength > maxLength;

		return {
			textLength,
			text,
			truncated: isTruncated,
			visibleTextLength: isTruncated ? maxLength : textLength,
			truncatedLength: isTruncated ? textLength - maxLength : 0,
		};
	}


  // project-rome/@romejs/string-markup/index.ts



  // project-rome/@romejs/cli-reporter/ProgressBase.ts
const ___R$$priv$project$rome$$romejs$cli$reporter$ProgressBase_ts$DEFAULT_PROGRESS_OPTIONS = {
		name: undefined,
		title: undefined,
		initDelay: undefined,
		elapsed: true,
		eta: true,
		persistent: false,
	};

	class ___R$project$rome$$romejs$cli$reporter$ProgressBase_ts$default {
		constructor(reporter, opts = {}) {
			this.total = undefined;
			this.reporter = reporter;
			this.current = 0;

			this.approximateTotal = false;
			this.approximateETA = undefined;

			this.textStack = [];
			this.text = undefined;
			this.title =
				opts.title === undefined ? undefined : reporter.stripMarkup(opts.title);

			this.paused = false;
			this.pausedStart = undefined;
			this.pausedElapsed = 0;

			this.opts = Object.assign(
				{},
				___R$$priv$project$rome$$romejs$cli$reporter$ProgressBase_ts$DEFAULT_PROGRESS_OPTIONS,
				opts,
			);
		}

		setCurrent(current) {
			this.current = current;
			this.queueRender();

			// Progress complete
			if (
				this.total !== undefined &&
				this.current >= this.total &&
				!this.opts.persistent
			) {
				this.end();
			}
		}

		getText() {
			const {text} = this;
			if (text === undefined || text === "") {
				return undefined;
			} else {
				return this.reporter.stripMarkup(text);
			}
		}

		setText(text) {
			this.text = text;
			this.queueRender();
		}

		setApproximateETA(duration) {
			this.approximateETA = duration;
		}

		setTotal(total, approximate = false) {
			this.total = total;
			this.approximateTotal = approximate;
			this.queueRender();
		}

		pushText(text) {
			this.setText(text);
			this.textStack.push(text);
		}

		popText(text) {
			// Find
			const {textStack} = this;
			const index = textStack.indexOf(text);
			if (index === -1) {
				throw new Error("No pushed text: " + text);
			}

			// Remove
			textStack.splice(index, 1);

			// Set last
			const last = textStack[textStack.length - 1];
			this.setText(last === undefined ? "" : last);
		}

		tick() {
			this.setCurrent(this.current + 1);
		}

		resume() {
			if (!this.paused || this.pausedStart === undefined) {
				return;
			}

			this.pausedElapsed += Date.now() - this.pausedStart;
			this.pausedStart = undefined;
			this.paused = false;
			this.render();
		}

		pause() {
			if (this.paused) {
				return;
			}

			this.pausedStart = Date.now();
			this.paused = true;
			this.render();
		}

		queueRender() {
			this.render();
		}

		end() {}

		render() {}
	}


  // project-rome/@romejs/cli-reporter/Progress.ts



	// 30 columns a second
	const ___R$$priv$project$rome$$romejs$cli$reporter$Progress_ts$BOUNCER_INTERVAL =
		1000 / 30;
	const ___R$$priv$project$rome$$romejs$cli$reporter$Progress_ts$BOUNCER_WIDTH = 20;

	class ___R$project$rome$$romejs$cli$reporter$Progress_ts$default
		extends ___R$project$rome$$romejs$cli$reporter$ProgressBase_ts$default {
		constructor(reporter, opts = {}, onEnd) {
			super(reporter, opts);

			this.startTime = Date.now();
			this.lastRenderTime = Date.now();
			this.lastRenderCurrent = 0;

			this.closed = false;
			this.onEnd = onEnd;

			this.delay = 60;
			this.renderEvery = 0;

			this.streamToBouncerStart = new Map();
			this.startBouncer();

			this.queueRender(opts.initDelay);
			this.initName(opts.name);
		}

		initName(name) {
			if (name === undefined) {
				return;
			}

			// TODO fetch approximate total and eta based on `name`
		}

		processRemoteClientMessage(msg) {
			switch (msg.type) {
				case "PROGRESS_SET_CURRENT":
					return this.setCurrent(msg.current);

				case "PROGRESS_SET_TOTAL":
					return this.setTotal(msg.total, msg.approximate);

				case "PROGRESS_SET_TEXT":
					return this.setText(msg.text);

				case "PROGRESS_PUSH_TEXT":
					return this.pushText(msg.text);

				case "PROGRESS_POP_TEXT":
					return this.popText(msg.text);

				case "PROGRESS_SET_APPROXIMATE_ETA":
					return this.setApproximateETA(msg.duration);

				case "PROGRESS_TICK":
					return this.tick();

				case "PROGRESS_END":
					return this.end();

				case "PROGRESS_RESUME":
					return this.resume();

				case "PROGRESS_PAUSE":
					return this.pause();
			}
		}

		getElapsedTime() {
			return Date.now() - this.startTime - this.pausedElapsed;
		}

		getBouncerPosition(stream) {
			const start = this.streamToBouncerStart.get(stream);
			if (start === undefined) {
				return 0;
			} else {
				return start;
			}
		}

		startBouncer() {
			const queueTick = () => {
				this.bouncerTimer = setTimeout(
					tick,
					___R$$priv$project$rome$$romejs$cli$reporter$Progress_ts$BOUNCER_INTERVAL,
				);
			};

			const tick = this.reporter.wrapCallback(() => {
				if (this.paused) {
					queueTick();
					return;
				}

				const elapsedTime = this.getElapsedTime();
				const elapsedFrames = Math.round(
					elapsedTime /
					___R$$priv$project$rome$$romejs$cli$reporter$Progress_ts$BOUNCER_INTERVAL,
				);

				for (const stream of this.reporter.streams) {
					// We remove the bouncer width from the total columns since we'll append it
					const width =
						stream.columns -
						___R$$priv$project$rome$$romejs$cli$reporter$Progress_ts$BOUNCER_WIDTH;

					// Position to place the bouncer
					let position = elapsedFrames % width;

					// Every odd complete bounce should reverse direction
					const totalBounces = Math.floor(elapsedFrames / width);
					if (totalBounces % 2 === 1) {
						position = width - position;
					}

					this.streamToBouncerStart.set(stream, position);
				}

				queueTick();
				this.render();
			});

			queueTick();
		}

		setCurrent(current) {
			if (this.closed) {
				return;
			}

			super.setCurrent(current);

			if (this.isRenderDue()) {
				this.render();
			}
		}

		setTotal(total, approximate = false) {
			super.setTotal(total, approximate);
			this.renderEvery = Math.round(total / 100);
			this.endBouncer();
		}

		setText(text) {
			if (this.closed) {
				return;
			}

			super.setText(text);
		}

		queueRender(delay = this.delay) {
			if (this.closed) {
				// Progress bar has been removed
				return;
			}

			if (this.renderTimer !== undefined) {
				// Render already queued
				return;
			}

			this.renderTimer = setTimeout(
				this.reporter.wrapCallback(() => {
					this.render();
				}),
				delay,
			);
		}

		endBouncer() {
			if (this.bouncerTimer !== undefined) {
				clearTimeout(this.bouncerTimer);
			}
			this.bouncerTimer = undefined;
		}

		endRender() {
			if (this.renderTimer !== undefined) {
				clearTimeout(this.renderTimer);
			}
			this.renderTimer = undefined;
		}

		end() {
			this.closed = true;
			this.endBouncer();
			this.endRender();
			this.reporter.clearLineAll();

			if (this.onEnd !== undefined) {
				this.onEnd();
			}
		}

		// Ensure that we update the progress bar after a certain amount of ticks

		// This allows us to use the progress bar for sync work where the event loop is always blocked
		isRenderDue() {
			const isDue = this.current > this.lastRenderCurrent + this.renderEvery;
			if (isDue) {
				// We also make sure that we never force update more often than once a second
				// This is to ensure that the progress bar isn't negatively effecting performance
				const timeSinceLastRender = Date.now() - this.lastRenderTime;
				return timeSinceLastRender > 1000;
			} else {
				return false;
			}
		}

		isBoldCharacter(i, ranges) {
			for (const [start, end] of ranges) {
				if (start >= i && end <= i) {
					return true;
				}
			}

			return false;
		}

		splitCharacters(str, boldRanges) {
			return str.split("").map((char, i) => {
				if (this.isBoldCharacter(i, boldRanges)) {
					return [
						i,
						___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bold(
							char,
						),
					];
				} else {
					return [i, char];
				}
			});
		}

		buildProgressBouncer(stream, bar) {
			let start = this.getBouncerPosition(stream);
			let fullBar = "";
			for (const [i, char] of bar) {
				const isBounce =
					i >= start &&
					i <
					start +
					___R$$priv$project$rome$$romejs$cli$reporter$Progress_ts$BOUNCER_WIDTH;

				if (isBounce) {
					if (this.paused) {
						fullBar += ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.inverse(
							char,
						);
					} else {
						fullBar += ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.white(
							___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgYellow(
								char,
							),
						);
					}
				} else {
					fullBar += char;
				}
			}
			return fullBar;
		}

		buildProgressBar(stream, bar, total) {
			const ratio = Math.min(Math.max(this.current / total, 0), 1);

			const completeLength = Math.round(stream.columns * ratio);
			let fullBar = "";
			for (const [i, char] of bar) {
				if (i < completeLength) {
					if (this.paused) {
						fullBar += ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.inverse(
							char,
						);
					} else {
						fullBar += ___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.white(
							___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgGreen(
								char,
							),
						);
					}
				} else {
					fullBar += char;
				}
			}
			return fullBar;
		}

		buildBar(stream) {
			const {total, current, title} = this;

			// Text ranges that we should make bold
			const boldRanges = [];

			// Text to prefix to the bar
			let prefix = "";
			if (title !== undefined) {
				prefix += title;

				// Only the title should be bold, not the subtext
				boldRanges.push([0, prefix.length - 1]);
			}

			const text = this.getText();
			if (text !== undefined) {
				// Separate a title and it's text with a colon
				if (title !== undefined) {
					prefix += ": ";
				}
				prefix += text;
			}

			// Text to put at the end of the bar
			let suffix = "";

			// Total time since the progress bar was created
			const elapsed = this.getElapsedTime();

			// Time elapsed eg: elapsed 1m5s
			if (this.opts.elapsed) {
				suffix +=
					"elapsed " +
					___R$project$rome$$romejs$string$utils$humanizeTime_ts$humanizeTime(
						elapsed,
					) +
					" ";
			}

			// Don't bother with a suffix if we haven't completed a single item
			if (current > 0) {
				// How many milliseconds spent per total items
				const averagePerItem = elapsed / current;

				// ETA eg: 1m5s
				if (this.opts.eta) {
					if (this.approximateETA !== undefined && elapsed < this.approximateETA) {
						// Approximate ETA
						const left = elapsed - this.approximateETA;
						suffix +=
							"eta ~" +
							___R$project$rome$$romejs$string$utils$humanizeTime_ts$humanizeTime(
								left,
							) +
							" ";
					} else if (total !== undefined) {
						// How many items we have left
						const itemsLeft = total - current;

						// Total estimated time left
						const eta = itemsLeft * averagePerItem;
						suffix +=
							"eta " +
							___R$project$rome$$romejs$string$utils$humanizeTime_ts$humanizeTime(
								eta,
							) +
							" ";
					} else {
						const ops = Math.round(1000 / averagePerItem);
						suffix +=
							___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
								ops,
							) + " op/s ";
					}
				}

				// Counter eg: 5/100
				suffix += ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
					current,
				);
				if (total !== undefined) {
					suffix += "/";
					if (this.approximateTotal) {
						suffix += "~";
					}
					suffix += ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
						total,
					);
				}
			}

			// Get the full width of the bar. We take off 3 for padding.
			const width = stream.columns - 3;

			// The amount of spaces to put between the title and counter
			const spacerLength = Math.max(0, width - prefix.length - suffix.length);
			const spacer = " ".repeat(spacerLength);

			// Trim the prefix if it will overflow
			prefix = prefix.slice(0, width - spacerLength - suffix.length);

			// The full raw bar without any coloring
			const raw = " " + prefix + spacer + " " + suffix;

			// Make sure the counter is bold
			boldRanges.push([raw.length - suffix.length, raw.length - 1]);

			// Split the raw bar into an array of formatted characters
			const chars = this.splitCharacters(raw, boldRanges);

			if (total === undefined) {
				return this.buildProgressBouncer(stream, chars);
			} else {
				return this.buildProgressBar(stream, chars, total);
			}
		}

		render() {
			if (this.closed) {
				return;
			}

			this.endRender();

			this.lastRenderCurrent = this.current;
			this.lastRenderTime = Date.now();

			for (const stream of this.reporter.getStreams(false)) {
				if (stream.format === "ansi") {
					stream.write(
						___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorTo(
							0,
						),
					);
					stream.write(this.buildBar(stream));
				}
			}
		}
	}


  // project-rome/@romejs/typescript-helpers/index.ts












	function ___R$project$rome$$romejs$typescript$helpers$index_ts$isPlainObject(
		obj,
	) {
		return typeof obj === "object" && obj !== null && !Array.isArray(obj);
	}

	function ___R$project$rome$$romejs$typescript$helpers$index_ts$isIterable(obj) {
		if (typeof obj === "object" && obj != null) {
			// @ts-ignore
			return typeof obj[Symbol.iterator] === "function";
		} else {
			return false;
		}
	}


  // project-rome/@romejs/string-escape/constants.ts
const ___R$project$rome$$romejs$string$escape$constants_ts = {
		get DOUBLE_QUOTE() {
			return ___R$project$rome$$romejs$string$escape$constants_ts$DOUBLE_QUOTE;
		},
		get SINGLE_QUOTE() {
			return ___R$project$rome$$romejs$string$escape$constants_ts$SINGLE_QUOTE;
		},
		get TICK_QUOTE() {
			return ___R$project$rome$$romejs$string$escape$constants_ts$TICK_QUOTE;
		},
	};
	const ___R$project$rome$$romejs$string$escape$constants_ts$DOUBLE_QUOTE = '"';
	const ___R$project$rome$$romejs$string$escape$constants_ts$SINGLE_QUOTE = "'";
	const ___R$project$rome$$romejs$string$escape$constants_ts$TICK_QUOTE = "`";


  // project-rome/@romejs/string-escape/escapeString.ts
// This regex represents printable ASCII characters, except the characters: '"\`
	const ___R$$priv$project$rome$$romejs$string$escape$escapeString_ts$PRINTABLE_ASCII = /[ !#-&\(-\[\]-_a-~]/;

	function ___R$$priv$project$rome$$romejs$string$escape$escapeString_ts$escapeChar(
		char,
		ignoreWhitespaceEscapes,
	) {
		switch (char) {
			case '"':
				return '\\"';

			case "'":
				return "\\'";

			case "\b":
				return "\\b";

			case "\f":
				return "\\f";

			case "\\":
				return "\\\\";
		}

		if (ignoreWhitespaceEscapes) {
			return undefined;
		}

		switch (char) {
			case "\n":
				return "\\n";

			case "\r":
				return "\\r";

			case "\t":
				return "\\t";
		}

		return undefined;
	}





	function ___R$project$rome$$romejs$string$escape$escapeString_ts$default(
		str,
		opts = {},
	) {
		let index = -1;
		let result = "";

		const {
			ignoreWhitespaceEscapes = false,
			quote = "",
			json = false,
			unicodeOnly = false,
		} = opts;

		// Loop over each code unit in the string and escape it
		while (++index < str.length) {
			const char = str[index];

			// Handle surrogate pairs in non-JSON mode
			if (!json) {
				const charCode = str.charCodeAt(index);
				const isHighSurrogate = charCode >= 55296 && charCode <= 56319;
				const hasNextCodePoint = str.length > index + 1;
				const isSurrogatePairStart = isHighSurrogate && hasNextCodePoint;

				if (isSurrogatePairStart) {
					const nextCharCode = str.charCodeAt(index + 1);
					const isLowSurrogate =
						nextCharCode >= 56320 && nextCharCode <= 57343;
					if (isLowSurrogate) {
						// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
						const codePoint =
							(charCode - 55296) * 1024 + nextCharCode - 56320 + 65536;
						const hex = codePoint.toString(16);
						result += "\\u{" + hex + "}";
						index++;
						continue;
					}
				}
			}

			//
			if (
				___R$$priv$project$rome$$romejs$string$escape$escapeString_ts$PRINTABLE_ASCII.test(
					char,
				)
			) {
				// It’s a printable ASCII character that is not `"`, `'` or `\`,
				// so don’t escape it.
				result += char;
				continue;
			}

			// Escape double quotes
			if (
				char ===
				___R$project$rome$$romejs$string$escape$constants_ts$DOUBLE_QUOTE
			) {
				result += quote === char ? '\\"' : char;
				continue;
			}

			// Escape single quotes
			if (
				char ===
				___R$project$rome$$romejs$string$escape$constants_ts$SINGLE_QUOTE
			) {
				result += quote === char ? "\\'" : char;
				continue;
			}

			// Escape back tick
			if (
				char ===
				___R$project$rome$$romejs$string$escape$constants_ts$TICK_QUOTE
			) {
				result += quote === char ? "\\`" : char;
				continue;
			}

			// Null escape
			if (
				char === "\0" &&
				!json &&
				!___R$project$rome$$romejs$parser$core$index_ts$isDigit(str[index + 1])
			) {
				result += "\\0";
				continue;
			}

			// Simple escapes
			if (!unicodeOnly) {
				const replacement = ___R$$priv$project$rome$$romejs$string$escape$escapeString_ts$escapeChar(
					char,
					ignoreWhitespaceEscapes,
				);
				if (replacement !== undefined) {
					result += replacement;
					continue;
				}
			}

			// Unicode escape
			const hex = char.charCodeAt(0).toString(16);
			const isLonghand = json || hex.length > 2;
			const modifier = isLonghand ? "u" : "x";
			const code = ("0000" + hex).slice(isLonghand ? -4 : -2);
			const escaped = "\\" + modifier + code;
			result += escaped;
			continue;
		}

		return "" + quote + result + quote;
	}


  // project-rome/@romejs/string-escape/unescapeString.ts
function ___R$$priv$project$rome$$romejs$string$escape$unescapeString_ts$unescapeChar(
		modifier,
	) {
		switch (modifier) {
			case "b":
				return "\b";

			case "f":
				return "\f";

			case "n":
				return "\n";

			case "r":
				return "\r";

			case "t":
				return "\t";

			case "v":
				return "\x0b";

			default:
				return modifier;
		}
	}



	const ___R$$priv$project$rome$$romejs$string$escape$unescapeString_ts$UNEXPECTED_DEFAULT_THROWER = (
		metadata,
		index,
	) => {
		throw new TypeError(metadata.message.value + " (" + String(index) + ")");
	};

	function ___R$project$rome$$romejs$string$escape$unescapeString_ts$default(
		input,
		unexpected = ___R$$priv$project$rome$$romejs$string$escape$unescapeString_ts$UNEXPECTED_DEFAULT_THROWER,
	) {
		let buffer = "";

		let index = 0;

		while (index < input.length) {
			const char = input[index];
			const prevChar = input[index - 1];
			const prevPrevChar = input[index - 2];
			const isEscaped = prevChar === "\\" && prevPrevChar !== "\\";

			// It's verbatim if it's an escaped backslash or not a backslash
			if ((isEscaped && char === "\\") || char !== "\\") {
				// Validate that this is a valid character
				const codePoint = char.codePointAt(0);
				if (codePoint === undefined) {
					throw new Error("Already validated that this index exists");
				}
				if (codePoint >= 0 && codePoint <= 31) {
					throw unexpected(
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_ESCAPE.INVALID_STRING_CHARACTER,
						index,
					);
				}

				// Add it verbatim
				buffer += char;
				index++;
				continue;
			}

			const modifierIndex = index + 1;
			const modifier = input[modifierIndex];

			if (modifier === "u") {
				// Get the next 4 characters as the code point
				const codeStartIndex = modifierIndex + 1;
				const rawCode = input.slice(codeStartIndex, codeStartIndex + 4);

				// Validate that we have at least 4 digits
				if (rawCode.length < 4) {
					// (index of the point start + total point digits)
					const lastDigitIndex = codeStartIndex + rawCode.length - 1;
					throw unexpected(
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_ESCAPE.NOT_ENOUGH_CODE_POINTS,
						lastDigitIndex,
					);
				}

				// Validate that each character is a valid hex digit
				for (let i = 0; i < rawCode.length; i++) {
					const char = rawCode[i];
					if (!___R$project$rome$$romejs$parser$core$index_ts$isHexDigit(char)) {
						// Get the current source index for this character
						// (code start index + digit index)
						const pos = codeStartIndex + i;
						throw unexpected(
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.STRING_ESCAPE.INVALID_HEX_DIGIT_FOR_ESCAPE,
							pos,
						);
					}
				}

				// Validate the code point
				const code = parseInt(rawCode, 16);

				// Get the character for this code point
				buffer += String.fromCodePoint(code);

				// Skip ahead six indexes (1 escape char +  1modifier + 4 hex digits)
				index += 6;
			} else {
				// Unescape a basic modifier like \t
				buffer += ___R$$priv$project$rome$$romejs$string$escape$unescapeString_ts$unescapeChar(
					modifier,
				);

				// Skip ahead two indexes to also take along the modifier
				index += 2;
			}
		}

		return buffer;
	}


  // project-rome/@romejs/string-escape/index.ts



  // project-rome/@romejs/pretty-format/index.ts






	const ___R$$priv$project$rome$$romejs$pretty$format$index_ts$DEFAULT_OPTIONS = {
		maxDepth: Infinity,
		markup: false,
		indent: "",
		depth: 0,
		stack: [],
		compact: false,
	};

	const ___R$$priv$project$rome$$romejs$pretty$format$index_ts$INDENT = "\t";

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$maybeEscapeMarkup(
		str,
		opts,
	) {
		if (opts.markup) {
			return ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(str);
		} else {
			return str;
		}
	}

	const ___R$project$rome$$romejs$pretty$format$index_ts$CUSTOM_PRETTY_FORMAT = Symbol();

	function ___R$project$rome$$romejs$pretty$format$index_ts$default(
		obj,
		rawOpts = {},
	) {
		const opts = Object.assign(
			{},
			___R$$priv$project$rome$$romejs$pretty$format$index_ts$DEFAULT_OPTIONS,
			rawOpts,
		);

		if (opts.maxDepth === opts.depth) {
			return "[depth exceeded]";
		}

		switch (typeof obj) {
			case "symbol": {
				const val = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$maybeEscapeMarkup(
					___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatSymbol(
						obj,
					),
					opts,
				);
				return opts.markup
					? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							val,
							{fg: "green"},
						)
					: val;
			}

			case "string": {
				const val = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$maybeEscapeMarkup(
					___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatString(
						obj,
					),
					opts,
				);
				return opts.markup
					? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							val,
							{fg: "green"},
						)
					: val;
			}

			case "bigint":
			case "number": {
				const val = ___R$project$rome$$romejs$pretty$format$index_ts$formatNumber(
					obj,
				);
				return opts.markup
					? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							val,
							{fg: "yellow"},
						)
					: val;
			}

			case "boolean": {
				const val = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatBoolean(
					obj,
				);
				return opts.markup
					? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							val,
							{fg: "yellow"},
						)
					: val;
			}

			case "undefined": {
				const val = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatUndefined();
				return opts.markup
					? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							val,
							{fg: "brightBlack"},
						)
					: val;
			}

			case "function":
				return ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatFunction(
					obj,
					opts,
				);

			case "object":
				return ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatObjectish(
					(obj),
					opts,
				);

			default:
				throw new Error("Unknown type");
		}
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$joinList(
		items,
		opts,
	) {
		if (items.length === 0) {
			return "";
		}

		const lines = [];

		for (const item of items) {
			lines.push("" + opts.indent + item);
		}

		return lines.join("\n");
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$isNativeFunction(
		val,
	) {
		return val.toString().endsWith("{ [native code] }");
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatSymbol(
		val,
	) {
		return String(val);
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatString(
		val,
	) {
		return ___R$project$rome$$romejs$string$escape$escapeString_ts$default(
			val,
			{
				quote: '"',
			},
		);
	}

	// This function is used by rome-json so make sure it can parse whatever you return here
	function ___R$project$rome$$romejs$pretty$format$index_ts$formatNumber(val) {
		if (typeof val === "bigint") {
			return ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
				val,
				"_",
			);
		} else if (isNaN(val)) {
			return "NaN";
		} else if (Object.is(val, -0)) {
			return "-0";
		} else if (isFinite(val)) {
			return ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
				val,
				"_",
			);
		} else if (Object.is(val, -Infinity)) {
			return "-Infinity";
		} else if (Object.is(val, +Infinity)) {
			return "Infinity";
		} else {
			throw new Error("Don't know how to format this number");
		}
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatUndefined() {
		return "undefined";
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatNull() {
		return "null";
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatBoolean(
		val,
	) {
		return val === true ? "true" : "false";
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatFunction(
		val,
		opts,
	) {
		const name =
			val.name === ""
				? "anonymous"
				: ___R$$priv$project$rome$$romejs$pretty$format$index_ts$maybeEscapeMarkup(
						val.name,
						opts,
					);
		let label = "Function " + name;

		if (
			___R$$priv$project$rome$$romejs$pretty$format$index_ts$isNativeFunction(
				val,
			)
		) {
			label = "Native" + label;
		}

		if (Object.keys(val).length === 0) {
			return label;
		}

		// rome-ignore lint/js/noExplicitAny
		return ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatObject(
			label,
			(val),
			opts,
			[],
		);
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$getExtraObjectProps(
		obj,
		opts,
	) {
		const props = [];
		const ignoreKeys = {};

		if (obj instanceof Map) {
			for (const [key, val] of obj) {
				const formattedKey =
					typeof key === "string"
						? ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatKey(
								key,
								opts,
							)
						: ___R$project$rome$$romejs$pretty$format$index_ts$default(
								key,
								opts,
							);
				props.push(
					formattedKey +
					" => " +
					___R$project$rome$$romejs$pretty$format$index_ts$default(val, opts),
				);
			}
		} else if (
			___R$project$rome$$romejs$typescript$helpers$index_ts$isIterable(obj)
		) {
			let i = 0;
			for (const val of obj) {
				ignoreKeys[String(i++)] = val;
				props.push(
					___R$project$rome$$romejs$pretty$format$index_ts$default(val, opts),
				);
			}
		}

		return {ignoreKeys, props};
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatKey(
		rawKey,
		opts,
	) {
		const key = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$maybeEscapeMarkup(
			rawKey,
			opts,
		);

		// Format as a string if it contains any special characters
		if (/[^A-Za-z0-9_$]/g.test(key)) {
			return ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatString(
				key,
			);
		} else {
			return key;
		}
	}

	// These are object keys that should always go at the top and ignore any alphabetization
	// This is fairly arbitrary but should include generic identifier keys
	const ___R$project$rome$$romejs$pretty$format$index_ts$PRIORITIZE_KEYS = [
		"id",
		"type",
		"kind",
		"key",
		"name",
		"value",
	];



	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$sortKeys(obj) {
		const sortedKeys = new Set(
			Object.keys(obj).sort(
				___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare,
			),
		);

		const priorityKeys = [];
		const otherKeys = [];
		const objectKeys = [];

		for (const key of ___R$project$rome$$romejs$pretty$format$index_ts$PRIORITIZE_KEYS) {
			if (sortedKeys.has(key)) {
				priorityKeys.push({key, object: false});
				sortedKeys.delete(key);
			}
		}

		for (const key of sortedKeys) {
			const val = obj[key];

			// Objects with properties should be at the bottom
			let isObject = false;
			if (typeof val === "object" && val != null && Object.keys(val).length > 0) {
				isObject = true;
			}
			if (Array.isArray(val) && val.length > 0) {
				isObject = true;
			}
			if (isObject) {
				objectKeys.push({key, object: true});
			} else {
				otherKeys.push({key, object: false});
			}
		}

		return [...priorityKeys, ...otherKeys, ...objectKeys];
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$lineCount(str) {
		return str.split("\n").length;
		___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatKey;
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$lineCountCompare(
		a,
		b,
	) {
		return (
			___R$$priv$project$rome$$romejs$pretty$format$index_ts$lineCount(a) -
			___R$$priv$project$rome$$romejs$pretty$format$index_ts$lineCount(b)
		);
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatObject(
		label,
		obj,
		opts,
		labelKeys,
	) {
		// Detect circular references, and create a pointer to the specific value
		const {stack} = opts;
		if (stack.length > 0 && stack.includes(obj)) {
			label = "Circular " + label + " " + stack.indexOf(obj);
			return opts.markup
				? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
						"color",
						label,
						{fg: "cyan"},
					)
				: label;
		}

		//
		const nextOpts = Object.assign(
			{},
			opts,
			{
				stack: [...stack, obj],
				depth: opts.depth + 1,
				indent: opts.indent +
				___R$$priv$project$rome$$romejs$pretty$format$index_ts$INDENT,
			},
		);
		const {ignoreKeys, props} = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$getExtraObjectProps(
			obj,
			nextOpts,
		);

		// For props that have object values, we always put them at the end, sorted by line count
		const objProps = [];

		// Get string props
		for (const {key, object} of ___R$$priv$project$rome$$romejs$pretty$format$index_ts$sortKeys(
			obj,
		)) {
			const val = obj[key];
			if (key in ignoreKeys && ignoreKeys[key] === val) {
				continue;
			}

			if (opts.compact && val === undefined) {
				continue;
			}

			// Ignore any properties already displayed in the label
			if (labelKeys.includes(key)) {
				continue;
			}

			const prop =
				___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatKey(
					key,
					opts,
				) +
				": " +
				___R$project$rome$$romejs$pretty$format$index_ts$default(val, nextOpts);
			if (object) {
				objProps.push(prop);
			} else {
				props.push(prop);
			}
		}

		// Sort object props by line count and push them on
		for (const prop of objProps.sort(
			___R$$priv$project$rome$$romejs$pretty$format$index_ts$lineCountCompare,
		)) {
			props.push(prop);
		}

		// Get symbol props
		for (const sym of Object.getOwnPropertySymbols(obj)) {
			const val = Reflect.get(obj, sym);
			props.push(
				___R$project$rome$$romejs$pretty$format$index_ts$default(sym, opts) +
				": " +
				___R$project$rome$$romejs$pretty$format$index_ts$default(val, nextOpts),
			);
		}

		//
		let open = "{";
		let close = "}";
		if (___R$project$rome$$romejs$typescript$helpers$index_ts$isIterable(obj)) {
			open = "[";
			close = "]";
		}

		//
		let inner = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$joinList(
			props,
			nextOpts,
		);
		if (inner !== "") {
			if (props.length === 1 && !inner.includes("\n")) {
				// Single prop with no newlines shouldn't be indented
				inner = inner.trim();
			} else {
				inner = "\n" + inner + "\n" + opts.indent;
			}
		}

		label = opts.markup
			? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
					"color",
					label,
					{fg: "cyan"},
				)
			: label;
		return label + " " + open + inner + close;
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatRegExp(
		val,
	) {
		return String(val);
	}

	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatDate(
		val,
	) {
		return val.toISOString();
	}



	function ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatObjectish(
		val,
		opts,
	) {
		if (val === null) {
			const val = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatNull();
			return opts.markup
				? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
						"emphasis",
						val,
					)
				: val;
		}

		if (val instanceof RegExp) {
			const str = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatRegExp(
				val,
			);
			return opts.markup
				? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
						"color",
						str,
						{fg: "red"},
					)
				: str;
		}

		if (val instanceof Date) {
			const str = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatDate(
				val,
			);
			return opts.markup
				? ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
						"color",
						str,
						{fg: "magenta"},
					)
				: str;
		}

		let label = "null";

		if (val.constructor !== undefined) {
			label = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$maybeEscapeMarkup(
				val.constructor.name,
				opts,
			);
		}

		let labelKeys = [];

		// If there's a string type or kind property then use it as the label
		if (typeof val.type === "string") {
			label = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$maybeEscapeMarkup(
				val.type,
				opts,
			);
			labelKeys.push("type");
		} else if (typeof val.kind === "string") {
			label = ___R$$priv$project$rome$$romejs$pretty$format$index_ts$maybeEscapeMarkup(
				val.kind,
				opts,
			);
			labelKeys.push("kind");
		}

		return ___R$$priv$project$rome$$romejs$pretty$format$index_ts$formatObject(
			label,
			val,
			opts,
			labelKeys,
		);
	}


  // project-rome/@romejs/events/Event.ts


	function ___R$$priv$project$rome$$romejs$events$Event_ts$noPromise(ret) {
		if (ret instanceof Promise) {
			throw new Error("Subscription returned promise for a callSync");
		} else {
			return ret;
		}
	}

	class ___R$project$rome$$romejs$events$Event_ts$default {
		constructor(opts) {
			this.subscriptions = new Set();
			this.rootSubscription = undefined;
			this.name = opts.name;
			this.options = opts;
		}

		onSubscriptionChange() {
			// Hook for BridgeEvent
		}

		onError(err) {
			const {onError} = this.options;
			if (onError !== undefined) {
				onError(err);
			}
		}

		clear() {
			this.subscriptions.clear();
		}

		hasSubscribers() {
			return this.hasSubscriptions();
		}

		hasSubscriptions() {
			return this.rootSubscription !== undefined;
		}

		// Dispatch the event without caring about the return values
		send(param) {
			const {rootSubscription} = this;
			if (rootSubscription === undefined) {
				return;
			}

			rootSubscription(param);

			for (const callback of this.subscriptions) {
				callback(param);
			}
		}

		callSync(param) {
			try {
				const {rootSubscription, subscriptions} = this;
				if (rootSubscription === undefined) {
					throw new Error("No subscription for event " + this.name);
				}

				const ret = ___R$$priv$project$rome$$romejs$events$Event_ts$noPromise(
					rootSubscription(param),
				);
				for (const callback of subscriptions) {
					___R$$priv$project$rome$$romejs$events$Event_ts$noPromise(
						callback(param),
					);
				}
				return ret;
			} catch (err) {
				this.onError(err);
				throw err;
			}
		}

		async call(param) {
			const {rootSubscription, subscriptions} = this;
			if (rootSubscription === undefined) {
				throw new Error("No subscription for event " + this.name);
			}

			try {
				if (this.options.serial === true) {
					const ret = await rootSubscription(param);
					for (const callback of subscriptions) {
						await callback(param);
					}
					return ret;
				} else {
					const res = await Promise.all([
						rootSubscription(param),
						...Array.from(subscriptions, (callback) => callback(param)),
					]);

					// Return the root subscription value
					return res[0];
				}
			} catch (err) {
				this.onError(err);
				throw err;
			}
		}

		wait(val, timeout) {
			return new Promise((resolve, reject) => {
				let timeoutId;
				let timedOut = false;

				if (timeout !== undefined) {
					timeoutId = setTimeout(
						() => {
							timedOut = true;
							listener.unsubscribe();
							reject(
								new Error(
									"Timed out after waiting " + timeout + "ms for " + this.name,
								),
							);
						},
						timeout,
					);
				}

				const listener = this.subscribe((param) => {
					if (timedOut) {
						return val;
					}

					if (timeoutId !== undefined) {
						clearTimeout(timeoutId);
					}

					listener.unsubscribe();
					resolve(param);
					return val;
				});
			});
		}

		async callOptional(param) {
			if (this.rootSubscription === undefined) {
				return undefined;
			} else {
				return this.call(param);
			}
		}

		subscribe(callback, makeRoot) {
			if (this.options.unique === true && this.subscriptions.size !== 0) {
				throw new Error(
					"Event " + this.name + " only allows a single subscription",
				);
			}

			if (this.rootSubscription === callback || this.subscriptions.has(callback)) {
				throw new Error("Cannot double subscribe a callback");
			}

			if (this.rootSubscription === undefined) {
				this.rootSubscription = callback;
			} else if (makeRoot === true) {
				this.subscriptions.add(this.rootSubscription);
				this.rootSubscription = callback;
			} else {
				this.subscriptions.add(callback);
			}

			this.onSubscriptionChange();

			return {
				unsubscribe: () => {
					this.unsubscribe(callback);
				},
			};
		}

		unsubscribe(callback) {
			if (this.subscriptions.has(callback)) {
				this.subscriptions.delete(callback);
				this.onSubscriptionChange();
				return;
			}

			// If this callback was the root subscription, then set it to the next one
			if (callback === this.rootSubscription) {
				this.rootSubscription = Array.from(this.subscriptions)[0];
				this.onSubscriptionChange();
				return;
			}
		}
	}


  // project-rome/@romejs/events/BridgeError.ts
class ___R$project$rome$$romejs$events$BridgeError_ts$default extends Error {
		constructor(message, bridge) {
			super(message);
			this.bridge = bridge;
		}
	}


  // project-rome/@romejs/events/BridgeEvent.ts






	function ___R$$priv$project$rome$$romejs$events$BridgeEvent_ts$validateDirection(
		// rome-ignore lint/js/noExplicitAny
		event,
		invalidDirections,
		verb,
	) {
		invalidDirections.push(["server<->client", "server&client"]);

		for (const [eventDirection, bridgeType] of invalidDirections) {
			if (event.direction === eventDirection && event.bridge.type === bridgeType) {
				throw new Error(
					"The " +
					eventDirection +
					' event "' +
					event.name +
					'" cannot be ' +
					verb +
					" by a " +
					bridgeType +
					" bridge",
				);
			}
		}
	}

	class ___R$project$rome$$romejs$events$BridgeEvent_ts$default
		extends ___R$project$rome$$romejs$events$Event_ts$default {
		constructor(opts, bridge) {
			super(opts);

			this.bridge = bridge;
			this.requestCallbacks = new Map();
			this.direction = opts.direction;
		}

		clear() {
			super.clear();
			this.requestCallbacks.clear();
		}

		end(err) {
			for (const {reject} of this.requestCallbacks.values()) {
				reject(err);
			}
		}

		onSubscriptionChange() {
			___R$$priv$project$rome$$romejs$events$BridgeEvent_ts$validateDirection(
				this,
				[["server->client", "client"], ["server<-client", "server"]],
				"subscribed",
			);
			this.bridge.sendSubscriptions();
		}

		dispatchRequest(param) {
			return super.call(param);
		}

		dispatchResponse(id, data) {
			const callbacks = this.requestCallbacks.get(id);
			if (!callbacks) {
				// ???
				return;
			}

			this.requestCallbacks.delete(id);

			if (data.responseStatus === "success") {
				// @ts-ignore
				callbacks.resolve(data.value);
			} else if (data.responseStatus === "error") {
				try {
					callbacks.reject(this.bridge.buildError(data.value, data.metadata));
				} catch (err) {
					callbacks.reject(err);
				}
			} else {
				// ???
			}

			if (callbacks.completed !== undefined) {
				callbacks.completed();
			}
		}

		hasSubscribers() {
			return this.bridge.listeners.has(this.name);
		}

		validateCanSend() {
			___R$$priv$project$rome$$romejs$events$BridgeEvent_ts$validateDirection(
				this,
				[["server<-client", "client"], ["server->client", "server"]],
				"called",
			);
		}

		send(param) {
			if (!this.hasSubscribers()) {
				// No point in sending over a subscription that doesn't have a listener
				return;
			}

			this.validateCanSend();
			this.bridge.assertAlive();
			this.bridge.sendMessage({
				type: "request",
				event: this.name,
				param,
				priority: false,
			});
		}

		async call(param, opts = {}) {
			const {priority = false, timeout} = opts;
			this.validateCanSend();

			try {
				return await new Promise((resolve, reject) => {
					this.bridge.assertAlive();

					const id = this.bridge.getNextMessageId();

					let completed;
					if (timeout !== undefined) {
						const timeoutId = setTimeout(
							() => {
								// Remove the request callback
								this.requestCallbacks.delete(id);

								// Reject the promise
								reject(
									new ___R$project$rome$$romejs$events$BridgeError_ts$default(
										"Timeout of " +
										String(timeout) +
										"ms for " +
										this.name +
										"(" +
										String(JSON.stringify(param)) +
										") event exceeded",
										this.bridge,
									),
								);
							},
							timeout,
						);

						// Cancel the timeout if the response returns before the timer
						completed = () => {
							clearTimeout(timeoutId);
						};
					}

					this.requestCallbacks.set(
						id,
						{
							completed,
							reject,
							resolve,
						},
					);

					this.bridge.sendMessage({
						id,
						event: this.name,
						param,
						type: "request",
						priority,
					});
				});
			} catch (err) {
				this.onError(err);
				throw err;
			}
		}
	}


  // project-rome/@romejs/codec-source-map/base64.ts
const ___R$project$rome$$romejs$codec$source$map$base64_ts = {
		encode: ___R$project$rome$$romejs$codec$source$map$base64_ts$encode,
		encodeVLQ: ___R$project$rome$$romejs$codec$source$map$base64_ts$encodeVLQ,
		decode: ___R$project$rome$$romejs$codec$source$map$base64_ts$decode,
		decodeVLQ: ___R$project$rome$$romejs$codec$source$map$base64_ts$decodeVLQ,
	};
	/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from 'this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

	const ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$intToCharMap = Array.from(
		"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
	);

	/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
	function ___R$project$rome$$romejs$codec$source$map$base64_ts$encode(number) {
		if (
			0 <= number &&
			number <
			___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$intToCharMap.length
		) {
			return ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$intToCharMap[number];
		} else {
			throw new TypeError("Must be between 0 and 63: " + number);
		}
	}

	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011
	const ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE_SHIFT = 5;

	// binary: 100000
	const ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE =
		1 <<
		___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE_SHIFT;

	// binary: 011111
	const ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE_MASK =
		___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE - 1;

	// binary: 100000
	const ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_CONTINUATION_BIT = ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE;

	/**
 * Converts from 'a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
	function ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$toVLQSigned(
		aValue,
	) {
		return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
	}

	/**
 * Converts to a two-complement value from 'a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
	// eslint-disable-next-line no-unused-vars
	function ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$fromVLQSigned(
		value,
	) {
		const isNegative = (value & 1) === 1;
		const shifted = value >> 1;
		return isNegative ? -shifted : shifted;
	}

	/**
 * Returns the base 64 VLQ encoded value.
 */
	function ___R$project$rome$$romejs$codec$source$map$base64_ts$encodeVLQ(value) {
		let encoded = "";
		let vlq = ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$toVLQSigned(
			value,
		);

		do {
			let digit =
				vlq &
				___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE_MASK;
			vlq >>>= ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE_SHIFT;
			if (vlq > 0) {
				// There are still more digits in this value, so we must make sure the
				// continuation bit is marked.
				digit |= ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_CONTINUATION_BIT;
			}
			encoded += ___R$project$rome$$romejs$codec$source$map$base64_ts$encode(
				digit,
			);
		} while (vlq > 0);

		return encoded;
	}

	function ___R$project$rome$$romejs$codec$source$map$base64_ts$decode(charCode) {
		const uppercaseA = 65; // 'A'
		const uppercaseZ = 90; // 'Z'
		const lowercaseA = 97; // 'a'
		const lowercaseZ = 122; // 'z'
		const zero = 48; // '0'
		const nine = 57; // '9'
		const plus = 43; // '+'
		const slash = 47; // '/'
		const lowercaseOffset = 26;
		const numberOffset = 52;

		// 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
		if (uppercaseA <= charCode && charCode <= uppercaseZ) {
			return charCode - uppercaseA;
		}

		// 26 - 51: abcdefghijklmnopqrstuvwxyz
		if (lowercaseA <= charCode && charCode <= lowercaseZ) {
			return charCode - lowercaseA + lowercaseOffset;
		}

		// 52 - 61: 0123456789
		if (zero <= charCode && charCode <= nine) {
			return charCode - zero + numberOffset;
		}

		// 62: +
		if (charCode === plus) {
			return 62;
		}

		// 63: /
		if (charCode === slash) {
			return 63;
		}

		// Invalid base64 digit.
		return -1;
	}

	function ___R$project$rome$$romejs$codec$source$map$base64_ts$decodeVLQ(
		aStr,
		aIndex,
	) {
		let strLen = aStr.length;
		let result = 0;
		let shift = 0;
		let continuation = false;

		do {
			if (aIndex >= strLen) {
				throw new Error("Expected more digits in base 64 VLQ value.");
			}

			let digit = ___R$project$rome$$romejs$codec$source$map$base64_ts$decode(
				aStr.charCodeAt(aIndex++),
			);
			if (digit === -1) {
				throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
			}

			continuation = !!(digit &
			___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_CONTINUATION_BIT);
			digit &= ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE_MASK;
			result = result + (digit << shift);
			shift += ___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$VLQ_BASE_SHIFT;
		} while (continuation);

		return [
			___R$$priv$project$rome$$romejs$codec$source$map$base64_ts$fromVLQSigned(
				result,
			),
			aIndex,
		];
	}


  // project-rome/@romejs/codec-source-map/util.ts
function ___R$$priv$project$rome$$romejs$codec$source$map$util_ts$strcmp(a, b) {
		if (a === b) {
			return 0;
		}

		if (a === undefined) {
			return 1;
		}

		if (b === undefined) {
			return -1;
		}

		if (a > b) {
			return 1;
		}

		return -1;
	}

	/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
	function ___R$project$rome$$romejs$codec$source$map$util_ts$compareByGeneratedPositionsInflated(
		mappingA,
		mappingB,
	) {
		let cmp =
			___R$project$rome$$romejs$ob1$index_ts$ob1Get1(mappingA.generated.line) -
			___R$project$rome$$romejs$ob1$index_ts$ob1Get1(mappingB.generated.line);
		if (cmp !== 0) {
			return cmp;
		}

		cmp =
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(mappingA.generated.column) -
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(mappingB.generated.column);
		if (cmp !== 0) {
			return cmp;
		}

		cmp = ___R$$priv$project$rome$$romejs$codec$source$map$util_ts$strcmp(
			mappingA.source,
			mappingB.source,
		);
		if (cmp !== 0) {
			return cmp;
		}

		if (mappingA.original == null) {
			if (mappingB.original != null) {
				return 1;
			}
		} else if (mappingB.original == null) {
			return -1;
		} else {
			cmp =
				___R$project$rome$$romejs$ob1$index_ts$ob1Get1(mappingA.original.line) -
				___R$project$rome$$romejs$ob1$index_ts$ob1Get1(mappingB.original.line);
			if (cmp !== 0) {
				return cmp;
			}

			cmp =
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(mappingA.original.column) -
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(mappingB.original.column);
			if (cmp !== 0) {
				return cmp;
			}
		}

		return ___R$$priv$project$rome$$romejs$codec$source$map$util_ts$strcmp(
			mappingA.name,
			mappingB.name,
		);
	}

	function ___R$project$rome$$romejs$codec$source$map$util_ts$toRelativeUrl(
		root,
		path,
	) {
		if (root === "") {
			root = ".";
		}

		root = root.replace(/\/$/, "");

		// It is possible for the path to be above the root. In this case, simply

		// checking whether the root is a prefix of the path won't work. Instead, we

		// need to remove components from the root one by one, until either we find

		// a prefix that fits, or we run out of components to remove.
		let level = 0;
		while (path.indexOf(root + "/") !== 0) {
			const index = root.lastIndexOf("/");
			if (index < 0) {
				return path;
			}

			// If the only part of the root that is left is the scheme (i.e. http://,

			// file:///, etc.), one or more slashes (/), or simply nothing at all, we

			// have exhausted all components, so the path is not relative to the root.
			root = root.slice(0, index);
			if (root.match(/^([^\/]+:\/)?\/*$/)) {
				return path;
			}

			++level;
		}

		// Make sure we add a '../' for each component we removed from the root.

		return "../".repeat(level) + path.substr(root.length + 1);
	}


  // project-rome/@romejs/codec-source-map/ArraySet.ts
class ___R$project$rome$$romejs$codec$source$map$ArraySet_ts$default {
		constructor() {
			this.array = [];
			this.set = new Map();
		}

		/**
   * Static method for creating ArraySet instances from 'an existing array.
   */
		static fromArray(array, allowDuplicates) {
			const set = new ___R$project$rome$$romejs$codec$source$map$ArraySet_ts$default();
			for (const item of array) {
				set.add(item, allowDuplicates);
			}
			return set;
		}

		/**
   * Add the given string to this set.
   */
		add(str, allowDuplicates) {
			const isDuplicate = this.has(str);
			const idx = this.array.length;

			if (isDuplicate === false || allowDuplicates === true) {
				this.array.push(str);
			}

			if (isDuplicate === false) {
				this.set.set(str, idx);
			}
		}

		/**
   * Is the given string a member of this set?
   */
		has(str) {
			return this.set.has(str);
		}

		/**
   * What is the index of the given string in the array?
   */
		indexOf(str) {
			const idx = this.set.get(str);
			if (idx === undefined || idx < 0) {
				throw new Error(str + " is not in the set");
			}
			return idx;
		}

		/**
   * What is the element at the given index?
   */
		at(idx) {
			if (idx >= 0 && idx < this.array.length) {
				return this.array[idx];
			} else {
				throw new Error("No element indexed by " + idx);
			}
		}

		/**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
		toArray() {
			return this.array.slice();
		}
	}


  // project-rome/@romejs/codec-source-map/MappingList.ts
/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
	function ___R$$priv$project$rome$$romejs$codec$source$map$MappingList_ts$generatedPositionAfter(
		mappingA,
		mappingB,
	) {
		// Optimized for most common case
		const lineA = mappingA.generated.line;
		const lineB = mappingB.generated.line;
		const columnA = mappingA.generated.column;
		const columnB = mappingB.generated.column;
		return (
			lineB > lineA ||
			(lineB === lineA && columnB >= columnA) ||
			___R$project$rome$$romejs$codec$source$map$util_ts$compareByGeneratedPositionsInflated(
				mappingA,
				mappingB,
			) <= 0
		);
	}

	/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a negligible overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
	class ___R$project$rome$$romejs$codec$source$map$MappingList_ts$default {
		constructor() {
			this.array = [];
			this.sorted = true;
			this.last = {
				generated: {
					index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
					line: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1Neg1,
					column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
				},
				// TODO: original: undefined
				original: {
					line: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1Neg1,
					column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
				},
				source: undefined,
				name: undefined,
			};
		}

		/**
   * Add the given source mapping.
   */
		add(mapping) {
			if (
				___R$$priv$project$rome$$romejs$codec$source$map$MappingList_ts$generatedPositionAfter(
					this.last,
					mapping,
				)
			) {
				this.last = mapping;
				this.array.push(mapping);
			} else {
				this.sorted = false;
				this.array.push(mapping);
			}
		}

		/**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
		toArray() {
			if (this.sorted === false) {
				this.array.sort(
					___R$project$rome$$romejs$codec$source$map$util_ts$compareByGeneratedPositionsInflated,
				);
				this.sorted = true;
			}
			return this.array;
		}
	}


  // project-rome/@romejs/codec-source-map/SourceMapConsumer.ts
function ___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$getParsedMappingKey(
		line,
		column,
	) {
		return String(line) + ":" + String(column);
	}



	class ___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$default {
		constructor(file, getMappings) {
			this.file = file;
			this._getMappings = getMappings;
			this.mappings = undefined;
		}

		static charIsMappingSeparator(str, index) {
			const c = str.charAt(index);
			return c === ";" || c === ",";
		}

		static fromJSON(sourceMap) {
			return new ___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$default(
				sourceMap.file,
				() =>
					___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$default.parseMappings(
						sourceMap,
					)
				,
			);
		}

		static fromJSONLazy(file, getSourceMap) {
			return new ___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$default(
				file,
				() =>
					___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$default.parseMappings(
						getSourceMap(),
					)
				,
			);
		}

		static parseMappings(sourceMap) {
			const rawStr = sourceMap.mappings;
			const map = new Map();

			let generatedLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Number1;
			let previousGeneratedColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
			let previousOriginalLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Number1;
			let previousOriginalColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
			let previousSource = 0;
			let previousName = 0;
			let length = rawStr.length;
			let index = 0;
			let cachedSegments = {};
			let value;

			while (index < length) {
				const char = rawStr[index];
				if (char === ";") {
					generatedLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
						generatedLine,
					);
					index++;
					previousGeneratedColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
				} else if (char === ",") {
					index++;
				} else {
					const mapping = {
						generated: {
							line: generatedLine,
							column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
						},
						original: {
							line: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
							column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
						},
						source: undefined,
						name: undefined,
					};

					// Because each offset is encoded relative to the previous one,
					// many segments often have the same encoding. We can exploit this
					// fact by caching the parsed variable length fields of each segment,
					// allowing us to avoid a second parse if we encounter the same
					// segment again.
					let end = index;
					for (; end < length; end++) {
						if (
							___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$default.charIsMappingSeparator(
								rawStr,
								end,
							)
						) {
							break;
						}
					}
					const str = rawStr.slice(index, end);

					let segment = cachedSegments[str];
					if (segment) {
						index += str.length;
					} else {
						segment = [];
						while (index < end) {
							[value, index] = ___R$project$rome$$romejs$codec$source$map$base64_ts$decodeVLQ(
								rawStr,
								index,
							);
							segment.push(value);
						}

						if (segment.length === 2) {
							throw new Error("Found a source, but no line and column");
						}

						if (segment.length === 3) {
							throw new Error("Found a source and line, but no column");
						}

						cachedSegments[str] = segment;
					}

					// Generated column
					mapping.generated.column = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
						previousGeneratedColumn,
						segment[0],
					);
					previousGeneratedColumn = mapping.generated.column;

					if (segment.length > 1) {
						// Original source
						mapping.source = sourceMap.sources[previousSource + segment[1]];
						previousSource += segment[1];

						// Original line
						const newOriginalLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							previousOriginalLine,
							segment[2],
						);
						previousOriginalLine = newOriginalLine;

						// Lines are stored 0-based
						mapping.original.line = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							newOriginalLine,
							1,
						);

						// Original column
						const newOriginalColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							previousOriginalColumn,
							segment[3],
						);
						mapping.original.column = newOriginalColumn;
						previousOriginalColumn = newOriginalColumn;

						if (segment.length > 4) {
							// Original name
							mapping.name = sourceMap.names[previousName + segment[4]];
							previousName += segment[4];
						}
					}

					map.set(
						___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$getParsedMappingKey(
							mapping.generated.line,
							mapping.generated.column,
						),
						mapping,
					);
				}
			}

			return map;
		}

		clearCache() {
			this.mappings = undefined;
		}

		getMappings() {
			if (this.mappings === undefined) {
				const mappings = this._getMappings();
				this.mappings = mappings;
				return mappings;
			} else {
				return this.mappings;
			}
		}

		approxOriginalPositionFor(line, column) {
			while (___R$project$rome$$romejs$ob1$index_ts$ob1Get0(column) >= 0) {
				const mapping = this.exactOriginalPositionFor(line, column);
				if (mapping === undefined) {
					column = ___R$project$rome$$romejs$ob1$index_ts$ob1Dec(column);
					continue;
				} else {
					return mapping;
				}
			}

			return undefined;
		}

		exactOriginalPositionFor(line, column) {
			const key = ___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$getParsedMappingKey(
				line,
				column,
			);
			const mapping = this.getMappings().get(key);
			if (mapping === undefined) {
				return undefined;
			}

			const source = mapping.source === undefined ? this.file : mapping.source;
			if (source === undefined) {
				throw new Error("Mapping provided unknown source");
			}

			return {
				found: true,
				source,
				line: mapping.original.line,
				column: mapping.original.column,
				name: mapping.name,
			};
		}
	}


  // project-rome/@romejs/codec-source-map/SourceMapGenerator.ts


	class ___R$project$rome$$romejs$codec$source$map$SourceMapGenerator_ts$default {
		constructor(args) {
			this.file = args.file;
			this.sourceRoot = args.sourceRoot;

			this.sourcesContents = new Map();
			this.map = undefined;
			this.sources = new ___R$project$rome$$romejs$codec$source$map$ArraySet_ts$default();
			this.names = new ___R$project$rome$$romejs$codec$source$map$ArraySet_ts$default();
			this.mappings = new ___R$project$rome$$romejs$codec$source$map$MappingList_ts$default();
			this.materializeCallbacks = [];
		}

		assertUnlocked() {
			if (this.map !== undefined) {
				throw new Error(
					"Source map has already been materialized, serialize() should be your final call",
				);
			}
		}

		addMaterializer(fn) {
			this.materializeCallbacks.push(fn);
		}

		/**
   * Add a single mapping from 'original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
		addMapping(mapping) {
			this.assertUnlocked();

			const {name, source} = mapping;

			this.validatePosition(
				"generated",
				mapping.generated.line,
				mapping.generated.column,
			);

			if (mapping.original) {
				this.validatePosition(
					"original",
					mapping.original.line,
					mapping.original.column,
				);
			}

			if (source !== undefined) {
				this.sources.add(source);
			}

			if (name !== undefined) {
				this.names.add(name);
			}

			this.mappings.add(mapping);
		}

		/**
   * Set the source content for a source file.
   */
		setSourceContent(source, sourceContent) {
			this.assertUnlocked();

			if (this.sourceRoot !== undefined) {
				source = ___R$project$rome$$romejs$codec$source$map$util_ts$toRelativeUrl(
					this.sourceRoot,
					source,
				);
			}

			if (sourceContent !== undefined) {
				// Add the source content to the _sourcesContents map.
				this.sourcesContents.set(source, sourceContent);
			} else {
				// Remove the source file from the _sourcesContents map.
				this.sourcesContents.delete(source);
			}
		}

		validatePosition(key, line, column) {
			if (___R$project$rome$$romejs$ob1$index_ts$ob1Get1(line) <= 0) {
				throw new Error(key + " line should be >= 1 but is " + line);
			}

			if (___R$project$rome$$romejs$ob1$index_ts$ob1Get0(column) < 0) {
				throw new Error(key + " column should be >= 0 but is " + column);
			}
		}

		/**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
		serializeMappings() {
			let previousGeneratedColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
			let previousGeneratedLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Number1;
			let previousOriginalColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
			let previousOriginalLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Number1;
			let previousName = 0;
			let previousSource = 0;
			let result = "";

			const mappings = this.mappings.toArray();
			for (let i = 0; i < mappings.length; i++) {
				const mapping = mappings[i];
				let next = "";

				if (mapping.generated.line !== previousGeneratedLine) {
					previousGeneratedColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
					while (mapping.generated.line !== previousGeneratedLine) {
						next += ";";
						previousGeneratedLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
							previousGeneratedLine,
						);
					}
				} else if (i > 0) {
					if (
						!___R$project$rome$$romejs$codec$source$map$util_ts$compareByGeneratedPositionsInflated(
							mapping,
							mappings[i - 1],
						)
					) {
						continue;
					}
					next += ",";
				}

				next += ___R$project$rome$$romejs$codec$source$map$base64_ts.encodeVLQ(
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						mapping.generated.column,
					) -
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						previousGeneratedColumn,
					),
				);
				previousGeneratedColumn = mapping.generated.column;

				if (mapping.source !== undefined) {
					const sourceIdx = this.sources.indexOf(mapping.source);
					next += ___R$project$rome$$romejs$codec$source$map$base64_ts.encodeVLQ(
						sourceIdx - previousSource,
					);
					previousSource = sourceIdx;

					if (mapping.original) {
						next += ___R$project$rome$$romejs$codec$source$map$base64_ts.encodeVLQ(
							___R$project$rome$$romejs$ob1$index_ts$ob1Get1(
								mapping.original.line,
							) -
							___R$project$rome$$romejs$ob1$index_ts$ob1Get1(
								previousOriginalLine,
							),
						);
						previousOriginalLine = mapping.original.line;

						next += ___R$project$rome$$romejs$codec$source$map$base64_ts.encodeVLQ(
							___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
								mapping.original.column,
							) -
							___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
								previousOriginalColumn,
							),
						);
						previousOriginalColumn = mapping.original.column;

						if (mapping.name !== undefined) {
							const nameIdx = this.names.indexOf(mapping.name);
							next += ___R$project$rome$$romejs$codec$source$map$base64_ts.encodeVLQ(
								nameIdx - previousName,
							);
							previousName = nameIdx;
						}
					}

					// TODO: else, assert mapping.name is undefined since it can't be encoded without an original position
				}

				// TODO: else, assert mapping.original is undefined since it can't be encoded without a source
				result += next;
			}

			return result;
		}

		generateSourcesContent(sources, sourceRoot) {
			return sources.map((source) => {
				if (sourceRoot !== undefined) {
					source = ___R$project$rome$$romejs$codec$source$map$util_ts$toRelativeUrl(
						sourceRoot,
						source,
					);
				}
				const content = this.sourcesContents.get(source);
				if (content === undefined) {
					throw new Error("Expected content");
				}
				return content;
			});
		}

		materialize() {
			for (const fn of this.materializeCallbacks) {
				fn();
			}
			this.materializeCallbacks = [];
		}

		/**
   * Externalize the source map.
   */
		serialize() {
			if (this.map !== undefined) {
				return this.map;
			}

			this.materialize();

			const sources = this.sources.toArray();
			this.map = {
				version: 3,
				file: this.file,
				names: this.names.toArray(),
				mappings: this.serializeMappings(),
				sourceRoot: this.sourceRoot,
				sources,
				sourcesContent: this.generateSourcesContent(sources, this.sourceRoot),
			};
			return this.map;
		}

		toComment() {
			const jsonMap = this.toJSON();
			const base64Map = new Buffer(jsonMap).toString("base64");
			const comment =
				"//# sourceMappingURL=data:application/json;charset=utf-8;base64," +
				base64Map;
			return comment;
		}

		toConsumer() {
			return new ___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$default(
				this.file,
				() => {
					const parsedMappings = new Map();

					for (const mapping of this.getMappings()) {
						parsedMappings.set(
							___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$getParsedMappingKey(
								mapping.generated.line,
								mapping.generated.column,
							),
							mapping,
						);
					}

					return parsedMappings;
				},
			);
		}

		getMappings() {
			this.materialize();
			return this.mappings.toArray();
		}

		toJSON() {
			return JSON.stringify(this.serialize());
		}
	}


  // project-rome/@romejs/codec-source-map/SourceMapConsumerCollection.ts
class ___R$project$rome$$romejs$codec$source$map$SourceMapConsumerCollection_ts$default {
		constructor() {
			this.maps = new Map();
		}

		hasAny() {
			return this.maps.size > 0;
		}

		has(file) {
			return file !== undefined && this.maps.has(file);
		}

		add(file, map) {
			this.maps.set(file, map);
		}

		get(file) {
			return this.maps.get(file);
		}

		normalizeResolved(source, line, column, loc) {
			if (loc === undefined) {
				return {
					found: false,
					source,
					line,
					column,
					name: undefined,
				};
			} else {
				return loc;
			}
		}

		assertApproxOriginalPositionFor(file, line, column) {
			return this.normalizeResolved(
				file,
				line,
				column,
				this.approxOriginalPositionFor(file, line, column),
			);
		}

		assertExactOriginalPositionFor(file, line, column) {
			return this.normalizeResolved(
				file,
				line,
				column,
				this.exactOriginalPositionFor(file, line, column),
			);
		}

		approxOriginalPositionFor(file, line, column) {
			const map = this.get(file);
			if (map === undefined) {
				return undefined;
			} else {
				return map.approxOriginalPositionFor(line, column);
			}
		}

		exactOriginalPositionFor(file, line, column) {
			const map = this.get(file);
			if (map === undefined) {
				return undefined;
			} else {
				return map.exactOriginalPositionFor(line, column);
			}
		}
	}


  // project-rome/@romejs/codec-source-map/types.ts















  // project-rome/@romejs/codec-source-map/index.ts



  // project-rome/@romejs/v8/types.ts
const ___R$project$rome$$romejs$v8$types_ts = {};
	const ___R$$priv$project$rome$$romejs$v8$types_ts$inspector = _dereq_(
		"inspector",
	);























  // project-rome/@romejs/v8/errors.ts
const ___R$project$rome$$romejs$v8$errors_ts = {
		get ERROR_FRAMES_PROP() {
			return ___R$project$rome$$romejs$v8$errors_ts$ERROR_FRAMES_PROP;
		},
		getErrorStructure: ___R$project$rome$$romejs$v8$errors_ts$getErrorStructure,
		getSourceLocationFromErrorFrame: ___R$project$rome$$romejs$v8$errors_ts$getSourceLocationFromErrorFrame,
	};
	Object.keys(___R$project$rome$$romejs$v8$types_ts).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$v8$errors_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$v8$types_ts[key];
				},
			},
		);
	});
	const ___R$project$rome$$romejs$v8$errors_ts$ERROR_FRAMES_PROP = Symbol();



	function ___R$project$rome$$romejs$v8$errors_ts$getErrorStructure(
		err,
		framesToShift = 0,
	) {
		let name = "Error";
		let message = "Unknown message";
		let stack = undefined;
		let frames = [];
		let looksLikeValidError = false;

		if (___R$project$rome$$romejs$typescript$helpers$index_ts$isPlainObject(err)) {
			if (typeof err.name === "string") {
				looksLikeValidError = true;
				name = err.name;
			}

			if (typeof err.message === "string") {
				looksLikeValidError = true;
				message = err.message;
			}

			if (typeof err.stack === "string") {
				looksLikeValidError = true;
				stack = err.stack;
			}

			if (
				Array.isArray(
					err[___R$project$rome$$romejs$v8$errors_ts$ERROR_FRAMES_PROP],
				)
			) {
				// @ts-ignore
				frames = err[___R$project$rome$$romejs$v8$errors_ts$ERROR_FRAMES_PROP];
			}
		}

		frames = frames.slice(framesToShift);

		if (!looksLikeValidError) {
			message = "Not an error instance: " + String(err);
		}

		return {
			name,
			message,
			stack,
			frames,
		};
	}

	function ___R$project$rome$$romejs$v8$errors_ts$getSourceLocationFromErrorFrame(
		frame,
	) {
		const pos = {
			index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1,
			line: frame.lineNumber === undefined
				? ___R$project$rome$$romejs$ob1$index_ts$ob1Number1
				: frame.lineNumber,
			column: frame.columnNumber === undefined
				? ___R$project$rome$$romejs$ob1$index_ts$ob1Number0
				: frame.columnNumber,
		};

		return {
			filename: frame.filename === undefined ? "unknown" : frame.filename,
			start: pos,
			end: pos,
		};
	}


  // project-rome/@romejs/v8/sourceMapManager.ts
let ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$inited = false;

	function ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$prepareStackTrace(
		err,
		frames,
	) {
		try {
			___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$addErrorFrames(
				err,
				frames,
			);
			return ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$buildStackString(
				err,
			);
		} catch (err2) {
			return (
				err.name +
				": " +
				err.message +
				"\n  Failed to generate stacktrace: " +
				err2.message
			);
		}
	}

	function ___R$project$rome$$romejs$v8$sourceMapManager_ts$initErrorHooks() {
		if (!___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$inited) {
			___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$inited = true;
			Error.prepareStackTrace = ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$prepareStackTrace;
		}
	}

	function ___R$project$rome$$romejs$v8$sourceMapManager_ts$teardown() {
		Error.prepareStackTrace = undefined;
	}

	function ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$buildStackString(
		err,
	) {
		const {frames} = ___R$project$rome$$romejs$v8$errors_ts$getErrorStructure(
			err,
		);
		const lines = [];

		lines.push(err.name + ": " + err.message);

		for (const frame of frames) {
			const {
				resolvedLocation,
				methodName,
				functionName,
				typeName,
				isNative,
				isAsync,
				isEval,
				isConstructor,
				filename,
				lineNumber,
				columnNumber,
			} = frame;
			const parts = [];

			if (isAsync) {
				parts.push("await");
			}

			if (isEval) {
				parts.push("eval");
			}

			if (isConstructor) {
				parts.push("new");
			}

			let name = "<anonymous>";
			if (functionName !== undefined) {
				name = functionName;
			}
			if (methodName !== undefined) {
				name = methodName;
			}
			if (typeName !== undefined) {
				parts.push(typeName + "." + name);
			} else {
				parts.push(name);
			}

			if (isNative) {
				parts.push("native");
			} else if (
				filename !== undefined &&
				lineNumber !== undefined &&
				columnNumber !== undefined
			) {
				parts.push("(" + filename + ":" + lineNumber + ":" + columnNumber + ")");
			}

			if (resolvedLocation === false) {
				parts.push("generated source location");
			}

			lines.push("  at " + parts.join(" "));
		}

		return lines.join("\n");
	}

	function ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$noNull(val) {
		if (val === null) {
			return undefined;
		} else {
			return val;
		}
	}

	function ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$addErrorFrames(
		err,
		frames,
	) {
		if (err[___R$project$rome$$romejs$v8$errors_ts$ERROR_FRAMES_PROP]) {
			return;
		}

		let builtFrames = frames.map((frameApi) => {
			const filename = frameApi.getFileName();
			const lineNumber = frameApi.getLineNumber();
			const columnNumber = frameApi.getColumnNumber();

			const frame = {
				typeName: ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$noNull(
					frameApi.getTypeName(),
				),
				functionName: ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$noNull(
					frameApi.getFunctionName(),
				),
				methodName: ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$noNull(
					frameApi.getMethodName(),
				),
				isTopLevel: frameApi.isToplevel(),
				isEval: frameApi.isEval(),
				isNative: frameApi.isNative(),
				isConstructor: frameApi.isConstructor(),
				// TODO frameApi.isAsync
				isAsync: false,
				resolvedLocation: true,
				filename: ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$noNull(
					filename,
				),
				lineNumber: lineNumber == null
					? undefined
					: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(lineNumber),
				// Rome expects 0-indexed columns, V8 provides 1-indexed
				columnNumber: columnNumber == null
					? undefined
					: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1To0(columnNumber),
			};

			if (
				frame.filename !== undefined &&
				frame.lineNumber !== undefined &&
				frame.columnNumber !== undefined
			) {
				const {found, line, column, source, name} = ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$sourceMaps.assertApproxOriginalPositionFor(
					frame.filename,
					frame.lineNumber,
					frame.columnNumber,
				);

				return Object.assign(
					{},
					frame,
					{
						functionName: frame.functionName === undefined
							? name
							: frame.functionName,
						methodName: frame.methodName === undefined ? name : frame.methodName,
						resolvedLocation: found,
						lineNumber: line,
						columnNumber: column,
						filename: source,
					},
				);
			} else {
				return frame;
			}
		});

		err[___R$project$rome$$romejs$v8$errors_ts$ERROR_FRAMES_PROP] = builtFrames;
	}

	const ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$sourceMaps = new ___R$project$rome$$romejs$codec$source$map$SourceMapConsumerCollection_ts$default();
	const ___R$project$rome$$romejs$v8$sourceMapManager_ts$default = ___R$$priv$project$rome$$romejs$v8$sourceMapManager_ts$sourceMaps;


  // project-rome/@romejs/v8/utils.ts
const ___R$project$rome$$romejs$v8$utils_ts = {
		hrTime: ___R$project$rome$$romejs$v8$utils_ts$hrTime,
		urlToFilename: ___R$project$rome$$romejs$v8$utils_ts$urlToFilename,
	};
	function ___R$project$rome$$romejs$v8$utils_ts$hrTime() {
		const hrtime = process.hrtime(); // [seconds, nanoseconds]
		const ts = hrtime[0] * 1000000 + Math.round(hrtime[1] / 1000); // microseconds
		return ts;
	}

	const ___R$$priv$project$rome$$romejs$v8$utils_ts$FILE_PROTOCOL = "file://";

	function ___R$project$rome$$romejs$v8$utils_ts$urlToFilename(url) {
		if (
			url.startsWith(___R$$priv$project$rome$$romejs$v8$utils_ts$FILE_PROTOCOL)
		) {
			return url.slice(
				___R$$priv$project$rome$$romejs$v8$utils_ts$FILE_PROTOCOL.length,
			);
		} else {
			return url;
		}
	}


  // project-rome/@romejs/v8/Profiler.ts
const ___R$$priv$project$rome$$romejs$v8$Profiler_ts$inspector = _dereq_(
		"inspector",
	);
	class ___R$project$rome$$romejs$v8$Profiler_ts$default {
		constructor() {
			this.session = undefined;
			this.memoryInterval = undefined;
			this.memorySamples = [];
		}

		async startProfiling(samplingInterval) {
			this.session = new ___R$$priv$project$rome$$romejs$v8$Profiler_ts$inspector.Session();
			this.session.connect();

			this.memoryInterval = setInterval(
				() => {
					const time = ___R$project$rome$$romejs$v8$utils_ts$hrTime();
					const size = process.memoryUsage().heapUsed;
					this.memorySamples.push([time, size]);
				},
				100,
			);

			await Promise.all([
				this.sendCommand(
					"Profiler.setSamplingInterval",
					{
						interval: samplingInterval,
					},
				),
				this.sendCommand("Profiler.enable"),
				this.sendCommand("Profiler.start"),
			]);
		}

		async sendCommand(method, params) {
			const {session} = this;
			if (session === undefined) {
				return Promise.reject(new Error("No current profiler session"));
			} else {
				return new Promise((resolve, reject) => {
					session.post(
						method,
						params,
						(err) => {
							if (err === null) {
								resolve();
							} else {
								reject(err);
							}
						},
					);
				});
			}
		}

		destroy() {
			const {session} = this;
			if (session !== undefined) {
				if (this.memoryInterval !== undefined) {
					clearInterval(this.memoryInterval);
				}
				this.memorySamples = [];
				session.disconnect();
			}
		}

		async stopProfiling() {
			const {session} = this;
			if (session === undefined) {
				return Promise.reject(new Error("No current profiler session"));
			}

			const {memorySamples} = this;

			const res = await new Promise((resolve, reject) => {
				session.post(
					"Profiler.stop",
					(err, params) => {
						if (err === null) {
							resolve(params);
						} else {
							reject(err);
						}
					},
				);
			});

			this.destroy();

			return {
				pid: process.pid,
				cpuProfile: res.profile,
				memorySamples,
			};
		}
	}


  // project-rome/@romejs/v8/Trace.ts
class ___R$project$rome$$romejs$v8$Trace_ts$default {
		constructor() {
			this.tid = 0;
			this.eventId = 0;
			this.events = [];
		}

		getEventId() {
			const id = this.eventId;
			this.eventId++;
			return id;
		}

		decodeProfileSourceMap(profile) {
			// This method mutates the profile for performance/ergonomics
			// Nothing else should be relying on this so it doesn't really matter
			for (const node of profile.cpuProfile.nodes) {
				const {callFrame} = node;

				// Call frame line numbers are 0-index while Rome is 1-indexed
				const resolved = ___R$project$rome$$romejs$v8$sourceMapManager_ts$default.approxOriginalPositionFor(
					___R$project$rome$$romejs$v8$utils_ts$urlToFilename(callFrame.url),
					___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0To1(
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
							callFrame.lineNumber,
						),
					),
					___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
						callFrame.columnNumber,
					),
				);
				if (resolved !== undefined) {
					callFrame.url = resolved.source;
					callFrame.lineNumber = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1To0(resolved.line),
					);
					callFrame.columnNumber = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						resolved.column,
					);

					if (resolved.name !== undefined) {
						callFrame.functionName = resolved.name;
					}
				}
			}
		}

		addProfile(name, profile) {
			this.decodeProfileSourceMap(profile);

			const {startTime, endTime} = profile.cpuProfile;

			const common = {
				pid: 1,
				tid: profile.pid,
			};

			this.events.push(
				Object.assign(
					{},
					common,
					{ts: 0, ph: "M", cat: "__metadata", name: "thread_name", args: {name}},
				),
			);

			this.events.push(
				Object.assign(
					{},
					common,
					{
						ph: "P",
						name: "CpuProfile",
						id: this.getEventId(),
						cat: "disabled-by-default-v8.cpu_profiler",
						ts: endTime,
						args: {
							data: {
								cpuProfile: profile.cpuProfile,
							},
						},
					},
				),
			);

			this.events.push(
				Object.assign(
					{},
					common,
					{
						ph: "X",
						name: "EvaluateScript",
						id: this.getEventId(),
						cat: "devtools.timeline",
						ts: startTime,
						dur: endTime - startTime,
						args: {
							data: {
								url: "rome.js",
								lineNumber: 1,
								columnNumber: 1,
								frame: "0xFFF",
							},
						},
					},
				),
			);

			for (const [time, size] of profile.memorySamples) {
				this.events.push(
					Object.assign(
						{},
						common,
						{
							ts: time,
							ph: "I",
							cat: "disabled-by-default-devtools.timeline",
							name: "UpdateCounters",
							args: {
								data: {
									jsHeapSizeUsed: size,
								},
							},
							s: "t",
						},
					),
				);
			}
		}

		build() {
			return this.events;
		}
	}


  // project-rome/@romejs/codec-json/types.ts

























  // project-rome/@romejs/codec-json/parse.ts
// Words can't start with a digit
	function ___R$$priv$project$rome$$romejs$codec$json$parse_ts$isWordStartChar(
		char,
	) {
		return (
			___R$project$rome$$romejs$parser$core$index_ts$isAlpha(char) ||
			char === "_" ||
			char === "$"
		);
	}

	// But a digit can appear inside of a word
	function ___R$$priv$project$rome$$romejs$codec$json$parse_ts$isWordChar(char) {
		return (
			___R$$priv$project$rome$$romejs$codec$json$parse_ts$isWordStartChar(char) ||
			___R$project$rome$$romejs$parser$core$index_ts$isDigit(char)
		);
	}

	// Check if an input string is a valid word, this is used by the stringifier to
	// determine if a property key should be quoted
	function ___R$project$rome$$romejs$codec$json$parse_ts$isValidWord(word) {
		if (
			word.length === 0 ||
			___R$$priv$project$rome$$romejs$codec$json$parse_ts$isWordStartChar(
				word[0],
			) === false
		) {
			return false;
		}

		for (const char of word) {
			if (
				___R$$priv$project$rome$$romejs$codec$json$parse_ts$isWordChar(char) ===
				false
			) {
				return false;
			}
		}

		return true;
	}

	// Check if a character is a part of a string, returning false for a newline or unescaped quote char
	function ___R$$priv$project$rome$$romejs$codec$json$parse_ts$isStringValueChar(
		char,
		index,
		input,
	) {
		if (char === "\n") {
			return false;
		}

		if (
			char === '"' &&
			!___R$project$rome$$romejs$string$utils$isEscaped_ts$isEscaped(
				index,
				input,
			)
		) {
			return false;
		}

		return true;
	}

	// Turn a path into a string key we can use
	function ___R$project$rome$$romejs$codec$json$parse_ts$toPathKey(parts) {
		// Right now this could conflict weirdly with properties with dots in them if they cause collisions
		// We have this method abstracted so we can make changes later if it's necessary (probably not worth it)
		return parts.join(".");
	}

	function ___R$$priv$project$rome$$romejs$codec$json$parse_ts$isntNewline(char) {
		return char !== "\n";
	}

	function ___R$$priv$project$rome$$romejs$codec$json$parse_ts$isntBlockCommentEnd(
		char,
		index,
		input,
	) {
		const nextChar = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) +
		1];
		return char !== "*" && nextChar !== "/";
	}

	// Used for Number token validation, allow underscore as a separatore
	function ___R$$priv$project$rome$$romejs$codec$json$parse_ts$isNumberChar(
		char,
	) {
		return (
			___R$project$rome$$romejs$parser$core$index_ts$isDigit(char) ||
			char === "_"
		);
	}



	const ___R$project$rome$$romejs$codec$json$parse_ts$createJSONParser = ___R$project$rome$$romejs$parser$core$index_ts$createParser((
		ParserCore,
	) =>
		(() => {
			class JSONParser extends ParserCore {
				constructor(opts) {
					super(
						Object.assign({}, opts, {retainCarriageReturn: true}),
						"parse/json",
					);

					this.options = opts;
					this.ignoreWhitespaceTokens = true;

					this.hasExtensions =
						this.path !== undefined &&
						this.path.getBasename().endsWith(".rjson");

					this.pathKeys = [];
					this.paths = new Map();
					this.pathToComments = new Map();
					this.consumeDiagnosticCategory =
						opts.consumeDiagnosticCategory === undefined
							? "parse/json"
							: opts.consumeDiagnosticCategory;
				}

				getPathInfo(path) {
					return this.paths.get(path.join("."));
				}

				setComments(pathComments) {
					const key = this.pathKeys.join(".");

					const existing = this.pathToComments.get(key);
					if (existing === undefined) {
						this.pathToComments.set(key, pathComments);
					} else {
						this.pathToComments.set(
							key,
							{
								inner: [...existing.inner, ...pathComments.inner],
								outer: [...existing.outer, ...pathComments.outer],
							},
						);
					}
				}

				setPath(info) {
					this.paths.set(this.pathKeys.join("."), info);
					this.pathKeys.pop();
				}

				tokenize(index, input) {
					const nextChar = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						index,
					) + 1];
					const char = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						index,
					)];

					// Line comment
					if (char === "/" && nextChar === "/") {
						const commentValueIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							index,
							2,
						);
						const [value] = this.readInputFrom(
							commentValueIndex,
							___R$$priv$project$rome$$romejs$codec$json$parse_ts$isntNewline,
						);
						// (comment content start + comment content length)
						return this.finishValueToken(
							"LineComment",
							value,
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(
								commentValueIndex,
								value.length,
							),
						);
					}

					// BlockComment
					if (char === "/" && nextChar === "*") {
						const commentValueIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							index,
							2,
						);
						const [value] = this.readInputFrom(
							commentValueIndex,
							___R$$priv$project$rome$$romejs$codec$json$parse_ts$isntBlockCommentEnd,
						);

						// (comment content start + comment content length + 2 characters for comment end)
						const endIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(
								commentValueIndex,
								value.length,
							),
							2,
						);

						// Ensure the comment is closed
						if (
							this.input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
								endIndex,
							) - 2] !== "*" ||
							this.input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
								endIndex,
							) - 1] !== "/"
						) {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.UNCLOSED_BLOCK_COMMENT,
								start: this.getPositionFromIndex(endIndex),
							});
						}

						return this.finishValueToken("BlockComment", value, endIndex);
					}

					// Single character token starters
					switch (char) {
						case '"': {
							const [value] = this.readInputFrom(
								___R$project$rome$$romejs$ob1$index_ts$ob1Inc(index),
								___R$$priv$project$rome$$romejs$codec$json$parse_ts$isStringValueChar,
							);

							// Check for closed string (index is the current token index + string length + closing quote + 1 for the end char)
							const end = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
								___R$project$rome$$romejs$ob1$index_ts$ob1Add(
									index,
									value.length,
								),
								2,
							);
							if (
								input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(end) - 1] !==
								'"'
							) {
								throw this.unexpected({
									description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.UNCLOSED_STRING,
									start: this.getPositionFromIndex(end),
								});
							}

							// Don't allow newlines in JSON
							for (let strIndex = 0; strIndex < value.length; strIndex++) {
								const char = value[strIndex];

								if (char === "\n") {
									throw this.unexpected({
										description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.STRING_NEWLINES_IN_JSON,
										start: this.getPositionFromIndex(
											___R$project$rome$$romejs$ob1$index_ts$ob1Add(
												index,
												strIndex,
											),
										),
									});
								}
							}

							// Unescape the string
							const unescaped = ___R$project$rome$$romejs$string$escape$unescapeString_ts$default(
								value,
								(metadata, strIndex) => {
									throw this.unexpected({
										description: metadata,
										start: this.getPositionFromIndex(
											___R$project$rome$$romejs$ob1$index_ts$ob1Add(
												index,
												strIndex,
											),
										),
									});
								},
							);

							return this.finishValueToken("String", unescaped, end);
						}

						case "'":
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.SINGLE_QUOTE_USAGE,
								start: this.getPositionFromIndex(index),
							});

						case "/":
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.REGEX_IN_JSON,
								start: this.getPositionFromIndex(index),
							});

						case ",":
							return this.finishToken("Comma");

						case ".":
							return this.finishToken("Dot");

						case "-":
							return this.finishToken("Minus");

						case "+":
							return this.finishToken("Plus");

						case ":":
							return this.finishToken("Colon");

						case "{":
							return this.finishToken("BraceOpen");

						case "}":
							return this.finishToken("BraceClose");

						case "[":
							return this.finishToken("BracketOpen");

						case "]":
							return this.finishToken("BracketClose");
					}

					// Numbers
					if (___R$project$rome$$romejs$parser$core$index_ts$isDigit(char)) {
						const value = this.removeUnderscores(
							index,
							this.readInputFrom(
								index,
								___R$$priv$project$rome$$romejs$codec$json$parse_ts$isNumberChar,
							)[0],
						);
						const num = Number(value);
						return this.finishValueToken(
							"Number",
							num,
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, value.length),
						);
					}

					// Word - boolean, undefined etc
					if (
						___R$$priv$project$rome$$romejs$codec$json$parse_ts$isWordStartChar(
							char,
						)
					) {
						const [value] = this.readInputFrom(
							index,
							___R$$priv$project$rome$$romejs$codec$json$parse_ts$isWordChar,
						);
						return this.finishValueToken(
							"Word",
							value,
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, value.length),
						);
					}

					// Unknown character
					return undefined;
				}

				parseObject(firstKeyStart, firstKey) {
					const obj = {};

					let innerComments = [];
					let isFirstProp = true;

					// These are comments that the next property should take in case the previous accidently took them
					let nextLeadingComments;

					do {
						if (this.matchToken("BraceClose")) {
							break;
						}

						// Eat all the comments that appeared before this property, it's the most common and natural place to put them,

						// and is where we'll print all comments for a property.
						let leadingComments = this.eatComments();

						// Take any leading comments that were left by the previous property
						if (nextLeadingComments !== undefined) {
							leadingComments = [...nextLeadingComments, ...leadingComments];
							nextLeadingComments = undefined;
						}

						// Throw a meainingful error for redundant commas
						if (this.matchToken("Comma")) {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.REDUNDANT_COMMA,
							});
						}

						// If there's no property key indicator then delegate any comments we have to object
						const hasKey = isFirstProp && firstKey !== undefined;
						if (
							!hasKey &&
							!this.matchToken("String") &&
							!this.matchToken("Word")
						) {
							innerComments = [...innerComments, ...leadingComments];
							break;
						}

						const keyStart =
							isFirstProp && firstKeyStart !== undefined
								? firstKeyStart
								: this.getPosition();

						// Parse the property key
						let key;
						if (isFirstProp && firstKey !== undefined) {
							// If this is the first property and we've been given a property key then use it instead
							key = firstKey;
						} else {
							key = this.parsePropertyKey();
						}
						isFirstProp = false;

						const keyEnd = this.getPosition();
						this.expectToken("Colon");

						// Having comments before the value is a really weird place to put them, but we'll handle it

						// anyway to avoid throwing a parser error. When stringified, the comments will all be before

						// the property.
						const leadingValueComments = this.eatComments();

						this.pathKeys.push(key);

						// Parse the value.
						const valueStart = this.getPosition();
						const value = this.parseExpression();
						const valueEnd = this.getLastEndPosition();

						// Eat the comments after the expression and associate the comments with them
						let trailingValueComments = this.eatComments();

						// If the next token isn't a comma or closing brace then we've just stolen

						// the leading comments of the next property
						if (!this.matchToken("Comma") && !this.matchToken("BraceClose")) {
							nextLeadingComments = trailingValueComments;
							trailingValueComments = [];
						}

						this.setComments({
							inner: [],
							outer: [
								...leadingComments,
								...leadingValueComments,
								...trailingValueComments,
							],
						});

						this.setPath({
							keyStart,
							keyEnd,
							valueStart,
							valueEnd,
							originalValue: value,
						});

						// Set the object correctly, accounting for JS weirdness
						if (key === "__proto__") {
							// Need to use defineProperty to avoid triggering the Object.prototype.__proto__ setter
							Object.defineProperty(
								obj,
								"__proto__",
								{
									value,
									configurable: true,
									writable: true,
									enumerable: true,
								},
							);
						} else {
							obj[key] = value;
						}
					} while (this.eatPropertySeparator());

					// Take any loose leading comments
					if (nextLeadingComments !== undefined) {
						innerComments = [...innerComments, ...nextLeadingComments];
					}

					// If we were passed a first key then this was an implicit object so there's no end token
					if (firstKey === undefined) {
						this.expectToken("BraceClose");
					}

					this.setComments({
						inner: innerComments,
						outer: [],
					});

					return obj;
				}

				// Remove underscores from 'a string, this is used for numeric separators eg. 100000
				removeUnderscores(index, raw) {
					let str = "";

					for (let i = 0; i < raw.length; i++) {
						const char = raw[i];

						if (char === "_") {
							// Don't allow separators in JSON
							if (!this.hasExtensions) {
								throw this.unexpected({
									description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.NUMERIC_SEPARATORS_IN_JSON,
									start: this.getPositionFromIndex(
										___R$project$rome$$romejs$ob1$index_ts$ob1Inc(index),
									),
								});
							}
						} else {
							str += char;
						}
					}

					return str;
				}

				eatComments() {
					const comments = [];

					while (true) {
						const token = this.getToken();

						if (token.type === "LineComment") {
							comments.push({
								type: "LineComment",
								value: token.value,
							});
						} else if (token.type === "BlockComment") {
							comments.push({
								type: "BlockComment",
								value: token.value,
							});
						} else {
							break;
						}

						// Comments aren't allowed in regular JSON
						if (!this.hasExtensions) {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.COMMENTS_IN_JSON,
							});
						}

						this.nextToken();
					}

					return comments;
				}

				parseArray() {
					this.expectToken("BracketOpen");

					const arr = [];
					let innerComments = [];
					let i = 0;

					do {
						if (this.matchToken("BracketClose")) {
							break;
						}

						// Eat all the comments before an element
						const leadingComments = this.eatComments();

						if (this.matchToken("Comma")) {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.REDUNDANT_COMMA,
							});
						}

						// If we're at the end of the array then associate these comments with the array
						if (this.matchToken("BracketClose")) {
							innerComments = [...innerComments, ...leadingComments];
							break;
						}

						const start = this.getPosition();
						this.pathKeys.push(i);
						i++;

						// Parse the value
						const item = this.parseExpression();
						arr.push(item);
						const end = this.getLastEndPosition();

						// Trailing comments are really weird, but let's handle them just like object properties
						const trailingComments = this.eatComments();

						this.setComments({
							outer: [...leadingComments, ...trailingComments],
							inner: [],
						});

						this.setPath({
							originalValue: item,
							keyStart: start,
							keyEnd: end,
							valueStart: start,
							valueEnd: end,
						});

						// Have a meaningful error message when an object is incorrectly using brackets: ["foo": "bar"]
						if (this.matchToken("Colon")) {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.MISTAKEN_ARRAY_IDENTITY,
							});
						}
					} while (this.eatPropertySeparator());

					this.expectToken("BracketClose");

					this.setComments({
						inner: innerComments,
						outer: [],
					});

					return arr;
				}

				// Check if the current token is a property separator and eat it if necessary
				eatPropertySeparator() {
					const token = this.getToken();

					// Implicit commas are only allowed in rjson
					if (this.hasExtensions) {
						// Eat the token, don't care if we're in RJSON
						if (token.type === "Comma") {
							this.nextToken();
						}

						// An object or array close is an instant failure

						// Doesn't matter what we're parsing since the subsequent tokens will be validated
						if (token.type === "BraceClose" || token.type === "BracketClose") {
							return false;
						}

						return true;
					} else {
						if (token.type !== "Comma") {
							return false;
						}

						// Make sure this isn't a trailing comma
						const lookahead = this.lookaheadToken();
						if (
							lookahead.type === "BraceClose" ||
							lookahead.type === "BracketClose"
						) {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.TRAILING_COMMA_IN_JSON,
							});
						}

						this.nextToken();
						return true;
					}
				}

				parseWord(isStart) {
					const start = this.getPosition();
					const token = this.expectToken("Word");

					switch (token.value) {
						case "true":
							return true;

						case "false":
							return false;

						case "null":
							return null;

						case "undefined":
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.UNDEFINED_IN_JSON,
							});
					}

					if (isStart && this.matchToken("Colon")) {
						if (this.hasExtensions) {
							return this.parseObject(start, token.value);
						} else {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.IMPLICIT_OBJECT_IN_JSON,
							});
						}
					}

					throw this.unexpected({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.UNKNOWN_WORD_IN_JSON(
							token.value,
						),
					});
				}

				parseNumber() {
					const isNegative = this.eatToken("Minus") !== undefined;

					// Get a string of the current number that we'll parse later
					const token = this.expectToken("Number");
					let value = String(token.value);

					// Decimals
					if (this.eatToken("Dot")) {
						value += ".";

						const decimal = this.expectToken("Number");
						value += String(decimal.value);
					}

					// Scientific notation
					const nextToken = this.getToken();
					if (
						nextToken.type === "Word" &&
						(nextToken.value === "e" || nextToken.value === "E")
					) {
						value += "e";

						// Operator
						const operator = this.nextToken();
						if (operator.type === "Minus") {
							value += "-";
						} else if (operator.type === "Plus") {
							value += "+";
						} else {
							throw this.unexpected();
						}

						// Factor
						this.nextToken();
						const factor = this.expectToken("Number");
						value += String(factor.value);
					}

					// BigInt
					const nextToken2 = this.getToken();
					if (nextToken2.type === "Word" && nextToken2.value === "n") {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.BIGINT_IN_JSON,
						});
					}

					// Turn the string into an actual number
					let num = Number(value);
					if (isNegative) {
						num = -num;
					}
					return num;
				}

				parsePropertyKey() {
					const token = this.getToken();

					switch (token.type) {
						case "String": {
							this.nextToken();
							return token.value;
						}

						case "Word":
							if (this.hasExtensions) {
								this.nextToken();
								return token.value;
							} else {
								throw this.unexpected({
									description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.PROPERTY_KEY_UNQUOTED_IN_JSON,
								});
							}

						default:
							throw this.unexpected();
					}
				}

				parseString(isStart) {
					const start = this.getPosition();
					const token = this.expectToken("String");

					if (isStart && this.nextToken().type === "Colon") {
						if (this.hasExtensions) {
							return this.parseObject(start, token.value);
						} else {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.IMPLICIT_OBJECT_IN_JSON,
							});
						}
					} else {
						return token.value;
					}
				}

				parseExpression(isStart = false) {
					const token = this.getToken();

					switch (token.type) {
						case "String":
							return this.parseString(isStart);

						case "Minus":
						case "Number":
							return this.parseNumber();

						case "Word":
							return this.parseWord(isStart);

						case "BracketOpen":
							return this.parseArray();

						case "BraceOpen": {
							this.nextToken();
							return this.parseObject();
						}

						default:
							throw this.unexpected();
					}
				}

				parseEntry() {
					if (this.matchToken("EOF")) {
						if (this.hasExtensions) {
							// If we're in RJSON mode then an empty input is an implicit object
							return {};
						} else {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JSON.EMPTY_INPUT_IN_JSON,
							});
						}
					} else {
						return this.parseExpression(true);
					}
				}

				parse() {
					let expectSyntaxError = false;

					if (!this.hasExtensions) {
						// If we're in regular JSON, try the native JSON.parse
						try {
							const value = JSON.parse(this.input);

							// Lazy parse when we need location information
							let context;
							const getContext = () => {
								if (context === undefined) {
									const res = this._parse();
									context = res.context;
									return res.context;
								} else {
									return context;
								}
							};

							return {
								context: {
									category: this.consumeDiagnosticCategory,
									normalizeKey(path) {
										return getContext().normalizeKey(path);
									},
									getOriginalValue(path) {
										return getContext().getOriginalValue(path);
									},
									getDiagnosticPointer(keys, target) {
										return getContext().getDiagnosticPointer(keys, target);
									},
								},
								value,
							};
						} catch (err) {
							// On syntax errors we'll fall back to our parser which is slower, but produces more meaningful errors
							if (err instanceof SyntaxError) {
								expectSyntaxError = true;
							} else {
								throw err;
							}
						}
					}

					const res = this._parse();

					if (expectSyntaxError) {
						throw new Error(
							"JSON.parse failed but our custom JSON parser was successful... That doesn't smell right",
						);
					}

					return res;
				}

				_parse() {
					const leadingComments = this.eatComments();

					const expr = this.parseEntry();

					const trailingComments = this.eatComments();
					this.setComments({
						inner: [],
						outer: [...leadingComments, ...trailingComments],
					});

					this.finalize();

					const context = {
						category: this.consumeDiagnosticCategory,
						normalizeKey: (key) => key,
						getDiagnosticPointer: (keys, target) => {
							const info = this.getPathInfo(keys);
							if (info === undefined) {
								return {
									filename: this.filename,
								};
							}

							let start = info.keyStart;
							let end = info.valueEnd;

							if (target === "key") {
								end = info.keyEnd;
							}

							if (target === "value" || target === "inner-value") {
								start = info.valueStart;
							}

							let loc = {
								filename: this.filename,
								start,
								end,
							};

							if (target === "inner-value") {
								const originalValue = context.getOriginalValue(keys);

								// Remove quote marks for strings
								if (typeof originalValue === "string") {
									loc = Object.assign(
										{},
										loc,
										{
											start: Object.assign(
												{},
												loc.start,
												{
													column: ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
														loc.start.column,
														1,
													),
												},
											),
											end: Object.assign(
												{},
												loc.end,
												{
													column: ___R$project$rome$$romejs$ob1$index_ts$ob1Sub(
														loc.end.column,
														1,
													),
												},
											),
										},
									);
								}
							}

							return Object.assign(
								{language: "json"},
								loc,
								{mtime: this.mtime, sourceText: undefined},
							);
						},
						getOriginalValue: (keys) => {
							const info = this.getPathInfo(keys);
							if (info !== undefined) {
								return info.originalValue;
							}
						},
					};

					return {
						value: expr,
						context,
					};
				}
			}
			return JSONParser;
		})()
	);


  // project-rome/@romejs/consume/types.ts
const ___R$project$rome$$romejs$consume$types_ts = {};





























  // project-rome/@romejs/js-ast-utils/assertMultipleNodes.ts
function ___R$project$rome$$romejs$js$ast$utils$assertMultipleNodes_ts$default(
		result,
	) {
		if (Array.isArray(result)) {
			return result;
		} else if (result === undefined) {
			return [];
		} else if (typeof result === "symbol") {
			throw new Error("No symbols expected here");
		} else {
			return [result];
		}
	}


  // project-rome/@romejs/js-ast-utils/assertSingleNode.ts
function ___R$project$rome$$romejs$js$ast$utils$assertSingleNode_ts$default(
		result,
	) {
		if (Array.isArray(result)) {
			if (result.length !== 1) {
				throw new Error(
					"Expected node list length of 1 but got " + result.length,
				);
			}
			return result[0];
		} else if (result === undefined) {
			throw new Error("Expected node or node list but got null");
		} else if (typeof result === "symbol") {
			throw new Error("No symbols expected here");
		} else {
			return result;
		}
	}


  // project-rome/@romejs/js-ast-utils/assertSingleOrMultipleNodes.ts
function ___R$project$rome$$romejs$js$ast$utils$assertSingleOrMultipleNodes_ts$default(
		result,
	) {
		if (result === undefined) {
			throw new Error("Expected node or node list but got null");
		} else if (typeof result === "symbol") {
			throw new Error("No symbols expected here");
		} else {
			return result;
		}
	}


  // project-rome/@romejs/js-ast-utils/isIdentifierish.ts
function ___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(node) {
		return (
			node.type === "JSIdentifier" ||
			node.type === "JSXIdentifier" ||
			node.type === "JSXReferenceIdentifier" ||
			node.type === "JSBindingIdentifier" ||
			node.type === "JSAssignmentIdentifier" ||
			node.type === "JSReferenceIdentifier"
		);
	}


  // project-rome/@romejs/js-ast-utils/getNodeReferenceParts.ts




	const ___R$$priv$project$rome$$romejs$js$ast$utils$getNodeReferenceParts_ts$cache = new WeakMap();

	const ___R$$priv$project$rome$$romejs$js$ast$utils$getNodeReferenceParts_ts$EMPTY = {
		bailed: true,
		parts: [],
	};

	function ___R$project$rome$$romejs$js$ast$utils$getNodeReferenceParts_ts$default(
		node,
	) {
		if (node === undefined) {
			return ___R$$priv$project$rome$$romejs$js$ast$utils$getNodeReferenceParts_ts$EMPTY;
		}

		const cached = ___R$$priv$project$rome$$romejs$js$ast$utils$getNodeReferenceParts_ts$cache.get(
			node,
		);
		if (cached !== undefined) {
			return cached;
		}

		const parts = [];

		function add(node) {
			if (
				___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(node)
			) {
				parts.push({node, value: node.name});
				return false;
			} else if (node.type === "JSThisExpression") {
				parts.push({node, value: "this"});
				return false;
			} else if (node.type === "JSStringLiteral") {
				parts.push({node, value: node.value});
				return false;
			} else if (node.type === "JSMetaProperty") {
				parts.push({node, value: node.meta.name});
				parts.push({node, value: node.property.name});
				return false;
			} else if (node.type === "JSMemberExpression") {
				const stop = add(node.object);
				if (stop) {
					return true;
				} else {
					return add(node.property);
				}
			} else if (
				node.type === "JSComputedMemberProperty" &&
				node.value.type === "JSStringLiteral"
			) {
				return add(node.value);
			} else if (node.type === "JSStaticMemberProperty") {
				return add(node.value);
			} else {
				return true;
			}
		}

		const bailed = add(node);
		const result = {bailed, parts};
		___R$$priv$project$rome$$romejs$js$ast$utils$getNodeReferenceParts_ts$cache.set(
			node,
			result,
		);
		return result;
	}


  // project-rome/@romejs/js-ast-utils/doesNodeMatchPattern.ts
const ___R$$priv$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$splitCache = new Map();



	function ___R$$priv$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$split(
		str,
	) {
		const cached = ___R$$priv$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$splitCache.get(
			str,
		);
		if (cached !== undefined) {
			return cached;
		}

		const parts = str.split(".");

		let hasDoubleStar = false;
		for (const part of parts) {
			if (part === "**") {
				hasDoubleStar = true;
				break;
			}
		}

		const result = {parts, hasDoubleStar};
		___R$$priv$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$splitCache.set(
			str,
			result,
		);
		return result;
	}

	function ___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
		node,
		match,
	) {
		if (node === undefined) {
			return false;
		}

		// Not a member expression
		if (
			node.type !== "JSMemberExpression" &&
			!___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(node)
		) {
			return false;
		}

		const {parts: expectedParts, hasDoubleStar} = ___R$$priv$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$split(
			match,
		);

		// Fast path for single part pattern matching
		if (expectedParts.length === 1 && expectedParts[0] !== "*" && !hasDoubleStar) {
			return (
				___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(node) &&
				node.name === expectedParts[0]
			);
		}

		const {bailed, parts: actualParts} = ___R$project$rome$$romejs$js$ast$utils$getNodeReferenceParts_ts$default(
			node,
		);

		// Bailed will be true if we were unable to derive a name for one of the parts
		if (bailed && !hasDoubleStar) {
			return false;
		}

		// If there's less parts than the amount we expect then it's never going to match
		if (actualParts.length < expectedParts.length) {
			return false;
		}

		// I there's more parts than we expect then it's never going to match either
		if (!hasDoubleStar && actualParts.length > expectedParts.length) {
			return false;
		}

		let nextActualIndex = 0;
		let nextExpectedIndex = 0;

		// Loop over the parts we received and match them
		while (nextActualIndex < actualParts.length) {
			// If we have no more expected parts then we can't possibly match it
			if (nextActualIndex >= expectedParts.length) {
				return false;
			}

			const actual = actualParts[nextActualIndex].value;
			nextActualIndex++;

			const expected = expectedParts[nextExpectedIndex];
			nextExpectedIndex++;

			// A star part can accept anything
			if (expected === "*") {
				continue;
			}

			if (expected === "**") {
				// Ran out of matches but we've accepted the current part
				if (nextExpectedIndex >= expectedParts.length) {
					return true;
				}

				const next = expectedParts[nextExpectedIndex];
				nextExpectedIndex++;

				if (next === "*" || next === "**") {
					throw new Error(
						"The next expected part was " +
						next +
						" but this isn't allowed since we're processing a double star",
					);
				}

				let found = false;

				// Eat as many parts until we find the next expected part
				while (nextActualIndex < actualParts.length) {
					const actual = actualParts[nextActualIndex].value;
					nextActualIndex++;
					if (actual === next) {
						found = true;
						break;
					}
				}

				if (found) {
					continue;
				} else {
					return false;
				}
			}

			if (expected !== actual) {
				return false;
			}
		}

		return true;
	}


  // project-rome/@romejs/ast/js/utils.ts
const ___R$project$rome$$romejs$ast$js$utils_ts$bindingKeys = new Map();
	const ___R$project$rome$$romejs$ast$js$utils_ts$visitorKeys = new Map();
	const ___R$project$rome$$romejs$ast$js$utils_ts$nodeNames = new Set();













	function ___R$$priv$project$rome$$romejs$ast$js$utils_ts$declareBuilder(
		type,
		opts,
	) {
		___R$project$rome$$romejs$ast$js$utils_ts$nodeNames.add(type);

		if (opts.visitorKeys !== undefined) {
			___R$project$rome$$romejs$ast$js$utils_ts$visitorKeys.set(
				type,
				Object.keys(opts.visitorKeys),
			);
		}

		if (opts.bindingKeys !== undefined) {
			___R$project$rome$$romejs$ast$js$utils_ts$bindingKeys.set(
				type,
				Object.keys(opts.bindingKeys),
			);
		}
	}

	// TODO only allow this method to be called on a node with only one required property
	function ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		type,
		quickKey,
		opts,
	) {
		___R$$priv$project$rome$$romejs$ast$js$utils_ts$declareBuilder(type, opts);

		return new ___R$$priv$project$rome$$romejs$ast$js$utils_ts$QuickBuilder(
			type,
			opts.visitorKeys,
			quickKey,
		);
	}

	function ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(type, opts) {
		___R$$priv$project$rome$$romejs$ast$js$utils_ts$declareBuilder(type, opts);

		return new ___R$$priv$project$rome$$romejs$ast$js$utils_ts$Builder(
			type,
			opts.visitorKeys,
		);
	}

	class ___R$$priv$project$rome$$romejs$ast$js$utils_ts$Builder {
		constructor(type, visitorKeys) {
			this.type = type;
			this.visitorKeys = visitorKeys;
		}

		create(opts, inheritNode) {
			// @ts-ignore
			return Object.assign(
				{
					loc: inheritNode === undefined
						? undefined
						: ___R$project$rome$$romejs$js$ast$utils$inheritLoc_ts$default(
								inheritNode,
							),
				},
				opts,
				{type: this.type},
			);
		}

		is(node) {
			return node !== undefined && node.type === this.type;
		}

		normalize(node) {
			if (this.is(node)) {
				return node;
			} else {
				return undefined;
			}
		}

		assert(res) {
			if (res === undefined) {
				throw new Error("Expected " + this.type + " Node but got undefined");
			}

			const node = ___R$project$rome$$romejs$js$ast$utils$assertSingleNode_ts$default(
				res,
			);

			if (node.type !== this.type) {
				throw new Error("Expected " + this.type + " Node but got " + node.type);
			}

			// @ts-ignore
			return node;
		}
	}

	class ___R$$priv$project$rome$$romejs$ast$js$utils_ts$QuickBuilder
		extends ___R$$priv$project$rome$$romejs$ast$js$utils_ts$Builder {
		constructor(type, visitorKeys, quickKey) {
			super(type, visitorKeys);
			this.quickKey = quickKey;
		}

		quick(arg, opts, inheritNode) {
			const node = (Object.assign({}, opts, {[this.quickKey]: arg}));

			return this.create(node, inheritNode);
		}
	}


  // project-rome/@romejs/ast/js/base.ts
const ___R$project$rome$$romejs$ast$js$base_ts = {};



  // project-rome/@romejs/ast/js/constants.ts
const ___R$project$rome$$romejs$ast$js$constants_ts = {};













  // project-rome/@romejs/ast/js/unions.ts
const ___R$project$rome$$romejs$ast$js$unions_ts = {};











































































  // project-rome/@romejs/ast/js/index.ts
const ___R$project$rome$$romejs$ast$js$index_ts = {
		get bindingKeys() {
			return ___R$project$rome$$romejs$ast$js$utils_ts$bindingKeys;
		},
		get nodeNames() {
			return ___R$project$rome$$romejs$ast$js$utils_ts$nodeNames;
		},
		get visitorKeys() {
			return ___R$project$rome$$romejs$ast$js$utils_ts$visitorKeys;
		},
	};
	Object.keys(___R$project$rome$$romejs$ast$js$base_ts).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$js$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$base_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$constants_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$js$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$constants_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$unions_ts).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$js$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$unions_ts[key];
				},
			},
		);
	});


  // project-rome/@romejs/ast/unions.ts
const ___R$project$rome$$romejs$ast$unions_ts = {};



  // project-rome/@romejs/ast/js/temp/JSAmbiguousFlowTypeCastExpression.ts
const ___R$project$rome$$romejs$ast$js$temp$JSAmbiguousFlowTypeCastExpression_ts = {
		get jsAmbiguousFlowTypeCastExpression() {
			return ___R$project$rome$$romejs$ast$js$temp$JSAmbiguousFlowTypeCastExpression_ts$jsAmbiguousFlowTypeCastExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$temp$JSAmbiguousFlowTypeCastExpression_ts$jsAmbiguousFlowTypeCastExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSAmbiguousFlowTypeCastExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSArrayExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSArrayExpression_ts = {
		get jsArrayExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSArrayExpression_ts$jsArrayExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSArrayExpression_ts$jsArrayExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSArrayExpression",
		"elements",
		{
			bindingKeys: {},
			visitorKeys: {
				elements: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSArrayHole.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSArrayHole_ts = {
		get jsArrayHole() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSArrayHole_ts$jsArrayHole;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSArrayHole_ts$jsArrayHole = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"ArrayHole",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSArrowFunctionExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSArrowFunctionExpression_ts = {
		get jsArrowFunctionExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSArrowFunctionExpression_ts$jsArrowFunctionExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSArrowFunctionExpression_ts$jsArrowFunctionExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSArrowFunctionExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				head: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSAssignmentArrayPattern.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentArrayPattern_ts = {
		get jsAssignmentArrayPattern() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentArrayPattern_ts$jsAssignmentArrayPattern;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentArrayPattern_ts$jsAssignmentArrayPattern = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSAssignmentArrayPattern",
		{
			bindingKeys: {},
			visitorKeys: {
				elements: true,
				rest: true,
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSAssignmentAssignmentPattern.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentAssignmentPattern_ts = {
		get jsAssignmentAssignmentPattern() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentAssignmentPattern_ts$jsAssignmentAssignmentPattern;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentAssignmentPattern_ts$jsAssignmentAssignmentPattern = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSAssignmentAssignmentPattern",
		{
			bindingKeys: {},
			visitorKeys: {
				left: true,
				right: true,
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSAssignmentExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts = {
		get jsAssignmentExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts$jsAssignmentExpression;
		},
	};




	const ___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts$jsAssignmentExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSAssignmentExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				left: true,
				right: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSAssignmentIdentifier.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentIdentifier_ts = {
		get jsAssignmentIdentifier() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentIdentifier_ts$jsAssignmentIdentifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentIdentifier_ts$jsAssignmentIdentifier = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSAssignmentIdentifier",
		"name",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSAssignmentObjectPattern.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPattern_ts = {
		get jsAssignmentObjectPattern() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPattern_ts$jsAssignmentObjectPattern;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPattern_ts$jsAssignmentObjectPattern = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSAssignmentObjectPattern",
		{
			bindingKeys: {},
			visitorKeys: {
				properties: true,
				rest: true,
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSAssignmentObjectPatternProperty.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPatternProperty_ts = {
		get jsAssignmentObjectPatternProperty() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPatternProperty_ts$jsAssignmentObjectPatternProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPatternProperty_ts$jsAssignmentObjectPatternProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSAssignmentObjectPatternProperty",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				value: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSAwaitExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSAwaitExpression_ts = {
		get jsAwaitExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSAwaitExpression_ts$jsAwaitExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSAwaitExpression_ts$jsAwaitExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSAwaitExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/literals/JSBigIntLiteral.ts
const ___R$project$rome$$romejs$ast$js$literals$JSBigIntLiteral_ts = {
		get jsBigIntLiteral() {
			return ___R$project$rome$$romejs$ast$js$literals$JSBigIntLiteral_ts$jsBigIntLiteral;
		},
	};


	const ___R$project$rome$$romejs$ast$js$literals$JSBigIntLiteral_ts$jsBigIntLiteral = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSBigIntLiteral",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSBinaryExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSBinaryExpression_ts = {
		get jsBinaryExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSBinaryExpression_ts$jsBinaryExpression;
		},
	};




	const ___R$project$rome$$romejs$ast$js$expressions$JSBinaryExpression_ts$jsBinaryExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSBinaryExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				left: true,
				right: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSBindingArrayPattern.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSBindingArrayPattern_ts = {
		get jsBindingArrayPattern() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSBindingArrayPattern_ts$jsBindingArrayPattern;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSBindingArrayPattern_ts$jsBindingArrayPattern = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSBindingArrayPattern",
		{
			bindingKeys: {
				elements: true,
				rest: true,
			},
			visitorKeys: {
				elements: true,
				rest: true,
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSBindingAssignmentPattern.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSBindingAssignmentPattern_ts = {
		get jsBindingAssignmentPattern() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSBindingAssignmentPattern_ts$jsBindingAssignmentPattern;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSBindingAssignmentPattern_ts$jsBindingAssignmentPattern = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSBindingAssignmentPattern",
		{
			bindingKeys: {
				left: true,
			},
			visitorKeys: {
				left: true,
				right: true,
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSBindingIdentifier.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts = {
		get jsBindingIdentifier() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSBindingIdentifier",
		"name",
		{
			bindingKeys: {},
			visitorKeys: {
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSBindingObjectPattern.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPattern_ts = {
		get jsBindingObjectPattern() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPattern_ts$jsBindingObjectPattern;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPattern_ts$jsBindingObjectPattern = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSBindingObjectPattern",
		{
			bindingKeys: {
				properties: true,
				rest: true,
			},
			visitorKeys: {
				properties: true,
				rest: true,
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSBindingObjectPatternProperty.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPatternProperty_ts = {
		get jsBindingObjectPatternProperty() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPatternProperty_ts$jsBindingObjectPatternProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPatternProperty_ts$jsBindingObjectPatternProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSBindingObjectPatternProperty",
		{
			bindingKeys: {
				value: true,
			},
			visitorKeys: {
				key: true,
				value: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSBlockStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts = {
		get jsBlockStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSBlockStatement",
		"body",
		{
			bindingKeys: {},
			visitorKeys: {
				body: true,
				directives: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/literals/JSBooleanLiteral.ts
const ___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts = {
		get jsBooleanLiteral() {
			return ___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts$jsBooleanLiteral;
		},
	};


	const ___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts$jsBooleanLiteral = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSBooleanLiteral",
		"value",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSBreakStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSBreakStatement_ts = {
		get jsBreakStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSBreakStatement_ts$jsBreakStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSBreakStatement_ts$jsBreakStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSBreakStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				label: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSCallExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts = {
		get jsCallExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSCallExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				callee: true,
				arguments: true,
				typeArguments: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSCatchClause.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSCatchClause_ts = {
		get jsCatchClause() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSCatchClause_ts$jsCatchClause;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSCatchClause_ts$jsCatchClause = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSCatchClause",
		{
			bindingKeys: {
				param: true,
			},
			visitorKeys: {
				param: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSClassDeclaration.ts
const ___R$project$rome$$romejs$ast$js$classes$JSClassDeclaration_ts = {
		get jsClassDeclaration() {
			return ___R$project$rome$$romejs$ast$js$classes$JSClassDeclaration_ts$jsClassDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$classes$JSClassDeclaration_ts$jsClassDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSClassDeclaration",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				id: true,
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSClassExpression.ts
const ___R$project$rome$$romejs$ast$js$classes$JSClassExpression_ts = {
		get jsClassExpression() {
			return ___R$project$rome$$romejs$ast$js$classes$JSClassExpression_ts$jsClassExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$classes$JSClassExpression_ts$jsClassExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSClassExpression",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				id: true,
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSClassHead.ts
const ___R$project$rome$$romejs$ast$js$classes$JSClassHead_ts = {
		get jsClassHead() {
			return ___R$project$rome$$romejs$ast$js$classes$JSClassHead_ts$jsClassHead;
		},
	};


	const ___R$project$rome$$romejs$ast$js$classes$JSClassHead_ts$jsClassHead = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSClassHead",
		"body",
		{
			bindingKeys: {},
			visitorKeys: {
				superClass: true,
				body: true,
				typeParameters: true,
				superTypeParameters: true,
				implements: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSClassMethod.ts
const ___R$project$rome$$romejs$ast$js$classes$JSClassMethod_ts = {
		get jsClassMethod() {
			return ___R$project$rome$$romejs$ast$js$classes$JSClassMethod_ts$jsClassMethod;
		},
	};




	const ___R$project$rome$$romejs$ast$js$classes$JSClassMethod_ts$jsClassMethod = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSClassMethod",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				meta: true,
				head: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSClassPrivateMethod.ts
const ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateMethod_ts = {
		get jsClassPrivateMethod() {
			return ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateMethod_ts$jsClassPrivateMethod;
		},
	};


	const ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateMethod_ts$jsClassPrivateMethod = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSClassPrivateMethod",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				meta: true,
				head: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSClassPrivateProperty.ts
const ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateProperty_ts = {
		get jsClassPrivateProperty() {
			return ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateProperty_ts$jsClassPrivateProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateProperty_ts$jsClassPrivateProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSClassPrivateProperty",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				meta: true,
				value: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSClassProperty.ts
const ___R$project$rome$$romejs$ast$js$classes$JSClassProperty_ts = {
		get jsClassProperty() {
			return ___R$project$rome$$romejs$ast$js$classes$JSClassProperty_ts$jsClassProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$classes$JSClassProperty_ts$jsClassProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSClassProperty",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				meta: true,
				value: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSClassPropertyMeta.ts
const ___R$project$rome$$romejs$ast$js$classes$JSClassPropertyMeta_ts = {
		get jsClassPropertyMeta() {
			return ___R$project$rome$$romejs$ast$js$classes$JSClassPropertyMeta_ts$jsClassPropertyMeta;
		},
	};


	const ___R$project$rome$$romejs$ast$js$classes$JSClassPropertyMeta_ts$jsClassPropertyMeta = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSClassPropertyMeta",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/core/JSCommentBlock.ts
const ___R$project$rome$$romejs$ast$js$core$JSCommentBlock_ts = {
		get jsCommentBlock() {
			return ___R$project$rome$$romejs$ast$js$core$JSCommentBlock_ts$jsCommentBlock;
		},
	};


	const ___R$project$rome$$romejs$ast$js$core$JSCommentBlock_ts$jsCommentBlock = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSCommentBlock",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/core/JSCommentLine.ts
const ___R$project$rome$$romejs$ast$js$core$JSCommentLine_ts = {
		get jsCommentLine() {
			return ___R$project$rome$$romejs$ast$js$core$JSCommentLine_ts$jsCommentLine;
		},
	};


	const ___R$project$rome$$romejs$ast$js$core$JSCommentLine_ts$jsCommentLine = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSCommentLine",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSComputedMemberProperty.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSComputedMemberProperty_ts = {
		get jsComputedMemberProperty() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSComputedMemberProperty_ts$jsComputedMemberProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSComputedMemberProperty_ts$jsComputedMemberProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSComputedMemberProperty",
		"value",
		{
			bindingKeys: {},
			visitorKeys: {
				value: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/objects/JSComputedPropertyKey.ts
const ___R$project$rome$$romejs$ast$js$objects$JSComputedPropertyKey_ts = {
		get jsComputedPropertyKey() {
			return ___R$project$rome$$romejs$ast$js$objects$JSComputedPropertyKey_ts$jsComputedPropertyKey;
		},
	};


	const ___R$project$rome$$romejs$ast$js$objects$JSComputedPropertyKey_ts$jsComputedPropertyKey = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSComputedPropertyKey",
		"value",
		{
			bindingKeys: {},
			visitorKeys: {
				value: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSConditionalExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSConditionalExpression_ts = {
		get jsConditionalExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSConditionalExpression_ts$jsConditionalExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSConditionalExpression_ts$jsConditionalExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSConditionalExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				test: true,
				consequent: true,
				alternate: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSContinueStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSContinueStatement_ts = {
		get jsContinueStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSContinueStatement_ts$jsContinueStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSContinueStatement_ts$jsContinueStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSContinueStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				label: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSDebuggerStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSDebuggerStatement_ts = {
		get jsDebuggerStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSDebuggerStatement_ts$jsDebuggerStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSDebuggerStatement_ts$jsDebuggerStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSDebuggerStatement",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/core/JSDirective.ts
const ___R$project$rome$$romejs$ast$js$core$JSDirective_ts = {
		get jsDirective() {
			return ___R$project$rome$$romejs$ast$js$core$JSDirective_ts$jsDirective;
		},
	};


	const ___R$project$rome$$romejs$ast$js$core$JSDirective_ts$jsDirective = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSDirective",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSDoExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSDoExpression_ts = {
		get jsDoExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSDoExpression_ts$jsDoExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSDoExpression_ts$jsDoExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSDoExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSDoWhileStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSDoWhileStatement_ts = {
		get jsDoWhileStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSDoWhileStatement_ts$jsDoWhileStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSDoWhileStatement_ts$jsDoWhileStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSDoWhileStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				test: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSEmptyStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSEmptyStatement_ts = {
		get jsEmptyStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSEmptyStatement_ts$jsEmptyStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSEmptyStatement_ts$jsEmptyStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSEmptyStatement",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSExportAllDeclaration.ts
const ___R$project$rome$$romejs$ast$js$modules$JSExportAllDeclaration_ts = {
		get jsExportAllDeclaration() {
			return ___R$project$rome$$romejs$ast$js$modules$JSExportAllDeclaration_ts$jsExportAllDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSExportAllDeclaration_ts$jsExportAllDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExportAllDeclaration",
		{
			bindingKeys: {},
			visitorKeys: {
				source: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSExportDefaultDeclaration.ts
const ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultDeclaration_ts = {
		get jsExportDefaultDeclaration() {
			return ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultDeclaration_ts$jsExportDefaultDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultDeclaration_ts$jsExportDefaultDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExportDefaultDeclaration",
		{
			bindingKeys: {},
			visitorKeys: {
				declaration: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSExportDefaultSpecifier.ts
const ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultSpecifier_ts = {
		get jsExportDefaultSpecifier() {
			return ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultSpecifier_ts$jsExportDefaultSpecifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultSpecifier_ts$jsExportDefaultSpecifier = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExportDefaultSpecifier",
		{
			bindingKeys: {},
			visitorKeys: {
				exported: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSExportExternalDeclaration.ts
const ___R$project$rome$$romejs$ast$js$modules$JSExportExternalDeclaration_ts = {
		get jsExportExternalDeclaration() {
			return ___R$project$rome$$romejs$ast$js$modules$JSExportExternalDeclaration_ts$jsExportExternalDeclaration;
		},
	};




	const ___R$project$rome$$romejs$ast$js$modules$JSExportExternalDeclaration_ts$jsExportExternalDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExportExternalDeclaration",
		{
			bindingKeys: {},
			visitorKeys: {
				defaultSpecifier: true,
				namespaceSpecifier: true,
				namedSpecifiers: true,
				source: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSExportExternalSpecifier.ts
const ___R$project$rome$$romejs$ast$js$modules$JSExportExternalSpecifier_ts = {
		get jsExportExternalSpecifier() {
			return ___R$project$rome$$romejs$ast$js$modules$JSExportExternalSpecifier_ts$jsExportExternalSpecifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSExportExternalSpecifier_ts$jsExportExternalSpecifier = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExportExternalSpecifier",
		{
			bindingKeys: {},
			visitorKeys: {
				exported: true,
				local: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSExportLocalDeclaration.ts
const ___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts = {
		get jsExportLocalDeclaration() {
			return ___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts$jsExportLocalDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts$jsExportLocalDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExportLocalDeclaration",
		{
			bindingKeys: {
				declaration: true,
			},
			visitorKeys: {
				declaration: true,
				specifiers: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSExportLocalSpecifier.ts
const ___R$project$rome$$romejs$ast$js$modules$JSExportLocalSpecifier_ts = {
		get jsExportLocalSpecifier() {
			return ___R$project$rome$$romejs$ast$js$modules$JSExportLocalSpecifier_ts$jsExportLocalSpecifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSExportLocalSpecifier_ts$jsExportLocalSpecifier = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExportLocalSpecifier",
		{
			bindingKeys: {},
			visitorKeys: {
				local: true,
				exported: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSExportNamespaceSpecifier.ts
const ___R$project$rome$$romejs$ast$js$modules$JSExportNamespaceSpecifier_ts = {
		get jsExportNamespaceSpecifier() {
			return ___R$project$rome$$romejs$ast$js$modules$JSExportNamespaceSpecifier_ts$jsExportNamespaceSpecifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSExportNamespaceSpecifier_ts$jsExportNamespaceSpecifier = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExportNamespaceSpecifier",
		{
			bindingKeys: {},
			visitorKeys: {
				exported: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSExpressionStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSExpressionStatement_ts = {
		get jsExpressionStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSExpressionStatement_ts$jsExpressionStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSExpressionStatement_ts$jsExpressionStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSExpressionStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSForInStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSForInStatement_ts = {
		get jsForInStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSForInStatement_ts$jsForInStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSForInStatement_ts$jsForInStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSForInStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				left: true,
				right: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSForOfStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSForOfStatement_ts = {
		get jsForOfStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSForOfStatement_ts$jsForOfStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSForOfStatement_ts$jsForOfStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSForOfStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				left: true,
				right: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSForStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSForStatement_ts = {
		get jsForStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSForStatement_ts$jsForStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSForStatement_ts$jsForStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSForStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				init: true,
				test: true,
				update: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSFunctionDeclaration.ts
const ___R$project$rome$$romejs$ast$js$statements$JSFunctionDeclaration_ts = {
		get jsFunctionDeclaration() {
			return ___R$project$rome$$romejs$ast$js$statements$JSFunctionDeclaration_ts$jsFunctionDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSFunctionDeclaration_ts$jsFunctionDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSFunctionDeclaration",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				head: true,
				id: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSFunctionExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSFunctionExpression_ts = {
		get jsFunctionExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSFunctionExpression_ts$jsFunctionExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSFunctionExpression_ts$jsFunctionExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSFunctionExpression",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				head: true,
				id: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSFunctionHead.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts = {
		get jsFunctionHead() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts$jsFunctionHead;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts$jsFunctionHead = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSFunctionHead",
		"params",
		{
			bindingKeys: {
				params: true,
				rest: true,
			},
			visitorKeys: {
				params: true,
				thisType: true,
				rest: true,
				returnType: true,
				typeParameters: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSIdentifier.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts = {
		get jsIdentifier() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSIdentifier",
		"name",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSIfStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSIfStatement_ts = {
		get jsIfStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSIfStatement_ts$jsIfStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSIfStatement_ts$jsIfStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSIfStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				test: true,
				consequent: true,
				alternate: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSImportCall.ts
const ___R$project$rome$$romejs$ast$js$modules$JSImportCall_ts = {
		get jsImportCall() {
			return ___R$project$rome$$romejs$ast$js$modules$JSImportCall_ts$jsImportCall;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSImportCall_ts$jsImportCall = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSImportCall",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSImportDeclaration.ts
const ___R$project$rome$$romejs$ast$js$modules$JSImportDeclaration_ts = {
		get jsImportDeclaration() {
			return ___R$project$rome$$romejs$ast$js$modules$JSImportDeclaration_ts$jsImportDeclaration;
		},
	};




	const ___R$project$rome$$romejs$ast$js$modules$JSImportDeclaration_ts$jsImportDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSImportDeclaration",
		{
			bindingKeys: {
				defaultSpecifier: true,
				namespaceSpecifier: true,
				namedSpecifiers: true,
			},
			visitorKeys: {
				defaultSpecifier: true,
				namespaceSpecifier: true,
				namedSpecifiers: true,
				source: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSImportDefaultSpecifier.ts
const ___R$project$rome$$romejs$ast$js$modules$JSImportDefaultSpecifier_ts = {
		get jsImportDefaultSpecifier() {
			return ___R$project$rome$$romejs$ast$js$modules$JSImportDefaultSpecifier_ts$jsImportDefaultSpecifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSImportDefaultSpecifier_ts$jsImportDefaultSpecifier = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSImportDefaultSpecifier",
		{
			bindingKeys: {
				local: true,
			},
			visitorKeys: {
				local: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSImportNamespaceSpecifier.ts
const ___R$project$rome$$romejs$ast$js$modules$JSImportNamespaceSpecifier_ts = {
		get jsImportNamespaceSpecifier() {
			return ___R$project$rome$$romejs$ast$js$modules$JSImportNamespaceSpecifier_ts$jsImportNamespaceSpecifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSImportNamespaceSpecifier_ts$jsImportNamespaceSpecifier = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSImportNamespaceSpecifier",
		{
			bindingKeys: {
				local: true,
			},
			visitorKeys: {
				local: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSImportSpecifier.ts
const ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifier_ts = {
		get jsImportSpecifier() {
			return ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifier_ts$jsImportSpecifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifier_ts$jsImportSpecifier = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSImportSpecifier",
		{
			bindingKeys: {
				local: true,
			},
			visitorKeys: {
				imported: true,
				local: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/modules/JSImportSpecifierLocal.ts
const ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifierLocal_ts = {
		get jsImportSpecifierLocal() {
			return ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifierLocal_ts$jsImportSpecifierLocal;
		},
	};


	const ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifierLocal_ts$jsImportSpecifierLocal = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSImportSpecifierLocal",
		"name",
		{
			bindingKeys: {
				name: true,
			},
			visitorKeys: {
				name: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/core/JSInterpreterDirective.ts
const ___R$project$rome$$romejs$ast$js$core$JSInterpreterDirective_ts = {
		get jsInterpreterDirective() {
			return ___R$project$rome$$romejs$ast$js$core$JSInterpreterDirective_ts$jsInterpreterDirective;
		},
	};


	const ___R$project$rome$$romejs$ast$js$core$JSInterpreterDirective_ts$jsInterpreterDirective = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSInterpreterDirective",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSLabeledStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSLabeledStatement_ts = {
		get jsLabeledStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSLabeledStatement_ts$jsLabeledStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSLabeledStatement_ts$jsLabeledStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSLabeledStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				label: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSLogicalExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSLogicalExpression_ts = {
		get jsLogicalExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSLogicalExpression_ts$jsLogicalExpression;
		},
	};




	const ___R$project$rome$$romejs$ast$js$expressions$JSLogicalExpression_ts$jsLogicalExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSLogicalExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				left: true,
				right: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSMemberExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts = {
		get jsMemberExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts$jsMemberExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts$jsMemberExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSMemberExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				object: true,
				property: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSMetaProperty.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSMetaProperty_ts = {
		get jsMetaProperty() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSMetaProperty_ts$jsMetaProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSMetaProperty_ts$jsMetaProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSMetaProperty",
		{
			bindingKeys: {},
			visitorKeys: {
				meta: true,
				property: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/temp/JSMockParent.ts
const ___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts = {
		get jsMockParent() {
			return ___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$jsMockParent;
		},
		get MOCK_PARENT() {
			return ___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$MOCK_PARENT;
		},
	};


	const ___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$jsMockParent = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSMockParent",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);

	const ___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$MOCK_PARENT = {
		type: "JSMockParent",
	};


  // project-rome/@romejs/ast/js/expressions/JSNewExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSNewExpression_ts = {
		get jsNewExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSNewExpression_ts$jsNewExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSNewExpression_ts$jsNewExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSNewExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				callee: true,
				arguments: true,
				typeArguments: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/literals/JSNullLiteral.ts
const ___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts = {
		get jsNullLiteral() {
			return ___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts$jsNullLiteral;
		},
	};


	const ___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts$jsNullLiteral = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSNullLiteral",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/literals/JSNumericLiteral.ts
const ___R$project$rome$$romejs$ast$js$literals$JSNumericLiteral_ts = {
		get jsNumericLiteral() {
			return ___R$project$rome$$romejs$ast$js$literals$JSNumericLiteral_ts$jsNumericLiteral;
		},
	};


	const ___R$project$rome$$romejs$ast$js$literals$JSNumericLiteral_ts$jsNumericLiteral = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSNumericLiteral",
		"value",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/objects/JSObjectExpression.ts
const ___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts = {
		get jsObjectExpression() {
			return ___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSObjectExpression",
		"properties",
		{
			bindingKeys: {},
			visitorKeys: {
				properties: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/objects/JSObjectMethod.ts
const ___R$project$rome$$romejs$ast$js$objects$JSObjectMethod_ts = {
		get jsObjectMethod() {
			return ___R$project$rome$$romejs$ast$js$objects$JSObjectMethod_ts$jsObjectMethod;
		},
	};




	const ___R$project$rome$$romejs$ast$js$objects$JSObjectMethod_ts$jsObjectMethod = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSObjectMethod",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				head: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/objects/JSObjectProperty.ts
const ___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts = {
		get jsObjectProperty() {
			return ___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts$jsObjectProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts$jsObjectProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSObjectProperty",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				value: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSOptionalCallExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSOptionalCallExpression_ts = {
		get jsOptionalCallExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSOptionalCallExpression_ts$jsOptionalCallExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSOptionalCallExpression_ts$jsOptionalCallExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSOptionalCallExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				callee: true,
				arguments: true,
				typeArguments: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/patterns/JSPatternMeta.ts
const ___R$project$rome$$romejs$ast$js$patterns$JSPatternMeta_ts = {
		get jsPatternMeta() {
			return ___R$project$rome$$romejs$ast$js$patterns$JSPatternMeta_ts$jsPatternMeta;
		},
	};


	const ___R$project$rome$$romejs$ast$js$patterns$JSPatternMeta_ts$jsPatternMeta = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSPatternMeta",
		"typeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/classes/JSPrivateName.ts
const ___R$project$rome$$romejs$ast$js$classes$JSPrivateName_ts = {
		get jsPrivateName() {
			return ___R$project$rome$$romejs$ast$js$classes$JSPrivateName_ts$jsPrivateName;
		},
	};


	const ___R$project$rome$$romejs$ast$js$classes$JSPrivateName_ts$jsPrivateName = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSPrivateName",
		{
			bindingKeys: {},
			visitorKeys: {
				id: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSReferenceIdentifier.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts = {
		get jsReferenceIdentifier() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSReferenceIdentifier",
		"name",
		{
			bindingKeys: {},
			visitorKeys: {
				meta: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpAlternation.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpAlternation_ts = {
		get jsRegExpAlternation() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpAlternation_ts$jsRegExpAlternation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpAlternation_ts$jsRegExpAlternation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpAlternation",
		{
			bindingKeys: {},
			visitorKeys: {
				left: true,
				right: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpAnyCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpAnyCharacter_ts = {
		get jsRegExpAnyCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpAnyCharacter_ts$jsRegExpAnyCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpAnyCharacter_ts$jsRegExpAnyCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpAnyCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharacter_ts = {
		get jsRegExpCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharacter_ts$jsRegExpCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharacter_ts$jsRegExpCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpCharSet.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSet_ts = {
		get jsRegExpCharSet() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSet_ts$jsRegExpCharSet;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSet_ts$jsRegExpCharSet = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpCharSet",
		{
			bindingKeys: {},
			visitorKeys: {
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpCharSetRange.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSetRange_ts = {
		get jsRegExpCharSetRange() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSetRange_ts$jsRegExpCharSetRange;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSetRange_ts$jsRegExpCharSetRange = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpCharSetRange",
		{
			bindingKeys: {},
			visitorKeys: {
				start: true,
				end: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpControlCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpControlCharacter_ts = {
		get jsRegExpControlCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpControlCharacter_ts$jsRegExpControlCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpControlCharacter_ts$jsRegExpControlCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpControlCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpDigitCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpDigitCharacter_ts = {
		get jsRegExpDigitCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpDigitCharacter_ts$jsRegExpDigitCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpDigitCharacter_ts$jsRegExpDigitCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpDigitCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpEndCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpEndCharacter_ts = {
		get jsRegExpEndCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpEndCharacter_ts$jsRegExpEndCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpEndCharacter_ts$jsRegExpEndCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpEndCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpGroupCapture.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupCapture_ts = {
		get jsRegExpGroupCapture() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupCapture_ts$jsRegExpGroupCapture;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupCapture_ts$jsRegExpGroupCapture = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpGroupCapture",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpGroupNonCapture.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupNonCapture_ts = {
		get jsRegExpGroupNonCapture() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupNonCapture_ts$jsRegExpGroupNonCapture;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupNonCapture_ts$jsRegExpGroupNonCapture = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpGroupNonCapture",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/literals/JSRegExpLiteral.ts
const ___R$project$rome$$romejs$ast$js$literals$JSRegExpLiteral_ts = {
		get jsRegExpLiteral() {
			return ___R$project$rome$$romejs$ast$js$literals$JSRegExpLiteral_ts$jsRegExpLiteral;
		},
	};


	const ___R$project$rome$$romejs$ast$js$literals$JSRegExpLiteral_ts$jsRegExpLiteral = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpLiteral",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpNamedBackReference.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNamedBackReference_ts = {
		get jsRegExpNamedBackReference() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNamedBackReference_ts$jsRegExpNamedBackReference;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNamedBackReference_ts$jsRegExpNamedBackReference = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpNamedBackReference",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpNonDigitCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonDigitCharacter_ts = {
		get jsRegExpNonDigitCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonDigitCharacter_ts$jsRegExpNonDigitCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonDigitCharacter_ts$jsRegExpNonDigitCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpNonDigitCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpNonWhiteSpaceCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWhiteSpaceCharacter_ts = {
		get jsRegExpNonWhiteSpaceCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWhiteSpaceCharacter_ts$jsRegExpNonWhiteSpaceCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWhiteSpaceCharacter_ts$jsRegExpNonWhiteSpaceCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpNonWhiteSpaceCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpNonWordBoundaryCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordBoundaryCharacter_ts = {
		get jsRegExpNonWordBoundaryCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordBoundaryCharacter_ts$jsRegExpNonWordBoundaryCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordBoundaryCharacter_ts$jsRegExpNonWordBoundaryCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpNonWordBoundaryCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpNonWordCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordCharacter_ts = {
		get jsRegExpNonWordCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordCharacter_ts$jsRegExpNonWordCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordCharacter_ts$jsRegExpNonWordCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpNonWordCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpNumericBackReference.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNumericBackReference_ts = {
		get jsRegExpNumericBackReference() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNumericBackReference_ts$jsRegExpNumericBackReference;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpNumericBackReference_ts$jsRegExpNumericBackReference = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpNumericBackReference",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpQuantified.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpQuantified_ts = {
		get jsRegExpQuantified() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpQuantified_ts$jsRegExpQuantified;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpQuantified_ts$jsRegExpQuantified = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpQuantified",
		{
			bindingKeys: {},
			visitorKeys: {
				target: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpStartCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpStartCharacter_ts = {
		get jsRegExpStartCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpStartCharacter_ts$jsRegExpStartCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpStartCharacter_ts$jsRegExpStartCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpStartCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpSubExpression.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpSubExpression_ts = {
		get jsRegExpSubExpression() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpSubExpression_ts$jsRegExpSubExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpSubExpression_ts$jsRegExpSubExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpSubExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpWhiteSpaceCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpWhiteSpaceCharacter_ts = {
		get jsRegExpWhiteSpaceCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpWhiteSpaceCharacter_ts$jsRegExpWhiteSpaceCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpWhiteSpaceCharacter_ts$jsRegExpWhiteSpaceCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpWhiteSpaceCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpWordBoundaryCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordBoundaryCharacter_ts = {
		get jsRegExpWordBoundaryCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordBoundaryCharacter_ts$jsRegExpWordBoundaryCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordBoundaryCharacter_ts$jsRegExpWordBoundaryCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpWordBoundaryCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/regex/JSRegExpWordCharacter.ts
const ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordCharacter_ts = {
		get jsRegExpWordCharacter() {
			return ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordCharacter_ts$jsRegExpWordCharacter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordCharacter_ts$jsRegExpWordCharacter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRegExpWordCharacter",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSReturnStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts = {
		get jsReturnStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts$jsReturnStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts$jsReturnStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSReturnStatement",
		"argument",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/core/JSRoot.ts
const ___R$project$rome$$romejs$ast$js$core$JSRoot_ts = {
		get MOCK_PROGRAM() {
			return ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$MOCK_PROGRAM;
		},
		get jsRoot() {
			return ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$jsRoot;
		},
	};


	const ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$MOCK_PROGRAM = {
		type: "JSRoot",
		directives: [],
		body: [],
		filename: "unknown",
		mtime: undefined,
		interpreter: undefined,
		corrupt: false,
		sourceType: "module",
		diagnostics: [],
		comments: [],
		syntax: [],
		hasHoistedVars: false,
	};

	const ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$jsRoot = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSRoot",
		{
			bindingKeys: {},
			visitorKeys: {
				interpreter: true,
				directives: true,
				body: true,
				comments: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSSequenceExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSSequenceExpression_ts = {
		get jsSequenceExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSSequenceExpression_ts$jsSequenceExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSSequenceExpression_ts$jsSequenceExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSSequenceExpression",
		{bindingKeys: {}, visitorKeys: {expressions: true}},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSSpreadElement.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSSpreadElement_ts = {
		get jsSpreadElement() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSSpreadElement_ts$jsSpreadElement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSSpreadElement_ts$jsSpreadElement = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSSpreadElement",
		"argument",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/objects/JSSpreadProperty.ts
const ___R$project$rome$$romejs$ast$js$objects$JSSpreadProperty_ts = {
		get jsSpreadProperty() {
			return ___R$project$rome$$romejs$ast$js$objects$JSSpreadProperty_ts$jsSpreadProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$objects$JSSpreadProperty_ts$jsSpreadProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSSpreadProperty",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSStaticMemberProperty.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSStaticMemberProperty_ts = {
		get jsStaticMemberProperty() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSStaticMemberProperty_ts$jsStaticMemberProperty;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSStaticMemberProperty_ts$jsStaticMemberProperty = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSStaticMemberProperty",
		"value",
		{
			bindingKeys: {},
			visitorKeys: {
				value: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/objects/JSStaticPropertyKey.ts
const ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts = {
		get jsStaticPropertyKey() {
			return ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts$jsStaticPropertyKey;
		},
	};


	const ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts$jsStaticPropertyKey = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSStaticPropertyKey",
		"value",
		{
			bindingKeys: {},
			visitorKeys: {
				value: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/literals/JSStringLiteral.ts
const ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts = {
		get jsStringLiteral() {
			return ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral;
		},
	};


	const ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSStringLiteral",
		"value",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSSuper.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSSuper_ts = {
		get jsSuper() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSSuper_ts$jsSuper;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSSuper_ts$jsSuper = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSSuper",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSSwitchCase.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSSwitchCase_ts = {
		get jsSwitchCase() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSSwitchCase_ts$jsSwitchCase;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSSwitchCase_ts$jsSwitchCase = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSSwitchCase",
		{
			bindingKeys: {},
			visitorKeys: {
				test: true,
				consequent: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSSwitchStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSSwitchStatement_ts = {
		get jsSwitchStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSSwitchStatement_ts$jsSwitchStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSSwitchStatement_ts$jsSwitchStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSSwitchStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				discriminant: true,
				cases: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSTaggedTemplateExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSTaggedTemplateExpression_ts = {
		get jsTaggedTemplateExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSTaggedTemplateExpression_ts$jsTaggedTemplateExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSTaggedTemplateExpression_ts$jsTaggedTemplateExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSTaggedTemplateExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				tag: true,
				quasi: true,
				typeArguments: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSTemplateElement.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts = {
		get jsTemplateElement() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts$jsTemplateElement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts$jsTemplateElement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSTemplateElement",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/literals/JSTemplateLiteral.ts
const ___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts = {
		get jsTemplateLiteral() {
			return ___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts$jsTemplateLiteral;
		},
	};


	const ___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts$jsTemplateLiteral = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSTemplateLiteral",
		{
			bindingKeys: {},
			visitorKeys: {
				quasis: true,
				expressions: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSThisExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSThisExpression_ts = {
		get jsThisExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSThisExpression_ts$jsThisExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSThisExpression_ts$jsThisExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSThisExpression",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSThrowStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSThrowStatement_ts = {
		get jsThrowStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSThrowStatement_ts$jsThrowStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSThrowStatement_ts$jsThrowStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSThrowStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSTryStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSTryStatement_ts = {
		get jsTryStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSTryStatement_ts$jsTryStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSTryStatement_ts$jsTryStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSTryStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				block: true,
				handler: true,
				finalizer: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSUnaryExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSUnaryExpression_ts = {
		get jsUnaryExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSUnaryExpression_ts$jsUnaryExpression;
		},
	};




	const ___R$project$rome$$romejs$ast$js$expressions$JSUnaryExpression_ts$jsUnaryExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSUnaryExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSUpdateExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSUpdateExpression_ts = {
		get jsUpdateExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSUpdateExpression_ts$jsUpdateExpression;
		},
	};




	const ___R$project$rome$$romejs$ast$js$expressions$JSUpdateExpression_ts$jsUpdateExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSUpdateExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSVariableDeclaration.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts = {
		get jsVariableDeclaration() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration;
		},
	};




	const ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSVariableDeclaration",
		{
			bindingKeys: {
				declarations: true,
			},
			visitorKeys: {
				declarations: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSVariableDeclarationStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts = {
		get jsVariableDeclarationStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSVariableDeclarationStatement",
		"declaration",
		{
			bindingKeys: {
				declaration: true,
			},
			visitorKeys: {
				declaration: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/auxiliary/JSVariableDeclarator.ts
const ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts = {
		get jsVariableDeclarator() {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator;
		},
	};


	const ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSVariableDeclarator",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				id: true,
				init: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSWhileStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSWhileStatement_ts = {
		get jsWhileStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSWhileStatement_ts$jsWhileStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSWhileStatement_ts$jsWhileStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSWhileStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				test: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/statements/JSWithStatement.ts
const ___R$project$rome$$romejs$ast$js$statements$JSWithStatement_ts = {
		get jsWithStatement() {
			return ___R$project$rome$$romejs$ast$js$statements$JSWithStatement_ts$jsWithStatement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$statements$JSWithStatement_ts$jsWithStatement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSWithStatement",
		{
			bindingKeys: {},
			visitorKeys: {
				object: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXAttribute.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXAttribute_ts = {
		get jsxAttribute() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXAttribute_ts$jsxAttribute;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXAttribute_ts$jsxAttribute = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXAttribute",
		{
			bindingKeys: {},
			visitorKeys: {
				name: true,
				value: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXElement.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXElement_ts = {
		get jsxElement() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXElement_ts$jsxElement;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXElement_ts$jsxElement = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXElement",
		{
			bindingKeys: {},
			visitorKeys: {
				name: true,
				typeArguments: true,
				attributes: true,
				children: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXEmptyExpression.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXEmptyExpression_ts = {
		get jsxEmptyExpression() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXEmptyExpression_ts$jsxEmptyExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXEmptyExpression_ts$jsxEmptyExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXEmptyExpression",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXExpressionContainer.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXExpressionContainer_ts = {
		get jsxExpressionContainer() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXExpressionContainer_ts$jsxExpressionContainer;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXExpressionContainer_ts$jsxExpressionContainer = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXExpressionContainer",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXFragment.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXFragment_ts = {
		get jsxFragment() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXFragment_ts$jsxFragment;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXFragment_ts$jsxFragment = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXFragment",
		{
			bindingKeys: {},
			visitorKeys: {
				children: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXIdentifier.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXIdentifier_ts = {
		get jsxIdentifier() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXIdentifier_ts$jsxIdentifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXIdentifier_ts$jsxIdentifier = ___R$project$rome$$romejs$ast$js$utils_ts$createQuickBuilder(
		"JSXIdentifier",
		"name",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXMemberExpression.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXMemberExpression_ts = {
		get jsxMemberExpression() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXMemberExpression_ts$jsxMemberExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXMemberExpression_ts$jsxMemberExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXMemberExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				object: true,
				property: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXNamespacedName.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXNamespacedName_ts = {
		get jsxNamespacedName() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXNamespacedName_ts$jsxNamespacedName;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXNamespacedName_ts$jsxNamespacedName = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXNamespacedName",
		{
			bindingKeys: {},
			visitorKeys: {
				namespace: true,
				name: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXReferenceIdentifier.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXReferenceIdentifier_ts = {
		get jsxReferenceIdentifier() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXReferenceIdentifier_ts$jsxReferenceIdentifier;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXReferenceIdentifier_ts$jsxReferenceIdentifier = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXReferenceIdentifier",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXSpreadAttribute.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadAttribute_ts = {
		get jsxSpreadAttribute() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadAttribute_ts$jsxSpreadAttribute;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadAttribute_ts$jsxSpreadAttribute = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXSpreadAttribute",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXSpreadChild.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadChild_ts = {
		get jsxSpreadChild() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadChild_ts$jsxSpreadChild;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadChild_ts$jsxSpreadChild = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXSpreadChild",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/jsx/JSXText.ts
const ___R$project$rome$$romejs$ast$js$jsx$JSXText_ts = {
		get jsxText() {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXText_ts$jsxText;
		},
	};


	const ___R$project$rome$$romejs$ast$js$jsx$JSXText_ts$jsxText = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSXText",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/expressions/JSYieldExpression.ts
const ___R$project$rome$$romejs$ast$js$expressions$JSYieldExpression_ts = {
		get jsYieldExpression() {
			return ___R$project$rome$$romejs$ast$js$expressions$JSYieldExpression_ts$jsYieldExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$expressions$JSYieldExpression_ts$jsYieldExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"JSYieldExpression",
		{bindingKeys: {}, visitorKeys: {argument: true}},
	);


  // project-rome/@romejs/ast/js/typescript/TSAnyKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSAnyKeywordTypeAnnotation_ts = {
		get tsAnyKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSAnyKeywordTypeAnnotation_ts$tsAnyKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSAnyKeywordTypeAnnotation_ts$tsAnyKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSAnyKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSArrayType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSArrayType_ts = {
		get tsArrayType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSArrayType_ts$tsArrayType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSArrayType_ts$tsArrayType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSArrayType",
		{
			bindingKeys: {},
			visitorKeys: {elementType: true},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSAsExpression.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSAsExpression_ts = {
		get tsAsExpression() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSAsExpression_ts$tsAsExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSAsExpression_ts$tsAsExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSAsExpression",
		{
			bindingKeys: {},
			visitorKeys: {expression: true, typeAnnotation: true},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSAssignmentAsExpression.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentAsExpression_ts = {
		get tsAssignmentAsExpression() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentAsExpression_ts$tsAssignmentAsExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentAsExpression_ts$tsAssignmentAsExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSAssignmentAsExpression",
		{
			bindingKeys: {},
			visitorKeys: {expression: true, typeAnnotation: true},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSAssignmentNonNullExpression.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentNonNullExpression_ts = {
		get tsAssignmentNonNullExpression() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentNonNullExpression_ts$tsAssignmentNonNullExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentNonNullExpression_ts$tsAssignmentNonNullExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSAssignmentNonNullExpression",
		{
			bindingKeys: {},
			visitorKeys: {expression: true},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSAssignmentTypeAssertion.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentTypeAssertion_ts = {
		get tsAssignmentTypeAssertion() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentTypeAssertion_ts$tsAssignmentTypeAssertion;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentTypeAssertion_ts$tsAssignmentTypeAssertion = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSAssignmentTypeAssertion",
		{
			bindingKeys: {},
			visitorKeys: {expression: true, typeAnnotation: true},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSBigIntKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSBigIntKeywordTypeAnnotation_ts = {
		get tsBigIntKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSBigIntKeywordTypeAnnotation_ts$tsBigIntKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSBigIntKeywordTypeAnnotation_ts$tsBigIntKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSBigIntKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSBooleanKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSBooleanKeywordTypeAnnotation_ts = {
		get tsBooleanKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSBooleanKeywordTypeAnnotation_ts$tsBooleanKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSBooleanKeywordTypeAnnotation_ts$tsBooleanKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSBooleanKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSBooleanLiteralTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSBooleanLiteralTypeAnnotation_ts = {
		get tsBooleanLiteralTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSBooleanLiteralTypeAnnotation_ts$tsBooleanLiteralTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSBooleanLiteralTypeAnnotation_ts$tsBooleanLiteralTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSBooleanLiteralTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSCallSignatureDeclaration.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSCallSignatureDeclaration_ts = {
		get tsCallSignatureDeclaration() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSCallSignatureDeclaration_ts$tsCallSignatureDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSCallSignatureDeclaration_ts$tsCallSignatureDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSCallSignatureDeclaration",
		{
			bindingKeys: {},
			visitorKeys: {
				meta: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSConditionalType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSConditionalType_ts = {
		get tsConditionalType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSConditionalType_ts$tsConditionalType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSConditionalType_ts$tsConditionalType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSConditionalType",
		{
			bindingKeys: {},
			visitorKeys: {
				checkType: true,
				extendsType: true,
				trueType: true,
				falseType: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSConstructorType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSConstructorType_ts = {
		get tsConstructorType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSConstructorType_ts$tsConstructorType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSConstructorType_ts$tsConstructorType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSConstructorType",
		{
			bindingKeys: {},
			visitorKeys: {
				meta: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSConstructSignatureDeclaration.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSConstructSignatureDeclaration_ts = {
		get tsConstructSignatureDeclaration() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSConstructSignatureDeclaration_ts$tsConstructSignatureDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSConstructSignatureDeclaration_ts$tsConstructSignatureDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSConstructSignatureDeclaration",
		{
			bindingKeys: {},
			visitorKeys: {
				meta: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSDeclareFunction.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSDeclareFunction_ts = {
		get tsDeclareFunction() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSDeclareFunction_ts$tsDeclareFunction;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSDeclareFunction_ts$tsDeclareFunction = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSDeclareFunction",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				id: true,
				head: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSDeclareMethod.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSDeclareMethod_ts = {
		get tsDeclareMethod() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSDeclareMethod_ts$tsDeclareMethod;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSDeclareMethod_ts$tsDeclareMethod = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSDeclareMethod",
		{
			bindingKeys: {},
			visitorKeys: {
				meta: true,
				key: true,
				head: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSEmptyKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSEmptyKeywordTypeAnnotation_ts = {
		get tsEmptyKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSEmptyKeywordTypeAnnotation_ts$tsEmptyKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSEmptyKeywordTypeAnnotation_ts$tsEmptyKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSEmptyKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSEnumDeclaration.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSEnumDeclaration_ts = {
		get tsEnumDeclaration() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSEnumDeclaration_ts$tsEnumDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSEnumDeclaration_ts$tsEnumDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSEnumDeclaration",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				id: true,
				members: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSEnumMember.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSEnumMember_ts = {
		get tsEnumMember() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSEnumMember_ts$tsEnumMember;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSEnumMember_ts$tsEnumMember = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSEnumMember",
		{
			bindingKeys: {},
			visitorKeys: {
				id: true,
				initializer: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSExportAssignment.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSExportAssignment_ts = {
		get tsExportAssignment() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSExportAssignment_ts$tsExportAssignment;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSExportAssignment_ts$tsExportAssignment = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSExportAssignment",
		{bindingKeys: {}, visitorKeys: {expression: true}},
	);


  // project-rome/@romejs/ast/js/typescript/TSExpressionWithTypeArguments.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSExpressionWithTypeArguments_ts = {
		get tsExpressionWithTypeArguments() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSExpressionWithTypeArguments_ts$tsExpressionWithTypeArguments;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSExpressionWithTypeArguments_ts$tsExpressionWithTypeArguments = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSExpressionWithTypeArguments",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
				typeParameters: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSExternalModuleReference.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSExternalModuleReference_ts = {
		get tsExternalModuleReference() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSExternalModuleReference_ts$tsExternalModuleReference;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSExternalModuleReference_ts$tsExternalModuleReference = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSExternalModuleReference",
		{
			bindingKeys: {},
			visitorKeys: {expression: true},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSFunctionType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSFunctionType_ts = {
		get tsFunctionType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSFunctionType_ts$tsFunctionType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSFunctionType_ts$tsFunctionType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSFunctionType",
		{
			bindingKeys: {},
			visitorKeys: {
				meta: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSImportEqualsDeclaration.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSImportEqualsDeclaration_ts = {
		get tsImportEqualsDeclaration() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSImportEqualsDeclaration_ts$tsImportEqualsDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSImportEqualsDeclaration_ts$tsImportEqualsDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSImportEqualsDeclaration",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {id: true, moduleReference: true},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSImportType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSImportType_ts = {
		get tsImportType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSImportType_ts$tsImportType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSImportType_ts$tsImportType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSImportType",
		{
			bindingKeys: {},
			visitorKeys: {
				argument: true,
				typeParameters: true,
				qualifier: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSIndexedAccessType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSIndexedAccessType_ts = {
		get tsIndexedAccessType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSIndexedAccessType_ts$tsIndexedAccessType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSIndexedAccessType_ts$tsIndexedAccessType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSIndexedAccessType",
		{
			bindingKeys: {},
			visitorKeys: {
				objectType: true,
				indexType: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSIndexSignature.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSIndexSignature_ts = {
		get tsIndexSignature() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSIndexSignature_ts$tsIndexSignature;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSIndexSignature_ts$tsIndexSignature = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSIndexSignature",
		{
			bindingKeys: {
				key: true,
			},
			visitorKeys: {
				typeAnnotation: true,
				key: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSInferType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSInferType_ts = {
		get tsInferType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSInferType_ts$tsInferType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSInferType_ts$tsInferType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSInferType",
		{
			bindingKeys: {},
			visitorKeys: {
				typeParameter: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSInterfaceBody.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceBody_ts = {
		get tsInterfaceBody() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceBody_ts$tsInterfaceBody;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceBody_ts$tsInterfaceBody = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSInterfaceBody",
		{
			bindingKeys: {},
			visitorKeys: {
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSInterfaceDeclaration.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceDeclaration_ts = {
		get tsInterfaceDeclaration() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceDeclaration_ts$tsInterfaceDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceDeclaration_ts$tsInterfaceDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSInterfaceDeclaration",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				id: true,
				body: true,
				typeParameters: true,
				extends: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSIntersectionTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSIntersectionTypeAnnotation_ts = {
		get tsIntersectionTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSIntersectionTypeAnnotation_ts$tsIntersectionTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSIntersectionTypeAnnotation_ts$tsIntersectionTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSIntersectionTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {
				types: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSMappedType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSMappedType_ts = {
		get tsMappedType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSMappedType_ts$tsMappedType;
		},
	};




	const ___R$project$rome$$romejs$ast$js$typescript$TSMappedType_ts$tsMappedType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSMappedType",
		{
			bindingKeys: {},
			visitorKeys: {
				typeParameter: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSMethodSignature.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSMethodSignature_ts = {
		get tsMethodSignature() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSMethodSignature_ts$tsMethodSignature;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSMethodSignature_ts$tsMethodSignature = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSMethodSignature",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				meta: true,
				returnType: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSMixedKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSMixedKeywordTypeAnnotation_ts = {
		get tsMixedKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSMixedKeywordTypeAnnotation_ts$tsMixedKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSMixedKeywordTypeAnnotation_ts$tsMixedKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSMixedKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSModuleBlock.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSModuleBlock_ts = {
		get tsModuleBlock() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSModuleBlock_ts$tsModuleBlock;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSModuleBlock_ts$tsModuleBlock = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSModuleBlock",
		{
			bindingKeys: {},
			visitorKeys: {
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSModuleDeclaration.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSModuleDeclaration_ts = {
		get tsModuleDeclaration() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSModuleDeclaration_ts$tsModuleDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSModuleDeclaration_ts$tsModuleDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSModuleDeclaration",
		{
			bindingKeys: {},
			visitorKeys: {
				id: true,
				body: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSNamespaceExportDeclaration.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSNamespaceExportDeclaration_ts = {
		get tsNamespaceExportDeclaration() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSNamespaceExportDeclaration_ts$tsNamespaceExportDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSNamespaceExportDeclaration_ts$tsNamespaceExportDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSNamespaceExportDeclaration",
		{bindingKeys: {}, visitorKeys: {id: true}},
	);


  // project-rome/@romejs/ast/js/typescript/TSNeverKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSNeverKeywordTypeAnnotation_ts = {
		get tsNeverKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSNeverKeywordTypeAnnotation_ts$tsNeverKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSNeverKeywordTypeAnnotation_ts$tsNeverKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSNeverKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSNonNullExpression.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSNonNullExpression_ts = {
		get tsNonNullExpression() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSNonNullExpression_ts$tsNonNullExpression;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSNonNullExpression_ts$tsNonNullExpression = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSNonNullExpression",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSNullKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSNullKeywordTypeAnnotation_ts = {
		get tsNullKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSNullKeywordTypeAnnotation_ts$tsNullKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSNullKeywordTypeAnnotation_ts$tsNullKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSNullKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSNumberKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSNumberKeywordTypeAnnotation_ts = {
		get tsNumberKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSNumberKeywordTypeAnnotation_ts$tsNumberKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSNumberKeywordTypeAnnotation_ts$tsNumberKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSNumberKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSNumericLiteralTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSNumericLiteralTypeAnnotation_ts = {
		get tsNumericLiteralTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSNumericLiteralTypeAnnotation_ts$tsNumericLiteralTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSNumericLiteralTypeAnnotation_ts$tsNumericLiteralTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSNumericLiteralTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSObjectKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSObjectKeywordTypeAnnotation_ts = {
		get tsObjectKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSObjectKeywordTypeAnnotation_ts$tsObjectKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSObjectKeywordTypeAnnotation_ts$tsObjectKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSObjectKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSOptionalType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSOptionalType_ts = {
		get tsOptionalType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSOptionalType_ts$tsOptionalType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSOptionalType_ts$tsOptionalType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSOptionalType",
		{
			bindingKeys: {},
			visitorKeys: {
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSParenthesizedType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSParenthesizedType_ts = {
		get tsParenthesizedType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSParenthesizedType_ts$tsParenthesizedType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSParenthesizedType_ts$tsParenthesizedType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSParenthesizedType",
		{
			bindingKeys: {},
			visitorKeys: {
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSPropertySignature.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSPropertySignature_ts = {
		get tsPropertySignature() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSPropertySignature_ts$tsPropertySignature;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSPropertySignature_ts$tsPropertySignature = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSPropertySignature",
		{
			bindingKeys: {},
			visitorKeys: {
				key: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSQualifiedName.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSQualifiedName_ts = {
		get tsQualifiedName() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSQualifiedName_ts$tsQualifiedName;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSQualifiedName_ts$tsQualifiedName = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSQualifiedName",
		{
			bindingKeys: {},
			visitorKeys: {
				left: true,
				right: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSSignatureDeclarationMeta.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSSignatureDeclarationMeta_ts = {
		get tsSignatureDeclarationMeta() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSSignatureDeclarationMeta_ts$tsSignatureDeclarationMeta;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSSignatureDeclarationMeta_ts$tsSignatureDeclarationMeta = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSSignatureDeclarationMeta",
		{
			bindingKeys: {},
			visitorKeys: {
				parameters: true,
				rest: true,
				typeParameters: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSStringKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSStringKeywordTypeAnnotation_ts = {
		get tsStringKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSStringKeywordTypeAnnotation_ts$tsStringKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSStringKeywordTypeAnnotation_ts$tsStringKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSStringKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSStringLiteralTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSStringLiteralTypeAnnotation_ts = {
		get tsStringLiteralTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSStringLiteralTypeAnnotation_ts$tsStringLiteralTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSStringLiteralTypeAnnotation_ts$tsStringLiteralTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSStringLiteralTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSSymbolKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSSymbolKeywordTypeAnnotation_ts = {
		get tsSymbolKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSSymbolKeywordTypeAnnotation_ts$tsSymbolKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSSymbolKeywordTypeAnnotation_ts$tsSymbolKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSSymbolKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTemplateLiteralTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTemplateLiteralTypeAnnotation_ts = {
		get tsTemplateLiteralTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTemplateLiteralTypeAnnotation_ts$tsTemplateLiteralTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTemplateLiteralTypeAnnotation_ts$tsTemplateLiteralTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTemplateLiteralTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSThisType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSThisType_ts = {
		get tsThisType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSThisType_ts$tsThisType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSThisType_ts$tsThisType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSThisType",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTupleType.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTupleType_ts = {
		get tsTupleType() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTupleType_ts$tsTupleType;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTupleType_ts$tsTupleType = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTupleType",
		{
			bindingKeys: {},
			visitorKeys: {
				elementTypes: true,
				rest: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeAliasTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeAliasTypeAnnotation_ts = {
		get tsTypeAliasTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeAliasTypeAnnotation_ts$tsTypeAliasTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeAliasTypeAnnotation_ts$tsTypeAliasTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeAliasTypeAnnotation",
		{
			bindingKeys: {
				id: true,
			},
			visitorKeys: {
				id: true,
				typeParameters: true,
				right: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeAssertion.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeAssertion_ts = {
		get tsTypeAssertion() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeAssertion_ts$tsTypeAssertion;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeAssertion_ts$tsTypeAssertion = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeAssertion",
		{
			bindingKeys: {},
			visitorKeys: {
				expression: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeLiteral.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeLiteral_ts = {
		get tsTypeLiteral() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeLiteral_ts$tsTypeLiteral;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeLiteral_ts$tsTypeLiteral = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeLiteral",
		{
			bindingKeys: {},
			visitorKeys: {
				members: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeOperator.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeOperator_ts = {
		get tsTypeOperator() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeOperator_ts$tsTypeOperator;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeOperator_ts$tsTypeOperator = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeOperator",
		{
			bindingKeys: {},
			visitorKeys: {
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeParameter.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameter_ts = {
		get tsTypeParameter() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameter_ts$tsTypeParameter;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameter_ts$tsTypeParameter = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeParameter",
		{
			bindingKeys: {},
			visitorKeys: {
				default: true,
				constraint: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeParameterDeclaration.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterDeclaration_ts = {
		get tsTypeParameterDeclaration() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterDeclaration_ts$tsTypeParameterDeclaration;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterDeclaration_ts$tsTypeParameterDeclaration = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeParameterDeclaration",
		{
			bindingKeys: {},
			visitorKeys: {
				params: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeParameterInstantiation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterInstantiation_ts = {
		get tsTypeParameterInstantiation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterInstantiation_ts$tsTypeParameterInstantiation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterInstantiation_ts$tsTypeParameterInstantiation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeParameterInstantiation",
		{
			bindingKeys: {},
			visitorKeys: {
				params: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypePredicate.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypePredicate_ts = {
		get tsTypePredicate() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypePredicate_ts$tsTypePredicate;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypePredicate_ts$tsTypePredicate = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypePredicate",
		{
			bindingKeys: {},
			visitorKeys: {
				parameterName: true,
				typeAnnotation: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeQuery.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeQuery_ts = {
		get tsTypeQuery() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeQuery_ts$tsTypeQuery;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeQuery_ts$tsTypeQuery = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeQuery",
		{
			bindingKeys: {},
			visitorKeys: {
				exprName: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSTypeReference.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSTypeReference_ts = {
		get tsTypeReference() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSTypeReference_ts$tsTypeReference;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSTypeReference_ts$tsTypeReference = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSTypeReference",
		{
			bindingKeys: {},
			visitorKeys: {
				typeName: true,
				typeParameters: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSUndefinedKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSUndefinedKeywordTypeAnnotation_ts = {
		get tsUndefinedKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSUndefinedKeywordTypeAnnotation_ts$tsUndefinedKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSUndefinedKeywordTypeAnnotation_ts$tsUndefinedKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSUndefinedKeywordTypeAnnotation",
		{bindingKeys: {}, visitorKeys: {}},
	);


  // project-rome/@romejs/ast/js/typescript/TSUnionTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSUnionTypeAnnotation_ts = {
		get tsUnionTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSUnionTypeAnnotation_ts$tsUnionTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSUnionTypeAnnotation_ts$tsUnionTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSUnionTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {
				types: true,
			},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSUnknownKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSUnknownKeywordTypeAnnotation_ts = {
		get tsUnknownKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSUnknownKeywordTypeAnnotation_ts$tsUnknownKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSUnknownKeywordTypeAnnotation_ts$tsUnknownKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSUnknownKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/js/typescript/TSVoidKeywordTypeAnnotation.ts
const ___R$project$rome$$romejs$ast$js$typescript$TSVoidKeywordTypeAnnotation_ts = {
		get tsVoidKeywordTypeAnnotation() {
			return ___R$project$rome$$romejs$ast$js$typescript$TSVoidKeywordTypeAnnotation_ts$tsVoidKeywordTypeAnnotation;
		},
	};


	const ___R$project$rome$$romejs$ast$js$typescript$TSVoidKeywordTypeAnnotation_ts$tsVoidKeywordTypeAnnotation = ___R$project$rome$$romejs$ast$js$utils_ts$createBuilder(
		"TSVoidKeywordTypeAnnotation",
		{
			bindingKeys: {},
			visitorKeys: {},
		},
	);


  // project-rome/@romejs/ast/index.ts
const ___R$project$rome$$romejs$ast$index_ts = {};
	Object.keys(___R$project$rome$$romejs$ast$js$index_ts).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$index_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$unions_ts).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$unions_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$temp$JSAmbiguousFlowTypeCastExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$temp$JSAmbiguousFlowTypeCastExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSArrayExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSArrayExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$auxiliary$JSArrayHole_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSArrayHole_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSArrowFunctionExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSArrowFunctionExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSAssignmentArrayPattern_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentArrayPattern_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSAssignmentAssignmentPattern_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentAssignmentPattern_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSAssignmentIdentifier_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentIdentifier_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPattern_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPattern_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPatternProperty_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPatternProperty_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSAwaitExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSAwaitExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$literals$JSBigIntLiteral_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$literals$JSBigIntLiteral_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSBinaryExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSBinaryExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSBindingArrayPattern_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSBindingArrayPattern_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSBindingAssignmentPattern_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSBindingAssignmentPattern_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPattern_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPattern_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPatternProperty_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPatternProperty_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSBreakStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSBreakStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$auxiliary$JSCatchClause_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSCatchClause_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$classes$JSClassDeclaration_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSClassDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$classes$JSClassExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSClassExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$classes$JSClassHead_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSClassHead_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$classes$JSClassMethod_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSClassMethod_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$classes$JSClassPrivateMethod_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateMethod_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$classes$JSClassPrivateProperty_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateProperty_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$classes$JSClassProperty_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSClassProperty_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$classes$JSClassPropertyMeta_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSClassPropertyMeta_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$core$JSCommentBlock_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$core$JSCommentBlock_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$core$JSCommentLine_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$core$JSCommentLine_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$auxiliary$JSComputedMemberProperty_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSComputedMemberProperty_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$objects$JSComputedPropertyKey_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$objects$JSComputedPropertyKey_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSConditionalExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSConditionalExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$statements$JSContinueStatement_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSContinueStatement_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$statements$JSDebuggerStatement_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSDebuggerStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$core$JSDirective_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$core$JSDirective_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSDoExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSDoExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSDoWhileStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSDoWhileStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSEmptyStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSEmptyStatement_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSExportAllDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSExportAllDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSExportDefaultDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSExportDefaultSpecifier_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultSpecifier_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSExportExternalDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSExportExternalDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSExportExternalSpecifier_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSExportExternalSpecifier_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSExportLocalSpecifier_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSExportLocalSpecifier_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSExportNamespaceSpecifier_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSExportNamespaceSpecifier_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$statements$JSExpressionStatement_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSExpressionStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSForInStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSForInStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSForOfStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSForOfStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSForStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSForStatement_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$statements$JSFunctionDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSFunctionDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSFunctionExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSFunctionExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSIfStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSIfStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$modules$JSImportCall_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSImportCall_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$modules$JSImportDeclaration_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSImportDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSImportDefaultSpecifier_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSImportDefaultSpecifier_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSImportNamespaceSpecifier_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSImportNamespaceSpecifier_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$modules$JSImportSpecifier_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifier_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$modules$JSImportSpecifierLocal_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifierLocal_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$core$JSInterpreterDirective_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$core$JSInterpreterDirective_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSLabeledStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSLabeledStatement_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSLogicalExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSLogicalExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSMetaProperty_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSMetaProperty_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSNewExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSNewExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$literals$JSNumericLiteral_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$literals$JSNumericLiteral_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$objects$JSObjectMethod_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$objects$JSObjectMethod_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSOptionalCallExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSOptionalCallExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$patterns$JSPatternMeta_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$patterns$JSPatternMeta_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$classes$JSPrivateName_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$classes$JSPrivateName_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpAlternation_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpAlternation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpAnyCharacter_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpAnyCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpCharacter_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSet_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSet_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSetRange_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSetRange_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpControlCharacter_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpControlCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpDigitCharacter_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpDigitCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpEndCharacter_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpEndCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupCapture_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupCapture_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupNonCapture_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupNonCapture_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$literals$JSRegExpLiteral_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$literals$JSRegExpLiteral_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpNamedBackReference_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNamedBackReference_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpNonDigitCharacter_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonDigitCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWhiteSpaceCharacter_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWhiteSpaceCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordBoundaryCharacter_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordBoundaryCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordCharacter_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpNumericBackReference_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpNumericBackReference_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpQuantified_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpQuantified_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpStartCharacter_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpStartCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpSubExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpSubExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpWhiteSpaceCharacter_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpWhiteSpaceCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$regex$JSRegExpWordBoundaryCharacter_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordBoundaryCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$regex$JSRegExpWordCharacter_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordCharacter_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$core$JSRoot_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$core$JSRoot_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSSequenceExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSSequenceExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$auxiliary$JSSpreadElement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSSpreadElement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$objects$JSSpreadProperty_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$objects$JSSpreadProperty_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$auxiliary$JSStaticMemberProperty_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSStaticMemberProperty_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSSuper_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSSuper_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$auxiliary$JSSwitchCase_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSSwitchCase_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSSwitchStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSSwitchStatement_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSTaggedTemplateExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSTaggedTemplateExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSThisExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSThisExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSThrowStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSThrowStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSTryStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSTryStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSUnaryExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSUnaryExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$expressions$JSUpdateExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSUpdateExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSWhileStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSWhileStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$statements$JSWithStatement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$statements$JSWithStatement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXAttribute_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXAttribute_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXElement_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXElement_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXEmptyExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXEmptyExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXExpressionContainer_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXExpressionContainer_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXFragment_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXFragment_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXIdentifier_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXIdentifier_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXMemberExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXMemberExpression_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXNamespacedName_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXNamespacedName_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXReferenceIdentifier_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXReferenceIdentifier_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXSpreadAttribute_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadAttribute_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXSpreadChild_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadChild_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$jsx$JSXText_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXText_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$expressions$JSYieldExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$expressions$JSYieldExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSAnyKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSAnyKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSArrayType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSArrayType_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSAsExpression_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSAsExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSAssignmentAsExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentAsExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSAssignmentNonNullExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentNonNullExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSAssignmentTypeAssertion_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentTypeAssertion_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSBigIntKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSBigIntKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSBooleanKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSBooleanKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSBooleanLiteralTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSBooleanLiteralTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSCallSignatureDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSCallSignatureDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSConditionalType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSConditionalType_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSConstructorType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSConstructorType_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSConstructSignatureDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSConstructSignatureDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSDeclareFunction_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSDeclareFunction_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSDeclareMethod_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSDeclareMethod_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSEmptyKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSEmptyKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSEnumDeclaration_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSEnumDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSEnumMember_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSEnumMember_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSExportAssignment_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSExportAssignment_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSExpressionWithTypeArguments_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSExpressionWithTypeArguments_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSExternalModuleReference_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSExternalModuleReference_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSFunctionType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSFunctionType_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSImportEqualsDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSImportEqualsDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSImportType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSImportType_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSIndexedAccessType_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSIndexedAccessType_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSIndexSignature_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSIndexSignature_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSInferType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSInferType_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSInterfaceBody_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceBody_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSInterfaceDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSIntersectionTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSIntersectionTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSMappedType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSMappedType_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSMethodSignature_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSMethodSignature_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSMixedKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSMixedKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSModuleBlock_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSModuleBlock_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSModuleDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSModuleDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSNamespaceExportDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSNamespaceExportDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSNeverKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSNeverKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSNonNullExpression_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSNonNullExpression_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSNullKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSNullKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSNumberKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSNumberKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSNumericLiteralTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSNumericLiteralTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSObjectKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSObjectKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSOptionalType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSOptionalType_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSParenthesizedType_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSParenthesizedType_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSPropertySignature_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSPropertySignature_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSQualifiedName_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSQualifiedName_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSSignatureDeclarationMeta_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSSignatureDeclarationMeta_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSStringKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSStringKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSStringLiteralTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSStringLiteralTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSSymbolKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSSymbolKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSTemplateLiteralTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTemplateLiteralTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSThisType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSThisType_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSTupleType_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTupleType_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSTypeAliasTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeAliasTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSTypeAssertion_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeAssertion_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSTypeLiteral_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeLiteral_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSTypeOperator_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeOperator_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSTypeParameter_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameter_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterDeclaration_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterDeclaration_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterInstantiation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterInstantiation_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSTypePredicate_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypePredicate_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSTypeQuery_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeQuery_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$ast$js$typescript$TSTypeReference_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSTypeReference_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSUndefinedKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSUndefinedKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSUnionTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSUnionTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSUnknownKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSUnknownKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});
	Object.keys(
		___R$project$rome$$romejs$ast$js$typescript$TSVoidKeywordTypeAnnotation_ts,
	).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$ast$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$ast$js$typescript$TSVoidKeywordTypeAnnotation_ts[key];
				},
			},
		);
	});



  // project-rome/@romejs/js-ast-utils/getBindingIdentifiers.ts
function ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
		node,
	) {
		const ids = [];
		let queue = Array.isArray(node) ? [...node] : [node];

		while (queue.length) {
			const node = queue.pop();
			if (node === undefined) {
				continue;
			}

			if (node.type === "JSBindingIdentifier") {
				ids.push(node);
				continue;
			}

			const keys = ___R$project$rome$$romejs$ast$js$utils_ts$bindingKeys.get(
				node.type,
			);
			if (keys === undefined) {
				continue;
			}

			for (const key of keys) {
				// rome-ignore lint/js/noExplicitAny
				const val = (node)[key];
				if (val === undefined) {
					continue;
				} else if (Array.isArray(val)) {
					queue = queue.concat(val);
				} else {
					queue.push(val);
				}
			}
		}

		return ids;
	}


  // project-rome/@romejs/js-ast-utils/getCompletionRecords.ts






	function ___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$getIfCompletionRecords(
		node,
		parent,
		key,
	) {
		if (node === undefined) {
			return [
				{
					type: "INVALID",
					description: "empty " + key,
					node: parent,
				},
			];
		} else {
			return ___R$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$default(
				node,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$getLastCompletionRecordFromNodes(
		nodes,
	) {
		// Get the last node to produce records
		for (let i = nodes.length - 1; i >= 0; i--) {
			const node = nodes[i];
			const records = ___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$_getCompletionRecords(
				node,
			);
			if (records !== undefined) {
				return records;
			}
		}
		return undefined;
	}

	function ___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$_getCompletionRecords(
		node,
	) {
		if (node.type === "JSBlockStatement") {
			const records = ___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$getLastCompletionRecordFromNodes(
				node.body,
			);
			if (records !== undefined) {
				return records;
			}

			return [
				{
					type: "INVALID",
					description: "empty block",
					node,
				},
			];
		}

		if (node.type === "JSSwitchStatement") {
			for (const caseNode of node.cases) {
				if (caseNode.test === undefined) {
					const records = ___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$getLastCompletionRecordFromNodes(
						caseNode.consequent,
					);
					if (records === undefined) {
						return [
							{
								type: "INVALID",
								description: "default switch clause with no completions",
								node: caseNode,
							},
						];
					} else {
						return records;
					}
				}
			}

			return [
				{
					type: "INVALID",
					description: "switch with no default clause",
					node,
				},
			];
		}

		if (node.type === "JSIfStatement") {
			return [
				...___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$getIfCompletionRecords(
					node.consequent,
					node,
					"consequent",
				),
				...___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$getIfCompletionRecords(
					node.alternate,
					node,
					"alternate",
				),
			];
		}

		if (
			node.type === "JSReturnStatement" ||
			node.type === "JSContinueStatement" ||
			node.type === "JSBreakStatement" ||
			node.type === "JSThrowStatement"
		) {
			return [
				{
					type: "COMPLETION",
					node,
				},
			];
		}

		return undefined;
	}

	function ___R$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$default(
		node,
	) {
		const records = ___R$$priv$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$_getCompletionRecords(
			node,
		);
		if (records === undefined) {
			return [
				{
					type: "INVALID",
					description: "invalid node",
					node,
				},
			];
		} else {
			return records;
		}
	}


  // project-rome/@romejs/js-ast-utils/getImportSpecifiers.ts
function ___R$project$rome$$romejs$js$ast$utils$getImportSpecifiers_ts$default(
		node,
	) {
		let specifiers = [];

		if (node.defaultSpecifier !== undefined) {
			specifiers.push(node.defaultSpecifier);
		}

		if (node.namespaceSpecifier !== undefined) {
			specifiers.push(node.namespaceSpecifier);
		}

		specifiers = specifiers.concat(node.namedSpecifiers);

		return specifiers;
	}


  // project-rome/@romejs/js-ast-utils/getPrecedence.ts
const ___R$$priv$project$rome$$romejs$js$ast$utils$getPrecedence_ts$PRECEDENCE = {
		"||": 0,
		"&&": 1,
		"??": 1,
		"|": 2,
		"^": 3,
		"&": 4,
		"==": 5,
		"===": 5,
		"!=": 5,
		"!==": 5,
		"<": 6,
		">": 6,
		"<=": 6,
		">=": 6,
		in: 6,
		instanceof: 6,
		">>": 7,
		"<<": 7,
		">>>": 7,
		"+": 8,
		"-": 8,
		"*": 9,
		"/": 9,
		"%": 9,
		"**": 10,
	};

	function ___R$project$rome$$romejs$js$ast$utils$getPrecedence_ts$default(
		operator,
	) {
		return ___R$$priv$project$rome$$romejs$js$ast$utils$getPrecedence_ts$PRECEDENCE[operator];
	}


  // project-rome/@romejs/js-ast-utils/getRequireSource.ts
function ___R$project$rome$$romejs$js$ast$utils$getRequireSource_ts$default(
		node,
		scope,
		allowStaticMember = false,
	) {
		if (node === undefined) {
			return undefined;
		}

		if (
			allowStaticMember &&
			node.type === "JSMemberExpression" &&
			node.property.type === "JSStaticMemberProperty"
		) {
			node = node.object;
		}

		if (node.type !== "JSCallExpression") {
			return undefined;
		}

		const {arguments: args, callee} = node;

		const [firstArg] = args;
		if (args.length !== 1 || firstArg.type !== "JSStringLiteral") {
			return undefined;
		}

		const validRequireCallee =
			callee.type === "JSReferenceIdentifier" &&
			callee.name === "require" &&
			scope.getBinding("require") === undefined;

		const validRomeRequreCallee =
			(___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
				callee,
				"Rome.requireDefault",
			) ||
			___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
				callee,
				"Rome.requireNamespace",
			)) &&
			scope.getBinding("Rome") === undefined;

		if (validRequireCallee || validRomeRequreCallee) {
			return firstArg.value;
		}

		return undefined;
	}


  // project-rome/@romejs/js-ast-utils/hasPotentialSideEffects.ts
function ___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
		node,
		scope,
	) {
		if (node === undefined) {
			return false;
		}

		switch (node.type) {
			case "JSExportLocalDeclaration":
				if (node.declaration === undefined) {
					return false;
				} else {
					return ___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
						node.declaration,
						scope,
					);
				}

			case "JSExportExternalDeclaration":
				return true;

			case "JSFunctionExpression":
			case "JSFunctionDeclaration":
				return false;

			case "JSClassDeclaration":
				return (
					node.meta.superClass !== undefined ||
					!___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
						node.meta.superClass,
						scope,
					)
				);

			case "JSReferenceIdentifier":
				// Variables that aren't in scope and aren't registered globals could trigger a getter
				// Unlikely but let's aim for 100% correctness
				return (
					scope.getRootScope().isGlobal(node.name) ||
					scope.hasBinding(node.name)
				);

			case "JSVariableDeclaration": {
				for (const declarator of node.declarations) {
					if (
						___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
							declarator,
							scope,
						)
					) {
						return true;
					}
				}
				return false;
			}

			case "JSVariableDeclarator":
				return (
					___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
						node.id,
						scope,
					) ||
					___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
						node.init,
						scope,
					)
				);

			case "JSSpreadProperty":
			case "JSSpreadElement":
				return ___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
					node.argument,
					scope,
				);

			case "JSBindingAssignmentPattern":
				return ___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
					node.right,
					scope,
				);

			case "JSObjectExpression":
			case "JSBindingObjectPattern": {
				for (const prop of node.properties) {
					if (
						___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
							prop,
							scope,
						)
					) {
						return true;
					}
				}
				return false;
			}

			case "JSStaticPropertyKey":
				return false;

			case "JSComputedPropertyKey":
				return ___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
					node.value,
					scope,
				);

			case "JSBindingObjectPatternProperty":
			case "JSObjectProperty":
				return (
					___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
						node.key,
						scope,
					) ||
					___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
						node.value,
						scope,
					)
				);

			case "JSBindingArrayPattern":
			case "JSArrayExpression": {
				for (const elem of node.elements) {
					if (
						___R$project$rome$$romejs$js$ast$utils$hasPotentialSideEffects_ts$default(
							elem,
							scope,
						)
					) {
						return true;
					}
				}
				return false;
			}

			case "JSStringLiteral":
			case "JSNumericLiteral":
			case "JSBooleanLiteral":
			case "JSNullLiteral":
				return false;
		}

		return true;
	}


  // project-rome/@romejs/js-ast-utils/inheritLoc.ts
function ___R$project$rome$$romejs$js$ast$utils$inheritLoc_ts$default(
		node,
		name,
	) {
		const {loc} = node;
		if (loc === undefined) {
			return undefined;
		}

		// Inherit new name if specified
		if (name !== undefined) {
			return Object.assign({}, loc, {identifierName: name});
		}

		// Don't infer a name if it already has one
		if (loc.identifierName !== undefined) {
			return loc;
		}

		// If this location has no identifierName and we're an JSIdentifier then inherit it

		// TODO maybe handle other identifier types? JSXIdentifier etc?
		if (node.type === "JSIdentifier") {
			return Object.assign({}, loc, {identifierName: node.name});
		}

		return loc;
	}


  // project-rome/@romejs/js-ast-utils/isBinary.ts
function ___R$project$rome$$romejs$js$ast$utils$isBinary_ts$default(node) {
		if (node === undefined) {
			return false;
		}

		switch (node.type) {
			case "JSBinaryExpression":
			case "JSLogicalExpression":
				return true;

			default:
				return false;
		}
	}


  // project-rome/@romejs/js-ast-utils/isConditional.ts
function ___R$project$rome$$romejs$js$ast$utils$isConditional_ts$default(node) {
		if (node === undefined) {
			return false;
		}

		switch (node.type) {
			case "JSConditionalExpression":
			case "JSIfStatement":
				return true;

			default:
				return false;
		}
	}


  // project-rome/@romejs/js-ast-utils/isDeclaration.ts
function ___R$project$rome$$romejs$js$ast$utils$isDeclaration_ts$default(node) {
		if (node === undefined) {
			return false;
		}

		switch (node.type) {
			case "JSFunctionDeclaration":
			case "JSClassDeclaration":
			case "JSExportAllDeclaration":
			case "JSExportDefaultDeclaration":
			case "JSExportLocalDeclaration":
			case "JSImportDeclaration":
			case "JSVariableDeclarationStatement":
			case "JSExportExternalDeclaration":
			case "TSDeclareFunction":
			case "TSEnumDeclaration":
			case "TSTypeAliasTypeAnnotation":
			case "TSExportAssignment":
			case "TSImportEqualsDeclaration":
			case "TSInterfaceDeclaration":
			case "TSModuleDeclaration":
			case "TSNamespaceExportDeclaration": {
				const declaration = node;
				declaration;
				return true;
			}

			default: {
				const notDeclaration = node;
				notDeclaration;
				return false;
			}
		}
	}


  // project-rome/@romejs/js-ast-utils/isFor.ts
function ___R$project$rome$$romejs$js$ast$utils$isFor_ts$default(node) {
		if (node === undefined) {
			return false;
		}

		switch (node.type) {
			case "JSForStatement":
			case "JSForInStatement":
			case "JSForOfStatement":
				return true;

			default:
				return false;
		}
	}


  // project-rome/@romejs/js-ast-utils/isFunctionNode.ts
function ___R$project$rome$$romejs$js$ast$utils$isFunctionNode_ts$default(node) {
		return (
			node.type === "JSFunctionDeclaration" ||
			node.type === "JSFunctionExpression" ||
			node.type === "JSObjectMethod" ||
			node.type === "JSArrowFunctionExpression" ||
			node.type === "JSClassMethod"
		);
	}


  // project-rome/@romejs/js-ast-utils/isTypeNode.ts
function ___R$project$rome$$romejs$js$ast$utils$isTypeNode_ts$default(node) {
		if (
			node.type.startsWith("Flow") ||
			node.type.startsWith("TS") ||
			node.type.endsWith("TypeAnnotation")
		) {
			return true;
		} else if (node.type === "JSImportDeclaration") {
			return node.importKind === "type" || node.importKind === "typeof";
		} else if (
			node.type === "JSExportDefaultDeclaration" ||
			node.type === "JSExportLocalDeclaration" ||
			node.type === "JSExportAllDeclaration"
		) {
			return node.exportKind === "type";
		} else {
			return false;
		}
	}


  // project-rome/@romejs/js-ast-utils/isTypeExpressionWrapperNode.ts
function ___R$project$rome$$romejs$js$ast$utils$isTypeExpressionWrapperNode_ts$default(
		node,
	) {
		return (
			node.type === "TSAsExpression" ||
			node.type === "TSTypeAssertion" ||
			node.type === "TSNonNullExpression"
		);
	}


  // project-rome/@romejs/js-ast-utils/isInTypeAnnotation.ts
// Is this honestly the best heuristics?
	function ___R$$priv$project$rome$$romejs$js$ast$utils$isInTypeAnnotation_ts$getTypeNode(
		path,
	) {
		const {parent, parentPath} = path;
		if (parent === undefined || parentPath === undefined) {
			return undefined;
		}

		if (___R$project$rome$$romejs$js$ast$utils$isTypeNode_ts$default(parent)) {
			return parent;
		}

		if (
			___R$project$rome$$romejs$js$ast$utils$isTypeNode_ts$default(
				parentPath.parent,
			)
		) {
			return parentPath.parent;
		}

		return undefined;
	}

	function ___R$project$rome$$romejs$js$ast$utils$isInTypeAnnotation_ts$default(
		path,
	) {
		const match = ___R$$priv$project$rome$$romejs$js$ast$utils$isInTypeAnnotation_ts$getTypeNode(
			path,
		);
		if (match === undefined) {
			return false;
		}

		if (
			___R$project$rome$$romejs$js$ast$utils$isTypeExpressionWrapperNode_ts$default(
				match,
			)
		) {
			return false;
		} else {
			return true;
		}
	}


  // project-rome/@romejs/js-ast-utils/isNodeLike.ts
function ___R$project$rome$$romejs$js$ast$utils$isNodeLike_ts$default(node) {
		if (node == null) {
			return false;
		} else {
			return (
				___R$project$rome$$romejs$typescript$helpers$index_ts$isPlainObject(
					node,
				) && typeof node.type === "string"
			);
		}
	}


  // project-rome/@romejs/js-ast-utils/isStatement.ts
function ___R$project$rome$$romejs$js$ast$utils$isStatement_ts$default(node) {
		if (node === undefined) {
			return false;
		}

		if (___R$project$rome$$romejs$js$ast$utils$isDeclaration_ts$default(node)) {
			return true;
		}

		switch (node.type) {
			case "JSBlockStatement":
			case "JSBreakStatement":
			case "JSContinueStatement":
			case "JSDebuggerStatement":
			case "JSDoWhileStatement":
			case "JSEmptyStatement":
			case "JSExpressionStatement":
			case "JSForInStatement":
			case "JSForStatement":
			case "JSIfStatement":
			case "JSLabeledStatement":
			case "JSReturnStatement":
			case "JSSwitchStatement":
			case "JSThrowStatement":
			case "JSTryStatement":
			case "JSWhileStatement":
			case "JSWithStatement":
			case "JSForOfStatement": {
				const statement = node;
				statement;
				return true;
			}

			default: {
				// Assert that all statements were handled
				const notStatement = node;
				notStatement;
				return false;
			}
		}
	}


  // project-rome/@romejs/js-ast-utils/isUnaryLike.ts
function ___R$project$rome$$romejs$js$ast$utils$isUnaryLike_ts$default(node) {
		if (node === undefined) {
			return false;
		}

		switch (node.type) {
			case "JSUnaryExpression":
			case "JSSpreadElement":
			case "JSSpreadProperty":
				return true;

			default:
				return false;
		}
	}


  // project-rome/@romejs/js-parser-utils/identifier.ts
const ___R$project$rome$$romejs$js$parser$utils$identifier_ts = {
		get keywordRelationalOperator() {
			return ___R$project$rome$$romejs$js$parser$utils$identifier_ts$keywordRelationalOperator;
		},
		isES2015ReservedWord: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isES2015ReservedWord,
		isReservedWord: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isReservedWord,
		isStrictReservedWord: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictReservedWord,
		isStrictBindReservedWord: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictBindReservedWord,
		isKeyword: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isKeyword,
		getFullCharCodeAt: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$getFullCharCodeAt,
		isIdentifierStart: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart,
		isIdentifierChar: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierChar,
	};
	const ___R$project$rome$$romejs$js$parser$utils$identifier_ts$keywordRelationalOperator = /^in(stanceof)?$/;

	function ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isES2015ReservedWord(
		word,
	) {
		return word === "enum" || word === "await";
	}

	function ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isReservedWord(
		word,
		inModule,
	) {
		return (inModule && word === "await") || word === "enum";
	}

	const ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$reservedWordsStrict = new Set([
		"implements",
		"interface",
		"let",
		"package",
		"private",
		"protected",
		"public",
		"static",
		"yield",
	]);
	function ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictReservedWord(
		word,
		inModule,
	) {
		return (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isReservedWord(
				word,
				inModule,
			) ||
			___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$reservedWordsStrict.has(
				word,
			)
		);
	}

	function ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictBindReservedWord(
		word,
		inModule,
	) {
		return (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictReservedWord(
				word,
				inModule,
			) ||
			word === "eval" ||
			word === "arguments"
		);
	}

	const ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$keywords = new Set([
		"break",
		"case",
		"catch",
		"continue",
		"debugger",
		"default",
		"do",
		"else",
		"finally",
		"for",
		"function",
		"if",
		"return",
		"switch",
		"throw",
		"try",
		"var",
		"const",
		"while",
		"with",
		"new",
		"this",
		"super",
		"class",
		"extends",
		"export",
		"import",
		"null",
		"true",
		"false",
		"in",
		"instanceof",
		"typeof",
		"void",
		"delete",
	]);

	function ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isKeyword(
		word,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$keywords.has(
			word,
		);
	}

	// ## Character categories
	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `bin/generate-identifier-regex.js`.
	let ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312e\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fea\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ae\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";

	let ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d4-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";

	const ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifierStart = new RegExp(
		"[" +
		___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifierStartChars +
		"]",
	);
	const ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifier = new RegExp(
		"[" +
		___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifierStartChars +
		___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifierChars +
		"]",
	);

	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by `bin/generate-identifier-regex.js`.

	/* prettier-ignore */
	const ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$astralIdentifierStartCodes = [
		0,
		11,
		2,
		25,
		2,
		18,
		2,
		1,
		2,
		14,
		3,
		13,
		35,
		122,
		70,
		52,
		268,
		28,
		4,
		48,
		48,
		31,
		14,
		29,
		6,
		37,
		11,
		29,
		3,
		35,
		5,
		7,
		2,
		4,
		43,
		157,
		19,
		35,
		5,
		35,
		5,
		39,
		9,
		51,
		157,
		310,
		10,
		21,
		11,
		7,
		153,
		5,
		3,
		0,
		2,
		43,
		2,
		1,
		4,
		0,
		3,
		22,
		11,
		22,
		10,
		30,
		66,
		18,
		2,
		1,
		11,
		21,
		11,
		25,
		71,
		55,
		7,
		1,
		65,
		0,
		16,
		3,
		2,
		2,
		2,
		26,
		45,
		28,
		4,
		28,
		36,
		7,
		2,
		27,
		28,
		53,
		11,
		21,
		11,
		18,
		14,
		17,
		111,
		72,
		56,
		50,
		14,
		50,
		785,
		52,
		76,
		44,
		33,
		24,
		27,
		35,
		42,
		34,
		4,
		0,
		13,
		47,
		15,
		3,
		22,
		0,
		2,
		0,
		36,
		17,
		2,
		24,
		85,
		6,
		2,
		0,
		2,
		3,
		2,
		14,
		2,
		9,
		8,
		46,
		39,
		7,
		3,
		1,
		3,
		21,
		2,
		6,
		2,
		1,
		2,
		4,
		4,
		0,
		19,
		0,
		13,
		4,
		159,
		52,
		19,
		3,
		54,
		47,
		21,
		1,
		2,
		0,
		185,
		46,
		42,
		3,
		37,
		47,
		21,
		0,
		60,
		42,
		86,
		25,
		391,
		63,
		32,
		0,
		257,
		0,
		11,
		39,
		8,
		0,
		22,
		0,
		12,
		39,
		3,
		3,
		55,
		56,
		264,
		8,
		2,
		36,
		18,
		0,
		50,
		29,
		113,
		6,
		2,
		1,
		2,
		37,
		22,
		0,
		698,
		921,
		103,
		110,
		18,
		195,
		2749,
		1070,
		4050,
		582,
		8634,
		568,
		8,
		30,
		114,
		29,
		19,
		47,
		17,
		3,
		32,
		20,
		6,
		18,
		881,
		68,
		12,
		0,
		67,
		12,
		65,
		1,
		31,
		6124,
		20,
		754,
		9486,
		286,
		82,
		395,
		2309,
		106,
		6,
		12,
		4,
		8,
		8,
		9,
		5991,
		84,
		2,
		70,
		2,
		1,
		3,
		0,
		3,
		1,
		3,
		3,
		2,
		11,
		2,
		0,
		2,
		6,
		2,
		64,
		2,
		3,
		3,
		7,
		2,
		6,
		2,
		27,
		2,
		3,
		2,
		4,
		2,
		0,
		4,
		6,
		2,
		339,
		3,
		24,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		7,
		4149,
		196,
		60,
		67,
		1213,
		3,
		2,
		26,
		2,
		1,
		2,
		0,
		3,
		0,
		2,
		9,
		2,
		3,
		2,
		0,
		2,
		0,
		7,
		0,
		5,
		0,
		2,
		0,
		2,
		0,
		2,
		2,
		2,
		1,
		2,
		0,
		3,
		0,
		2,
		0,
		2,
		0,
		2,
		0,
		2,
		0,
		2,
		1,
		2,
		0,
		3,
		3,
		2,
		6,
		2,
		3,
		2,
		3,
		2,
		0,
		2,
		9,
		2,
		16,
		6,
		2,
		2,
		4,
		2,
		16,
		4421,
		42710,
		42,
		4148,
		12,
		221,
		3,
		5761,
		15,
		7472,
		3104,
		541,
	];
	/* prettier-ignore */
	const ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$astralIdentifierCodes = [
		509,
		0,
		227,
		0,
		150,
		4,
		294,
		9,
		1368,
		2,
		2,
		1,
		6,
		3,
		41,
		2,
		5,
		0,
		166,
		1,
		1306,
		2,
		54,
		14,
		32,
		9,
		16,
		3,
		46,
		10,
		54,
		9,
		7,
		2,
		37,
		13,
		2,
		9,
		52,
		0,
		13,
		2,
		49,
		13,
		10,
		2,
		4,
		9,
		83,
		11,
		7,
		0,
		161,
		11,
		6,
		9,
		7,
		3,
		57,
		0,
		2,
		6,
		3,
		1,
		3,
		2,
		10,
		0,
		11,
		1,
		3,
		6,
		4,
		4,
		193,
		17,
		10,
		9,
		87,
		19,
		13,
		9,
		214,
		6,
		3,
		8,
		28,
		1,
		83,
		16,
		16,
		9,
		82,
		12,
		9,
		9,
		84,
		14,
		5,
		9,
		423,
		9,
		280,
		9,
		41,
		6,
		2,
		3,
		9,
		0,
		10,
		10,
		47,
		15,
		406,
		7,
		2,
		7,
		17,
		9,
		57,
		21,
		2,
		13,
		123,
		5,
		4,
		0,
		2,
		1,
		2,
		6,
		2,
		0,
		9,
		9,
		19719,
		9,
		135,
		4,
		60,
		6,
		26,
		9,
		1016,
		45,
		17,
		3,
		19723,
		1,
		5319,
		4,
		4,
		5,
		9,
		7,
		3,
		6,
		31,
		3,
		149,
		2,
		1418,
		49,
		513,
		54,
		5,
		49,
		9,
		0,
		15,
		0,
		23,
		4,
		2,
		14,
		1361,
		6,
		2,
		16,
		3,
		6,
		2,
		1,
		2,
		4,
		2214,
		6,
		110,
		6,
		6,
		9,
		792487,
		239,
	];

	// Get the full char code at a certain position
	function ___R$project$rome$$romejs$js$parser$utils$identifier_ts$getFullCharCodeAt(
		str,
		offset,
	) {
		const code = str.charCodeAt(offset);
		if (code <= 55295 || code >= 57344) {
			return code;
		}

		const next = str.charCodeAt(offset + 1);
		return (code << 10) + next - 56613888;
	}

	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$isInAstralSet(
		code,
		set,
	) {
		let pos = 65536;
		for (let i = 0; i < set.length; i += 2) {
			pos += set[i];
			if (pos > code) {
				return false;
			}

			pos += set[i + 1];
			if (pos >= code) {
				return true;
			}
		}
		return false;
	}

	// Test whether a given character code starts an identifier.
	function ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart(
		code,
	) {
		if (code === undefined) {
			return false;
		}

		if (code < 65) {
			return code === 36;
		}

		if (code < 91) {
			return true;
		}

		if (code < 97) {
			return code === 95;
		}

		if (code < 123) {
			return true;
		}

		if (code <= 65535) {
			return (
				code >= 170 &&
				___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifierStart.test(
					String.fromCharCode(code),
				)
			);
		}

		return ___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$isInAstralSet(
			code,
			___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$astralIdentifierStartCodes,
		);
	}

	function ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierChar(
		code,
	) {
		if (code < 48) {
			return code === 36;
		}

		if (code < 58) {
			return true;
		}

		if (code < 65) {
			return false;
		}

		if (code < 91) {
			return true;
		}

		if (code < 97) {
			return code === 95;
		}

		if (code < 123) {
			return true;
		}

		if (code <= 65535) {
			return (
				code >= 170 &&
				___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$nonASCIIidentifier.test(
					String.fromCharCode(code),
				)
			);
		}

		return (
			___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$isInAstralSet(
				code,
				___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$astralIdentifierStartCodes,
			) ||
			___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$isInAstralSet(
				code,
				___R$$priv$project$rome$$romejs$js$parser$utils$identifier_ts$astralIdentifierCodes,
			)
		);
	}


  // project-rome/@romejs/js-parser-utils/location.ts
const ___R$project$rome$$romejs$js$parser$utils$location_ts = {
		createIndexTracker: ___R$project$rome$$romejs$js$parser$utils$location_ts$createIndexTracker,
	};
	function ___R$project$rome$$romejs$js$parser$utils$location_ts$createIndexTracker() {
		return {index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0};
	}




  // project-rome/@romejs/js-parser-utils/regex.ts
const ___R$project$rome$$romejs$js$parser$utils$regex_ts = {
		validateRegexFlags: ___R$project$rome$$romejs$js$parser$utils$regex_ts$validateRegexFlags,
	};
	const ___R$$priv$project$rome$$romejs$js$parser$utils$regex_ts$VALID_REGEX_FLAGS = "gmsiyu".split(
		"",
	);

	// This is used by both rome-json and rome-js-parser to validate regex flags
	function ___R$project$rome$$romejs$js$parser$utils$regex_ts$validateRegexFlags(
		flags,
		onUnexpected,
	) {
		const foundFlags = new Set();
		for (let i = 0; i < flags.length; i++) {
			const flag = flags[i];

			if (
				___R$$priv$project$rome$$romejs$js$parser$utils$regex_ts$VALID_REGEX_FLAGS.includes(
					flag,
				)
			) {
				if (foundFlags.has(flag)) {
					onUnexpected(
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.DUPLICATE_FLAG,
						i,
					);
				} else {
					foundFlags.add(flag);
				}
			} else {
				onUnexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.INVALID_FLAG,
					i,
				);
			}
		}

		return foundFlags;
	}


  // project-rome/@romejs/js-parser-utils/whitespace.ts
const ___R$project$rome$$romejs$js$parser$utils$whitespace_ts = {
		get lineBreak() {
			return ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak;
		},
		get lineBreakG() {
			return ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreakG;
		},
		isNewLine: ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$isNewLine,
		get nonASCIIwhitespace() {
			return ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$nonASCIIwhitespace;
		},
		get skipWhiteSpace() {
			return ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$skipWhiteSpace;
		},
		get NEWLINE() {
			return ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$NEWLINE;
		},
	};
	const ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak = /\r\n?|\n|u2028|u2029/;
	const ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreakG = new RegExp(
		___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak.source,
		"g",
	);

	function ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$isNewLine(
		code,
	) {
		return code === 10 || code === 13 || code === 8232 || code === 8233;
	}

	const ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

	const ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

	const ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$NEWLINE = /\r\n|[\n\r\u2028\u2029]/;


  // project-rome/@romejs/js-parser-utils/index.ts



  // project-rome/@romejs/js-ast-utils/isValidIdentifierName.ts
function ___R$project$rome$$romejs$js$ast$utils$isValidIdentifierName_ts$default(
		name,
	) {
		if (name.length === 0) {
			return false;
		}

		if (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictReservedWord(
				name,
				true,
			)
		) {
			return false;
		}

		if (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictBindReservedWord(
				name,
				true,
			)
		) {
			return false;
		}

		if (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isES2015ReservedWord(
				name,
			)
		) {
			return false;
		}

		if (___R$project$rome$$romejs$js$parser$utils$identifier_ts$isKeyword(name)) {
			return false;
		}

		if (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart(
				___R$project$rome$$romejs$js$parser$utils$identifier_ts$getFullCharCodeAt(
					name,
					0,
				),
			) ===
			false
		) {
			return false;
		}

		let i = 1;
		while (i < name.length) {
			const code = ___R$project$rome$$romejs$js$parser$utils$identifier_ts$getFullCharCodeAt(
				name,
				i,
			);
			if (
				___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierChar(
					code,
				)
			) {
				i += code <= 65535 ? 1 : 2;
			} else {
				return false;
			}
		}

		return true;
	}


  // project-rome/@romejs/js-ast-utils/isVariableIdentifier.ts
function ___R$project$rome$$romejs$js$ast$utils$isVariableIdentifier_ts$default(
		node,
	) {
		return (
			node.type === "JSBindingIdentifier" ||
			node.type === "JSAssignmentIdentifier" ||
			node.type === "JSReferenceIdentifier" ||
			node.type === "JSXReferenceIdentifier"
		);
	}


  // project-rome/@romejs/project/types.ts
const ___R$project$rome$$romejs$project$types_ts = {
		get DEFAULT_PROJECT_CONFIG_META() {
			return ___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG_META;
		},
		get DEFAULT_PROJECT_CONFIG() {
			return ___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG;
		},
	};

























	const ___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG_META = {
		projectFolder: undefined,
		configPath: undefined,
		configHashes: [],
		configDependencies: new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet(),
		consumer: undefined,
		configSourceSubKey: undefined,
		consumersChain: [],
	};

	const ___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG = {
		name: "unknown",
		root: false,
		version: undefined,
		cache: {},
		develop: {
			serveStatic: true,
		},
		bundler: {
			mode: "modern",
		},
		compiler: {},
		resolver: {},
		typeCheck: {
			enabled: false,
			// Maybe this needs to be cloned...?
			libs: new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet(),
		},
		dependencies: {
			enabled: false,
		},
		lint: {
			ignore: [],
			globals: [],
		},
		tests: {
			ignore: [],
		},
		vcs: {
			root: ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath("/"),
		},
		files: {
			vendorPath: ___R$project$rome$$romejs$path$index_ts$TEMP_PATH.append(
				"rome-remote",
			),
			assetExtensions: [],
			maxSize: 40000000, // 40 megabytes
		},
		targets: new Map(),
	};


  // project-rome/@romejs/path-match/types.ts



























  // project-rome/@romejs/path-match/parse.ts


	function ___R$$priv$project$rome$$romejs$path$match$parse_ts$isntNewline(char) {
		return char !== "\n";
	}

	const ___R$$priv$project$rome$$romejs$path$match$parse_ts$createPathMatchParser = ___R$project$rome$$romejs$parser$core$index_ts$createParser((
		ParserCore,
	) =>
		class PathMatchParser extends ParserCore {
			constructor(opts) {
				super(opts, "parse/patchMatch");
			}

			isWordCharacter(char, index, input) {
				const prevChar = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
					index,
				) - 1];
				const nextChar = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
					index,
				) + 1];

				if (char === "\n") {
					return false;
				}

				// Windows separator
				if (char === "\\" && nextChar === "\\") {
					return false;
				}

				// Any escaped character is a word character
				if (prevChar === "\\") {
					return true;
				}

				// Unix separator and wildcard
				if (char === "/") {
					return false;
				}

				// Wildcard
				if (char === "*") {
					return false;
				}

				return true;
			}

			tokenize(index, input) {
				const char = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index)];
				const nextChar = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
					index,
				) + 1];

				if (char === "*") {
					if (nextChar === "*") {
						return this.finishToken(
							"DoubleStar",
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, 2),
						);
					} else {
						return this.finishToken("Star");
					}
				} else if (
					index === ___R$project$rome$$romejs$ob1$index_ts$ob1Number0 &&
					char === "!"
				) {
					return this.finishToken("Exclamation");
				} else if (
					char === "#" &&
					this.getPositionFromIndex(index).column ===
					___R$project$rome$$romejs$ob1$index_ts$ob1Number0
				) {
					const [value, end] = this.readInputFrom(
						index,
						___R$$priv$project$rome$$romejs$path$match$parse_ts$isntNewline,
					);
					return this.finishValueToken("Comment", value, end);
				}

				if (char === "\n") {
					return this.finishToken("EOL");
				}

				if (char === "/") {
					return this.finishToken("Separator");
				} else if (char === "\\" && nextChar === "\\") {
					return this.finishToken(
						"Separator",
						___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, 2),
					);
				}

				const [value, end] = this.readInputFrom(
					index,
					this.isWordCharacter.bind(this),
				);
				return this.finishValueToken("Word", value, end);
			}

			eatSeparators() {
				let ate = false;
				while (this.eatToken("Separator") !== undefined) {
					ate = true;
				}
				return ate;
			}

			//# Pattern parsing
			parsePatternSegmentPart() {
				const startPos = this.getPosition();
				const token = this.getToken();
				this.nextToken();

				switch (token.type) {
					case "Star":
						return {
							type: "Wildcard",
							loc: this.finishLoc(startPos),
						};

					case "Word":
						return {
							type: "Word",
							loc: this.finishLoc(startPos),
							value: token.value,
						};

					default:
						throw this.unexpected({
							start: startPos,
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PATH_MATCH.INVALID_PATTERN_SEGMENT_PART,
						});
				}
			}

			parseSegment() {
				const startPos = this.getPosition();
				const parts = [];

				// A ** token is only allowed as the only part of a segment
				if (this.matchToken("DoubleStar")) {
					const lookahead = this.lookaheadToken();
					if (
						lookahead.type === "Separator" ||
						lookahead.type === "EOF" ||
						lookahead.type === "EOL"
					) {
						this.eatToken("DoubleStar");
						this.eatSeparators();
						return {
							type: "WildcardSegment",
							loc: this.finishLoc(startPos),
						};
					}
				}

				// Keep consuming tokens until we hit a separator or a comment
				while (
					!this.matchToken("Comment") &&
					!this.matchToken("EOF") &&
					!this.eatSeparators() &&
					!this.matchToken("EOL")
				) {
					parts.push(this.parsePatternSegmentPart());
				}

				return {
					loc: this.finishLoc(startPos),
					type: "Segment",
					parts,
				};
			}

			isWildcardOnlySegment(segment) {
				if (segment === undefined) {
					return false;
				}

				if (segment.type === "WildcardSegment") {
					return true;
				}

				if (segment.parts.length === 1 && segment.parts[0].type === "Wildcard") {
					return true;
				}

				return false;
			}

			// Normalize all path segments, removing empty segments and wildcards from the start and end
			// These could also be parse errors but let's allow them
			normalizePatternSegments(segments) {
				const normalized = [];

				// Never normalize it if there's a single segment. This is to support writing a pattern that's just "*"
				if (segments.length === 1) {
					return segments;
				}

				for (const seg of segments) {
					// Remove all wildcard-only segments from 'beginning
					if (normalized.length === 0 && this.isWildcardOnlySegment(seg)) {
						continue;
					}

					// Remove all empty segments
					if (seg.type === "Segment" && seg.parts.length === 0) {
						continue;
					}

					normalized.push(seg);
				}

				// TODO Remove duplicate wildcard segments
				// - Multiple WildcardSegment
				// - Wildcard next to a WildcardSegment
				// Remove all wildcard-only segments from end
				while (this.isWildcardOnlySegment(normalized[normalized.length - 1])) {
					normalized.pop();
				}

				return normalized;
			}

			eatEOL() {
				while (this.eatToken("EOL")) {
					// empty
				}
			}

			parsePatternsFile() {
				const patterns = [];

				while (true) {
					this.eatEOL();
					if (this.matchToken("EOF")) {
						break;
					}

					patterns.push(this.parsePattern());
				}

				this.finalize();
				return patterns;
			}

			parsePattern() {
				const startPos = this.getPosition();
				const segments = [];
				const negate = this.eatToken("Exclamation") !== undefined;

				// Keep parsing segments until we hit the end of the input or a comment
				while (
					!this.matchToken("Comment") &&
					!this.matchToken("EOF") &&
					!this.matchToken("EOL")
				) {
					segments.push(this.parseSegment());
				}

				// Get a trailing comment
				if (this.matchToken("Comment")) {
					const {value} = this.expectToken("Comment");
					return {
						type: "Comment",
						loc: this.finishLoc(startPos),
						value,
					};
				}

				let root = false;
				if (segments.length > 0) {
					const firstSeg = segments[0];
					root = firstSeg.type === "Segment" && firstSeg.parts.length === 0;
				}

				return {
					type: "PathPattern",
					loc: this.finishLoc(startPos),
					root,
					negate,
					segments: this.normalizePatternSegments(segments),
				};
			}

			parseSinglePattern() {
				const pattern = this.parsePattern();
				this.eatEOL();
				this.finalize();
				return pattern;
			}

			//# Path parsing
			parsePath() {
				const segments = [];

				this.eatSeparators();

				while (!this.matchToken("EOF")) {
					segments.push(this.parsePathSegment());
				}

				return segments;
			}

			parsePathSegment() {
				let segment = "";

				while (!this.eatSeparators() && !this.matchToken("EOF")) {
					segment += this.normalizePathSegmentToken();
				}

				return segment;
			}

			normalizePathSegmentToken() {
				const token = this.getToken();
				this.nextToken();

				if (token.type === "Word") {
					return token.value;
				} else {
					throw this.unexpected({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PATH_MATCH.INVALID_PATH_SEGMENT,
					});
				}
			}
		}
	);

	function ___R$project$rome$$romejs$path$match$parse_ts$parsePattern(opts) {
		const parser = ___R$$priv$project$rome$$romejs$path$match$parse_ts$createPathMatchParser(
			opts,
		);
		return parser.parseSinglePattern();
	}

	function ___R$project$rome$$romejs$path$match$parse_ts$parsePatternsFile(opts) {
		const parser = ___R$$priv$project$rome$$romejs$path$match$parse_ts$createPathMatchParser(
			opts,
		);
		return parser.parsePatternsFile();
	}


  // project-rome/@romejs/path-match/match.ts
function ___R$$priv$project$rome$$romejs$path$match$match_ts$matchSegment(
		path,
		patternSeg,
	) {
		if (patternSeg.type !== "Segment") {
			throw new Error("Expected only plain segment");
		}

		const parts = [...patternSeg.parts];
		let buffer = path;

		function matchPart(part) {
			// If the buffer is empty then it's impossible for anything to match
			if (buffer.length === 0) {
				return false;
			}

			if (part.type === "Word") {
				if (buffer.startsWith(part.value)) {
					buffer = buffer.slice(part.value.length);
				} else {
					return false;
				}
			} else if (part.type === "Wildcard") {
				const nextPart = parts.shift();

				// If there's no other parts then a wildcard matches any buffer
				if (nextPart === undefined) {
					return buffer.length > 0;
				}

				// Keep removing characters until we match the next part
				while (buffer.length > 0) {
					if (matchPart(nextPart)) {
						return true;
					}

					buffer = buffer.slice(1);
				}

				// We consumed the whole buffer and nothing matched
				return false;
			}

			return true;
		}

		while (parts.length > 0) {
			const part = parts.shift();
			if (part === undefined) {
				throw new Error("parts.length checked above");
			}

			if (matchPart(part) === false) {
				return false;
			}
		}

		return true;
	}

	function ___R$project$rome$$romejs$path$match$match_ts$default(
		pathSegs,
		pattern,
		cwdSegs,
	) {
		// Clone so we can freely mutate
		const patternSegs = [...pattern.segments];
		pathSegs = [...pathSegs];

		// Check if the pattern is empty
		if (patternSegs.length === 0 || pathSegs.length === 0) {
			return false;
		}

		// Quick optimization, check if the path contains all of the absolute names in the pattern
		for (const seg of patternSegs) {
			if (seg.type !== "Segment" || seg.parts.length !== 1) {
				continue;
			}

			const part = seg.parts[0];
			if (part.type === "Word" && !pathSegs.includes(part.value)) {
				return false;
			}
		}

		if (pattern.root && cwdSegs !== undefined) {
			cwdSegs = [...cwdSegs];

			// If this is a root pattern, then remove all the starting path segments that match the cwd
			for (const cwdSeg of cwdSegs) {
				const pathSeg = pathSegs.shift();
				if (cwdSeg === pathSeg) {
					continue;
				} else {
					return false;
				}
			}
		} else {
			// Start removing all the path segments until we find one that matches the first pattern segment
			const firstPatternSeg = patternSegs.shift();
			if (firstPatternSeg === undefined) {
				throw new Error("patternSegs.length already validated above");
			}

			while (pathSegs.length > 0) {
				const pathSeg = pathSegs.shift();
				if (pathSeg === undefined) {
					throw new Error("pathSegs.length already validated above");
				}

				if (
					___R$$priv$project$rome$$romejs$path$match$match_ts$matchSegment(
						pathSeg,
						firstPatternSeg,
					)
				) {
					if (pathSegs.length === 0 && patternSegs.length === 0) {
						// If there's no more path or pattern segments then this was a successfully match!
						return true;
					} else {
						// Make sure the rest match
						break;
					}
				}
			}
		}

		// If we consumed all the path segments then we didn't match anything
		if (pathSegs.length === 0) {
			return false;
		}

		// Match the rest of the path segments
		for (let i = 0; i < patternSegs.length; i++) {
			const patternSeg = patternSegs[i];

			// If we have no more path segments then it's impossible for this to match
			if (pathSegs.length === 0) {
				return false;
			}

			// When given a wildcard segment, keep popping off all the path segments until we find one that matches the next pattern segment
			if (patternSeg.type === "WildcardSegment") {
				const nextPattern = patternSegs[i + 1];
				while (
					pathSegs.length > 0 &&
					!___R$$priv$project$rome$$romejs$path$match$match_ts$matchSegment(
						pathSegs[0],
						nextPattern,
					)
				) {
					pathSegs.shift();
				}
				continue;
			}

			// Basic match
			const pathSeg = pathSegs.shift();
			if (pathSeg === undefined) {
				throw new Error("pathSegs.length already validated above");
			}
			if (
				___R$$priv$project$rome$$romejs$path$match$match_ts$matchSegment(
					pathSeg,
					patternSeg,
				)
			) {
				continue;
			} else {
				return false;
			}
		}

		return true;
	}


  // project-rome/@romejs/path-match/stringify.ts
function ___R$project$rome$$romejs$path$match$stringify_ts$stringifyPathPattern(
		node,
	) {
		switch (node.type) {
			case "Comment":
				return "#" + node.value;

			case "PathPattern":
				return node.segments.map((segment) =>
					___R$project$rome$$romejs$path$match$stringify_ts$stringifyPathPattern(
						segment,
					)
				).join("/");

			case "Segment":
				return node.parts.map((part) =>
					___R$project$rome$$romejs$path$match$stringify_ts$stringifyPathPattern(
						part,
					)
				).join("");

			case "WildcardSegment":
				return "**";

			case "Wildcard":
				return "*";

			case "Word":
				return node.value;
		}
	}


  // project-rome/@romejs/path-match/index.ts
function ___R$project$rome$$romejs$path$match$index_ts$flipPathPatterns(
		patterns,
	) {
		return patterns.map((pattern) => {
			if (pattern.type === "Comment") {
				return pattern;
			} else {
				return Object.assign({}, pattern, {negate: !pattern.negate});
			}
		});
	}

	function ___R$project$rome$$romejs$path$match$index_ts$matchPath(
		path,
		patternNode,
		cwdSegs,
	) {
		if (patternNode.type === "Comment") {
			return false;
		}

		const matches = ___R$project$rome$$romejs$path$match$match_ts$default(
			path.getSegments(),
			patternNode,
			cwdSegs,
		);

		if (patternNode.negate) {
			return !matches;
		} else {
			return matches;
		}
	}

	function ___R$$priv$project$rome$$romejs$path$match$index_ts$getGreater(
		pattern,
		num,
	) {
		if (pattern.type === "PathPattern" && pattern.segments.length > num) {
			return pattern.segments.length;
		} else {
			return num;
		}
	}



	function ___R$project$rome$$romejs$path$match$index_ts$matchPathPatterns(
		path,
		patterns,
		cwd,
	) {
		// Bail out if there are no patterns
		if (patterns.length === 0) {
			return "NO_MATCH";
		}

		let matches = 0;
		let notMatches = 0;

		let hasNegate = false;

		const pathSegments = path.getSegments();
		const cwdSegs = cwd === undefined ? undefined : cwd.getSegments();

		for (const pattern of patterns) {
			// No point in matching an empty pattern, could just contain a comment
			if (pattern.type === "Comment" || pattern.segments.length === 0) {
				continue;
			}

			if (pattern.negate) {
				hasNegate = true;
				if (
					___R$project$rome$$romejs$path$match$match_ts$default(
						pathSegments,
						Object.assign({}, pattern, {negate: false}),
						cwdSegs,
					)
				) {
					notMatches = ___R$$priv$project$rome$$romejs$path$match$index_ts$getGreater(
						pattern,
						notMatches,
					);
				}
			} else {
				if (
					___R$project$rome$$romejs$path$match$match_ts$default(
						pathSegments,
						pattern,
						cwdSegs,
					)
				) {
					matches = ___R$$priv$project$rome$$romejs$path$match$index_ts$getGreater(
						pattern,
						matches,
					);
				}
			}
		}

		// If we have a negate pattern, then we need to match more segments than it in order to qualify as a match
		if (hasNegate) {
			if (notMatches > matches) {
				return "NO_MATCH";
			} else if (matches > notMatches) {
				return "EXPLICIT_MATCH";
			} else {
				return "IMPLICIT_MATCH";
			}
		}

		if (matches > 0) {
			return "EXPLICIT_MATCH";
		}

		return "NO_MATCH";
	}


  // project-rome/@romejs/project/constants.ts
const ___R$project$rome$$romejs$project$constants_ts = {
		get ROME_CONFIG_PACKAGE_JSON_FIELD() {
			return ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_PACKAGE_JSON_FIELD;
		},
		get ROME_CONFIG_FILENAMES() {
			return ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_FILENAMES;
		},
		get ROME_CONFIG_WARN_FILENAMES() {
			return ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_WARN_FILENAMES;
		},
	};
	const ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_PACKAGE_JSON_FIELD = "rome";

	const ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_FILENAMES = [
		"rome.json",
		"rome.rjson",
	];

	const ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_WARN_FILENAMES = [
		"romeconfig",
		"romerc",
		"rome.son",
		"rome.config.ts",
		"rome.config.js",
		"rome.config.json",
		"rome.config.rjson",
		"rome.config.son",
	];

	// Add dot versions
	for (const basename of ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_WARN_FILENAMES) {
		if (basename[0] !== ".") {
			___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_WARN_FILENAMES.push(
				"." + basename,
			);
		}
	}
	for (const filename of ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_FILENAMES.slice()) {
		___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_FILENAMES.push(
			"." + filename,
		);
	}


  // project-rome/@romejs/project/utils.ts
const ___R$project$rome$$romejs$project$utils_ts = {
		assertHardMeta: ___R$project$rome$$romejs$project$utils_ts$assertHardMeta,
		arrayOfStrings: ___R$project$rome$$romejs$project$utils_ts$arrayOfStrings,
		arrayOfPatterns: ___R$project$rome$$romejs$project$utils_ts$arrayOfPatterns,
		mergeArrays: ___R$project$rome$$romejs$project$utils_ts$mergeArrays,
		mergeAbsoluteFilePathSets: ___R$project$rome$$romejs$project$utils_ts$mergeAbsoluteFilePathSets,
		getParentConfigDependencies: ___R$project$rome$$romejs$project$utils_ts$getParentConfigDependencies,
	};
	function ___R$project$rome$$romejs$project$utils_ts$assertHardMeta(meta) {
		const {configPath, projectFolder: folder, consumer} = meta;
		if (
			configPath === undefined ||
			folder === undefined ||
			consumer === undefined
		) {
			throw new Error("This is not a disk project");
		}

		return Object.assign(
			{},
			meta,
			{configPath, consumer, projectFolder: folder},
		);
	}

	function ___R$project$rome$$romejs$project$utils_ts$arrayOfStrings(consumer) {
		if (consumer.exists()) {
			return consumer.asArray().map((item) => item.asString());
		} else {
			return [];
		}
	}

	function ___R$project$rome$$romejs$project$utils_ts$arrayOfPatterns(consumer) {
		// TODO consumer.handleThrownDiagnostics
		return consumer.asArray().map((item) => {
			return ___R$project$rome$$romejs$path$match$parse_ts$parsePattern({
				path: consumer.filename,
				input: item.asString(),
				offsetPosition: item.getLocation("inner-value").start,
			});
		});
	}

	function ___R$project$rome$$romejs$project$utils_ts$mergeArrays(a, b) {
		if (a === undefined) {
			return a;
		}

		if (b === undefined) {
			return a;
		}

		return [...a, ...b];
	}

	function ___R$project$rome$$romejs$project$utils_ts$mergeAbsoluteFilePathSets(
		a,
		b,
	) {
		if (a === undefined) {
			return a;
		}

		if (b === undefined) {
			return a;
		}

		return new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet([
			...a,
			...b,
		]);
	}

	function ___R$project$rome$$romejs$project$utils_ts$getParentConfigDependencies(
		path,
	) {
		const deps = new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet();

		for (const folder of path.getChain()) {
			deps.add(folder.append("package.json"));

			for (const configFilename of ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_FILENAMES) {
				deps.add(folder.append(configFilename));
			}
		}

		return deps;
	}


  // project-rome/@romejs/fs/index.ts
const ___R$$priv$project$rome$$romejs$fs$index_ts$fs = _dereq_("fs");


	function ___R$$priv$project$rome$$romejs$fs$index_ts$promisifyData(
		path,
		factory,
	) {
		return new Promise((resolve, reject) => {
			factory(
				path.join(),
				(err, data) => {
					if (err === null) {
						resolve(data);
					} else {
						reject(err);
					}
				},
			);
		});
	}



	function ___R$$priv$project$rome$$romejs$fs$index_ts$promisifyVoid(
		path,
		factory,
	) {
		return new Promise((resolve, reject) => {
			factory(
				path.join(),
				(err) => {
					if (err === null) {
						resolve();
					} else {
						reject(err);
					}
				},
			);
		});
	}

	// watch
	function ___R$project$rome$$romejs$fs$index_ts$watch(path, options, listener) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$fs.watch(
			path.join(),
			options,
			listener,
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$readFile(path) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$promisifyData(
			path,
			(filename, callback) =>
				___R$$priv$project$rome$$romejs$fs$index_ts$fs.readFile(
					filename,
					callback,
				)
			,
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$readFileSync(path) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$fs.readFileSync(
			path.join(),
		);
	}

	async function ___R$project$rome$$romejs$fs$index_ts$readFileText(path) {
		return (await ___R$project$rome$$romejs$fs$index_ts$readFile(path)).toString();
	}

	function ___R$project$rome$$romejs$fs$index_ts$readFileTextSync(path) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$fs.readFileSync(
			path.join(),
			"utf8",
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$writeFile(path, content) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$promisifyVoid(
			path,
			(filename, callback) =>
				___R$$priv$project$rome$$romejs$fs$index_ts$fs.writeFile(
					filename,
					content,
					callback,
				)
			,
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$writeFileSync(path, content) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$fs.writeFileSync(
			path.join(),
			content,
		);
	}

	// readdir
	function ___R$$priv$project$rome$$romejs$fs$index_ts$createReaddirReturn(
		folder,
		files,
	) {
		return new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet(
			files.map((basename) => {
				return folder.append(basename);
			}),
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$readdir(path) {
		return new Promise((resolve, reject) => {
			___R$$priv$project$rome$$romejs$fs$index_ts$fs.readdir(
				path.join(),
				(err, files) => {
					if (err === null) {
						resolve(
							___R$$priv$project$rome$$romejs$fs$index_ts$createReaddirReturn(
								path,
								files,
							),
						);
					} else {
						reject(err);
					}
				},
			);
		});
	}

	function ___R$project$rome$$romejs$fs$index_ts$readdirSync(path) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$createReaddirReturn(
			path,
			___R$$priv$project$rome$$romejs$fs$index_ts$fs.readdirSync(path.join()),
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$lstat(path) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$promisifyData(
			path,
			(filename, callback) =>
				___R$$priv$project$rome$$romejs$fs$index_ts$fs.lstat(filename, callback)
			,
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$lstatSync(path) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$fs.lstatSync(path.join());
	}

	function ___R$project$rome$$romejs$fs$index_ts$exists(path) {
		return new Promise((resolve) => {
			___R$$priv$project$rome$$romejs$fs$index_ts$fs.exists(
				path.join(),
				(exists) => {
					resolve(exists);
				},
			);
		});
	}

	function ___R$project$rome$$romejs$fs$index_ts$existsSync(path) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$fs.existsSync(
			path.join(),
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$unlink(path) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$promisifyVoid(
			path,
			(filename, callback) =>
				___R$$priv$project$rome$$romejs$fs$index_ts$fs.unlink(
					filename,
					(err) => {
						if (err != null && err.code !== "ENOENT") {
							callback(err);
						} else {
							callback(null);
						}
					},
				)
			,
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$unlinkSync(path) {
		try {
			___R$$priv$project$rome$$romejs$fs$index_ts$fs.unlinkSync(path.join());
		} catch (err) {
			if (err.code !== "ENOENT") {
				throw err;
			}
		}
	}

	function ___R$project$rome$$romejs$fs$index_ts$createDirectory(
		path,
		opts = {},
	) {
		return ___R$$priv$project$rome$$romejs$fs$index_ts$promisifyVoid(
			path,
			(filename, callback) =>
				___R$$priv$project$rome$$romejs$fs$index_ts$fs.mkdir(
					filename,
					{
						recursive: opts.recursive,
					},
					callback,
				)
			,
		);
	}

	function ___R$project$rome$$romejs$fs$index_ts$createDirectorySync(
		path,
		opts = {},
	) {
		___R$$priv$project$rome$$romejs$fs$index_ts$fs.mkdirSync(
			path.join(),
			{recursive: opts.recursive},
		);
	}




  // project-rome/@romejs/codec-semver/compare.ts


	function ___R$$priv$project$rome$$romejs$codec$semver$compare_ts$compareIdentifiers(
		a,
		b,
	) {
		// Equal
		if (b === undefined) {
			return 0;
		}

		if (typeof a === "string" || typeof b === "string") {
			// @ts-ignore: built-in def is not restrictive enough
			return String(a).localeCompare(String(b));
		}

		// Less than
		if (a < b) {
			return -1;
		}

		// Greater than
		if (a > b) {
			return 1;
		}

		// Equal
		return 0;
	}

	function ___R$$priv$project$rome$$romejs$codec$semver$compare_ts$compareMain(
		version,
		range,
	) {
		return (
			___R$$priv$project$rome$$romejs$codec$semver$compare_ts$compareIdentifiers(
				version.major,
				range.major,
			) ||
			___R$$priv$project$rome$$romejs$codec$semver$compare_ts$compareIdentifiers(
				version.minor,
				range.minor,
			) ||
			___R$$priv$project$rome$$romejs$codec$semver$compare_ts$compareIdentifiers(
				version.patch,
				range.patch,
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$codec$semver$compare_ts$comparePre(
		version,
		range,
	) {
		// NOT having a prerelease is > having one
		if (version.prerelease.length > 0 && range.prerelease.length === 0) {
			return -1;
		} else if (version.prerelease.length === 0 && range.prerelease.length > 0) {
			return 1;
		} else if (version.prerelease.length === 0 && range.prerelease.length === 0) {
			return 0;
		}

		let i = 0;
		do {
			const a = version.prerelease[i];
			const b = range.prerelease[i];

			if (a === undefined && b === undefined) {
				return 0;
			} else if (b === undefined) {
				return 1;
			} else if (a === undefined) {
				return -1;
			} else if (a === b) {
				continue;
			} else {
				return ___R$$priv$project$rome$$romejs$codec$semver$compare_ts$compareIdentifiers(
					a,
					b,
				);
			}
		} while (++i);

		throw new Error("Unreachable");
	}

	function ___R$project$rome$$romejs$codec$semver$compare_ts$compareFromAst(
		version,
		range,
	) {
		return (
			___R$$priv$project$rome$$romejs$codec$semver$compare_ts$compareMain(
				version,
				range,
			) ||
			___R$$priv$project$rome$$romejs$codec$semver$compare_ts$comparePre(
				version,
				range,
			)
		);
	}


  // project-rome/@romejs/codec-semver/satisfies.ts
function ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$buildVersion(
		major,
		minor,
		patch,
	) {
		return {
			type: "WildcardVersion",
			major,
			minor,
			patch,
			prerelease: [],
			build: [],
		};
	}

	function ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
		op,
		version,
		range,
	) {
		if (range.type === "Wildcard") {
			return true;
		}

		switch (op) {
			case "=":
				return (
					___R$project$rome$$romejs$codec$semver$compare_ts$compareFromAst(
						version,
						range,
					) === 0
				);

			case "<":
				return (
					___R$project$rome$$romejs$codec$semver$compare_ts$compareFromAst(
						version,
						range,
					) < 0
				);

			case ">":
				return (
					___R$project$rome$$romejs$codec$semver$compare_ts$compareFromAst(
						version,
						range,
					) > 0
				);

			case ">=":
				return (
					___R$project$rome$$romejs$codec$semver$compare_ts$compareFromAst(
						version,
						range,
					) >= 0
				);

			case "<=":
				return (
					___R$project$rome$$romejs$codec$semver$compare_ts$compareFromAst(
						version,
						range,
					) <= 0
				);

			case "^": {
				// Make sure that the version isn't less than the range
				if (
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
						">=",
						version,
						range,
					) ===
					false
				) {
					return false;
				}

				// Deconstruct the range
				const {major, minor, patch} = range;

				if (major === 0) {
					if (minor === 0) {
						// ^0.0.3 := >=0.0.3 <0.0.4
						// @ts-ignore
						return ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
							"<",
							version,
							___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$buildVersion(
								0,
								0,
								patch + 1,
							),
						);
					} else {
						// ^0.2.3 := >=0.2.3 <0.3.0
						// @ts-ignore
						return ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
							"<",
							version,
							___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$buildVersion(
								0,
								minor + 1,
								0,
							),
						);
					}
				}

				// ^1.2.3 := >=1.2.3 <2.0.0

				// @ts-ignore
				return ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
					"<",
					version,
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$buildVersion(
						major + 1,
						0,
						0,
					),
				);
			}

			case "~>":
			case "~": {
				// Make sure that the version isn't less than the range
				if (
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
						">=",
						version,
						range,
					) ===
					false
				) {
					return false;
				}

				// Deconstruct the range
				const {major, minor} = range;

				if (minor === undefined) {
					// ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0 (Same as 1.x)
					// @ts-ignore
					return ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
						"<",
						version,
						___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$buildVersion(
							major + 1,
							minor,
							0,
						),
					);
				}

				// ~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0
				return ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
					"<",
					version,
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$buildVersion(
						major,
						minor + 1,
						0,
					),
				);
			}

			default:
				throw new Error("Unknown operator " + op);
		}
	}

	function ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$inRange(
		version,
		left,
		right,
	) {
		if (left.type === "Wildcard" || right.type === "Wildcard") {
			return true;
		}

		return (
			___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
				">=",
				version,
				left,
			) &&
			___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
				"<=",
				version,
				right,
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$collectVersions(
		range,
	) {
		switch (range.type) {
			case "AbsoluteVersion":
			case "WildcardVersion":
				return [range];

			case "Wildcard":
				return [];

			case "Comparator":
				return ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$collectVersions(
					range.version,
				);

			case "LogicalAnd":
			case "LogicalOr":
			case "VersionRange":
				return [
					...___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$collectVersions(
						range.left,
					),
					...___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$collectVersions(
						range.right,
					),
				];

			default:
				throw new Error("Unknown range type");
		}
	}

	function ___R$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesFromAst(
		version,
		range,
	) {
		const res = ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesSub(
			version,
			range,
		);
		if (res === false) {
			return false;
		}

		if (version.prerelease.length > 0) {
			// Find the set of versions that are allowed to have prereleases
			// For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
			// That should allow `1.2.3-pr.2` to pass.
			// However, `1.2.4-alpha.notready` should NOT be allowed,
			// even though it's within the range set by the comparators.
			const versions = ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$collectVersions(
				range,
			);

			for (const comparator of versions) {
				if (comparator.prerelease.length > 0) {
					if (
						comparator.major === version.major &&
						comparator.minor === version.minor &&
						comparator.patch === version.patch
					) {
						return true;
					}
				}
			}

			// Version has a -pre, but it's not one of the ones we like.
			return false;
		}

		return true;
	}

	function ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesSub(
		version,
		range,
	) {
		switch (range.type) {
			case "AbsoluteVersion":
			case "WildcardVersion":
				return ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
					"=",
					version,
					range,
				);

			case "Wildcard":
				return true;

			case "Comparator":
				return ___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$compareOp(
					range.operator,
					version,
					range.version,
				);

			case "LogicalAnd":
				return (
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesSub(
						version,
						range.left,
					) &&
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesSub(
						version,
						range.right,
					)
				);

			case "LogicalOr":
				return (
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesSub(
						version,
						range.left,
					) ||
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesSub(
						version,
						range.right,
					)
				);

			case "VersionRange":
				return (
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$inRange(
						version,
						range.left,
						range.right,
					) ||
					___R$$priv$project$rome$$romejs$codec$semver$satisfies_ts$inRange(
						version,
						range.right,
						range.left,
					)
				);
		}
	}


  // project-rome/@romejs/codec-semver/parse.ts




	const ___R$$priv$project$rome$$romejs$codec$semver$parse_ts$createSemverParser = ___R$project$rome$$romejs$parser$core$index_ts$createParser((
		ParserCore,
	) =>
		(() => {
			class SemverParser extends ParserCore {
				constructor({loose, ...opts}, mode) {
					super(opts, "parse/semver");
					this.input = this.input.trimRight();
					this.mode = mode;
					this.loose = loose === undefined ? false : loose;
				}

				// For some reason Flow will throw an error without the type casts...
				tokenize(index, input) {
					const char = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						index,
					)];
					const nextChar = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						index,
					) + 1];

					if (
						(char === "<" && nextChar === "=") ||
						(char === ">" && nextChar === "=") ||
						(char === "~" && nextChar === ">")
					) {
						// @ts-ignore: TS doesn't infer the possible combinations
						const value = char + nextChar;
						return this.finishValueToken(
							"Operator",
							value,
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, 2),
						);
					}

					if (
						char === "^" ||
						char === "<" ||
						char === ">" ||
						char === "~" ||
						char === "="
					) {
						const op = char;
						return this.finishValueToken("Operator", op);
					}

					if (char === "|" && nextChar === "|") {
						return this.finishToken(
							"Pipe",
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, 2),
						);
					}

					if (char === "*") {
						return this.finishToken("Star");
					}

					if (
						input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) - 1] ===
						" " &&
						char === "-" &&
						nextChar === " "
					) {
						return this.finishToken("RangeDash");
					}

					if (char === "-") {
						return this.finishToken("Dash");
					}

					if (char === "+") {
						return this.finishToken("Plus");
					}

					if (char === ".") {
						return this.finishToken("Dot");
					}

					if (___R$project$rome$$romejs$parser$core$index_ts$isDigit(char)) {
						const [value] = this.readInputFrom(
							index,
							___R$project$rome$$romejs$parser$core$index_ts$isDigit,
						);
						return this.finishValueToken(
							"Number",
							Number(value),
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, value.length),
						);
					}

					if (___R$project$rome$$romejs$parser$core$index_ts$isAlpha(char)) {
						const [value] = this.readInputFrom(
							index,
							___R$project$rome$$romejs$parser$core$index_ts$isAlpha,
						);
						return this.finishValueToken(
							"Word",
							value,
							___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, value.length),
						);
					}

					if (char === " " || char === "\t") {
						return this.finishToken("Space");
					}

					// Unknown character
					return undefined;
				}

				// Remove all subsequent space tokens
				eatSpaceToken() {
					while (this.eatToken("Space") !== undefined) {
						// empty
					}
				}

				parseVersionOrWildcard() {
					const startPos = this.getPosition();
					const startToken = this.getToken();
					const version = this.parseVersion();

					// We should return a bare wildcard when parsed in a version position if there was nothing else attached
					if (
						this.isWildcardToken(startToken) &&
						version.minor === undefined &&
						version.patch === undefined &&
						version.prerelease.length === 0 &&
						version.build.length === 0
					) {
						return {
							type: "Wildcard",
							loc: this.finishLoc(startPos),
						};
					}

					return version;
				}

				parseVersion() {
					const startPos = this.getPosition();
					const startToken = this.getToken();

					if (this.isVersionCharacter(startToken)) {
						this.nextToken();
					}

					const major = this.parseVersionNumber();
					let minor = undefined;
					let patch = undefined;

					if (this.eatToken("Dot")) {
						minor = this.parseVersionNumber();
					} else if (this.mode === "version") {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.MISSING_MINOR_VERSION,
						});
					}

					if (this.eatToken("Dot")) {
						patch = this.parseVersionNumber();
					} else if (this.mode === "version") {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.MISSING_PATCH_VERSION,
						});
					}

					if (this.matchToken("Dot")) {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.EXCESSIVE_VERSION_PARTS,
						});
					}

					// The dash is optional in loose mode. eg. 1.2.3pre
					let prerelease = [];
					if (this.eatToken("Dash") || (this.loose && this.matchToken("Word"))) {
						prerelease = this.parseVersionQualifierParts();
					}

					let build = [];
					if (this.eatToken("Plus")) {
						build = this.parseVersionQualifierParts();
					}

					if (major !== undefined && minor !== undefined && patch !== undefined) {
						return {
							type: "AbsoluteVersion",
							loc: this.finishLoc(startPos),
							major,
							minor,
							patch,
							prerelease,
							build,
						};
					} else {
						return {
							type: "WildcardVersion",
							loc: this.finishLoc(startPos),
							major,
							minor,
							patch,
							prerelease,
							build,
						};
					}
				}

				parseVersionQualifierParts() {
					const parts = [];
					do {
						parts.push(this.parseVersionQualifierPart());
					} while (this.eatToken("Dot") !== undefined);
					return parts;
				}

				parseVersionQualifierPart() {
					const parts = [];

					do {
						const token = this.getToken();

						if (token.type === "Number" || token.type === "Word") {
							this.nextToken();
							parts.push(token.value);
						} else if (token.type === "Dash") {
							this.nextToken();
							parts.push("-");
						} else {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.INVALID_QUANTIFIER_PART,
							});
						}
					} while (
						this.matchToken("Number") ||
						this.matchToken("Word") ||
						this.matchToken("Dash")
					);

					if (parts.length === 1 && typeof parts[0] === "number") {
						return parts[0];
					} else {
						return parts.join("");
					}
				}

				isWildcardToken(token) {
					if (token.type === "Star") {
						return true;
					}

					if (token.type === "Word") {
						return token.value === "x" || token.value === "X";
					}

					return false;
				}

				parseVersionNumber() {
					const token = this.getToken();

					if (token.type === "Number") {
						this.nextToken();
						return token.value;
					}

					if (this.isWildcardToken(token)) {
						if (this.mode === "version") {
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.WILDCARD_IN_VERSION,
							});
						}

						this.nextToken();
					} else {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.INVALID_VERSION_NUMBER,
						});
					}

					return undefined;
				}

				parseLogicalOr(left) {
					this.nextToken();
					this.eatSpaceToken();

					const right = this.parseExpression();
					return {
						loc: this.finishLoc(this.getLoc(left).start),
						type: "LogicalOr",
						left,
						right,
					};
				}

				validateRangeSide(node) {
					// In loose mode, we allow ranges to be a bare wildcard instead of a version
					// eg. * - 1.2.3
					if (node.type === "WildcardVersion" || node.type === "AbsoluteVersion") {
						return node;
					}

					if (node.type === "Wildcard" && this.loose) {
						return node;
					}

					throw this.unexpected(
						Object.assign(
							{},
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.INVALID_RANGE,
							{start: this.getLoc(node).start},
						),
					);
				}

				parseVersionRange(left) {
					this.nextToken();
					this.eatSpaceToken();

					const right = this.parseVersionOrWildcard();

					return {
						type: "VersionRange",
						loc: this.finishLoc(this.getLoc(left).start),
						left: this.validateRangeSide(left),
						right: this.validateRangeSide(right),
					};
				}

				parseWildcard() {
					const startPos = this.getPosition();
					this.nextToken();
					return {type: "Wildcard", loc: this.finishLoc(startPos)};
				}

				parseAtomOperator(token) {
					const startPos = this.getPosition();
					this.nextToken();
					this.eatSpaceToken();

					const version = this.parseVersionOrWildcard();

					return {
						type: "Comparator",
						loc: this.finishLoc(startPos),
						operator: token.value,
						version,
					};
				}

				isVersionCharacter(token) {
					if (this.loose && token.type === "Word") {
						return token.value === "v";
					}

					return false;
				}

				parseAtomStartPipe() {
					if (this.loose) {
						// A bare pipe in an atom start position is treated the same as a wildcard...
						// Why...? Because node-semver allows it lol
						// > satisfies('1.2.3', '||') === true
						return this.parseWildcard();
					} else {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.BARE_PIPE_WITHOUT_LOOSE,
						});
					}
				}

				parseAtomStartWord(token) {
					if (this.isWildcardToken(token)) {
						return this.parseWildcard();
					} else if (this.isVersionCharacter(token)) {
						return this.parseVersion();
					} else {
						throw this.unexpected({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.UNEXPECTED_WORD(
								token.value,
							),
						});
					}
				}

				parseAtom() {
					const token = this.getToken();

					switch (token.type) {
						case "Number":
							return this.parseVersion();

						case "Operator":
							return this.parseAtomOperator(token);

						case "Star":
							return this.parseWildcard();

						case "Pipe":
							return this.parseAtomStartPipe();

						case "Word":
							return this.parseAtomStartWord(token);

						default:
							throw this.unexpected({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.UNKNOWN_START,
							});
					}
				}

				parseLogicalAnd(left) {
					const right = this.parseExpression();

					return {
						type: "LogicalAnd",
						left,
						right,
						loc: {
							filename: this.filename,
							start: this.getLoc(left).start,
							end: this.getLoc(right).end,
						},
					};
				}

				parseExpression() {
					const left = this.parseAtom();
					this.eatSpaceToken();

					if (this.matchToken("RangeDash")) {
						return this.parseVersionRange(left);
					}

					if (this.matchToken("Pipe")) {
						return this.parseLogicalOr(left);
					}

					if (!this.matchToken("EOF")) {
						return this.parseLogicalAnd(left);
					}

					return left;
				}

				parseInitialRange() {
					// Allow spaces at the beginning, spaces at the end have been removed by the trimRight in the constructor
					this.eatSpaceToken();

					// Empty string is an implicit wildcard in loose mode
					if (this.matchToken("EOF") && this.loose) {
						return this.parseWildcard();
					}

					const expr = this.parseExpression();
					this.finalize();

					return expr;
				}

				parseInitialVersion() {
					const node = this.parseInitialRange();

					// Verify the return value in version mode
					if (node.type !== "AbsoluteVersion") {
						throw this.unexpected(
							Object.assign(
								{},
								___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SEMVER.EXPECTED_VERSION,
								{start: this.getLoc(node).start},
							),
						);
					}

					return node;
				}
			}
			return SemverParser;
		})()
	);

	function ___R$project$rome$$romejs$codec$semver$parse_ts$parseSemverRange(
		opts,
	) {
		return ___R$$priv$project$rome$$romejs$codec$semver$parse_ts$createSemverParser(
			opts,
			"range",
		).parseInitialRange();
	}

	function ___R$project$rome$$romejs$codec$semver$parse_ts$parseSemverVersion(
		opts,
	) {
		return ___R$$priv$project$rome$$romejs$codec$semver$parse_ts$createSemverParser(
			opts,
			"version",
		).parseInitialVersion();
	}


  // project-rome/@romejs/codec-semver/utils.ts
function ___R$project$rome$$romejs$codec$semver$utils_ts$normalizeUserVersion(
		ver,
		opts,
	) {
		if (typeof ver === "string") {
			return ___R$project$rome$$romejs$codec$semver$parse_ts$parseSemverVersion(
				Object.assign({}, opts, {input: ver}),
			);
		} else if (ver.type === "AbsoluteVersion") {
			return ver;
		} else {
			throw new Error("Not a valid version: " + ver.type);
		}
	}

	function ___R$project$rome$$romejs$codec$semver$utils_ts$normalizeUserRange(
		range,
		opts,
	) {
		if (typeof range === "string") {
			return ___R$project$rome$$romejs$codec$semver$parse_ts$parseSemverRange(
				Object.assign({}, opts, {input: range}),
			);
		} else {
			return range;
		}
	}


  // project-rome/@romejs/codec-semver/stringify.ts
// Remove all
	function ___R$$priv$project$rome$$romejs$codec$semver$stringify_ts$compactRight(
		parts,
	) {
		for (let i = parts.length - 1; i >= 0; i--) {
			const part = parts[i];
			if (part !== undefined) {
				return parts.slice(0, i + 1);
			}
		}

		return [];
	}

	const ___R$$priv$project$rome$$romejs$codec$semver$stringify_ts$WILDCARD = "*";

	function ___R$project$rome$$romejs$codec$semver$stringify_ts$default(node) {
		switch (node.type) {
			case "WildcardVersion":
			case "AbsoluteVersion": {
				// Build up x.x.x format
				let str = ___R$$priv$project$rome$$romejs$codec$semver$stringify_ts$compactRight([
					node.major,
					node.minor,
					node.patch,
				]).map((part) =>
					part === undefined
						? ___R$$priv$project$rome$$romejs$codec$semver$stringify_ts$WILDCARD
						: part
				).join(".");

				// add on qualifiers
				if (node.prerelease.length > 0) {
					str += "-" + node.prerelease.join(".");
				}
				if (node.build.length > 0) {
					str += "+" + node.build.join(".");
				}
				return str;
			}

			case "Wildcard":
				return ___R$$priv$project$rome$$romejs$codec$semver$stringify_ts$WILDCARD;

			case "Comparator":
				return (
					"" +
					node.operator +
					___R$project$rome$$romejs$codec$semver$stringify_ts$default(
						node.version,
					)
				);

			case "LogicalAnd":
				return (
					___R$project$rome$$romejs$codec$semver$stringify_ts$default(node.left) +
					" " +
					___R$project$rome$$romejs$codec$semver$stringify_ts$default(
						node.right,
					)
				);

			case "LogicalOr":
				return (
					___R$project$rome$$romejs$codec$semver$stringify_ts$default(node.left) +
					" || " +
					___R$project$rome$$romejs$codec$semver$stringify_ts$default(
						node.right,
					)
				);

			case "VersionRange":
				return (
					___R$project$rome$$romejs$codec$semver$stringify_ts$default(node.left) +
					" - " +
					___R$project$rome$$romejs$codec$semver$stringify_ts$default(
						node.right,
					)
				);
		}
	}


  // project-rome/@romejs/codec-semver/index.ts




	function ___R$project$rome$$romejs$codec$semver$index_ts$sortSemverVersions(
		rawVersions,
		opts,
	) {
		const versions = rawVersions.map((ver) =>
			___R$project$rome$$romejs$codec$semver$utils_ts$normalizeUserVersion(
				ver,
				opts,
			)
		);
		return versions.sort((a, b) =>
			___R$project$rome$$romejs$codec$semver$compare_ts$compareFromAst(a, b)
		);
	}

	function ___R$project$rome$$romejs$codec$semver$index_ts$maxSatisfyingSemver(
		rawVersions,
		rawRange,
		opts,
	) {
		const versions = ___R$project$rome$$romejs$codec$semver$index_ts$sortSemverVersions(
			rawVersions,
			opts,
		).reverse();
		const range = ___R$project$rome$$romejs$codec$semver$utils_ts$normalizeUserRange(
			rawRange,
			opts,
		);

		for (const version of versions) {
			if (
				___R$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesFromAst(
					version,
					range,
				)
			) {
				return version;
			}
		}

		return undefined;
	}

	function ___R$project$rome$$romejs$codec$semver$index_ts$minSatisfyingSemver(
		rawVersions,
		rawRange,
		opts,
	) {
		const versions = ___R$project$rome$$romejs$codec$semver$index_ts$sortSemverVersions(
			rawVersions,
			opts,
		);
		const range = ___R$project$rome$$romejs$codec$semver$utils_ts$normalizeUserRange(
			rawRange,
			opts,
		);

		for (const version of versions) {
			if (
				___R$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesFromAst(
					version,
					range,
				)
			) {
				return version;
			}
		}

		return undefined;
	}

	function ___R$project$rome$$romejs$codec$semver$index_ts$satisfiesSemver(
		rawVersion,
		rawRange,
		opts,
	) {
		try {
			const version = ___R$project$rome$$romejs$codec$semver$utils_ts$normalizeUserVersion(
				rawVersion,
				opts,
			);
			const range = ___R$project$rome$$romejs$codec$semver$utils_ts$normalizeUserRange(
				rawRange,
				opts,
			);
			return ___R$project$rome$$romejs$codec$semver$satisfies_ts$satisfiesFromAst(
				version,
				range,
			);
		} catch (err) {
			if (
				err instanceof
				___R$project$rome$$romejs$diagnostics$errors_ts$DiagnosticsError
			) {
				return false;
			} else {
				throw err;
			}
		}
	}


  // project-rome/@romejs/project/load.ts
const ___R$project$rome$$romejs$project$load_ts = {
		loadCompleteProjectConfig: ___R$project$rome$$romejs$project$load_ts$loadCompleteProjectConfig,
		normalizeProjectConfig: ___R$project$rome$$romejs$project$load_ts$normalizeProjectConfig,
	};
	const ___R$$priv$project$rome$$romejs$project$load_ts$crypto = _dereq_(
		"crypto",
	);
	const ___R$$priv$project$rome$$romejs$project$load_ts$IGNORE_FILENAMES = [
		".gitignore",
		".hgignore",
	];

	function ___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(
		consumer,
	) {
		if (!consumer.exists()) {
			return false;
		}

		const value = consumer.asUnknown();
		if (typeof value === "boolean") {
			consumer.unexpected(
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PROJECT_CONFIG.BOOLEAN_CATEGORY(
					value,
				),
			);
			return false;
		}

		return true;
	}

	function ___R$project$rome$$romejs$project$load_ts$loadCompleteProjectConfig(
		projectFolder,
		configPath,
	) {
		// TODO use consumer.capture somehow here to aggregate errors
		const {partial, meta} = ___R$$priv$project$rome$$romejs$project$load_ts$loadPartialProjectConfig(
			projectFolder,
			configPath,
		);
		const {consumer} = meta;

		// Produce a defaultConfig with some folder specific values
		const defaultConfig = Object.assign(
			{},
			___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG,
			{
				vcs: Object.assign(
					{},
					___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG.vcs,
					{root: projectFolder},
				),
			},
		);

		const name = consumer.get("name").asString(
			"project-" + projectFolder.getBasename(),
		);

		const config = Object.assign(
			{},
			___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG,
			{
				name,
				root: partial.root === undefined
					? ___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG.root
					: partial.root,
			},
			___R$$priv$project$rome$$romejs$project$load_ts$mergePartialConfig(
				defaultConfig,
				partial,
			),
		);

		// Infer VCS ignore files as lint ignore rules
		for (const filename of ___R$$priv$project$rome$$romejs$project$load_ts$IGNORE_FILENAMES) {
			const possiblePath = config.vcs.root.append(filename);
			meta.configDependencies.add(possiblePath);

			if (___R$project$rome$$romejs$fs$index_ts$existsSync(possiblePath)) {
				const file = ___R$project$rome$$romejs$fs$index_ts$readFileTextSync(
					possiblePath,
				);

				consumer.handleThrownDiagnostics(() => {
					const patterns = ___R$project$rome$$romejs$path$match$parse_ts$parsePatternsFile({
						input: file,
						path: possiblePath,
					});

					// TODO: Maybe these are useful in other places?
					config.lint.ignore = [...config.lint.ignore, ...patterns];
				});
			}
		}

		return {
			config,
			meta,
		};
	}

	function ___R$$priv$project$rome$$romejs$project$load_ts$loadPartialProjectConfig(
		projectFolder,
		configPath,
	) {
		const configFile = ___R$project$rome$$romejs$fs$index_ts$readFileTextSync(
			configPath,
		);
		const res = ___R$project$rome$$romejs$codec$json$index_ts$consumeJSONExtra({
			path: configPath,
			input: configFile,
		});

		return ___R$project$rome$$romejs$project$load_ts$normalizeProjectConfig(
			res,
			configPath,
			configFile,
			projectFolder,
		);
	}

	function ___R$project$rome$$romejs$project$load_ts$normalizeProjectConfig(
		res,
		configPath,
		configFile,
		projectFolder,
	) {
		let {consumer} = res;

		let configSourceSubKey;
		let name;
		const isInPackageJson = configPath.getBasename() === "package.json";
		if (isInPackageJson) {
			// Infer name from package.json
			name = consumer.get("name").asStringOrVoid();

			consumer = consumer.get(
				___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_PACKAGE_JSON_FIELD,
			);
			configSourceSubKey = ___R$project$rome$$romejs$project$constants_ts$ROME_CONFIG_PACKAGE_JSON_FIELD;
		}

		const hash = ___R$$priv$project$rome$$romejs$project$load_ts$crypto.createHash(
			"sha256",
		).update(configFile).digest("hex");

		const config = {
			compiler: {},
			bundler: {},
			cache: {},
			lint: {},
			resolver: {},
			develop: {},
			typeCheck: {},
			tests: {},
			files: {},
			vcs: {},
			dependencies: {},
			targets: new Map(),
		};

		if (name !== undefined) {
			config.name = name;
		}

		const meta = {
			projectFolder,
			configPath,
			consumer,
			consumersChain: [consumer],
			configHashes: [hash],
			configSourceSubKey,
			configDependencies: ___R$project$rome$$romejs$project$utils_ts$getParentConfigDependencies(
				projectFolder,
			),
		};

		// We never use `name` here but it's used in `loadCompleteProjectConfig`
		consumer.markUsedProperty("name");

		if (consumer.has("version")) {
			const version = consumer.get("version");

			consumer.handleThrownDiagnostics(() => {
				config.version = ___R$project$rome$$romejs$codec$semver$parse_ts$parseSemverRange({
					path: consumer.filename,
					input: version.asString(),
					offsetPosition: version.getLocation("inner-value").start,
				});

				// TODO verify that config.version range satisfies current version
			});
		}

		if (consumer.has("root")) {
			config.root = consumer.get("root").asBoolean();
		}

		const cache = consumer.get("cache");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(cache)) {
			// TODO
		}

		const resolver = consumer.get("resolver");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(resolver)) {
			// TODO
		}

		const bundler = consumer.get("bundler");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(bundler)) {
			if (bundler.has("mode")) {
				config.bundler.mode = bundler.get("mode").asStringSetOrVoid([
					"modern",
					"legacy",
				]);
			}
		}

		const typeChecking = consumer.get("typeChecking");
		if (
			___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(
				typeChecking,
			)
		) {
			if (typeChecking.has("enabled")) {
				config.typeCheck.enabled = typeChecking.get("enabled").asBoolean();
			}

			if (typeChecking.has("libs")) {
				const libs = ___R$$priv$project$rome$$romejs$project$load_ts$normalizeTypeCheckingLibs(
					projectFolder,
					typeChecking.get("libs"),
				);
				config.typeCheck.libs = libs.files;
				meta.configDependencies = new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet([
					...meta.configDependencies,
					...libs.folders,
					...libs.files,
				]);
			}
		}

		const dependencies = consumer.get("dependencies");
		if (
			___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(
				dependencies,
			)
		) {
			if (dependencies.has("enabled")) {
				config.dependencies.enabled = dependencies.get("dependencies").asBoolean();
			}
		}

		const lint = consumer.get("lint");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(lint)) {
			if (lint.has("ignore")) {
				config.lint.ignore = ___R$project$rome$$romejs$project$utils_ts$arrayOfPatterns(
					lint.get("ignore"),
				);
			}

			if (lint.has("globals")) {
				config.lint.globals = ___R$project$rome$$romejs$project$utils_ts$arrayOfStrings(
					lint.get("globals"),
				);
			}
		}

		const tests = consumer.get("tests");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(tests)) {
			if (tests.has("ignore")) {
				config.tests.ignore = ___R$project$rome$$romejs$project$utils_ts$arrayOfPatterns(
					tests.get("ignore"),
				);
			}
		}

		const develop = consumer.get("develop");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(develop)) {
			if (develop.has("serveStatic")) {
				config.develop.serveStatic = develop.get("serveStatic").asBoolean();
			}
		}

		const files = consumer.get("files");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(files)) {
			if (files.has("vendorPath")) {
				config.files.vendorPath = projectFolder.resolve(
					files.get("vendorPath").asString(),
				);
			}

			if (files.has("maxSize")) {
				config.files.maxSize = files.get("maxSize").asNumber();
			}

			if (files.has("assetExtensions")) {
				config.files.assetExtensions = files.get("assetExtensions").asArray().map((
					item,
				) => item.asString());
			}
		}

		const vcs = consumer.get("vcs");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(vcs)) {
			if (vcs.has("root")) {
				config.vcs.root = projectFolder.resolve(vcs.get("root").asString());
			}
		}

		const compiler = consumer.get("compiler");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(compiler)) {
			// TODO
		}

		const targets = consumer.get("targets");
		if (___R$$priv$project$rome$$romejs$project$load_ts$categoryExists(targets)) {
			for (const [name, object] of targets.asMap()) {
				const target = {
					constraints: object.get("constraints").asImplicitArray().map((item) =>
						item.asString()
					),
				};
				object.enforceUsedProperties("config target property");
				config.targets.set(name, target);
			}
		}

		// Need to get this before enforceUsedProperties so it will be flagged
		const _extends = consumer.get("extends");

		// Flag unknown properties
		consumer.enforceUsedProperties("config property");

		if (_extends.exists()) {
			return ___R$$priv$project$rome$$romejs$project$load_ts$extendProjectConfig(
				projectFolder,
				_extends,
				config,
				meta,
			);
		}

		return {
			partial: config,
			meta,
		};
	}

	function ___R$$priv$project$rome$$romejs$project$load_ts$normalizeTypeCheckingLibs(
		projectFolder,
		consumer,
	) {
		const libFiles = new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet();

		// Normalize library folders
		const folders = ___R$project$rome$$romejs$project$utils_ts$arrayOfStrings(
			consumer,
		).map((libFolder) => projectFolder.resolve(libFolder));

		// Crawl library folders and add their files
		for (const folder of folders) {
			const files = ___R$project$rome$$romejs$fs$index_ts$readdirSync(folder);
			for (const file of files) {
				const stats = ___R$project$rome$$romejs$fs$index_ts$lstatSync(file);
				if (stats.isFile()) {
					libFiles.add(file);
				} else if (stats.isDirectory()) {
					folders.push(file);
				}
			}
		}

		return {
			files: libFiles,
			folders,
		};
	}

	function ___R$$priv$project$rome$$romejs$project$load_ts$extendProjectConfig(
		projectFolder,
		extendsStrConsumer,
		config,
		meta,
	) {
		const extendsRelative = extendsStrConsumer.asString();

		if (extendsRelative === "parent") {
			// TODO maybe do some magic here?
		}

		const extendsPath = projectFolder.resolve(extendsRelative);
		const {partial: extendsObj, meta: extendsMeta} = ___R$$priv$project$rome$$romejs$project$load_ts$loadPartialProjectConfig(
			extendsPath.getParent(),
			extendsPath,
		);

		// Check for recursive config
		for (const path of extendsMeta.configDependencies) {
			if (path.equal(extendsPath)) {
				throw extendsStrConsumer.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PROJECT_CONFIG.RECURSIVE_CONFIG,
				);
			}
		}

		const merged = ___R$$priv$project$rome$$romejs$project$load_ts$mergePartialConfig(
			extendsObj,
			config,
		);

		const lintIgnore = ___R$project$rome$$romejs$project$utils_ts$mergeArrays(
			extendsObj.lint.ignore,
			config.lint.ignore,
		);
		if (lintIgnore !== undefined) {
			merged.lint.ignore = lintIgnore;
		}

		const lintGlobals = ___R$project$rome$$romejs$project$utils_ts$mergeArrays(
			extendsObj.lint.globals,
			config.lint.globals,
		);
		if (lintGlobals !== undefined) {
			merged.lint.globals = lintGlobals;
		}

		const testingIgnore = ___R$project$rome$$romejs$project$utils_ts$mergeArrays(
			extendsObj.tests.ignore,
			config.tests.ignore,
		);
		if (testingIgnore !== undefined) {
			merged.tests.ignore = testingIgnore;
		}

		const typeCheckingLibs = ___R$project$rome$$romejs$project$utils_ts$mergeAbsoluteFilePathSets(
			extendsObj.typeCheck.libs,
			config.typeCheck.libs,
		);
		if (typeCheckingLibs !== undefined) {
			merged.typeCheck.libs = typeCheckingLibs;
		}

		return {
			partial: merged,
			meta: Object.assign(
				{},
				meta,
				{
					consumersChain: [
						...meta.consumersChain,
						...extendsMeta.consumersChain,
					],
					configDependencies: new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet([
						...meta.configDependencies,
						...extendsMeta.configDependencies,
						extendsPath,
					]),
					configHashes: [...meta.configHashes, ...extendsMeta.configHashes],
				},
			),
		};
	}



	function ___R$$priv$project$rome$$romejs$project$load_ts$mergePartialConfig(
		a,
		b,
	) {
		return {
			cache: Object.assign({}, a.cache, b.cache),
			compiler: Object.assign({}, a.compiler, b.compiler),
			lint: Object.assign({}, a.lint, b.lint),
			develop: Object.assign({}, a.develop, b.develop),
			bundler: Object.assign({}, a.bundler, b.bundler),
			dependencies: Object.assign({}, a.dependencies, b.dependencies),
			resolver: Object.assign({}, a.resolver, b.resolver),
			typeCheck: Object.assign({}, a.typeCheck, b.typeCheck),
			tests: Object.assign({}, a.tests, b.tests),
			files: Object.assign({}, a.files, b.files),
			vcs: Object.assign({}, a.vcs, b.vcs),
			targets: new Map([...a.targets.entries(), ...b.targets.entries()]),
		};
	}


  // project-rome/@romejs/project/save.ts
const ___R$project$rome$$romejs$project$save_ts = {
		modifyProjectConfig: ___R$project$rome$$romejs$project$save_ts$modifyProjectConfig,
	};
	async function ___R$project$rome$$romejs$project$save_ts$modifyProjectConfig(
		softMeta,
		callbacks,
	) {
		const meta = ___R$project$rome$$romejs$project$utils_ts$assertHardMeta(
			softMeta,
		);
		const {configPath, configSourceSubKey: consumerSubKey} = meta;

		await callbacks.pre(meta);

		// Load the config file again
		const configFile = await ___R$project$rome$$romejs$fs$index_ts$readFileText(
			configPath,
		);
		const res = ___R$project$rome$$romejs$codec$json$index_ts$consumeJSONExtra({
			path: configPath,
			input: configFile,
		});

		const {consumer} = res;
		if (consumerSubKey === undefined) {
			await callbacks.modify(consumer);
		} else {
			await callbacks.modify(consumer.get(consumerSubKey));
		}

		// Stringify the config
		let stringified;
		if (res.hasExtensions) {
			stringified = ___R$project$rome$$romejs$codec$json$index_ts$stringifyRJSONFromConsumer(
				res,
			);
		} else {
			stringified = ___R$project$rome$$romejs$codec$json$index_ts$stringifyJSON(
				consumer.asUnknown(),
			);
		}

		// Test if this project config doesn't result in errors
		let {diagnostics} = ___R$project$rome$$romejs$diagnostics$wrap_ts$catchDiagnosticsSync(() => {
			// Reconsume with new stringified config
			const res = ___R$project$rome$$romejs$codec$json$index_ts$consumeJSONExtra({
				path: configPath,
				input: stringified,
			});

			// Validate the new config
			___R$project$rome$$romejs$project$load_ts$normalizeProjectConfig(
				res,
				configPath,
				stringified,
				meta.projectFolder,
			);
		});

		if (diagnostics !== undefined) {
			// Set the `code` property on relevant diagnostics since our changes don't exist on disk
			diagnostics = diagnostics.map((diag) => {
				return diag.location.filename === configPath.join()
					? Object.assign(
							{},
							diag,
							{
								location: Object.assign(
									{},
									diag.location,
									{sourceText: stringified},
								),
							},
						)
					: diag;
			});

			throw new ___R$project$rome$$romejs$diagnostics$errors_ts$DiagnosticsError(
				"Diagnostics produced while testing new project config",
				diagnostics,
			);
		}

		// Write it out
		await ___R$project$rome$$romejs$fs$index_ts$writeFile(
			configPath,
			stringified,
		);
	}


  // project-rome/@romejs/project/transport.ts
const ___R$project$rome$$romejs$project$transport_ts = {
		serializeJSONProjectConfig: ___R$project$rome$$romejs$project$transport_ts$serializeJSONProjectConfig,
		hydrateJSONProjectConfig: ___R$project$rome$$romejs$project$transport_ts$hydrateJSONProjectConfig,
	};
	function ___R$project$rome$$romejs$project$transport_ts$serializeJSONProjectConfig(
		config,
	) {
		const targets = {};
		for (const [name, target] of config.targets) {
			targets[name] = target;
		}

		return Object.assign(
			{},
			config,
			{
				vcs: Object.assign({}, config.vcs, {root: config.vcs.root.join()}),
				typeCheck: Object.assign(
					{},
					config.typeCheck,
					{libs: Array.from(config.typeCheck.libs, (path) => path.join())},
				),
				files: Object.assign(
					{},
					config.files,
					{vendorPath: config.files.vendorPath.join()},
				),
				targets,
			},
		);
	}

	function ___R$project$rome$$romejs$project$transport_ts$hydrateJSONProjectConfig(
		config,
	) {
		return Object.assign(
			{},
			config,
			{
				files: Object.assign(
					{},
					config.files,
					{
						vendorPath: ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
							config.files.vendorPath,
						),
					},
				),
				vcs: Object.assign(
					{},
					config.vcs,
					{
						root: ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
							config.vcs.root,
						),
					},
				),
				typeCheck: Object.assign(
					{},
					config.typeCheck,
					{
						libs: new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet(
							config.typeCheck.libs.map((str) =>
								___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
									str,
								)
							),
						),
					},
				),
				targets: new Map(Object.entries(config.targets)),
			},
		);
	}


  // project-rome/@romejs/project/index.ts



  // project-rome/@romejs/js-ast-utils/removeLoc.ts
function ___R$$priv$project$rome$$romejs$js$ast$utils$removeLoc_ts$removeProp(
		obj,
	) {
		const ___R$ = obj;
		const locless = Object.assign({}, ___R$);
		delete locless.loc;
		const {loc} = ___R$;
		loc;
		return locless;
	}

	const ___R$$priv$project$rome$$romejs$js$ast$utils$removeLoc_ts$removeLocTransform = [
		{
			name: "removeLocTransform",
			enter(path) {
				const {node} = path;
				if (node.loc === undefined) {
					return node;
				} else {
					const newNode = ___R$$priv$project$rome$$romejs$js$ast$utils$removeLoc_ts$removeProp(
						node,
					);

					// Also remove any `undefined` properties
					// rome-ignore lint/js/noExplicitAny
					const escaped = newNode;
					for (const key in newNode) {
						if (escaped[key] === undefined) {
							// rome-ignore lint/js/noDelete
							delete escaped[key];
						}
					}

					return (newNode);
				}
			},
		},
	];

	function ___R$project$rome$$romejs$js$ast$utils$removeLoc_ts$default(ast) {
		const context = new ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default({
			sourceText: "",
			ast: ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$MOCK_PROGRAM,
			project: {
				folder: undefined,
				config: ___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG,
			},
		});
		return context.reduce(
			ast,
			___R$$priv$project$rome$$romejs$js$ast$utils$removeLoc_ts$removeLocTransform,
		);
	}


  // project-rome/@romejs/js-ast-utils/removeShallowLoc.ts
function ___R$project$rome$$romejs$js$ast$utils$removeShallowLoc_ts$default(
		node,
	) {
		return Object.assign({}, node, {loc: undefined});
	}


  // project-rome/@romejs/js-ast-utils/renameBindings.ts
function ___R$project$rome$$romejs$js$ast$utils$renameBindings_ts$default(
		path,
		oldToNewMapping,
	) {
		if (oldToNewMapping.size === 0) {
			return path.node;
		}

		const oldBindingToNewName = new Map();

		// get a list of the current bindings for this scope
		const oldNameToBinding = new Map();
		for (const [oldName, newName] of oldToNewMapping) {
			if (typeof oldName === "string") {
				const binding = path.scope.getBinding(oldName);
				oldNameToBinding.set(oldName, binding);
			} else {
				oldBindingToNewName.set(oldName, newName);
			}
		}

		// discover nodes to replace first without manipulating the AST as that will change the scope and binding objects
		const replaceNodesWithName = new Map();
		path.traverse(
			"renameBindingsCollector",
			(path) => {
				const {node, scope} = path;
				if (
					!___R$project$rome$$romejs$js$ast$utils$isVariableIdentifier_ts$default(
						node,
					)
				) {
					return;
				}

				const binding = scope.getBinding(node.name);

				// oldName -> newName
				if (
					oldToNewMapping.has(node.name) &&
					binding === oldNameToBinding.get(node.name)
				) {
					const newName = oldToNewMapping.get(node.name);
					if (newName === undefined) {
						throw new Error("Should exist");
					}
					replaceNodesWithName.set(node, newName);
				}

				// Binding -> newName
				if (binding !== undefined && oldBindingToNewName.has(binding)) {
					const newName = oldBindingToNewName.get(binding);
					if (newName === undefined) {
						throw new Error("Should exist");
					}
					replaceNodesWithName.set(node, newName);
				}
			},
		);
		if (replaceNodesWithName.size === 0) {
			return path.node;
		}

		//
		const replaced = new Set();

		// replace the nodes
		const renamedNode = path.reduce(
			{
				name: "renameBindings",
				enter(path) {
					const {node} = path;

					// Retain the correct exported name for `export function` and `export class`
					if (
						node.type === "JSExportLocalDeclaration" &&
						node.declaration !== undefined &&
						(node.declaration.type === "JSFunctionDeclaration" ||
						node.declaration.type === "JSClassDeclaration")
					) {
						const newName = replaceNodesWithName.get(node.declaration.id);

						if (newName !== undefined) {
							replaced.add(node.declaration.id);

							const oldName = node.declaration.id.name;

							return ([
								node.declaration,
								___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts$jsExportLocalDeclaration.create({
									specifiers: [
										___R$project$rome$$romejs$ast$js$modules$JSExportLocalSpecifier_ts$jsExportLocalSpecifier.create({
											loc: node.declaration.id.loc,
											local: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
												newName,
											),
											exported: ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
												oldName,
											),
										}),
									],
								}),
							]);
						}
					}

					// Retain the correct exported names for `export const`
					if (
						node.type === "JSExportLocalDeclaration" &&
						node.declaration !== undefined
					) {
						const bindings = ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
							node.declaration,
						);
						let includesAny = false;
						for (const node of bindings) {
							if (replaceNodesWithName.has(node)) {
								includesAny = true;
								break;
							}
						}

						if (includesAny) {
							return ([
								node.declaration,
								___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts$jsExportLocalDeclaration.create({
									specifiers: bindings.map((node) => {
										let local = node.name;

										const newName = replaceNodesWithName.get(node);
										if (newName !== undefined) {
											local = newName;
											replaced.add(node);
										}

										return ___R$project$rome$$romejs$ast$js$modules$JSExportLocalSpecifier_ts$jsExportLocalSpecifier.create({
											loc: node.loc,
											local: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
												local,
											),
											exported: ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
												node.name,
											),
										});
									}),
								}),
							]);
						}
					}

					if (
						___R$project$rome$$romejs$js$ast$utils$isVariableIdentifier_ts$default(
							node,
						)
					) {
						const newName = replaceNodesWithName.get(node);
						if (newName !== undefined) {
							replaced.add(node);
							return Object.assign(
								{},
								node,
								{
									name: newName,
									loc: ___R$project$rome$$romejs$js$ast$utils$inheritLoc_ts$default(
										node,
										node.name,
									),
								},
							);
						}
					}

					return node;
				},
			},
			{
				noScopeCreation: true,
			},
		);

		//
		if (replaced.size !== replaceNodesWithName.size) {
			console.log({replaced, replaceNodesWithName});
			throw new Error("Missed some bindings");
		}

		return ___R$project$rome$$romejs$js$ast$utils$assertSingleOrMultipleNodes_ts$default(
			renamedNode,
		);
	}


  // project-rome/@romejs/js-parser/options.ts






	const ___R$$priv$project$rome$$romejs$js$parser$options_ts$DEFAULT_USER_OPTIONS = {
		// I want to kill this option very badly
		allowReturnOutsideFunction: false,
		// Source type ("template", "script" or "module") for different semantics
		sourceType: "script",
		// Whether we should be tracking tokens when parsing this file
		// NOTE: This is memory-intensive
		tokens: false,
		syntax: [],
		manifestPath: "package.json",
	};

	// Interpret and default an options object
	function ___R$project$rome$$romejs$js$parser$options_ts$normalizeOptions(opts) {
		return Object.assign(
			{},
			___R$$priv$project$rome$$romejs$js$parser$options_ts$DEFAULT_USER_OPTIONS,
			opts,
		);
	}


  // project-rome/@romejs/js-parser/xhtmlEntities.ts
const ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts = {
		get xhtmlEntityNameToChar() {
			return ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityNameToChar;
		},
		get xhtmlEntityCharToName() {
			return ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityCharToName;
		},
		escapeXHTMLEntities: ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$escapeXHTMLEntities,
	};
	const ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityNameToChar = {
		quot: '"',
		amp: "&",
		apos: "'",
		lt: "<",
		gt: ">",
		nbsp: "\xa0",
		iexcl: "\xa1",
		cent: "\xa2",
		pound: "\xa3",
		curren: "\xa4",
		yen: "\xa5",
		brvbar: "\xa6",
		sect: "\xa7",
		uml: "\xa8",
		copy: "\xa9",
		ordf: "\xaa",
		laquo: "\xab",
		not: "\xac",
		shy: "\xad",
		reg: "\xae",
		macr: "\xaf",
		deg: "\xb0",
		plusmn: "\xb1",
		sup2: "\xb2",
		sup3: "\xb3",
		acute: "\xb4",
		micro: "\xb5",
		para: "\xb6",
		middot: "\xb7",
		cedil: "\xb8",
		sup1: "\xb9",
		ordm: "\xba",
		raquo: "\xbb",
		frac14: "\xbc",
		frac12: "\xbd",
		frac34: "\xbe",
		iquest: "\xbf",
		Agrave: "\xc0",
		Aacute: "\xc1",
		Acirc: "\xc2",
		Atilde: "\xc3",
		Auml: "\xc4",
		Aring: "\xc5",
		AElig: "\xc6",
		Ccedil: "\xc7",
		Egrave: "\xc8",
		Eacute: "\xc9",
		Ecirc: "\xca",
		Euml: "\xcb",
		Igrave: "\xcc",
		Iacute: "\xcd",
		Icirc: "\xce",
		Iuml: "\xcf",
		ETH: "\xd0",
		Ntilde: "\xd1",
		Ograve: "\xd2",
		Oacute: "\xd3",
		Ocirc: "\xd4",
		Otilde: "\xd5",
		Ouml: "\xd6",
		times: "\xd7",
		Oslash: "\xd8",
		Ugrave: "\xd9",
		Uacute: "\xda",
		Ucirc: "\xdb",
		Uuml: "\xdc",
		Yacute: "\xdd",
		THORN: "\xde",
		szlig: "\xdf",
		agrave: "\xe0",
		aacute: "\xe1",
		acirc: "\xe2",
		atilde: "\xe3",
		auml: "\xe4",
		aring: "\xe5",
		aelig: "\xe6",
		ccedil: "\xe7",
		egrave: "\xe8",
		eacute: "\xe9",
		ecirc: "\xea",
		euml: "\xeb",
		igrave: "\xec",
		iacute: "\xed",
		icirc: "\xee",
		iuml: "\xef",
		eth: "\xf0",
		ntilde: "\xf1",
		ograve: "\xf2",
		oacute: "\xf3",
		ocirc: "\xf4",
		otilde: "\xf5",
		ouml: "\xf6",
		divide: "\xf7",
		oslash: "\xf8",
		ugrave: "\xf9",
		uacute: "\xfa",
		ucirc: "\xfb",
		uuml: "\xfc",
		yacute: "\xfd",
		thorn: "\xfe",
		yuml: "\xff",
		OElig: "\u0152",
		oelig: "\u0153",
		Scaron: "\u0160",
		scaron: "\u0161",
		Yuml: "\u0178",
		fnof: "\u0192",
		circ: "\u02c6",
		tilde: "\u02dc",
		Alpha: "\u0391",
		Beta: "\u0392",
		Gamma: "\u0393",
		Delta: "\u0394",
		Epsilon: "\u0395",
		Zeta: "\u0396",
		Eta: "\u0397",
		Theta: "\u0398",
		Iota: "\u0399",
		Kappa: "\u039a",
		Lambda: "\u039b",
		Mu: "\u039c",
		Nu: "\u039d",
		Xi: "\u039e",
		Omicron: "\u039f",
		Pi: "\u03a0",
		Rho: "\u03a1",
		Sigma: "\u03a3",
		Tau: "\u03a4",
		Upsilon: "\u03a5",
		Phi: "\u03a6",
		Chi: "\u03a7",
		Psi: "\u03a8",
		Omega: "\u03a9",
		alpha: "\u03b1",
		beta: "\u03b2",
		gamma: "\u03b3",
		delta: "\u03b4",
		epsilon: "\u03b5",
		zeta: "\u03b6",
		eta: "\u03b7",
		theta: "\u03b8",
		iota: "\u03b9",
		kappa: "\u03ba",
		lambda: "\u03bb",
		mu: "\u03bc",
		nu: "\u03bd",
		xi: "\u03be",
		omicron: "\u03bf",
		pi: "\u03c0",
		rho: "\u03c1",
		sigmaf: "\u03c2",
		sigma: "\u03c3",
		tau: "\u03c4",
		upsilon: "\u03c5",
		phi: "\u03c6",
		chi: "\u03c7",
		psi: "\u03c8",
		omega: "\u03c9",
		thetasym: "\u03d1",
		upsih: "\u03d2",
		piv: "\u03d6",
		ensp: "\u2002",
		emsp: "\u2003",
		thinsp: "\u2009",
		zwnj: "\u200c",
		zwj: "\u200d",
		lrm: "\u200e",
		rlm: "\u200f",
		ndash: "\u2013",
		mdash: "\u2014",
		lsquo: "\u2018",
		rsquo: "\u2019",
		sbquo: "\u201a",
		ldquo: "\u201c",
		rdquo: "\u201d",
		bdquo: "\u201e",
		dagger: "\u2020",
		Dagger: "\u2021",
		bull: "\u2022",
		hellip: "\u2026",
		permil: "\u2030",
		prime: "\u2032",
		Prime: "\u2033",
		lsaquo: "\u2039",
		rsaquo: "\u203a",
		oline: "\u203e",
		frasl: "\u2044",
		euro: "\u20ac",
		image: "\u2111",
		weierp: "\u2118",
		real: "\u211c",
		trade: "\u2122",
		alefsym: "\u2135",
		larr: "\u2190",
		uarr: "\u2191",
		rarr: "\u2192",
		darr: "\u2193",
		harr: "\u2194",
		crarr: "\u21b5",
		lArr: "\u21d0",
		uArr: "\u21d1",
		rArr: "\u21d2",
		dArr: "\u21d3",
		hArr: "\u21d4",
		forall: "\u2200",
		part: "\u2202",
		exist: "\u2203",
		empty: "\u2205",
		nabla: "\u2207",
		isin: "\u2208",
		notin: "\u2209",
		ni: "\u220b",
		prod: "\u220f",
		sum: "\u2211",
		minus: "\u2212",
		lowast: "\u2217",
		radic: "\u221a",
		prop: "\u221d",
		infin: "\u221e",
		ang: "\u2220",
		and: "\u2227",
		or: "\u2228",
		cap: "\u2229",
		cup: "\u222a",
		int: "\u222b",
		there4: "\u2234",
		sim: "\u223c",
		cong: "\u2245",
		asymp: "\u2248",
		ne: "\u2260",
		equiv: "\u2261",
		le: "\u2264",
		ge: "\u2265",
		sub: "\u2282",
		sup: "\u2283",
		nsub: "\u2284",
		sube: "\u2286",
		supe: "\u2287",
		oplus: "\u2295",
		otimes: "\u2297",
		perp: "\u22a5",
		sdot: "\u22c5",
		lceil: "\u2308",
		rceil: "\u2309",
		lfloor: "\u230a",
		rfloor: "\u230b",
		lang: "\u2329",
		rang: "\u232a",
		loz: "\u25ca",
		spades: "\u2660",
		clubs: "\u2663",
		hearts: "\u2665",
		diams: "\u2666",
	};

	const ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityCharToName = {

	};
	for (const key in ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityNameToChar) {
		___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityCharToName[___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityNameToChar[key]] = key;
	}

	function ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$escapeXHTMLEntities(
		value,
		only,
	) {
		let escaped = "";
		for (const char of value) {
			const entity = ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityCharToName[char];
			if (entity !== undefined && (only === undefined || only.includes(char))) {
				escaped += "&" + entity + ";";
			} else {
				escaped += char;
			}
		}
		return escaped;
	}


  // project-rome/@romejs/js-parser/tokenizer/types.ts
// ## Token types
	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.
	// All token type variables start with an underscore, to make them
	// easy to recognize.
	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr = true;
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr = true;
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$isLoop = true;
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$isAssign = true;
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix = true;
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$postfix = true;



	class ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType {
		constructor(label, conf = {}) {
			this.label = label;
			this.keyword = conf.keyword;
			this.beforeExpr = !!conf.beforeExpr;
			this.startsExpr = !!conf.startsExpr;
			this.rightAssociative = !!conf.rightAssociative;
			this.isLoop = !!conf.isLoop;
			this.isAssign = !!conf.isAssign;
			this.prefix = !!conf.prefix;
			this.postfix = !!conf.postfix;
			this.binop = typeof conf.binop === "number" ? conf.binop : undefined;
			this.updateContext = undefined;
		}

		getBinop() {
			const {binop} = this;
			if (binop === undefined) {
				throw new Error("Token " + this.label + " doesn't have a binop");
			}
			return binop;
		}
	}

	const ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$keywords = new Map();

	class ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType
		extends ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType {
		constructor(name, options = {}) {
			options.keyword = name;

			super(name, options);

			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$keywords.set(
				name,
				this,
			);
		}
	}

	class ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType
		extends ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType {
		constructor(name, prec) {
			super(
				name,
				{
					beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
					binop: prec,
				},
			);
		}
	}

	const ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types = {
		num: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"num",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		bigint: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"bigint",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		regexp: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"regexp",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		string: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"string",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		name: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"name",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		eof: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"eof",
		),
		invalid: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"invalid",
		),
		comment: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"comment",
		),
		// Punctuation token types.
		bracketL: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"[",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		bracketR: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"]",
		),
		braceL: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"{",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		braceBarL: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"{|",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		braceR: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"}",
		),
		braceBarR: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"|}",
		),
		parenL: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"(",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		parenR: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			")",
		),
		comma: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			",",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		semi: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			";",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		colon: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			":",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		doubleColon: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"::",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		dot: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			".",
		),
		question: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"?",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		questionDot: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"?.",
		),
		arrow: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"=>",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		template: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"template",
		),
		ellipsis: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"...",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		backQuote: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"`",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		dollarBraceL: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"${",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		at: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"@",
		),
		hash: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"#",
		),
		// Operators. These carry several kinds of properties to help the
		// parser use them properly (the presence of these properties is
		// what categorizes them as operators).
		//
		// `binop`, when present, specifies that this operator is a binary
		// operator, and will refer to its precedence.
		//
		// `prefix` and `postfix` mark the operator as a prefix or postfix
		// unary operator.
		//
		// `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
		// binary operators with a very low precedence, that should result
		// in JSAssignmentExpression nodes.
		eq: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"=",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				isAssign: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$isAssign,
			},
		),
		assign: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"_=",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				isAssign: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$isAssign,
			},
		),
		incDec: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"++/--",
			{
				prefix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix,
				postfix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$postfix,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		bang: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"!",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				prefix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		tilde: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"~",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				prefix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		nullishCoalescing: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"??",
			1,
		),
		logicalOR: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"||",
			1,
		),
		logicalAND: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"&&",
			2,
		),
		bitwiseOR: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"|",
			3,
		),
		bitwiseXOR: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"^",
			4,
		),
		bitwiseAND: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"&",
			5,
		),
		equality: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"==/!=",
			6,
		),
		relational: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"</>",
			7,
		),
		bitShift: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"<</>>",
			8,
		),
		plusMin: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"+/-",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				binop: 9,
				prefix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		modulo: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"%",
			10,
		),
		star: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"*",
			10,
		),
		slash: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$BinopTokenType(
			"/",
			10,
		),
		exponent: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"**",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				binop: 11,
				rightAssociative: true,
			},
		),
		jsxName: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"jsxName",
		),
		jsxText: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"jsxText",
			{beforeExpr: true},
		),
		jsxTagStart: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"jsxTagStart",
			{startsExpr: true},
		),
		jsxTagEnd: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$TokenType(
			"jsxTagEnd",
		),
		_break: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"break",
		),
		_case: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"case",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		_catch: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"catch",
		),
		_continue: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"continue",
		),
		_debugger: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"debugger",
		),
		_default: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"default",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		_do: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"do",
			{
				isLoop: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$isLoop,
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		_else: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"else",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		_finally: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"finally",
		),
		_for: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"for",
			{
				isLoop: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$isLoop,
			},
		),
		_function: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"function",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_if: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"if",
		),
		_return: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"return",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		_switch: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"switch",
		),
		_throw: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"throw",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				prefix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_try: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"try",
		),
		_var: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"var",
		),
		_const: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"const",
		),
		_while: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"while",
			{
				isLoop: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$isLoop,
			},
		),
		_with: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"with",
		),
		_new: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"new",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_this: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"this",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_super: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"super",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_class: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"class",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_extends: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"extends",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
			},
		),
		_export: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"export",
		),
		_import: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"import",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_null: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"null",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_true: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"true",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_false: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"false",
			{
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_in: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"in",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				binop: 7,
			},
		),
		_instanceof: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"instanceof",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				binop: 7,
			},
		),
		_typeof: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"typeof",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				prefix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_void: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"void",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				prefix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
		_delete: new ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$KeywordTokenType(
			"delete",
			{
				beforeExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$beforeExpr,
				prefix: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$prefix,
				startsExpr: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$types_ts$startsExpr,
			},
		),
	};




  // project-rome/@romejs/js-parser/tokenizer/context.ts


	class ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext {
		constructor(token, isExpr, preserveSpace, override) {
			this.token = token;
			this.isExpr = !!isExpr;
			this.preserveSpace = !!preserveSpace;
			this.override = override;
		}
	}

	const ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types = {
		braceStatement: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"{",
			false,
		),
		braceExpression: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"{",
			true,
		),
		templateQuasi: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"${",
			false,
		),
		parenStatement: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"(",
			false,
		),
		parenExpression: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"(",
			true,
		),
		template: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"`",
			true,
			true,
			(p) =>
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$readTemplateToken(
					p,
				)
			,
		),
		functionExpression: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"function",
			true,
		),
		functionStatement: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"function",
			false,
		),
		// JSX
		jsxOpenTag: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"<tag",
			false,
		),
		jsxCloseTag: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"</tag",
			false,
		),
		jsxInner: new ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$TokContext(
			"<tag>...</tag>",
			true,
			true,
		),
	};

	// Token-specific context update code
	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR.updateContext = ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR.updateContext = function(
		parser,
	) {
		if (parser.state.context.length === 1) {
			parser.state.exprAllowed = true;
			return;
		}

		let out = parser.state.context.pop();
		if (
			out ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.braceStatement
		) {
			const context = ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
				parser,
			);
			if (context !== undefined && context.token === "function") {
				out = parser.state.context.pop();
			}
		}

		if (out === undefined) {
			throw new Error("No context found");
		}

		parser.state.exprAllowed = !out.isExpr;
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name.updateContext = function(
		parser,
		prevType,
	) {
		let allowed = false;
		if (
			prevType !==
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot
		) {
			if (
				(parser.state.tokenValue === "of" && !parser.state.exprAllowed) ||
				(parser.state.tokenValue === "yield" && parser.inScope("GENERATOR"))
			) {
				allowed = true;
			}
		}

		parser.state.exprAllowed = allowed;

		if (parser.state.isIterator) {
			parser.state.isIterator = false;
		}
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL.updateContext = function(
		parser,
		prevType,
	) {
		parser.state.context.push(
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$isBraceBlock(
				parser,
				prevType,
			)
				? ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.braceStatement
				: ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.braceExpression,
		);
		parser.state.exprAllowed = true;
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dollarBraceL.updateContext = function(
		parser,
	) {
		parser.state.context.push(
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.templateQuasi,
		);
		parser.state.exprAllowed = true;
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL.updateContext = function(
		parser,
		prevType,
	) {
		const statementParens =
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._if ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._for ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._with ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._while;
		parser.state.context.push(
			statementParens
				? ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.parenStatement
				: ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.parenExpression,
		);
		parser.state.exprAllowed = true;
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.incDec.updateContext = function() {
		// tokExprAllowed stays unchanged
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function.updateContext = function(
		parser,
		prevType,
	) {
		if (
			prevType.beforeExpr &&
			prevType !==
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi &&
			prevType !==
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._else &&
			!(prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._return &&
			___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak.test(
				parser.getRawInput(
					parser.state.lastEndPos.index,
					parser.state.startPos.index,
				),
			)) &&
			!((prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL) &&
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
				parser,
			) === ___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.bStat)
		) {
			parser.state.context.push(
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.functionExpression,
			);
		} else {
			parser.state.context.push(
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.functionStatement,
			);
		}

		parser.state.exprAllowed = false;
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._class.updateContext = ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function.updateContext;

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote.updateContext = function(
		parser,
	) {
		if (
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
				parser,
			) ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.template
		) {
			parser.state.context.pop();
		} else {
			parser.state.context.push(
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.template,
			);
		}
		parser.state.exprAllowed = false;
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart.updateContext = function(
		parser,
	) {
		parser.state.context.push(
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxInner,
		); // treat as beginning of JSX expression
		parser.state.context.push(
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxOpenTag,
		); // start opening tag context
		parser.state.exprAllowed = false;
	};

	___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagEnd.updateContext = function(
		parser,
		prevType,
	) {
		const out = parser.state.context.pop();
		if (
			(out ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxOpenTag &&
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.slash) ||
			out ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxCloseTag
		) {
			parser.state.context.pop();
			parser.state.exprAllowed =
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
					parser,
				) ===
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxInner;
		} else {
			parser.state.exprAllowed = true;
		}
	};


  // project-rome/@romejs/js-parser/parser/comments.ts
const ___R$project$rome$$romejs$js$parser$parser$comments_ts = {
		addComment: ___R$project$rome$$romejs$js$parser$parser$comments_ts$addComment,
		attachComments: ___R$project$rome$$romejs$js$parser$parser$comments_ts$attachComments,
	};
	function ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$last(
		stack,
	) {
		return stack[stack.length - 1];
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$getIds(
		comments,
	) {
		return comments.map((comment) => comment.id);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$getLoc(
		node,
	) {
		const {loc} = node;
		if (loc === undefined) {
			throw new Error("No loc found");
		}
		return loc;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
		node,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$getLoc(
			node,
		).start.index;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
		node,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$getLoc(
			node,
		).end.index;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$hasComments(
		comments,
	) {
		return comments !== undefined && comments.length > 0;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$setComments(
		node,
		key,
		comments,
	) {
		let innerEndIndex = -1;

		for (let i = 0; i < comments.length; i++) {
			const comment = comments[i];
			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
					comment,
				) >=
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(node) &&
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
					comment,
				) <=
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(node)
			) {
				innerEndIndex++;
			} else {
				break;
			}
		}

		if (innerEndIndex === -1) {
			node[key] = ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$getIds(
				comments,
			);
		} else {
			node.innerComments = ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$getIds(
				comments.slice(0, innerEndIndex + 1),
			);
			node[key] = ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$getIds(
				comments.slice(innerEndIndex + 1),
			);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$comments_ts$addComment(
		parser,
		comment,
	) {
		parser.state.trailingComments.push(comment);
		parser.state.leadingComments.push(comment);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$adjustCommentsAfterTrailingComma(
		parser,
		node,
		elements,
		// When the current node is followed by a token which hasn't a respective AST node, we
		// need to take all the trailing comments to prevent them from being attached to an
		// unrelated node. e.g. in
		//     var { x } /* cmt */ = { y }
		// we don't want /* cmt */ to be attached to { y }.
		// On the other hand, in
		//     fn(x) [new line] /* cmt */ [new line] y
		// /* cmt */ is both a trailing comment of fn(x) and a leading comment of y
		takeAllComments,
	) {
		if (parser.state.leadingComments.length === 0) {
			return;
		}

		let lastElement = undefined;
		let i = elements.length;
		while (lastElement === undefined && i > 0) {
			lastElement = elements[--i];
		}
		if (lastElement === undefined) {
			return;
		}

		const {commentPreviousNode} = parser.state;
		if (commentPreviousNode === undefined) {
			throw new Error("No commentPreviousNode found");
		}

		for (let j = 0; j < parser.state.leadingComments.length; j++) {
			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
					parser.state.leadingComments[j],
				) <
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
					commentPreviousNode,
				)
			) {
				parser.state.leadingComments.splice(j, 1);
				j--;
			}
		}

		const newTrailingComments = [];
		for (let i = 0; i < parser.state.leadingComments.length; i++) {
			const leadingComment = parser.state.leadingComments[i];
			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
					leadingComment,
				) <
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(node)
			) {
				newTrailingComments.push(leadingComment);

				// Perf: we don't need to splice if we are going to reset the array anyway
				if (!takeAllComments) {
					parser.state.leadingComments.splice(i, 1);
					i--;
				}
			} else {
				if (node.trailingComments === undefined) {
					node.trailingComments = [];
				}
				node.trailingComments.push(leadingComment.id);
			}
		}
		if (takeAllComments) {
			parser.state.leadingComments = [];
		}

		if (newTrailingComments.length > 0) {
			lastElement.trailingComments = ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$getIds(
				newTrailingComments,
			);
		} else if (lastElement.trailingComments !== undefined) {
			lastElement.trailingComments = [];
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$comments_ts$attachComments(
		parser,
		node,
	) {
		if (node.type === "JSRoot" && node.body.length > 0) {
			return;
		}

		const {commentStack, commentPreviousNode} = parser.state;

		let trailingComments;

		if (parser.state.trailingComments.length > 0) {
			// If the first comment in trailingComments comes after the
			// current node, then we're good - all comments in the array will
			// come after the node and so it's safe to add them as official
			// trailingComments.
			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
					parser.state.trailingComments[0],
				) >=
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(node)
			) {
				trailingComments = parser.state.trailingComments;
				parser.state.trailingComments = [];
			} else {
				// Otherwise, if the first comment doesn't come after the
				// current node, that means we have a mix of leading and trailing
				// comments in the array and that leadingComments contains the
				// same items as trailingComments. Reset trailingComments to
				// zero items and we'll handle this by evaluating leadingComments
				// later.
				parser.state.trailingComments = [];
			}
		} else if (commentStack.length > 0) {
			const lastInStack = ___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$last(
				commentStack,
			);
			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$hasComments(
					lastInStack.trailingComments,
				) &&
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
					parser.comments.assertGetCommentFromId(
						lastInStack.trailingComments[0],
					),
				) >=
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(node)
			) {
				trailingComments = parser.comments.getCommentsFromIds(
					lastInStack.trailingComments,
				);
				lastInStack.trailingComments = undefined;
			}
		}

		// Eating the stack.
		let firstChild;
		if (
			commentStack.length > 0 &&
			___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$last(
					commentStack,
				),
			) >=
			___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(node)
		) {
			firstChild = commentStack.pop();
		}

		let lastChild;
		while (
			commentStack.length > 0 &&
			___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$last(
					commentStack,
				),
			) >=
			___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(node)
		) {
			lastChild = commentStack.pop();
		}

		if (!lastChild && firstChild) {
			lastChild = firstChild;
		}

		// Adjust comments that follow a trailing comma on the last element in a
		// comma separated list of nodes to be the trailing comments on the last
		// element
		if (firstChild) {
			switch (node.type) {
				case "JSObjectExpression": {
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$adjustCommentsAfterTrailingComma(
						parser,
						node,
						node.properties,
					);
					break;
				}

				case "JSBindingObjectPattern":
				case "JSAssignmentObjectPattern": {
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$adjustCommentsAfterTrailingComma(
						parser,
						node,
						node.properties,
						true,
					);
					break;
				}

				case "JSCallExpression": {
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$adjustCommentsAfterTrailingComma(
						parser,
						node,
						node.arguments,
					);
					break;
				}

				case "JSArrayExpression": {
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$adjustCommentsAfterTrailingComma(
						parser,
						node,
						node.elements,
					);
					break;
				}

				case "JSBindingArrayPattern":
				case "JSAssignmentArrayPattern": {
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$adjustCommentsAfterTrailingComma(
						parser,
						node,
						node.elements,
						true,
					);
					break;
				}
			}
		} else if (
			commentPreviousNode !== undefined &&
			((commentPreviousNode.type === "JSImportSpecifier" &&
			node.type !== "JSImportSpecifier") ||
			(commentPreviousNode.type === "JSExportLocalSpecifier" &&
			node.type !== "JSExportExternalSpecifier") ||
			(commentPreviousNode.type === "JSExportExternalSpecifier" &&
			node.type !== "JSExportExternalSpecifier"))
		) {
			___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$adjustCommentsAfterTrailingComma(
				parser,
				node,
				[parser.state.commentPreviousNode],
			);
		}

		if (lastChild !== undefined) {
			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$hasComments(
					lastChild.leadingComments,
				)
			) {
				if (
					lastChild !== node &&
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
						parser.comments.assertGetCommentFromId(
							___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$last(
								lastChild.leadingComments,
							),
						),
					) <=
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
						node,
					)
				) {
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$setComments(
						node,
						"leadingComments",
						parser.comments.getCommentsFromIds(lastChild.leadingComments),
					);
					lastChild.leadingComments = undefined;
				} else {
					// A leading comment for an anonymous class had been stolen by its first JSClassMethod,
					// so this takes back the leading comment.
					// See also: https://github.com/eslint/espree/issues/158
					for (let i = lastChild.leadingComments.length - 2; i >= 0; --i) {
						if (
							___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
								parser.comments.assertGetCommentFromId(
									lastChild.leadingComments[i],
								),
							) <=
							___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
								node,
							)
						) {
							___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$setComments(
								node,
								"leadingComments",
								parser.comments.getCommentsFromIds(
									lastChild.leadingComments.splice(0, i + 1),
								),
							);
							break;
						}
					}
				}
			}
		} else if (parser.state.leadingComments.length > 0) {
			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$last(
						parser.state.leadingComments,
					),
				) <=
				___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(node)
			) {
				if (parser.state.commentPreviousNode) {
					for (let j = 0; j < parser.state.leadingComments.length; j++) {
						if (
							___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
								parser.state.leadingComments[j],
							) <
							___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
								parser.state.commentPreviousNode,
							)
						) {
							parser.state.leadingComments.splice(j, 1);
							j--;
						}
					}
				}

				if (parser.state.leadingComments.length > 0) {
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$setComments(
						node,
						"leadingComments",
						parser.state.leadingComments,
					);
					parser.state.leadingComments = [];
				}
			} else {
				// https://github.com/eslint/espree/issues/2
				//
				// In special cases, such as return (without a value) and
				// debugger, all comments will end up as leadingComments and
				// will otherwise be eliminated. This step runs when the
				// commentStack is empty and there are comments left
				// in leadingComments.
				//
				// This loop figures out the stopping point between the actual
				// leading and trailing comments by finding the location of the
				// first comment that comes after the given node.
				let i = 0;
				while (i < parser.state.leadingComments.length) {
					if (
						___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$end(
							parser.state.leadingComments[i],
						) >
						___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$start(
							node,
						)
					) {
						break;
					} else {
						i++;
					}
				}

				// Split the array based on the location of the first comment
				// that comes after the node. Keep in mind that this could
				// result in an empty array, and if so, the array must be
				// deleted.

				const leadingComments = parser.state.leadingComments.slice(0, i);

				if (leadingComments.length > 0) {
					___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$setComments(
						node,
						"leadingComments",
						leadingComments,
					);
				}

				// Similarly, trailing comments are attached later. The variable
				// must be reset to null if there are no trailing comments.
				trailingComments = parser.state.leadingComments.slice(i);
				if (trailingComments.length === 0) {
					trailingComments = undefined;
				}
			}
		}

		parser.state.commentPreviousNode = node;

		if (trailingComments) {
			___R$$priv$project$rome$$romejs$js$parser$parser$comments_ts$setComments(
				node,
				"trailingComments",
				trailingComments,
			);
		}

		commentStack.push(node);
	}


  // project-rome/@romejs/js-parser/parser/statement.ts
const ___R$project$rome$$romejs$js$parser$parser$statement_ts = {
		parseTopLevel: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseTopLevel,
		parsePossibleInterpreterDirective: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parsePossibleInterpreterDirective,
		expressionStatementToDirective: ___R$project$rome$$romejs$js$parser$parser$statement_ts$expressionStatementToDirective,
		isLetStart: ___R$project$rome$$romejs$js$parser$parser$statement_ts$isLetStart,
		parseStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement,
		isAsyncFunctionDeclarationStart: ___R$project$rome$$romejs$js$parser$parser$statement_ts$isAsyncFunctionDeclarationStart,
		assertModuleNodeAllowed: ___R$project$rome$$romejs$js$parser$parser$statement_ts$assertModuleNodeAllowed,
		parseBreakContinueStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBreakContinueStatement,
		parseDebuggerStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseDebuggerStatement,
		parseDoStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseDoStatement,
		parseForStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseForStatement,
		assertVarKind: ___R$project$rome$$romejs$js$parser$parser$statement_ts$assertVarKind,
		parseIfStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseIfStatement,
		parseReturnStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseReturnStatement,
		parseSwitchStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseSwitchStatement,
		parseThrowStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseThrowStatement,
		parseTryStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseTryStatement,
		parseVarStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVarStatement,
		parseWhileStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseWhileStatement,
		parseWithStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseWithStatement,
		parseEmptyStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseEmptyStatement,
		parseLabeledStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseLabeledStatement,
		parseExpressionStatement: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseExpressionStatement,
		parseBlock: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlock,
		isValidDirective: ___R$project$rome$$romejs$js$parser$parser$statement_ts$isValidDirective,
		parseBlockBody: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlockBody,
		parseBlockOrModuleBlockBody: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlockOrModuleBlockBody,
		parseFor: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFor,
		parseForIn: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseForIn,
		parseVar: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVar,
		parseVarHead: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVarHead,
		parseFunctionDeclaration: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionDeclaration,
		parseExportDefaultFunctionDeclaration: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseExportDefaultFunctionDeclaration,
		parseFunctionExpression: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionExpression,
		parseFunction: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunction,
		splitFunctionParams: ___R$project$rome$$romejs$js$parser$parser$statement_ts$splitFunctionParams,
		parseFunctionParams: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionParams,
	};
	const ___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$loopLabel = {
		kind: "loop",
	};
	const ___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$switchLabel = {
		kind: "switch",
	};

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseTopLevel(
		parser,
	) {
		const start = parser.getPosition();
		const openContext = {
			name: "top-level",
			start,
			indent: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			open: ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
			close: ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
		};

		// Parse the body, and catch fatal syntax errors

		// Get the first token
		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(parser);

		const interpreter = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parsePossibleInterpreterDirective(
			parser,
		);
		const {body, directives} = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlockBody(
			parser,
			true,
			true,
			openContext,
		);

		return parser.finishNode(
			start,
			{
				type: "JSRoot",
				corrupt: parser.state.corrupt,
				body,
				directives,
				mtime: parser.mtime,
				diagnostics: parser.getDiagnostics(),
				filename: parser.filename,
				comments: parser.state.comments,
				sourceType: parser.sourceType,
				interpreter,
				syntax: Array.from(parser.syntax),
				hasHoistedVars: parser.state.hasHoistedVars,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parsePossibleInterpreterDirective(
		parser,
	) {
		// Check for #!
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.hash,
			) &&
			parser.input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				parser.state.endPos.index,
			)] === "!"
		) {
			const directive = ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$skipInterpreterDirective(
				parser,
				1,
			);

			// Advance to next token
			parser.next();

			return directive;
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$expressionStatementToDirective(
		parser,
		stmt,
	) {
		const expr = stmt.expression;

		const start = parser.getLoc(stmt).start;

		const raw = parser.getRawInput(
			parser.getLoc(expr).start.index,
			parser.getLoc(expr).end.index,
		);
		const val = raw.slice(1, -1); // remove quotes
		const end = parser.getLoc(stmt).end;

		return parser.finishNodeAt(
			start,
			end,
			{
				type: "JSDirective",
				value: val,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$isLetStart(
		parser,
		context,
	) {
		if (!parser.isContextual("let")) {
			return false;
		}

		___R$project$rome$$romejs$js$parser$utils$whitespace_ts$skipWhiteSpace.lastIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
			parser.state.index,
		);
		const skip = ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$skipWhiteSpace.exec(
			parser.input,
		);
		if (skip == null) {
			throw new Error("Should never be true");
		}

		const next = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
			parser.state.index,
			skip[0].length,
		);
		const nextCh = parser.input.charCodeAt(
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(next),
		);

		// For ambiguous cases, determine if a LexicalDeclaration (or only a

		// Statement) is allowed here. If context is not empty then only a Statement

		// is allowed. However, `let [` is an explicit negative lookahead for

		// JSExpressionStatement, so special-case it first.
		if (
			nextCh ===
			___R$project$rome$$romejs$string$charcodes$index_ts.leftSquareBracket
		) {
			return true;
		}

		if (context !== undefined) {
			return false;
		}

		if (
			nextCh ===
			___R$project$rome$$romejs$string$charcodes$index_ts.leftCurlyBrace
		) {
			return true;
		}

		if (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart(
				nextCh,
			)
		) {
			let pos = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(next, 1);
			while (
				___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierChar(
					parser.input.charCodeAt(
						___R$project$rome$$romejs$ob1$index_ts$ob1Get0(pos),
					),
				)
			) {
				pos = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(pos);
			}

			const ident = parser.getRawInput(next, pos);
			if (
				!___R$project$rome$$romejs$js$parser$utils$identifier_ts$keywordRelationalOperator.test(
					ident,
				)
			) {
				return true;
			}
		}
		return false;
	}


	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
		parser,
		context = undefined,
		topLevel = false,
	) {
		let startType = parser.state.tokenType;
		const start = parser.getPosition();

		if (
			startType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const &&
			parser.isSyntaxEnabled("ts")
		) {
			const ahead = parser.lookaheadState();
			if (
				ahead.tokenType ===
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name &&
				ahead.tokenValue === "enum"
			) {
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const,
				);
				parser.expectContextual("enum");
				return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEnumDeclaration(
					parser,
					start,
					/* isConst */ true,
				);
			}
		}

		let kind;
		if (
			___R$project$rome$$romejs$js$parser$parser$statement_ts$isLetStart(
				parser,
				context,
			)
		) {
			startType = ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._var;
			kind = "let";
		}

		// Most types of statements are recognized by the keyword they

		// start with. Many are trivial to parse, some require a bit of

		// complexity.
		switch (startType) {
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._break:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBreakContinueStatement(
					parser,
					start,
					true,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._continue:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBreakContinueStatement(
					parser,
					start,
					false,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._debugger:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseDebuggerStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._do:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseDoStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._for:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseForStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function: {
				if (
					parser.lookaheadState().tokenType ===
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot
				) {
					// JSMetaProperty: eg. function.sent
					break;
				}

				if (context !== undefined) {
					if (parser.inScope("STRICT")) {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ILLEGAL_FUNCTION_IN_STRICT,
						});
					} else if (context !== "if" && context !== "label") {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ILLEGAL_FUNCTION_IN_NON_STRICT,
						});
					}
				}

				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function,
				);

				const result = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionDeclaration(
					parser,
					start,
					false,
				);

				if (context !== undefined && result.head.generator === true) {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ILLEGAL_GENERATOR_DEFINITION,
						loc: result.loc,
					});
				}

				return result;
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._class: {
				if (context !== undefined) {
					parser.unexpectedToken();
				}
				return ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClassDeclaration(
					parser,
					start,
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._if:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseIfStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._return:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseReturnStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._switch:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseSwitchStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._throw:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseThrowStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._try:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseTryStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._var: {
				kind =
					kind === undefined
						? ___R$project$rome$$romejs$js$parser$parser$statement_ts$assertVarKind(
								String(parser.state.tokenValue),
							)
						: kind;
				if (context !== undefined && kind !== "var") {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.LEXICAL_DECLARATION_IN_SINGLE_STATEMENT_CONTEXT,
					});
				}
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVarStatement(
					parser,
					start,
					kind,
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._while:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseWhileStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._with:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseWithStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlock(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi:
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseEmptyStatement(
					parser,
					start,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._export:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import: {
				const nextToken = parser.lookaheadState();
				if (
					nextToken.tokenType ===
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL ||
					nextToken.tokenType ===
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot
				) {
					break;
				}

				parser.next();

				let result;
				if (
					startType ===
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import
				) {
					result = ___R$project$rome$$romejs$js$parser$parser$modules_ts$parseImport(
						parser,
						start,
					);
				} else {
					result = ___R$project$rome$$romejs$js$parser$parser$modules_ts$parseExport(
						parser,
						start,
					);
				}

				if (!topLevel) {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_EXPORT_MUST_TOP_LEVEL,
					});
				}

				___R$project$rome$$romejs$js$parser$parser$statement_ts$assertModuleNodeAllowed(
					parser,
					result,
				);

				return result;
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name:
				if (
					___R$project$rome$$romejs$js$parser$parser$statement_ts$isAsyncFunctionDeclarationStart(
						parser,
					)
				) {
					if (context !== undefined) {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ILLEGAL_ASYNC_DEFINITION,
						});
					}

					// async identifier
					parser.expect(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
					);

					// function keyword
					parser.expect(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function,
					);

					return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionDeclaration(
						parser,
						start,
						true,
					);
				}
		}

		// If the statement does not start with a statement keyword or a

		// brace, it's an JSExpressionStatement or JSLabeledStatement. We

		// simply start parsing an expression, and afterwards, if the

		// next token is a colon and the expression was a simple

		// JSIdentifier node, we switch to interpreting it as a label.
		const maybeName = String(parser.state.tokenValue);
		const expr = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
			parser,
			"statement expression",
		);

		if (
			startType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name &&
			expr.type === "JSReferenceIdentifier" &&
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseLabeledStatement(
				parser,
				start,
				maybeName,
				expr,
				context,
			);
		} else {
			return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseExpressionStatement(
				parser,
				start,
				expr,
			);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$isAsyncFunctionDeclarationStart(
		parser,
	) {
		if (!parser.isContextual("async")) {
			return false;
		}

		const {input} = parser;
		const {index} = parser.state;

		___R$project$rome$$romejs$js$parser$utils$whitespace_ts$skipWhiteSpace.lastIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
			index,
		);
		const skip = ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$skipWhiteSpace.exec(
			input,
		);

		if (!skip || skip.length === 0) {
			return false;
		}

		const next = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
			index,
			skip[0].length,
		);

		return (
			!___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak.test(
				parser.getRawInput(index, next),
			) &&
			parser.getRawInput(
				next,
				___R$project$rome$$romejs$ob1$index_ts$ob1Add(next, 8),
			) === "function" &&
			(___R$project$rome$$romejs$ob1$index_ts$ob1Get0(next) + 8 === input.length ||
			!___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierChar(
				input.charCodeAt(
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(next) + 8,
				),
			))
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$assertModuleNodeAllowed(
		parser,
		node,
	) {
		if (
			(node.type === "JSImportDeclaration" &&
			(node.importKind === "type" || node.importKind === "typeof")) ||
			(node.type === "JSExportLocalDeclaration" && node.exportKind === "type") ||
			(node.type === "JSExportAllDeclaration" && node.exportKind === "type")
		) {
			// Allow Flow type imports and exports in all conditions because
			// Flow itself does not care about 'sourceType'.
			return;
		}

		if (!parser.inModule) {
			parser.addDiagnostic({
				loc: node.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_EXPORT_IN_SCRIPT(
					parser.options.manifestPath,
				),
			});
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBreakContinueStatement(
		parser,
		start,
		isBreak,
	) {
		parser.next();

		let label;
		if (parser.isLineTerminator()) {
			label = undefined;
		} else if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			)
		) {
			label = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
			);
			parser.semicolon();
		} else {
			parser.unexpectedToken();
		}

		// Verify that there is an actual destination to break or

		// continue to.
		let i;
		for (i = 0; i < parser.state.labels.length; ++i) {
			const lab = parser.state.labels[i];
			if (label === undefined || lab.name === label.name) {
				if (lab.kind !== undefined && (isBreak || lab.kind === "loop")) {
					break;
				}

				if (label && isBreak) {
					break;
				}
			}
		}
		if (i === parser.state.labels.length) {
			parser.addDiagnostic({
				start,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNKNOWN_LABEL(
					label && label.name,
				),
			});
		}

		if (isBreak) {
			return parser.finishNode(
				start,
				{
					type: "JSBreakStatement",
					label,
				},
			);
		} else {
			return parser.finishNode(
				start,
				{
					type: "JSContinueStatement",
					label,
				},
			);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseDebuggerStatement(
		parser,
		start,
	) {
		parser.next();
		parser.semicolon();
		return parser.finishNode(start, {type: "JSDebuggerStatement"});
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseDoStatement(
		parser,
		start,
	) {
		parser.next();
		parser.state.labels.push(
			___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$loopLabel,
		);
		const body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
			parser,
			"do",
		);
		parser.state.labels.pop();
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._while,
		);
		const test = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenExpression(
			parser,
			"do test",
		);
		parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
		);
		return parser.finishNode(
			start,
			{
				type: "JSDoWhileStatement",
				body,
				test,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseForStatement(
		parser,
		start,
	) {
		parser.next();
		parser.state.labels.push(
			___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$loopLabel,
		);

		let awaitAt;
		if (parser.inScope("ASYNC") && parser.eatContextual("await")) {
			awaitAt = parser.getLastEndPosition();
		}

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			"for head",
		);

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
			)
		) {
			if (awaitAt) {
				parser.unexpectedToken();
			}
			return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFor(
				parser,
				start,
				openContext,
				undefined,
			);
		}

		const _isLet = ___R$project$rome$$romejs$js$parser$parser$statement_ts$isLetStart(
			parser,
		);
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._var,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const,
			) ||
			_isLet
		) {
			const initStart = parser.getPosition();

			const kind = ___R$project$rome$$romejs$js$parser$parser$statement_ts$assertVarKind(
				_isLet ? "let" : String(parser.state.tokenValue),
			);
			parser.next();

			const declarations = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVar(
				parser,
				initStart,
				kind,
				true,
			);

			const init = parser.finishNode(
				initStart,
				{
					type: "JSVariableDeclaration",
					kind,
					declarations,
				},
			);

			if (
				(parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in,
				) ||
				parser.isContextual("of")) &&
				init.declarations.length === 1
			) {
				return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseForIn(
					parser,
					start,
					openContext,
					init,
					awaitAt,
				);
			}

			if (awaitAt !== undefined) {
				parser.addDiagnostic({
					start: awaitAt,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.REGULAR_FOR_AWAIT,
				});
			}

			return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFor(
				parser,
				start,
				openContext,
				init,
			);
		}

		const refShorthandDefaultPos = {
			index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
		};
		let init = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
			parser,
			"for init",
			true,
			refShorthandDefaultPos,
		);

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in,
			) ||
			parser.isContextual("of")
		) {
			const description = parser.isContextual("of")
				? "for-of statement"
				: "for-in statement";
			const initPattern = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
				parser,
				init,
				description,
			);
			___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
				parser,
				init,
				undefined,
				undefined,
				description,
			);
			return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseForIn(
				parser,
				start,
				openContext,
				initPattern,
				awaitAt,
			);
		}

		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				refShorthandDefaultPos.index,
			) >
			0
		) {
			parser.unexpectedToken(
				parser.getPositionFromIndex(refShorthandDefaultPos.index),
			);
		}

		if (awaitAt !== undefined) {
			parser.addDiagnostic({
				start: awaitAt,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.REGULAR_FOR_AWAIT,
			});
		}

		return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFor(
			parser,
			start,
			openContext,
			init,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$assertVarKind(
		kind,
	) {
		if (kind === "let" || kind === "var" || kind === "const") {
			return kind;
		} else {
			throw new Error("Expected valid variable kind but got " + kind);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseIfStatement(
		parser,
		start,
	) {
		parser.next();
		const test = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenExpression(
			parser,
			"if test",
		);
		const consequent = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
			parser,
			"if",
		);
		const alternate = parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._else,
		)
			? ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
					parser,
					"if",
				)
			: undefined;
		return parser.finishNode(
			start,
			{
				type: "JSIfStatement",
				test,
				consequent,
				alternate,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseReturnStatement(
		parser,
		start,
	) {
		if (
			!parser.inScope("FUNCTION") &&
			parser.sourceType !== "template" &&
			!parser.options.allowReturnOutsideFunction
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.RETURN_OUTSIDE_FUNCTION,
			});
		}

		parser.next();

		// In `return` (and `break`/`continue`), the keywords with

		// optional arguments, we eagerly look for a semicolon or the

		// possibility to insert one.
		let argument;
		if (!parser.isLineTerminator()) {
			argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
				parser,
				"return argument",
			);
			parser.semicolon();
		}

		return parser.finishNode(
			start,
			{
				type: "JSReturnStatement",
				argument,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseSwitchStatement(
		parser,
		start,
	) {
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._switch,
		);
		const discriminant = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenExpression(
			parser,
			"switch discriminant",
		);
		const cases = [];
		const hasBrace = parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
		);
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"switch body",
		);
		parser.state.labels.push(
			___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$switchLabel,
		);

		if (hasBrace) {
			// Statements under must be grouped (by label) in JSSwitchCase
			// nodes. `cur` is used to keep the node that we are currently
			// adding statements to.
			let cur;

			function pushCase() {
				if (cur === undefined) {
					return;
				}

				cases.push(
					parser.finishNode(
						cur.start,
						{
							type: "JSSwitchCase",
							test: cur.test,
							consequent: cur.consequent,
						},
					),
				);

				cur = undefined;
			}

			let sawDefault;

			while (true) {
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
					)
				) {
					break;
				}

				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._case,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._default,
					)
				) {
					pushCase();

					const isCase = parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._case,
					);

					parser.next();

					let test;
					if (isCase) {
						test = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
							parser,
							"case test",
						);
					} else {
						if (sawDefault) {
							// TODO point to other default
							parser.addDiagnostic({
								start: parser.state.lastStartPos,
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.MULTIPLE_DEFAULT_CASE,
							});
						}
						sawDefault = true;
					}

					cur = {
						start: parser.getPosition(),
						consequent: [],
						test,
					};

					parser.expect(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
					);
				} else {
					const stmt = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
						parser,
						undefined,
					);
					if (cur === undefined) {
						parser.addDiagnostic({
							loc: stmt.loc,
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.SWITCH_STATEMENT_OUTSIDE_CASE,
						});
					} else {
						cur.consequent.push(stmt);
					}
				}
			}

			pushCase();
		}

		parser.expectClosing(openContext);
		parser.state.labels.pop();

		return parser.finishNode(
			start,
			{
				type: "JSSwitchStatement",
				discriminant,
				cases,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseThrowStatement(
		parser,
		start,
	) {
		parser.next();
		if (
			___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak.test(
				parser.getRawInput(
					parser.state.lastEndPos.index,
					parser.state.startPos.index,
				),
			)
		) {
			parser.addDiagnostic({
				start: parser.state.lastEndPos,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.NEWLINE_AFTER_THROW,
			});
		}

		const argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
			parser,
			"throw argument",
		);
		parser.semicolon();
		return parser.finishNode(
			start,
			{
				type: "JSThrowStatement",
				argument,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseTryStatement(
		parser,
		start,
	) {
		parser.next();

		const block = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlock(
			parser,
		);
		let handler = undefined;

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._catch,
			)
		) {
			const clauseStart = parser.getPosition();
			parser.next();

			let param;
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
				)
			) {
				const openContext = parser.expectOpening(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
					"catch clause param",
				);
				param = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseTargetBindingPattern(
					parser,
				);
				const clashes = new Map();
				___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
					parser,
					param,
					true,
					clashes,
					"catch clause",
				);
				parser.expectClosing(openContext);
			}

			const body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlock(
				parser,
			);
			handler = parser.finishNode(
				clauseStart,
				{
					type: "JSCatchClause",
					body,
					param,
				},
			);
		}

		const finalizer = parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._finally,
		)
			? ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlock(
					parser,
				)
			: undefined;

		if (!handler && !finalizer) {
			parser.addDiagnostic({
				start,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TRY_MISSING_FINALLY_OR_CATCH,
			});
		}

		return parser.finishNode(
			start,
			{
				type: "JSTryStatement",
				block,
				finalizer,
				handler,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVarStatement(
		parser,
		start,
		kind,
	) {
		parser.next();
		const declarations = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVar(
			parser,
			start,
			kind,
			false,
		);
		parser.semicolon();
		return parser.finishNode(
			start,
			{
				type: "JSVariableDeclarationStatement",
				declaration: parser.finishNode(
					start,
					{
						type: "JSVariableDeclaration",
						kind,
						declarations,
					},
				),
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseWhileStatement(
		parser,
		start,
	) {
		parser.next();
		const test = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenExpression(
			parser,
			"while test",
		);
		parser.state.labels.push(
			___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$loopLabel,
		);
		const body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
			parser,
			"while",
		);
		parser.state.labels.pop();
		return parser.finishNode(start, {type: "JSWhileStatement", test, body});
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseWithStatement(
		parser,
		start,
	) {
		parser.next();
		const object = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenExpression(
			parser,
			"with object",
		);
		const body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
			parser,
			"with",
		);

		if (parser.inScope("STRICT")) {
			parser.addDiagnostic({
				loc: parser.finishLoc(start),
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.WITH_IN_STRICT,
			});
		}

		return parser.finishNode(
			start,
			{
				type: "JSWithStatement",
				object,
				body,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseEmptyStatement(
		parser,
		start,
	) {
		parser.next();
		return parser.finishNode(start, {type: "JSEmptyStatement"});
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseLabeledStatement(
		parser,
		start,
		maybeName,
		expr,
		context,
	) {
		for (const label of parser.state.labels) {
			if (label.name === maybeName) {
				parser.addDiagnostic({
					loc: expr.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DUPLICATE_LABEL(
						maybeName,
						label.loc,
					),
				});
			}
		}

		let kind = undefined;
		if (parser.state.tokenType.isLoop) {
			kind = "loop";
		} else if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._switch,
			)
		) {
			kind = "switch";
		}

		for (let i = parser.state.labels.length - 1; i >= 0; i--) {
			const label = parser.state.labels[i];
			if (label.statementStart === start.index) {
				label.statementStart = parser.state.startPos.index;
				label.kind = kind;
			} else {
				break;
			}
		}

		parser.state.labels.push({
			name: maybeName,
			kind,
			loc: parser.getLoc(expr),
			statementStart: parser.state.startPos.index,
		});

		let statementContext = "label";
		if (context !== undefined) {
			if (context.includes("label")) {
				statementContext = context;
			} else {
				// @ts-ignore
				statementContext = context + "label";
			}
		}
		const body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
			parser,
			statementContext,
		);

		if (
			body.type === "JSClassDeclaration" ||
			(body.type === "JSVariableDeclarationStatement" &&
			body.declaration.kind !== "var") ||
			(body.type === "JSFunctionDeclaration" &&
			(parser.inScope("STRICT") ||
			body.head.generator === true ||
			body.head.async === true))
		) {
			parser.addDiagnostic({
				loc: body.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_LABEL_DECLARATION,
			});
		}

		parser.state.labels.pop();
		return parser.finishNode(
			start,
			{
				type: "JSLabeledStatement",
				label: Object.assign({}, expr, {type: "JSIdentifier"}),
				body,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseExpressionStatement(
		parser,
		start,
		expr,
	) {
		const node = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeExpressionStatement(
			parser,
			start,
			expr,
		);
		if (node !== undefined) {
			return node;
		}

		parser.semicolon();
		return parser.finishNode(
			start,
			{
				type: "JSExpressionStatement",
				expression: expr,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlock(
		parser,
		allowDirectives,
	) {
		const start = parser.getPosition();
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"block",
		);
		const {body, directives} = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlockBody(
			parser,
			allowDirectives,
			false,
			openContext,
		);
		return parser.finishNode(
			start,
			{
				type: "JSBlockStatement",
				directives,
				body,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$isValidDirective(
		parser,
		stmt,
	) {
		return (
			stmt.type === "JSExpressionStatement" &&
			stmt.expression.type === "JSStringLiteral" &&
			!parser.isParenthesized(stmt.expression)
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlockBody(
		parser,
		allowDirectives = false,
		topLevel,
		openContext,
	) {
		return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlockOrModuleBlockBody(
			parser,
			allowDirectives,
			topLevel,
			openContext,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlockOrModuleBlockBody(
		parser,
		allowDirectives,
		topLevel,
		openContext,
	) {
		const body = [];
		const directives = [];

		let parsedNonDirective = false;
		let didSetStrict = undefined;
		let octalPosition;

		while (true) {
			if (
				parser.match(openContext.close) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				)
			) {
				parser.expectClosing(openContext);
				break;
			}

			if (!parsedNonDirective && parser.state.containsOctal && !octalPosition) {
				octalPosition = parser.state.octalPosition;
			}

			const stmt = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
				parser,
				undefined,
				topLevel,
			);

			if (
				allowDirectives &&
				!parsedNonDirective &&
				stmt.type === "JSExpressionStatement" &&
				___R$project$rome$$romejs$js$parser$parser$statement_ts$isValidDirective(
					parser,
					stmt,
				)
			) {
				const directive = ___R$project$rome$$romejs$js$parser$parser$statement_ts$expressionStatementToDirective(
					parser,
					stmt,
				);
				directives.push(directive);

				if (didSetStrict === undefined && directive.value === "use strict") {
					___R$project$rome$$romejs$js$parser$tokenizer$index_ts$setStrict(
						parser,
						true,
					);
					didSetStrict = true;

					if (octalPosition !== undefined) {
						parser.addDiagnostic({
							index: octalPosition,
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.OCTAL_IN_STRICT,
						});
					}
				}

				continue;
			}

			parsedNonDirective = true;
			body.push(stmt);
		}

		if (didSetStrict) {
			parser.popScope("STRICT");
		}

		return {body, directives};
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFor(
		parser,
		start,
		openContext,
		init,
	) {
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
		);

		const test = parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
		)
			? undefined
			: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
					parser,
					"for test",
				);
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
		);

		const update = parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
		)
			? undefined
			: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
					parser,
					"for update",
				);
		parser.expectClosing(openContext);

		const body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
			parser,
			"for",
		);
		parser.state.labels.pop();

		return parser.finishNode(
			start,
			{
				type: "JSForStatement",
				init,
				test,
				update,
				body,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseForIn(
		parser,
		start,
		openContext,
		init,
		awaitAt,
	) {
		const isForIn = parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in,
		);
		parser.next();

		const isAwait = awaitAt !== undefined;
		if (isForIn && isAwait) {
			parser.addDiagnostic({
				start: awaitAt,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.REGULAR_FOR_AWAIT,
			});
		}

		if (
			init.type === "JSVariableDeclaration" &&
			init.declarations[0].init !== undefined &&
			(!isForIn ||
			parser.inScope("STRICT") ||
			init.kind !== "var" ||
			init.declarations[0].id.type !== "JSBindingIdentifier")
		) {
			parser.addDiagnostic({
				loc: init.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.FOR_IN_OF_WITH_INITIALIZER,
			});
		}

		const left = init;
		const right = isForIn
			? ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
					parser,
					"for right",
				)
			: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
					parser,
					"for right",
				);
		parser.expectClosing(openContext);

		const body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
			parser,
			"for",
		);
		parser.state.labels.pop();

		if (isForIn) {
			const node = parser.finishNode(
				start,
				{
					type: "JSForInStatement",
					left,
					right,
					body,
				},
			);
			return node;
		} else {
			const node = parser.finishNode(
				start,
				{
					type: "JSForOfStatement",
					await: isAwait,
					left,
					right,
					body,
				},
			);
			return node;
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVar(
		parser,
		start,
		kind,
		isFor,
	) {
		const declarations = [];

		while (true) {
			const start = parser.getPosition();
			const id = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVarHead(
				parser,
				start,
			);

			if (kind === "var") {
				parser.state.hasHoistedVars = true;
			}

			let init;
			if (
				parser.eat(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
				)
			) {
				init = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
					parser,
					"var init",
					isFor,
				);
			} else {
				if (
					kind === "const" &&
					!(parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in,
					) || parser.isContextual("of"))
				) {
					// `const` with no initializer is allowed in TypeScript.
					// It could be a declaration like `const x: number;`.
					if (!parser.isSyntaxEnabled("ts")) {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.CONST_WITHOUT_INITIALIZER,
							loc: id.loc,
						});
					}
				}

				// We exclude `const` because we already validated it above
				if (
					kind !== "const" &&
					id.type !== "JSBindingIdentifier" &&
					!(isFor &&
					(parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in,
					) ||
					parser.isContextual("of")))
				) {
					parser.addDiagnostic({
						start: parser.state.lastEndPos,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.COMPLEX_BINDING_WITHOUT_INITIALIZER,
					});
				}
			}

			declarations.push(
				parser.finishNode(
					start,
					{
						type: "JSVariableDeclarator",
						id,
						init,
					},
				),
			);

			if (
				!parser.eat(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				)
			) {
				break;
			}
		}

		return declarations;
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVarHead(
		parser,
		start,
	) {
		const id = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseTargetBindingPattern(
			parser,
		);

		___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
			parser,
			id,
			true,
			undefined,
			"variable declaration",
		);

		let definite;
		if (
			id.type === "JSBindingIdentifier" &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bang,
			)
		) {
			definite = true;
			parser.expectSyntaxEnabled("ts");
			parser.next();
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			const typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
				parser,
				true,
			);

			return parser.finishNode(
				start,
				Object.assign(
					{},
					id,
					{
						meta: parser.finishNode(
							start,
							{
								type: "JSPatternMeta",
								typeAnnotation,
								definite,
							},
						),
					},
				),
			);
		} else if (definite) {
			return Object.assign(
				{},
				id,
				{meta: parser.finishNode(start, {type: "JSPatternMeta", definite})},
			);
		} else {
			return id;
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionId(
		parser,
		requiredStatementId,
	) {
		if (
			requiredStatementId ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			)
		) {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
				parser,
			);
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionDeclaration(
		parser,
		start,
		isAsync,
	) {
		const ___R$ = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunction(
			parser,
			{
				start,
				requiredStatementId: true,
				isStatement: true,
				isAsync,
			},
		);
		const shape = Object.assign({}, ___R$);
		delete shape.id;
		delete shape.body;
		const {id, body} = ___R$;
		if (id === undefined) {
			throw new Error("Required function name");
		}

		if (body === undefined) {
			return parser.finalizeNode(
				Object.assign({type: "TSDeclareFunction"}, shape, {id}),
			);
		}

		return parser.finalizeNode(
			Object.assign({type: "JSFunctionDeclaration"}, shape, {id, body}),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseExportDefaultFunctionDeclaration(
		parser,
		start,
		isAsync,
	) {
		let ___R$1 = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunction(
			parser,
			{
				start,
				requiredStatementId: false,
				isStatement: true,
				isAsync,
			},
		);
		let shape = Object.assign({}, ___R$1);
		delete shape.id;
		delete shape.body;
		let {id, body} = ___R$1;
		if (id === undefined) {
			id = {
				type: "JSBindingIdentifier",
				name: "*default*",
				// Does this `loc` make sense?
				loc: shape.loc,
			};
		}

		if (body === undefined) {
			return parser.finalizeNode(
				Object.assign({type: "TSDeclareFunction"}, shape, {id}),
			);
		}

		return parser.finalizeNode(
			Object.assign({type: "JSFunctionDeclaration"}, shape, {id, body}),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionExpression(
		parser,
		start,
		isAsync,
	) {
		const ___R$2 = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunction(
			parser,
			{
				start,
				requiredStatementId: false,
				isStatement: false,
				isAsync,
			},
		);
		const shape = Object.assign({}, ___R$2);
		delete shape.body;
		const {body} = ___R$2;
		if (body === undefined) {
			throw new Error("Expected body");
		}

		return Object.assign({}, shape, {body, type: "JSFunctionExpression"});
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunction(
		parser,
		opts,
	) {
		const {start, isStatement, requiredStatementId, isAsync} = opts;

		const isGenerator = parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
		);

		let id;
		if (isStatement) {
			id = ___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionId(
				parser,
				requiredStatementId,
			);
		}

		const oldYieldPos = parser.state.yieldPos;
		const oldAwaitPos = parser.state.awaitPos;
		parser.pushScope("FUNCTION_LOC", start);
		parser.pushScope("FUNCTION", true);
		parser.pushScope("METHOD", false);
		parser.pushScope("GENERATOR", isGenerator);
		parser.pushScope("ASYNC", isAsync);
		parser.pushScope("CLASS_PROPERTY", false);
		parser.pushScope("NON_ARROW_FUNCTION");
		parser.state.yieldPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
		parser.state.awaitPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;

		if (!isStatement) {
			id = ___R$$priv$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionId(
				parser,
				false,
			);
		}

		const headStart = parser.getPosition();
		const {params, rest, typeParameters} = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionParams(
			parser,
		);
		const {head, body} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionBodyAndFinish(
			parser,
			{
				allowBodiless: isStatement,
				id,
				params,
				rest,
				isArrowFunction: false,
				isMethod: false,
				isAsync,
				isGenerator,
				headStart,
				start,
			},
		);

		parser.state.yieldPos = oldYieldPos;
		parser.state.awaitPos = oldAwaitPos;

		parser.popScope("NON_ARROW_FUNCTION");
		parser.popScope("FUNCTION");
		parser.popScope("FUNCTION_LOC");
		parser.popScope("CLASS_PROPERTY");
		parser.popScope("METHOD");
		parser.popScope("GENERATOR");
		parser.popScope("ASYNC");

		if (body !== undefined && body.type !== "JSBlockStatement") {
			throw new Error("Expected block statement for functions");
		}

		return {
			head: Object.assign({}, head, {typeParameters}),
			body,
			id,
			loc: parser.finishLoc(start),
		};
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$splitFunctionParams(
		params,
	) {
		const firstParam = params[0];
		if (
			firstParam !== undefined &&
			firstParam.type === "JSBindingIdentifier" &&
			firstParam.name === "this"
		) {
			return {
				thisType: firstParam,
				params: params.slice(1),
			};
		} else {
			return {
				thisType: undefined,
				params,
			};
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionParams(
		parser,
		kind,
		allowTSModifiers,
	) {
		let typeParameters = undefined;
		if (parser.isRelational("<")) {
			typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeParameters(
				parser,
			);

			if (typeParameters !== undefined && (kind === "get" || kind === "set")) {
				parser.addDiagnostic({
					loc: typeParameters.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ACCESSOR_WITH_TYPE_PARAMS,
				});
			}
		}

		parser.pushScope("PARAMETERS", true);

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			"function params",
		);
		const {list: params, rest} = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListNonEmpty(
			parser,
			openContext,
			allowTSModifiers,
		);

		parser.popScope("PARAMETERS");
		___R$project$rome$$romejs$js$parser$parser$expression_ts$checkYieldAwaitInDefaultParams(
			parser,
		);
		return {params, rest, typeParameters};
	}


  // project-rome/@romejs/codec-js-regexp/index.ts








	function ___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$isHex(str) {
		return !/[^0-9a-fA-F]/.test(str);
	}

	function ___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$isOct(str) {
		const OCT_REGEX = /^[0-7]+$/;
		return OCT_REGEX.test(str);
	}

	function ___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$getCodePoint(
		char,
	) {
		if (char.length === 1) {
			const point = char.codePointAt(0);
			if (point !== undefined) {
				return point;
			}
		}

		throw new Error("Input was not 1 character long");
	}

	function ___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$readOctalCode(
		input,
		index,
		nextChar,
	) {
		let char = nextChar;
		let octal = "";
		let nextIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, 1);
		while (___R$project$rome$$romejs$parser$core$index_ts$isDigit(char)) {
			octal += char;
			// stop at max octal ascii in case of octal escape
			if (parseInt(octal) > 377) {
				octal = octal.slice(0, octal.length - 1);
				break;
			}
			nextIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(nextIndex, 1);
			char = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(nextIndex)];
		}
		if (octal === "") {
			return {octalValue: undefined, end: nextIndex};
		}
		const octalValue = parseInt(octal, 10);
		return {octalValue, end: nextIndex};
	}

	const ___R$project$rome$$romejs$codec$js$regexp$index_ts$createRegExpParser = ___R$project$rome$$romejs$parser$core$index_ts$createParser((
		ParserCore,
	) =>
		(() => {
			class RegExpParser extends ParserCore {
				constructor(opts) {
					super(opts, "parse/regex");
					this.diagnostics = [];
					this.unicode = opts.unicode;
				}

				addDiagnostic(opts) {
					this.diagnostics.push(this.createDiagnostic(opts));
				}

				unexpected() {
					throw new Error("No throwing");
				}

				tokenize(index, input) {
					const char = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						index,
					)];

					if (char === "\\") {
						let end = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(index, 2);

						const nextChar = input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
							index,
						) + 1];
						switch (nextChar) {
							case "t":
								return this.finishComplexToken(
									"Character",
									{
										escaped: false,
										value: "\t",
									},
									end,
								);

							case "n":
								return this.finishComplexToken(
									"Character",
									{
										escaped: false,
										value: "\n",
									},
									end,
								);

							case "r":
								return this.finishComplexToken(
									"Character",
									{
										escaped: false,
										value: "\r",
									},
									end,
								);

							case "v":
								return this.finishComplexToken(
									"Character",
									{
										escaped: false,
										value: "\x0b",
									},
									end,
								);

							case "f":
								return this.finishComplexToken(
									"Character",
									{
										escaped: false,
										value: "\f",
									},
									end,
								);

							case "d":
							case "D":
							case "b":
							case "B":
							case "s":
							case "S":
							case "w":
							case "W":
								return this.finishValueToken("EscapedCharacter", nextChar, end);

							case "k": {
								if (this.unicode) {
									// named group back reference https://github.com/tc39/proposal-regexp-named-groups#backreferences
									let namedBackReference = "";
									let namedBackReferenceIndex =
										___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) + 2;
									let namedBackReferenceChar = input[namedBackReferenceIndex];
									if (namedBackReferenceChar === "<") {
										namedBackReferenceChar = input[namedBackReferenceIndex];
										while (
											namedBackReferenceChar !== ">" &&
											namedBackReferenceIndex < input.length
										) {
											namedBackReference += namedBackReferenceChar;
											namedBackReferenceIndex++;
											namedBackReferenceChar = input[namedBackReferenceIndex];
										}
										if (namedBackReferenceChar === ">") {
											namedBackReference += namedBackReferenceChar;
											namedBackReferenceIndex++;
										}
										return this.finishComplexToken(
											"NamedBackReferenceCharacter",
											{
												value: namedBackReference,
												escaped: true,
											},
											___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
												namedBackReferenceIndex,
											),
										);
									}
								}

								return this.finishComplexToken(
									"Character",
									{
										value: "k",
										escaped: true,
									},
									end,
								);
							}

							case "p": {
								if (this.unicode) {
									// TODO unicode property escapes https://github.com/tc39/proposal-regexp-unicode-property-escapes
								}

								return this.finishComplexToken(
									"Character",
									{
										value: "p",
										escaped: true,
									},
									end,
								);
							}

							case "P": {
								if (this.unicode) {
									// TODO unicode property escapes https://github.com/tc39/proposal-regexp-unicode-property-escapes
								}

								return this.finishComplexToken(
									"Character",
									{
										value: "P",
										escaped: true,
									},
									end,
								);
							}

							case "c":
								// TODO???
								return this.finishComplexToken(
									"Character",
									{
										value: "c",
										escaped: true,
									},
									end,
								);

							case "0": {
								const {octalValue, end: octalEnd} = ___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$readOctalCode(
									input,
									index,
									nextChar,
								);
								if (
									octalValue !== undefined &&
									___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$isOct(
										octalValue.toString(),
									)
								) {
									const octal = parseInt(octalValue.toString(), 8);
									return this.finishComplexToken(
										"Character",
										{
											value: String.fromCharCode(octal),
											escaped: true,
										},
										octalEnd,
									);
								}
								return this.finishComplexToken(
									"Character",
									{
										value: String.fromCharCode(0),
										escaped: true,
									},
									end,
								);
							}

							case "x": {
								const possibleHex = input.slice(
									___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) + 1,
									___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) + 3,
								);

								// \xhh
								if (
									possibleHex.length === 2 &&
									___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$isHex(
										possibleHex,
									)
								) {
									end = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(end, 2);

									return this.finishComplexToken(
										"Character",
										{
											value: String.fromCharCode(parseInt(possibleHex, 16)),
											escaped: true,
										},
										end,
									);
								}

								return this.finishComplexToken(
									"Character",
									{
										value: "x",
										escaped: true,
									},
									end,
								);
							}

							case "u": {
								// Get the next 4 characters after \u
								const possibleHex = input.slice(
									___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) + 2,
									___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) + 6,
								);

								// \uhhhh
								if (
									possibleHex.length === 4 &&
									___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$isHex(
										possibleHex,
									)
								) {
									end = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(end, 4);

									return this.finishComplexToken(
										"Character",
										{
											value: String.fromCharCode(parseInt(possibleHex, 16)),
											escaped: true,
										},
										end,
									);
								}

								if (this.unicode) {
									// TODO \u{hhhh} or \u{hhhhh}
								}

								return this.finishComplexToken(
									"Character",
									{
										value: "u",
										escaped: true,
									},
									end,
								);
							}

							// Redundant escaping
							default: {
								let {
									octalValue: referenceValue,
									end: referenceEnd,
								} = ___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$readOctalCode(
									input,
									index,
									nextChar,
								);
								if (referenceValue !== undefined) {
									let backReference = referenceValue.toString();
									// \8 \9 are treated as escape char
									if (referenceValue === 8 || referenceValue === 9) {
										return this.finishComplexToken(
											"Character",
											{
												value: backReference,
												escaped: true,
											},
											referenceEnd,
										);
									}

									if (
										___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$isOct(
											backReference,
										)
									) {
										const octal = parseInt(backReference, 8);
										return this.finishComplexToken(
											"Character",
											{
												value: String.fromCharCode(octal),
												escaped: true,
											},
											referenceEnd,
										);
									}

									// back reference allowed are 1 - 99
									if (referenceValue >= 1 && referenceValue <= 99) {
										return this.finishComplexToken(
											"NumericBackReferenceCharacter",
											{
												value: parseInt(backReference, 10),
												escaped: true,
											},
											referenceEnd,
										);
									} else {
										backReference = backReference.slice(
											0,
											backReference.length - 1,
										);
										referenceEnd = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
											referenceEnd,
											-1,
										);
										if (
											___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$isOct(
												backReference,
											)
										) {
											return this.finishComplexToken(
												"Character",
												{
													value: String.fromCharCode(parseInt(backReference, 8)),
													escaped: true,
												},
												referenceEnd,
											);
										} else {
											return this.finishComplexToken(
												"NumericBackReferenceCharacter",
												{
													value: parseInt(backReference, 10),
													escaped: true,
												},
												referenceEnd,
											);
										}
									}
								}

								return this.finishComplexToken(
									"Character",
									{
										value: nextChar,
										escaped: true,
									},
									end,
								);
							}
						}
					}

					switch (char) {
						case "$":
						case "^":
						case ".":
						case "?":
						case "{":
						case "}":
						case "+":
						case "|":
						case "*":
						case "[":
						case "]":
						case "(":
						case ")":
							return this.finishValueToken("Operator", char);
					}

					return this.finishComplexToken(
						"Character",
						{
							value: char,
							escaped: false,
						},
					);
				}

				getGroupModifiers() {
					const token = this.getToken();

					if (token.type === "Character") {
						switch (token.value) {
							case ":": {
								this.nextToken();
								return {
									type: "NON_CAPTURE",
									kind: undefined,
								};
							}

							case "=": {
								this.nextToken();
								return {
									type: "NON_CAPTURE",
									kind: "positive-lookahead",
								};
							}

							case "!": {
								this.nextToken();
								return {
									type: "NON_CAPTURE",
									kind: "negative-lookahead",
								};
							}

							case "<": {
								const nextToken = this.lookaheadToken();

								if (nextToken.type === "Character") {
									switch (nextToken.value) {
										case "!": {
											this.nextToken();
											this.nextToken();
											return {
												type: "NON_CAPTURE",
												kind: "negative-lookbehind",
											};
										}

										case "=": {
											this.nextToken();
											this.nextToken();
											return {
												type: "NON_CAPTURE",
												kind: "positive-lookbehind",
											};
										}
									}

									if (
										___R$project$rome$$romejs$parser$core$index_ts$isESIdentifierStart(
											nextToken.value,
										)
									) {
										let name = "";

										// 1 is for the <
										let skipCount = 1;
										let targetToken = nextToken;
										while (
											targetToken.type === "Character" &&
											___R$project$rome$$romejs$parser$core$index_ts$isESIdentifierChar(
												targetToken.value,
											)
										) {
											name += targetToken.value;
											targetToken = this.lookaheadToken(targetToken.end);
											skipCount++;
										}

										if (
											targetToken.type === "Character" &&
											targetToken.value === ">"
										) {
											// Skip through all the name tokens including >
											skipCount++;

											// This is kinda a hacky solution, and slower than it could be
											for (let i = 0; i < skipCount; i++) {
												this.nextToken();
											}

											return {
												type: "NAMED_CAPTURE",
												name,
											};
										}
									}
								}
							}
						}
					}

					this.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.INVALID_CAPTURE_GROUP_MODIFIER,
						token,
					});

					return undefined;
				}

				matchOperator(op) {
					const token = this.getToken();
					return token.type === "Operator" && token.value === op;
				}

				eatOperator(op) {
					if (this.matchOperator(op)) {
						this.nextToken();
						return true;
					} else {
						return false;
					}
				}

				parseGroupCapture() {
					const start = this.getPosition();
					this.nextToken();

					let modifiers;
					if (this.eatOperator("?")) {
						modifiers = this.getGroupModifiers();
					}

					const expression = this.parseExpression(() => !this.matchOperator(")"));

					if (!this.eatOperator(")")) {
						this.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.UNCLOSED_GROUP,
							start,
						});
					}

					if (modifiers !== undefined && modifiers.type === "NON_CAPTURE") {
						return {
							type: "JSRegExpGroupNonCapture",
							expression,
							kind: modifiers.kind,
							loc: this.finishLoc(start),
						};
					} else {
						let name = modifiers !== undefined ? modifiers.name : undefined;
						return {
							type: "JSRegExpGroupCapture",
							expression,
							name,
							loc: this.finishLoc(start),
						};
					}
				}

				parseCharSet() {
					const start = this.getPosition();
					this.nextToken();

					const body = [];
					const invert = this.eatOperator("^");

					while (!this.matchToken("EOF") && !this.matchOperator("]")) {
						const part = this.parseCharacterOrRange();
						body.push(part);
					}

					if (!this.eatOperator("]")) {
						this.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.UNCLOSED_CHAR_SET,
							start,
						});
					}

					return {
						type: "JSRegExpCharSet",
						invert,
						body,
						loc: this.finishLoc(start),
					};
				}

				getCharacterFromToken(token) {
					switch (token.type) {
						case "Character":
						case "Operator":
							return token.value;

						case "SOF":
						case "EOF":
						case "Invalid":
							throw new Error("Unnecessary");

						default:
							throw new Error("Never");
					}
				}

				parseCharacter() {
					const token = this.getToken();

					if (token.type === "Character") {
						this.nextToken();
						return {
							type: "JSRegExpCharacter",
							value: token.value,
							loc: this.finishLocFromToken(token),
						};
					}

					if (token.type === "NumericBackReferenceCharacter") {
						this.nextToken();

						return {
							type: "JSRegExpNumericBackReference",
							value: token.value,
							loc: this.finishLocFromToken(token),
						};
					}

					if (token.type === "NamedBackReferenceCharacter") {
						const start = this.input.slice(
							0,
							___R$project$rome$$romejs$ob1$index_ts$ob1Get0(token.start),
						);
						this.nextToken();

						if (token.value[token.value.length - 1] !== ">") {
							this.addDiagnostic({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.UNCLOSED_NAMED_CAPTURE,
								loc: this.finishLocFromToken(token),
							});
						}

						if (!start.includes(token.value)) {
							this.addDiagnostic({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.INVALID_NAMED_CAPTURE,
								loc: this.finishLocFromToken(token),
							});
						}

						const name = token.value.slice(1, token.value.length - 1);
						return {
							type: "JSRegExpNamedBackReference",
							name,
							loc: this.finishLocFromToken(token),
						};
					}

					if (token.type === "EscapedCharacter") {
						this.nextToken();

						const loc = this.finishLocFromToken(token);
						switch (token.value) {
							case "d":
								return {
									type: "JSRegExpDigitCharacter",
									loc,
								};

							case "D":
								return {
									type: "JSRegExpNonDigitCharacter",
									loc,
								};

							case "b":
								return {
									type: "JSRegExpWordBoundaryCharacter",
									loc,
								};

							case "B":
								return {
									type: "JSRegExpNonWordBoundaryCharacter",
									loc,
								};

							case "s":
								return {
									type: "JSRegExpWhiteSpaceCharacter",
									loc,
								};

							case "S":
								return {
									type: "JSRegExpNonWhiteSpaceCharacter",
									loc,
								};

							case "w":
								return {
									type: "JSRegExpWordCharacter",
									loc,
								};

							case "W":
								return {
									type: "JSRegExpNonWordCharacter",
									loc,
								};
						}
					}

					this.nextToken();
					return {
						type: "JSRegExpCharacter",
						value: this.getCharacterFromToken(token),
						loc: this.finishLocFromToken(token),
					};
				}

				parseCharacterOrRange() {
					const startPos = this.getPosition();
					let start = this.parseCharacter();

					// Range
					const nextToken = this.getToken();
					if (
						start.type === "JSRegExpCharacter" &&
						nextToken.type === "Character" &&
						nextToken.value === "-" &&
						!nextToken.escaped
					) {
						const lookaheadToken = this.lookaheadToken();
						if (lookaheadToken.type === "Character") {
							// Skip dash
							this.nextToken();

							let end = this.parseCharacter();

							const loc = this.finishLoc(startPos);

							if (
								start.type === "JSRegExpCharacter" &&
								end.type === "JSRegExpCharacter" &&
								___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$getCodePoint(
									end.value,
								) <
								___R$$priv$project$rome$$romejs$codec$js$regexp$index_ts$getCodePoint(
									start.value,
								)
							) {
								this.addDiagnostic({
									description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.REVERSED_CHAR_SET_RANGE,
									loc,
								});
								const _end = end;
								end = start;
								start = _end;
							}

							return {
								type: "JSRegExpCharSetRange",
								loc,
								start,
								end,
							};
						}
					}

					return start;
				}

				parseDigits() {
					let digits = "";
					let token = this.getToken();
					while (
						token.type === "Character" &&
						___R$project$rome$$romejs$parser$core$index_ts$isDigit(token.value)
					) {
						digits += token.value;
						token = this.nextToken();
					}

					if (digits.length === 0) {
						return undefined;
					} else {
						return Number(digits);
					}
				}

				parseQuantifier() {
					if (this.eatOperator("?")) {
						return {
							min: 0,
							max: 1,
						};
					}

					if (this.eatOperator("*")) {
						return {
							min: 0,
							max: undefined,
						};
					}

					if (this.eatOperator("+")) {
						return {
							min: 1,
							max: undefined,
						};
					}

					if (this.matchOperator("{")) {
						const snapshot = this.save();

						this.nextToken();

						const start = this.getPosition();
						const min = this.parseDigits();

						if (min !== undefined) {
							const nextToken = this.getToken();
							if (nextToken.type === "Character" && nextToken.value === ",") {
								this.nextToken();

								const max = this.parseDigits();
								const end = this.getPosition();

								const endToken = this.getToken();
								if (endToken.type === "Operator" && endToken.value === "}") {
									this.nextToken();

									if (max !== undefined && min > max) {
										this.addDiagnostic({
											description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.REVERSED_QUANTIFIER_RANGE,
											start,
											end,
										});
										return {
											max: min,
											min: max,
										};
									}

									return {
										min,
										max,
									};
								}
							} else if (
								nextToken.type === "Operator" &&
								nextToken.value === "}"
							) {
								this.nextToken();
								return {
									min,
									max: min,
								};
							}
						}

						this.restore(snapshot);
					}

					return undefined;
				}

				parseBodyItem() {
					const start = this.getPosition();

					const prefix = this.parseBodyItemPrefix();
					if (prefix === undefined) {
						return undefined;
					}

					let target = prefix;

					while (true) {
						const quantifier = this.parseQuantifier();
						if (quantifier === undefined) {
							break;
						}

						const lazy = this.eatOperator("?");

						const quantified = Object.assign(
							{
								type: "JSRegExpQuantified",
								loc: this.finishLoc(start),
								target,
								lazy,
							},
							quantifier,
						);

						target = quantified;
					}

					return target;
				}

				parseOperator(token) {
					switch (token.value) {
						case "$": {
							this.nextToken();
							return {
								type: "JSRegExpEndCharacter",
								loc: this.finishLocFromToken(token),
							};
						}

						case "^": {
							this.nextToken();
							return {
								type: "JSRegExpStartCharacter",
								loc: this.finishLocFromToken(token),
							};
						}

						case ".": {
							this.nextToken();
							return {
								type: "JSRegExpAnyCharacter",
								loc: this.finishLocFromToken(token),
							};
						}

						case "[":
							return this.parseCharSet();

						case "(":
							return this.parseGroupCapture();

						case ")": {
							this.nextToken();
							this.addDiagnostic({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.UNOPENED_GROUP,
								token,
							});
							return;
						}

						case "{": {
							const start = this.getPosition();
							const unmatchedQuantifier = this.parseQuantifier();
							if (unmatchedQuantifier === undefined) {
								// Quantifier is undefined and eaten tokens were restored
								// Return a '{' token as a RegexpCharacter, parseBodyItem() will handle parsing of subsequent quantifiers
								return this.parseCharacter();
							} else {
								// If quantifier is defined, then syntax error: Nothing to repeat
								const end = this.getPosition();
								this.addDiagnostic({
									description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.NO_TARGET_QUANTIFIER,
									start,
									end,
								});
								return;
							}
						}

						case "?":
						case "*":
						case "+": {
							this.nextToken();
							this.addDiagnostic({
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.INVALID_QUANTIFIER_TARGET,
								token,
							});
							return;
						}

						case "]":
						case "}":
							return this.parseCharacter();

						default:
							return undefined;
					}
				}

				parseBodyItemPrefix() {
					const token = this.getToken();

					switch (token.type) {
						case "Operator":
							return this.parseOperator(token);

						case "EscapedCharacter":
						case "Character":
						case "NumericBackReferenceCharacter":
						case "NamedBackReferenceCharacter":
							return this.parseCharacter();
					}

					this.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.REGEX_PARSER.UNKNOWN_REGEX_PART,
						token,
					});

					return undefined;
				}

				parseExpression(whileCallback) {
					const alternations = [];
					let body = [];

					const start = this.getPosition();
					let alternateStart = start;

					while (
						!this.matchToken("EOF") &&
						(whileCallback === undefined || whileCallback())
					) {
						if (this.eatOperator("|")) {
							alternations.push({
								start: alternateStart,
								end: this.getPosition(),
								body,
							});
							alternateStart = this.getPosition();
							body = [];
							continue;
						}

						const part = this.parseBodyItem();
						if (part !== undefined) {
							body.push(part);
						}
					}

					alternations.push({
						body,
						start: alternateStart,
						end: this.getPosition(),
					});

					let expression;

					while (alternations.length > 0) {
						const alternation = alternations.shift();

						const sub = {
							type: "JSRegExpSubExpression",
							body: alternation.body,
							loc: this.finishLocAt(alternation.start, alternation.end),
						};

						if (expression === undefined) {
							expression = sub;
						} else {
							const alternationNode = {
								type: "JSRegExpAlternation",
								left: expression,
								right: sub,
								loc: this.finishLocAt(
									this.getLoc(expression).start,
									alternation.end,
								),
							};

							expression = alternationNode;
						}
					}

					if (expression === undefined) {
						throw new Error(
							"Impossible. We should always have at least one alternation that will set this.",
						);
					}

					return expression;
				}

				parse() {
					return {
						expression: this.parseExpression(),
						diagnostics: this.diagnostics,
					};
				}
			}
			return RegExpParser;
		})()
	);


  // project-rome/@romejs/js-parser/parser/expression.ts
const ___R$project$rome$$romejs$js$parser$parser$expression_ts = {
		checkPropClash: ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkPropClash,
		parseExpression: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression,
		parseMaybeAssign: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign,
		parseMaybeConditional: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeConditional,
		tryParseConditionalConsequent: ___R$project$rome$$romejs$js$parser$parser$expression_ts$tryParseConditionalConsequent,
		parseConditional: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseConditional,
		forwardNoArrowParamsConversionAt: ___R$project$rome$$romejs$js$parser$parser$expression_ts$forwardNoArrowParamsConversionAt,
		parseExpressionOps: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOps,
		parseExpressionOp: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOp,
		parseMaybeUnary: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeUnary,
		parseExpressionWithPossibleSubscripts: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionWithPossibleSubscripts,
		parseSubscripts: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseSubscripts,
		parseAsyncArrowWithTypeParameters: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAsyncArrowWithTypeParameters,
		parseExpressionSubscript: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionSubscript,
		parseTaggedTemplateExpression: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTaggedTemplateExpression,
		checkYieldAwaitInDefaultParams: ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkYieldAwaitInDefaultParams,
		atPossibleAsync: ___R$project$rome$$romejs$js$parser$parser$expression_ts$atPossibleAsync,
		parseCallExpressionArguments: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallExpressionArguments,
		shouldParseAsyncArrow: ___R$project$rome$$romejs$js$parser$parser$expression_ts$shouldParseAsyncArrow,
		parseAsyncArrowFromCallExpression: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAsyncArrowFromCallExpression,
		parseNoCallExpr: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNoCallExpr,
		parseExpressionAtom: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionAtom,
		parseBooleanLiteral: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBooleanLiteral,
		parseMaybePrivateName: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybePrivateName,
		parseFunctionExpressionOrMetaProperty: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionExpressionOrMetaProperty,
		parseMetaProperty: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMetaProperty,
		parseImportMetaProperty: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseImportMetaProperty,
		parseParenExpression: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenExpression,
		parseParenAndDistinguishExpression: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenAndDistinguishExpression,
		shouldParseArrow: ___R$project$rome$$romejs$js$parser$parser$expression_ts$shouldParseArrow,
		parseArrowHead: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowHead,
		parseParenItem: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenItem,
		parseNew: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNew,
		parseTemplateElement: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplateElement,
		parseTemplate: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplate,
		parseObjectExpression: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectExpression,
		parseObjectPattern: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPattern,
		isGetterOrSetterMethod: ___R$project$rome$$romejs$js$parser$parser$expression_ts$isGetterOrSetterMethod,
		checkGetterSetterParamCount: ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkGetterSetterParamCount,
		parseObjectMethod: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectMethod,
		parseObjectProperty: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectProperty,
		parseObjectPropertyValue: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyValue,
		parseObjectPropertyKey: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyKey,
		parseMethod: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMethod,
		parseArrowExpression: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowExpression,
		isStrictBody: ___R$project$rome$$romejs$js$parser$parser$expression_ts$isStrictBody,
		parseFunctionBodyAndFinish: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionBodyAndFinish,
		parseFunctionBody: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionBody,
		checkFunctionNameAndParams: ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkFunctionNameAndParams,
		parseExpressionList: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionList,
		parseExpressionListNonEmpty: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionListNonEmpty,
		parseCallArgument: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallArgument,
		parseIdentifier: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier,
		parseBindingIdentifier: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier,
		parseReferenceIdentifier: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseReferenceIdentifier,
		toBindingIdentifier: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier,
		toAssignmentIdentifier: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toAssignmentIdentifier,
		toReferenceIdentifier: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier,
		toIdentifier: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toIdentifier,
		createIdentifier: ___R$project$rome$$romejs$js$parser$parser$expression_ts$createIdentifier,
		parseIdentifierName: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifierName,
		checkReservedWord: ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkReservedWord,
		parseAwait: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAwait,
		parseYield: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseYield,
		parseStringLiteral: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral,
		parseNumericLiteral: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNumericLiteral,
		parseArrayHole: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrayHole,
	};
	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkPropClash(
		parser,
		prop,
		props,
	) {
		if (
			prop.key.type === "JSComputedPropertyKey" ||
			prop.type === "JSObjectMethod"
		) {
			return undefined;
		}

		const key = prop.key.value;

		// We can only check these for collisions since they're statically known
		if (
			key.type !== "JSIdentifier" &&
			key.type !== "JSStringLiteral" &&
			key.type !== "JSNumericLiteral"
		) {
			return;
		}

		// It is either an JSIdentifier or a String/NumericLiteral
		const name = key.type === "JSIdentifier" ? key.name : String(key.value);

		if (name === "__proto__") {
			if (props.has("proto")) {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.PROTO_PROP_REDEFINITION,
					loc: key.loc,
				});
			} else {
				props.add("proto");
			}
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
		parser,
		context,
		noIn,
		refShorthandDefaultPos,
	) {
		const startPos = parser.state.startPos;
		const expr = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
			parser,
			context,
			noIn,
			refShorthandDefaultPos,
		);
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
			)
		) {
			let expressions = [expr];
			while (
				parser.eat(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				)
			) {
				expressions.push(
					___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
						parser,
						context,
						noIn,
						refShorthandDefaultPos,
					),
				);
			}

			expressions = ___R$project$rome$$romejs$js$parser$parser$lval_ts$filterSpread(
				parser,
				___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedList(
					parser,
					expressions,
				),
			);

			return parser.finishNode(
				startPos,
				{
					type: "JSSequenceExpression",
					expressions,
				},
			);
		}
		return expr;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
		parser,
		context,
		noIn,
		refShorthandDefaultPos,
		afterLeftParse,
		refNeedsArrowPos,
	) {
		const branches = parser.createBranch();

		// Try parsing as JSX
		if (
			(parser.isRelational("<") ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart,
			)) &&
			parser.shouldTokenizeJSX()
		) {
			branches.add(
				() => {
					return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseMaybeAssign(
						parser,
						context,
						noIn,
						refShorthandDefaultPos,
						afterLeftParse,
						refNeedsArrowPos,
					);
				},
				{diagnosticsPriority: 1},
			);

			// Remove `tc.j_expr` and `tc.j_oTag` from 'context added

			// by parsing `jsxTagStart` to stop the JSX plugin from

			// messing with the tokens
			const cLength = parser.state.context.length;
			if (
				parser.state.context[cLength - 1] ===
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxOpenTag
			) {
				parser.state.context.length -= 2;
			}
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.relational,
				"<",
			);
		}

		// Try parsing as an arrow function with type parameters
		if (parser.isRelational("<")) {
			branches.add(() => {
				const start = parser.getPosition();
				const typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeParameters(
					parser,
				);
				const arrowExpression = ___R$project$rome$$romejs$js$parser$parser$expression_ts$forwardNoArrowParamsConversionAt(
					parser,
					start,
					() =>
						___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseMaybeAssign(
							parser,
							context,
							noIn,
							refShorthandDefaultPos,
							afterLeftParse,
							refNeedsArrowPos,
						)
					,
				);
				parser.resetStartLocationFromNode(arrowExpression, typeParameters);

				if (arrowExpression.type === "JSArrowFunctionExpression") {
					return Object.assign({}, arrowExpression, {typeParameters});
				} else {
					parser.addDiagnostic({
						loc: typeParameters.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_ARROW_AFTER_TYPE_PARAMS,
					});
					return ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
						parser,
						parser.createUnknownIdentifier("type params without arrow function"),
					);
				}
			});
		}

		branches.add(() => {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseMaybeAssign(
				parser,
				context,
				noIn,
				refShorthandDefaultPos,
				afterLeftParse,
				refNeedsArrowPos,
			);
		});

		// Pick the branch with the least amount of errors
		return branches.pick();
	}



	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseMaybeAssign(
		parser,
		context,
		noIn,
		refShorthandDefaultPos,
		afterLeftParse,
		refNeedsArrowPos,
	) {
		const startPos = parser.state.startPos;

		if (parser.isContextual("yield")) {
			if (parser.inScope("GENERATOR")) {
				let left = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseYield(
					parser,
					noIn,
				);
				if (afterLeftParse) {
					left = afterLeftParse(parser, left, startPos);
				}
				return left;
			} else {
				// The tokenizer will assume an expression is allowed after
				// `yield`, but this isn't that kind of yield
				parser.state.exprAllowed = false;
			}
		}

		const oldCommaAfterSpreadAt = parser.state.commaAfterSpreadAt;
		parser.state.commaAfterSpreadAt = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1;

		let failOnShorthandAssign;
		if (refShorthandDefaultPos) {
			failOnShorthandAssign = false;
		} else {
			refShorthandDefaultPos = ___R$project$rome$$romejs$js$parser$utils$location_ts$createIndexTracker();
			failOnShorthandAssign = true;
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			)
		) {
			parser.state.potentialArrowAt = parser.state.startPos.index;
		}

		let left = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeConditional(
			parser,
			context,
			noIn,
			refShorthandDefaultPos,
			refNeedsArrowPos,
		);
		if (afterLeftParse) {
			left = afterLeftParse(parser, left, startPos);
		}

		if (parser.state.tokenType.isAssign) {
			const operator = (String(parser.state.tokenValue));
			const leftPatt = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentPattern(
				parser,
				left,
				"assignment expression",
			);

			// reset because shorthand default was used correctly
			refShorthandDefaultPos.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;

			___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
				parser,
				leftPatt,
				undefined,
				undefined,
				"assignment expression",
			);

			// We should never get patterns here...?

			//if (left.type === 'BindingArrayPattern' || left.type === 'BindingObjectPattern') {
			//  checkCommaAfterRestFromSpread(parser);

			//}
			parser.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;

			parser.next();
			const right = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"assignment right",
				noIn,
			);
			return parser.finishNode(
				startPos,
				{
					type: "JSAssignmentExpression",
					operator,
					left: leftPatt,
					right,
				},
			);
		} else if (
			failOnShorthandAssign &&
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				refShorthandDefaultPos.index,
			) > 0
		) {
			parser.unexpectedToken(
				parser.getPositionFromIndex(refShorthandDefaultPos.index),
			);
		}

		parser.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;

		return left;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeConditional(
		parser,
		context,
		noIn,
		refShorthandDefaultPos,
		refNeedsArrowPos,
	) {
		const startPos = parser.state.startPos;
		const potentialArrowAt = parser.state.potentialArrowAt;
		const expr = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOps(
			parser,
			context,
			noIn,
			refShorthandDefaultPos,
		);

		if (
			expr.type === "JSArrowFunctionExpression" &&
			parser.getLoc(expr).start.index === potentialArrowAt
		) {
			return expr;
		}

		if (
			refShorthandDefaultPos &&
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				refShorthandDefaultPos.index,
			) > 0
		) {
			return expr;
		}

		return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseConditional(
			parser,
			expr,
			noIn,
			startPos,
			refNeedsArrowPos,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$tryParseConditionalConsequent(
		parser,
	) {
		const brancher = parser.createBranch();

		brancher.add(() => {
			parser.state.noArrowParamsConversionAt.push(parser.state.startPos.index);
			const consequent = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"conditional consequent",
			);
			parser.state.noArrowParamsConversionAt.pop();
			return {
				consequent,
				failed: !parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
				),
			};
		});

		return brancher.pick();
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseConditional(
		parser,
		expr,
		noIn,
		startPos,
		refNeedsArrowPos,
	) {
		if (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			)
		) {
			return expr;
		}

		// This is to handle a case like this: const foo = (foo?: bar) => {};

		// We'll be called due to the `?`, and we should mark ourselves as an

		// expected arrow function if parsing as a regular conditional fails
		if (refNeedsArrowPos) {
			const branch = parser.createBranch();

			branch.add(
				() =>
					___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseConditional(
						parser,
						expr,
						noIn,
						startPos,
					)
				,
				{
					maxNewDiagnostics: 0,
				},
			);

			if (branch.hasBranch()) {
				return branch.pick();
			} else {
				refNeedsArrowPos.index = parser.state.startPos.index;
				return expr;
			}
		}

		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
		);
		const originalNoArrowAt = parser.state.noArrowAt;
		let {consequent} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$tryParseConditionalConsequent(
			parser,
		);
		parser.state.noArrowAt = originalNoArrowAt;

		if (
			!parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.MISSING_CONDITIONAL_SEPARATOR,
			});
		}

		const alternate = ___R$project$rome$$romejs$js$parser$parser$expression_ts$forwardNoArrowParamsConversionAt(
			parser,
			startPos,
			() =>
				___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
					parser,
					"conditional alternate",
					noIn,
					undefined,
					undefined,
					undefined,
				)
			,
		);

		return parser.finishNode(
			startPos,
			{
				type: "JSConditionalExpression",
				test: expr,
				consequent,
				alternate,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$forwardNoArrowParamsConversionAt(
		parser,
		start,
		parse,
	) {
		if (parser.state.noArrowParamsConversionAt.includes(start.index)) {
			let result;
			parser.state.noArrowParamsConversionAt.push(parser.state.startPos.index);
			result = parse();
			parser.state.noArrowParamsConversionAt.pop();
			return result;
		} else {
			return parse();
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseConditional(
		parser,
		expr,
		noIn,
		startPos,
	) {
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			)
		) {
			const test = expr;
			const consequent = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"conditional consequent",
			);
			parser.expect(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			);
			const alternate = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"conditional alternate",
				noIn,
			);
			return parser.finishNode(
				startPos,
				{
					type: "JSConditionalExpression",
					test,
					consequent,
					alternate,
				},
			);
		}
		return expr;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOps(
		parser,
		context,
		noIn,
		refShorthandDefaultPos,
	) {
		const startPos = parser.state.startPos;
		const potentialArrowAt = parser.state.potentialArrowAt;
		const expr = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeUnary(
			parser,
			context,
			refShorthandDefaultPos,
		);

		if (
			expr.type === "JSArrowFunctionExpression" &&
			parser.getLoc(expr).start.index === potentialArrowAt
		) {
			return expr;
		}
		if (
			refShorthandDefaultPos &&
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				refShorthandDefaultPos.index,
			) > 0
		) {
			return expr;
		}

		return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOp(
			parser,
			context,
			expr,
			startPos,
			-1,
			noIn,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOp(
		parser,
		context,
		left,
		leftStartPos,
		minPrec,
		noIn = false,
	) {
		if (
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in.getBinop() >
			minPrec &&
			!parser.hasPrecedingLineBreak() &&
			parser.isContextual("as")
		) {
			const _const = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSNextParseConstantContext(
				parser,
			);

			let typeAnnotation;
			if (_const) {
				___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckLiteralForConstantContext(
					parser,
					left,
				);
				typeAnnotation = _const;
			} else {
				typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsNextThenParseType(
					parser,
				);
			}

			const node = parser.finishNode(
				leftStartPos,
				{
					type: "TSAsExpression",
					typeAnnotation,
					expression: left,
				},
			);

			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOp(
				parser,
				context,
				node,
				leftStartPos,
				minPrec,
				noIn,
			);
		}

		const prec = parser.state.tokenType.binop;
		if (
			prec !== undefined &&
			(!noIn ||
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in,
			))
		) {
			if (prec > minPrec) {
				const operator = (String(parser.state.tokenValue));

				if (
					operator === "**" &&
					left.type === "JSUnaryExpression" &&
					!parser.isParenthesized(left)
				) {
					parser.addDiagnostic({
						loc: left.argument.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.WRAP_EXPONENTIATION,
					});
				}

				const op = parser.state.tokenType;
				parser.next();

				const startPos = parser.state.startPos;

				const right = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOp(
					parser,
					context,
					___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeUnary(
						parser,
						context,
					),
					startPos,
					op.rightAssociative ? prec - 1 : prec,
					noIn,
				);

				let node;
				if (operator === "||" || operator === "&&" || operator === "??") {
					node = parser.finishNode(
						leftStartPos,
						{
							type: "JSLogicalExpression",
							left,
							right,
							operator,
						},
					);
				} else {
					node = parser.finishNode(
						leftStartPos,
						{
							type: "JSBinaryExpression",
							left,
							right,
							operator,
						},
					);
				}

				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionOp(
					parser,
					context,
					node,
					leftStartPos,
					minPrec,
					noIn,
				);
			}
		}

		return left;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeUnary(
		parser,
		context,
		refShorthandDefaultPos,
	) {
		if (
			parser.isSyntaxEnabled("ts") &&
			!parser.isSyntaxEnabled("jsx") &&
			parser.isRelational("<")
		) {
			return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAssertion(
				parser,
			);
		}

		if (parser.isContextual("await") && parser.inScope("ASYNC")) {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAwait(
				parser,
			);
		}

		if (parser.state.tokenType.prefix) {
			const start = parser.getPosition();
			const update = parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.incDec,
			);
			const operator = (String(parser.state.tokenValue));
			const prefix = true;

			parser.next();

			const argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeUnary(
				parser,
				context,
			);

			if (
				refShorthandDefaultPos &&
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
					refShorthandDefaultPos.index,
				) > 0
			) {
				parser.unexpectedToken(
					parser.getPositionFromIndex(refShorthandDefaultPos.index),
				);
			}

			if (update) {
				___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
					parser,
					argument,
					undefined,
					undefined,
					"prefix operation",
				);
			} else if (parser.inScope("STRICT") && operator === "delete") {
				if (argument.type === "JSReferenceIdentifier") {
					parser.addDiagnostic({
						loc: argument.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DELETE_LOCAL_VARIABLE_IN_STRICT,
					});
				} else if (
					argument.type === "JSMemberExpression" &&
					argument.property.value.type === "JSPrivateName"
				) {
					parser.addDiagnostic({
						loc: argument.property.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DELETE_PRIVATE_FIELD,
					});
				}
			}

			let node;
			if (update) {
				if (operator !== "++" && operator !== "--") {
					throw new Error("Expected ++/-- operator only for JSUpdateExpression");
				}

				node = parser.finishNode(
					start,
					{
						type: "JSUpdateExpression",
						argument,
						operator,
						prefix,
					},
				);
			} else {
				if (operator === "++" || operator === "--") {
					throw new Error("BinaryExpression cannot have ++/-- operator");
				}

				node = parser.finishNode(
					start,
					{
						type: "JSUnaryExpression",
						argument,
						operator,
						prefix,
					},
				);
			}

			return node;
		}

		const startPos = parser.state.startPos;

		let expr = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionWithPossibleSubscripts(
			parser,
			context,
			refShorthandDefaultPos,
		);
		if (
			refShorthandDefaultPos &&
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				refShorthandDefaultPos.index,
			) > 0
		) {
			return expr;
		}

		while (parser.state.tokenType.postfix && !parser.canInsertSemicolon()) {
			const operator = (String(parser.state.tokenValue));
			___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
				parser,
				expr,
				undefined,
				undefined,
				"postfix operation",
			);
			parser.next();

			const updateNode = parser.finishNode(
				startPos,
				{
					type: "JSUpdateExpression",
					operator,
					prefix: false,
					argument: expr,
				},
			);
			expr = updateNode;
		}

		return expr;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionWithPossibleSubscripts(
		parser,
		context,
		refShorthandDefaultPos,
	) {
		const startPos = parser.state.startPos;
		const potentialArrowAt = parser.state.potentialArrowAt;
		const expr = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionAtom(
			parser,
			context,
			refShorthandDefaultPos,
		);

		if (
			expr.type === "JSArrowFunctionExpression" &&
			parser.getLoc(expr).start.index === potentialArrowAt
		) {
			return expr;
		}

		if (
			refShorthandDefaultPos &&
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				refShorthandDefaultPos.index,
			) > 0
		) {
			return expr;
		}

		return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseSubscripts(
			parser,
			expr,
			startPos,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseSubscripts(
		parser,
		base,
		startPos,
		noCalls,
	) {
		const maybeAsyncArrow = ___R$project$rome$$romejs$js$parser$parser$expression_ts$atPossibleAsync(
			parser,
			base,
		);

		if (
			base.type === "JSReferenceIdentifier" &&
			base.name === "async" &&
			parser.state.noArrowAt.includes(startPos.index)
		) {
			const argsStart = parser.getPosition();
			const openContext = parser.expectOpening(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
				"call arguments",
			);
			const callee = base;
			const {args} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallExpressionArguments(
				parser,
				openContext,
				false,
			);
			base = parser.finishNodeWithCommentStarts(
				[argsStart, startPos],
				{
					type: "JSCallExpression",
					callee,
					arguments: args,
				},
			);
		} else if (
			base.type === "JSReferenceIdentifier" &&
			base.name === "async" &&
			parser.isRelational("<")
		) {
			const branch = parser.createBranch();
			branch.add(() =>
				___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAsyncArrowWithTypeParameters(
					parser,
					startPos,
				)
			);
			branch.add(() =>
				___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionSubscriptsRecursively(
					parser,
					base,
					startPos,
					noCalls,
					maybeAsyncArrow,
				)
			);
			return branch.pick();
		}

		return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionSubscriptsRecursively(
			parser,
			base,
			startPos,
			noCalls,
			maybeAsyncArrow,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAsyncArrowWithTypeParameters(
		parser,
		startPos,
	) {
		const {params, rest, typeParameters} = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionParams(
			parser,
		);

		const {returnType, valid} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowHead(
			parser,
		);
		if (!valid) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_ASYNC_ARROW_WITH_TYPE_PARAMS,
			});
			return undefined;
		}

		const func = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowExpression(
			parser,
			startPos,
			{
				bindingList: params,
				rest,
			},
			/* isAsync */ true,
		);

		return Object.assign(
			{},
			func,
			{head: Object.assign({}, func.head, {returnType, typeParameters})},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionSubscriptsRecursively(
		parser,
		base,
		startPos,
		noCalls,
		maybeAsyncArrow,
	) {
		const state = {
			optionalChainMember: false,
			stop: false,
		};
		do {
			base = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionSubscript(
				parser,
				base,
				startPos,
				noCalls,
				state,
				maybeAsyncArrow,
			);
		} while (!state.stop);
		return base;
	}



	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionSubscript(
		parser,
		base,
		startPos,
		noCalls = false,
		state,
		maybeAsyncArrow,
	) {
		if (
			!parser.hasPrecedingLineBreak() &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bang,
			)
		) {
			parser.state.exprAllowed = false;
			parser.next();

			return parser.finishNode(
				startPos,
				{
					type: "TSNonNullExpression",
					expression: base,
				},
			);
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.questionDot,
			)
		) {
			state.optionalChainMember = true;

			if (
				noCalls &&
				parser.lookaheadState().tokenType ===
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL
			) {
				state.stop = true;
				return base;
			}

			parser.next();

			// eg: o.m?.<T>(e);
			if (parser.isRelational("<")) {
				if (noCalls) {
					state.stop = true;
					return base;
				}

				const callee = base;
				const typeArguments = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments(
					parser,
				);
				const openContext = parser.expectOpening(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
					"call arguments",
				);
				const {args} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallExpressionArguments(
					parser,
					openContext,
					false,
				);
				return parser.finishNode(
					startPos,
					{
						type: "JSOptionalCallExpression",
						arguments: args,
						callee,
						typeArguments,
					},
				);
			}

			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
				)
			) {
				const propStart = parser.getPosition();
				const openContext = parser.expectOpening(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
					"computed property",
				);
				const object = base;
				const property = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
					parser,
					"optional member expression property",
				);
				parser.expectClosing(openContext);
				return parser.finishNode(
					startPos,
					{
						type: "JSMemberExpression",
						object,
						property: parser.finishNode(
							propStart,
							{
								type: "JSComputedMemberProperty",
								optional: true,
								value: property,
							},
						),
					},
				);
			}

			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
				)
			) {
				const openContext = parser.expectOpening(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
					"call arguments",
				);
				const callee = base;
				const {args} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallExpressionArguments(
					parser,
					openContext,
					false,
				);

				return parser.finishNode(
					startPos,
					{
						type: "JSOptionalCallExpression",
						callee,
						arguments: args,
					},
				);
			}

			const object = base;
			const property = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				true,
			);

			return parser.finishNode(
				startPos,
				{
					type: "JSMemberExpression",
					object,
					property: {
						type: "JSStaticMemberProperty",
						loc: property.loc,
						optional: true,
						value: property,
					},
				},
			);
		}

		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			)
		) {
			const object = base;
			const property = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybePrivateName(
				parser,
			);

			return parser.finishNode(
				startPos,
				{
					type: "JSMemberExpression",
					object,
					property: {
						type: "JSStaticMemberProperty",
						loc: property.loc,
						value: property,
					},
				},
			);
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			)
		) {
			const propStart = parser.getPosition();
			const openContext = parser.expectOpening(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
				"computed property",
			);
			const object = base;
			const property = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
				parser,
				"member expression computed property",
			);
			parser.expectClosing(openContext);

			return parser.finishNode(
				startPos,
				{
					type: "JSMemberExpression",
					object,
					property: parser.finishNode(
						propStart,
						{
							type: "JSComputedMemberProperty",
							value: property,
						},
					),
				},
			);
		}

		// Supports: foo<Foo>(); and foo<Foo>``;
		if (parser.isRelational("<") && parser.isSyntaxEnabled("ts")) {
			const possibleCallExpression = parser.tryBranch(() => {
				const typeArguments = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments(
					parser,
				);

				if (
					!noCalls &&
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
					)
				) {
					const argsStart = parser.getPosition();
					const openContext = parser.expectOpening(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
						"call arguments",
					);
					const {args} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallExpressionArguments(
						parser,
						openContext,
						false,
					);
					const node = parser.finishNodeWithCommentStarts(
						[argsStart, startPos],
						{
							type: "JSCallExpression",
							arguments: args,
							callee: base,
							typeArguments,
						},
					);
					return node;
				}

				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote,
					)
				) {
					return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTaggedTemplateExpression(
						parser,
						startPos,
						base,
						state,
						typeArguments,
					);
				}

				return undefined;
			});

			if (possibleCallExpression !== undefined) {
				return possibleCallExpression;
			}
		}

		if (
			!noCalls &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			)
		) {
			const oldMaybeInArrowParameters = parser.state.maybeInArrowParameters;
			const oldYieldPos = parser.state.yieldPos;
			const oldAwaitPos = parser.state.awaitPos;
			parser.state.maybeInArrowParameters = true;
			parser.state.yieldPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
			parser.state.awaitPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;

			const argsStart = parser.getPosition();
			const openContext = parser.expectOpening(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
				"call arguments",
			);
			const callee = base;

			const oldCommaAfterSpreadAt = parser.state.commaAfterSpreadAt;
			parser.state.commaAfterSpreadAt = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1;

			let {args, params} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallExpressionArguments(
				parser,
				openContext,
				maybeAsyncArrow,
			);

			if (
				maybeAsyncArrow &&
				___R$project$rome$$romejs$js$parser$parser$expression_ts$shouldParseAsyncArrow(
					parser,
				)
			) {
				state.stop = true;

				___R$project$rome$$romejs$js$parser$parser$lval_ts$checkCommaAfterRestFromSpread(
					parser,
				);

				const node = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAsyncArrowFromCallExpression(
					parser,
					startPos,
					params === undefined ? args : params,
				);
				___R$project$rome$$romejs$js$parser$parser$expression_ts$checkYieldAwaitInDefaultParams(
					parser,
				);
				parser.state.yieldPos = oldYieldPos;
				parser.state.awaitPos = oldAwaitPos;
				return node;
			} else {
				args = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeep(
					parser,
					args,
				);

				// We keep the old value if it isn't null, for cases like

				//   (x = async(yield)) => {}
				parser.state.yieldPos = oldYieldPos || parser.state.yieldPos;
				parser.state.awaitPos = oldAwaitPos || parser.state.awaitPos;
			}

			parser.state.maybeInArrowParameters = oldMaybeInArrowParameters;
			parser.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;

			return parser.finishNodeWithCommentStarts(
				[argsStart, startPos],
				{
					type: "JSCallExpression",
					callee,
					arguments: args,
				},
			);
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote,
			)
		) {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTaggedTemplateExpression(
				parser,
				startPos,
				base,
				state,
			);
		}

		state.stop = true;
		return base;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTaggedTemplateExpression(
		parser,
		startPos,
		tag,
		state,
		typeArguments,
	) {
		if (state.optionalChainMember) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TAGGED_TEMPLATE_IN_OPTIONAL_CHAIN,
			});
		}

		const quasi = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplate(
			parser,
			true,
		);
		return parser.finishNode(
			startPos,
			{
				type: "JSTaggedTemplateExpression",
				tag,
				quasi,
				typeArguments,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkYieldAwaitInDefaultParams(
		parser,
	) {
		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(parser.state.yieldPos) > 0 &&
			(parser.state.awaitPos ===
			___R$project$rome$$romejs$ob1$index_ts$ob1Number0 ||
			parser.state.yieldPos < parser.state.awaitPos)
		) {
			parser.addDiagnostic({
				index: parser.state.yieldPos,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.YIELD_IN_GENERATOR_PARAMS,
			});
		}

		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(parser.state.awaitPos) >
			0
		) {
			parser.addDiagnostic({
				index: parser.state.awaitPos,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.AWAIT_IN_ASYNC_PARAMS,
			});
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$atPossibleAsync(
		parser,
		base,
	) {
		const loc = parser.getLoc(base);
		return (
			base.type === "JSReferenceIdentifier" &&
			base.name === "async" &&
			parser.state.lastEndPos.index === loc.end.index &&
			!parser.canInsertSemicolon() &&
			parser.getRawInput(loc.start.index, loc.end.index) === "async"
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallExpressionArguments(
		parser,
		openContext,
		possibleAsyncArrow,
		refTrailingCommaPos,
	) {
		let callArgs = [];
		let funcParams = [];

		let innerParenStart;
		let first = true;

		let forceAsyncArrow = false;

		while (true) {
			if (
				parser.match(openContext.close) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				)
			) {
				parser.expectClosing(openContext);
				break;
			}

			if (first) {
				first = false;
			} else {
				if (
					!parser.expect(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
					)
				) {
					break;
				}

				if (parser.eat(openContext.close)) {
					break;
				}
			}

			// we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
				) &&
				!innerParenStart
			) {
				innerParenStart = parser.state.startPos;
			}

			const elt = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallArgument(
				parser,
				"call expression argument",
				false,
				possibleAsyncArrow
					? ___R$project$rome$$romejs$js$parser$utils$location_ts$createIndexTracker()
					: undefined,
				possibleAsyncArrow
					? ___R$project$rome$$romejs$js$parser$utils$location_ts$createIndexTracker()
					: undefined,
				possibleAsyncArrow ? refTrailingCommaPos : undefined,
			);
			if (elt.type === "JSArrayHole") {
				throw new Error("Expected element");
			}

			if (elt.type === "JSAmbiguousFlowTypeCastExpression") {
				if (possibleAsyncArrow) {
					// Definitely needs to be an arrow
					forceAsyncArrow = true;

					if (callArgs.length > 0) {
						funcParams = callArgs.slice();
						callArgs = [];
					}

					funcParams.push(elt);
				} else {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.CONFUSING_CALL_ARGUMENT,
						loc: elt.loc,
					});
				}
				continue;
			}

			if (funcParams.length > 0) {
				funcParams.push(elt);
			} else {
				callArgs.push(elt);
			}
		}

		if (
			forceAsyncArrow &&
			!___R$project$rome$$romejs$js$parser$parser$expression_ts$shouldParseAsyncArrow(
				parser,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_ARROW_AFTER_ASYNC_TYPE_PARAMS,
			});
		}

		// we found an async arrow function so let's not allow any inner parens
		if (
			possibleAsyncArrow &&
			innerParenStart !== undefined &&
			___R$project$rome$$romejs$js$parser$parser$expression_ts$shouldParseAsyncArrow(
				parser,
			)
		) {
			parser.addDiagnostic({
				start: innerParenStart,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.PARENTHESIZED_FUNCTION_PARAMS,
			});
		}

		return {
			args: callArgs,
			params: funcParams.length === 0 ? undefined : funcParams,
		};
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$shouldParseAsyncArrow(
		parser,
	) {
		return (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			) ||
			(parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
			) &&
			!parser.canInsertSemicolon())
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAsyncArrowFromCallExpression(
		parser,
		start,
		args,
	) {
		let returnType;

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			const oldNoAnonFunctionType = parser.state.noAnonFunctionType;
			parser.state.noAnonFunctionType = true;
			returnType = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
				parser,
				true,
			);
			parser.state.noAnonFunctionType = oldNoAnonFunctionType;
		}

		const oldYield = parser.state.yieldInPossibleArrowParameters;
		parser.state.yieldInPossibleArrowParameters = undefined;
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
		);
		const node = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowExpression(
			parser,
			start,
			{
				assignmentList: args,
			},
			true,
		);
		parser.state.yieldInPossibleArrowParameters = oldYield;
		return Object.assign(
			{},
			node,
			{head: Object.assign({}, node.head, {returnType})},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNoCallExpr(
		parser,
		context,
	) {
		const startPos = parser.state.startPos;
		return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseSubscripts(
			parser,
			___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionAtom(
				parser,
				context,
			),
			startPos,
			true,
		);
	}



	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionAtom(
		parser,
		context,
		refShorthandDefaultPos,
	) {
		// If a division operator appears in an expression position, the
		// tokenizer got confused, and we force it to read a regexp instead.
		if (
			parser.state.tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.slash
		) {
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$readRegexp(parser);
		}

		const canBeArrow =
			parser.state.potentialArrowAt === parser.state.startPos.index;

		// We don't want to match <! as it's the start of a HTML comment
		if (
			parser.isRelational("<") &&
			parser.input.charCodeAt(
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(parser.state.index),
			) !== ___R$project$rome$$romejs$string$charcodes$index_ts.exclamationMark
		) {
			// In case we encounter an lt token here it will always be the start of
			// jsx as the lt sign is not allowed in places that expect an expression
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart,
			);
			return ___R$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElement(
				parser,
			);
		}

		switch (parser.state.tokenType) {
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart:
				return ___R$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElement(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._super:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseSuper(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseImportOrMetaProperty(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._this: {
				const start = parser.getPosition();
				parser.next();
				return parser.finishNode(start, {type: "JSThisExpression"});
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name: {
				const start = parser.getPosition();
				const containsEsc = parser.state.escapePosition !== undefined;
				const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
					parser,
				);

				if (
					!containsEsc &&
					id.name === "async" &&
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function,
					) &&
					!parser.canInsertSemicolon()
				) {
					parser.next();
					return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionExpression(
						parser,
						start,
						true,
					);
				}

				if (
					canBeArrow &&
					!containsEsc &&
					id.name === "async" &&
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
					)
				) {
					const oldYield = parser.state.yieldInPossibleArrowParameters;
					parser.state.yieldInPossibleArrowParameters = undefined;
					const params = [
						___R$project$rome$$romejs$js$parser$parser$expression_ts$parseReferenceIdentifier(
							parser,
						),
					];
					parser.expect(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
					);
					// let foo = bar => {};
					const node = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowExpression(
						parser,
						start,
						{
							assignmentList: params,
						},
						true,
					);
					parser.state.yieldInPossibleArrowParameters = oldYield;
					return node;
				}

				if (
					canBeArrow &&
					!parser.canInsertSemicolon() &&
					parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
					)
				) {
					const oldYield = parser.state.yieldInPossibleArrowParameters;
					parser.state.yieldInPossibleArrowParameters = undefined;
					const node = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowExpression(
						parser,
						start,
						{
							assignmentList: [
								___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
									parser,
									id,
								),
							],
						},
					);
					parser.state.yieldInPossibleArrowParameters = oldYield;
					return node;
				}

				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
					parser,
					id,
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._do:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseDoExpression(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.regexp:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseRegExpLiteral(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNumericLiteral(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bigint:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseBigIntLiteral(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._null:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseNullLiteral(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._true:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._false:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBooleanLiteral(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenAndDistinguishExpression(
					parser,
					context,
					canBeArrow,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseArrayExpression(
					parser,
					refShorthandDefaultPos,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectExpression(
					parser,
					refShorthandDefaultPos,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionExpressionOrMetaProperty(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._class: {
				const start = parser.getPosition();
				return ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClassExpression(
					parser,
					start,
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._new:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNew(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplate(
					parser,
					false,
				);

			default: {
				const start = parser.getPosition();
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNKNOWN_EXPRESSION_ATOM_START(
						context,
					),
				});
				parser.next();
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
					parser,
					parser.createUnknownIdentifier(context, start),
				);
			}
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBooleanLiteral(
		parser,
	) {
		const start = parser.getPosition();
		const value = parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._true,
		);
		parser.next();
		return parser.finishNode(
			start,
			{
				type: "JSBooleanLiteral",
				value,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybePrivateName(
		parser,
	) {
		const isPrivate = parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.hash,
		);

		if (isPrivate) {
			const start = parser.getPosition();
			parser.next();
			parser.assertNoSpace(
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.SPACE_BETWEEN_PRIVATE_HASH,
			);
			const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				true,
			);
			return parser.finishNode(
				start,
				{
					type: "JSPrivateName",
					id,
				},
			);
		} else {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				true,
			);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionExpressionOrMetaProperty(
		parser,
	) {
		const start = parser.getPosition();
		parser.next();

		// We do not do parseIdentifier here because when parseFunctionExpressionOrMetaProperty

		// is called we already know that the current token is a "name" with the value "function"

		// This will improve perf a tiny little bit as we do not do validation but more importantly

		// here is that parseIdentifier will remove an item from the expression stack

		// if "function" or "class" is parsed as identifier (in objects e.g.), which should not happen here.
		const meta = ___R$project$rome$$romejs$js$parser$parser$expression_ts$createIdentifier(
			parser,
			start,
			"function",
		);

		if (
			parser.inScope("GENERATOR") &&
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			)
		) {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMetaProperty(
				parser,
				start,
				meta,
				"sent",
			);
		}

		const node = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionExpression(
			parser,
			start,
			false,
		);

		if (node.type !== "JSFunctionExpression") {
			throw new Error("Expected parseFunction to return a JSFunctionExpression");
		}

		return node;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMetaProperty(
		parser,
		start,
		meta,
		propertyName,
	) {
		if (
			meta.name === "function" &&
			propertyName === "sent" &&
			!parser.isContextual(propertyName)
		) {
			// They didn't actually say `function.sent`, just `function.`, so a simple error would be less confusing.
			parser.unexpectedToken();
		}

		const escapePosition = parser.state.escapePosition;
		const property = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
			parser,
			true,
		);

		if (property.name === propertyName) {
			parser.banUnicodeEscape(escapePosition, propertyName);
		} else {
			parser.addDiagnostic({
				loc: property.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_META_PROPERTY(
					meta.name,
					propertyName,
				),
			});
		}

		return parser.finishNode(
			start,
			{
				type: "JSMetaProperty",
				meta,
				property,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseImportMetaProperty(
		parser,
	) {
		const start = parser.getPosition();
		const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
			parser,
			true,
		);
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
		);
		const node = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMetaProperty(
			parser,
			start,
			id,
			"meta",
		);

		if (!parser.inModule) {
			parser.addDiagnostic({
				loc: node.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_META_OUTSIDE_MODULE,
			});
		}

		return node;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenExpression(
		parser,
		context,
	) {
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			context,
		);
		const val = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
			parser,
			context,
		);
		parser.expectClosing(openContext);
		return val;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenAndDistinguishExpression(
		parser,
		context,
		canBeArrow,
	) {
		if (parser.state.noArrowAt.includes(parser.state.startPos.index)) {
			canBeArrow = false;
		}

		const startPos = parser.state.startPos;

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			"paren expression",
		);

		const oldMaybeInArrowParameters = parser.state.maybeInArrowParameters;
		const oldYieldPos = parser.state.yieldPos;
		const oldAwaitPos = parser.state.awaitPos;
		const oldYield = parser.state.yieldInPossibleArrowParameters;
		parser.state.maybeInArrowParameters = true;
		parser.state.yieldInPossibleArrowParameters = undefined;
		parser.state.yieldPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
		parser.state.awaitPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;

		const innerStart = parser.getPosition();
		const exprList = [];
		const refShorthandDefaultPos = ___R$project$rome$$romejs$js$parser$utils$location_ts$createIndexTracker();
		const refNeedsArrowPos = ___R$project$rome$$romejs$js$parser$utils$location_ts$createIndexTracker();
		let first = true;
		let spreadStart;
		let optionalCommaStart;

		while (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			)
		) {
			if (first) {
				first = false;
			} else {
				if (
					!parser.expect(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
						refNeedsArrowPos.index ===
						___R$project$rome$$romejs$ob1$index_ts$ob1Number0
							? undefined
							: parser.getPositionFromIndex(refNeedsArrowPos.index),
					)
				) {
					break;
				}

				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
					)
				) {
					optionalCommaStart = parser.state.startPos;
					break;
				}
			}

			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
				)
			) {
				const spreadNodeStartPos = parser.state.startPos;
				spreadStart = parser.state.startPos;
				exprList.push(
					___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenItem(
						parser,
						___R$project$rome$$romejs$js$parser$parser$lval_ts$parseSpread(
							parser,
						),
						spreadNodeStartPos,
					),
				);

				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
					) &&
					parser.lookaheadState().tokenType ===
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR
				) {
					___R$project$rome$$romejs$js$parser$parser$lval_ts$raiseRestNotLast(
						parser,
					);
					parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
					);
				}
			} else {
				exprList.push(
					___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
						parser,
						context,
						false,
						refShorthandDefaultPos,
						___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenItem,
						refNeedsArrowPos,
					),
				);
			}
		}

		const innerEnd = parser.getPosition();
		parser.expectClosing(openContext);

		parser.state.maybeInArrowParameters = oldMaybeInArrowParameters;

		const arrowStart = startPos;
		if (
			canBeArrow &&
			___R$project$rome$$romejs$js$parser$parser$expression_ts$shouldParseArrow(
				parser,
			)
		) {
			const {valid, returnType} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowHead(
				parser,
			);

			if (valid) {
				___R$project$rome$$romejs$js$parser$parser$expression_ts$checkYieldAwaitInDefaultParams(
					parser,
				);
				parser.state.yieldPos = oldYieldPos;
				parser.state.awaitPos = oldAwaitPos;

				for (const param of exprList) {
					if (parser.isParenthesized(param)) {
						parser.addDiagnostic({
							loc: param.loc,
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.PARENTHESIZED_FUNCTION_PARAMS,
						});
					}
				}

				const arrow = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowExpression(
					parser,
					arrowStart,
					{
						assignmentList: exprList,
					},
				);
				parser.state.yieldInPossibleArrowParameters = oldYield;
				return Object.assign(
					{},
					arrow,
					{head: Object.assign({}, arrow.head, {returnType})},
				);
			}
		}

		parser.state.yieldInPossibleArrowParameters = oldYield;

		// We keep the old value if it isn't null, for cases like

		//   (x = (yield)) => {}
		parser.state.yieldPos = oldYieldPos || parser.state.yieldPos;
		parser.state.awaitPos = oldAwaitPos || parser.state.awaitPos;

		if (exprList.length === 0) {
			parser.addDiagnostic({
				start: innerStart,
				end: innerEnd,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EMPTY_PARENTHESIZED_EXPRESSION,
			});

			exprList.push(
				___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
					parser,
					parser.createUnknownIdentifier(
						"empty parenthesized expression",
						innerStart,
						innerEnd,
					),
				),
			);
		}

		if (optionalCommaStart !== undefined) {
			parser.unexpectedToken(optionalCommaStart);
		}

		if (spreadStart !== undefined) {
			parser.unexpectedToken(spreadStart);
		}

		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				refShorthandDefaultPos.index,
			) >
			0
		) {
			parser.unexpectedToken(
				parser.getPositionFromIndex(refShorthandDefaultPos.index),
			);
		}

		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(refNeedsArrowPos.index) >
			0
		) {
			parser.unexpectedToken(
				parser.getPositionFromIndex(refNeedsArrowPos.index),
			);
		}

		const filterList = ___R$project$rome$$romejs$js$parser$parser$lval_ts$filterSpread(
			parser,
			___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeep(
				parser,
				exprList,
				/* isParenthesizedExpr */ true,
			),
		);

		let val = filterList[0];
		if (filterList.length > 1) {
			val = parser.finishNodeAt(
				innerStart,
				innerEnd,
				{
					type: "JSSequenceExpression",
					expressions: filterList,
				},
			);
		}

		parser.addParenthesized(val);

		return val;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$shouldParseArrow(
		parser,
	) {
		return (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			) || !parser.canInsertSemicolon()
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowHead(
		parser,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			const oldNoAnonFunctionType = parser.state.noAnonFunctionType;
			parser.state.noAnonFunctionType = true;

			const branch = parser.createBranch();

			branch.add(() => {
				const res = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOrTypePredicateAnnotation(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
				);

				if (parser.canInsertSemicolon()) {
					// No semicolon insertion expected
					return undefined;
				}

				if (
					parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
					)
				) {
					return res;
				}

				return undefined;
			});

			if (branch.hasBranch()) {
				const returnType = branch.pick();
				parser.state.noAnonFunctionType = oldNoAnonFunctionType;

				if (returnType === undefined) {
					throw new Error(
						"hasBranchResult call above should have refined this condition",
					);
				}

				return {
					valid: true,
					returnType,
				};
			} else {
				parser.state.noAnonFunctionType = oldNoAnonFunctionType;
				return {
					valid: false,
					returnType: undefined,
				};
			}
		} else {
			return {
				valid: parser.eat(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
				),
				returnType: undefined,
			};
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenItem(
		parser,
		node,
		startPos,
	) {
		let optional = undefined;
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			)
		) {
			optional = true;
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			const typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
				parser,
				true,
			);
			return parser.finishNode(
				startPos,
				{
					type: "JSAmbiguousFlowTypeCastExpression",
					expression: node,
					typeAnnotation,
					optional,
				},
			);
		}

		if (optional) {
			return parser.finishNode(
				startPos,
				{
					type: "JSAmbiguousFlowTypeCastExpression",
					expression: node,
					typeAnnotation: undefined,
					optional,
				},
			);
		}

		return node;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNew(
		parser,
	) {
		const start = parser.getPosition();
		const meta = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
			parser,
			true,
		);

		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			)
		) {
			const metaProp = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMetaProperty(
				parser,
				start,
				meta,
				"target",
			);

			if (
				!parser.inScope("NON_ARROW_FUNCTION") &&
				!parser.inScope("CLASS_PROPERTY")
			) {
				parser.addDiagnostic({
					loc: metaProp.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.NEW_TARGET_OUTSIDE_CLASS,
				});
			}

			return metaProp;
		}

		const callee = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNoCallExpr(
			parser,
			"new callee",
		);

		if (callee.type === "JSImportCall") {
			parser.addDiagnostic({
				loc: callee.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.SUPER_OUTSIDE_METHOD,
			});
		}

		const optionalMember = ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$getFirstOptionalChainMember(
			callee,
		);
		if (optionalMember !== undefined) {
			const memberLoc = parser.getLoc(optionalMember);

			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.NEW_IN_OPTIONAL_CHAIN(
					memberLoc,
				),
			});
		}

		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.questionDot,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.NEW_IN_OPTIONAL_CHAIN(),
			});
		}

		let optional = undefined;
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.questionDot,
			)
		) {
			optional = true;
		}

		let typeArguments = undefined;
		if (parser.isSyntaxEnabled("ts") && parser.isRelational("<")) {
			typeArguments = parser.tryBranch(
				___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments,
			);
		}

		let args = [];
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			)
		) {
			const openContext = parser.expectOpening(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
				"new argument",
			);
			args = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionListNonEmpty(
				parser,
				"new expression argument",
				openContext,
			);
			args = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedList(
				parser,
				args,
			);
		} else if (parser.isSyntaxEnabled("ts") && typeArguments !== undefined) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.NEW_WITH_TYPESCRIPT_TYPE_ARGUMENTS_NO_PARENS,
			});
		}

		return parser.finishNode(
			start,
			{
				type: "JSNewExpression",
				callee,
				typeArguments,
				arguments: args,
				optional,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$getFirstOptionalChainMember(
		node,
	) {
		if (node.type === "JSOptionalCallExpression") {
			return node;
		}

		if (node.type === "JSMemberExpression") {
			if (node.property.optional) {
				return node;
			}

			if (node.property.type === "JSStaticMemberProperty") {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$getFirstOptionalChainMember(
					node.object,
				);
			}
		}

		return undefined;
	}

	// Parse template expression.
	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplateElement(
		parser,
		isTagged,
	) {
		const start = parser.getPosition();
		const tokenValue = parser.state.tokenValue;

		if (tokenValue === undefined) {
			if (isTagged) {
				parser.state.invalidTemplateEscapePosition = undefined;
			} else {
				parser.addDiagnostic({
					index: parser.state.invalidTemplateEscapePosition,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_TEMPLATE_ESCAPE,
				});
			}
		}

		const raw = parser.getRawInput(
			parser.state.startPos.index,
			parser.state.endPos.index,
		).replace(/\r\n?/g, "\n");
		const cooked = tokenValue === undefined ? raw : String(tokenValue);

		parser.next();
		const tail = parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote,
		);
		return parser.finishNode(
			start,
			{
				type: "JSTemplateElement",
				raw,
				cooked,
				tail,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplate(
		parser,
		isTagged,
	) {
		const start = parser.getPosition();
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote,
			"template literal",
		);
		const expressions = [];
		let curElt = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplateElement(
			parser,
			isTagged,
		);
		const quasis = [curElt];

		while (true) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				) ||
				curElt.tail === true
			) {
				break;
			}

			const exprPpenContext = parser.expectOpening(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dollarBraceL,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				"template expression value",
			);
			expressions.push(
				___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
					parser,
					"template expression value",
				),
			);
			parser.expectClosing(exprPpenContext);

			curElt = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplateElement(
				parser,
				isTagged,
			);
			quasis.push(curElt);
		}

		parser.expectClosing(openContext);

		return parser.finishNode(
			start,
			{
				type: "JSTemplateLiteral",
				expressions,
				quasis,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectExpression(
		parser,
		refShorthandDefaultPos,
	) {
		const propHash = new Set();
		let first = true;

		const start = parser.getPosition();
		const properties = [];

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"object",
		);

		while (true) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				)
			) {
				parser.expectClosing(openContext);
				break;
			}

			if (first) {
				first = false;
			} else {
				if (
					!parser.expect(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
					)
				) {
					break;
				}

				if (
					parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					)
				) {
					break;
				}
			}

			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
				)
			) {
				const prop = Object.assign(
					{},
					___R$project$rome$$romejs$js$parser$parser$lval_ts$parseSpread(parser),
					{type: "JSSpreadProperty"},
				);
				properties.push(prop);
				continue;
			}

			const start = parser.getPosition();
			let isGenerator = parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			);
			let isAsync = false;

			let key;
			let escapePosition;

			if (parser.isContextual("async")) {
				if (isGenerator) {
					parser.unexpectedToken();
				}

				const asyncId = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
					parser,
				);
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
					)
				) {
					key = {
						type: "JSStaticPropertyKey",
						loc: asyncId.loc,
						value: asyncId,
					};
				} else {
					if (parser.hasPrecedingLineBreak()) {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ASYNC_OBJECT_METHOD_LINE_BREAK,
						});
					}

					isAsync = true;
					if (
						parser.match(
							___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
						)
					) {
						parser.next();
						isGenerator = true;
					}
					escapePosition = parser.state.escapePosition;
					key = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyKey(
						parser,
					);
				}
			} else {
				escapePosition = parser.state.escapePosition;
				key = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyKey(
					parser,
				);
			}

			const prop = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyValue(
				parser,
				{
					key,
					start,
					isGenerator,
					isAsync,
					isPattern: false,
					refShorthandDefaultPos,
					escapePosition,
				},
			);
			if (prop === undefined) {
				continue;
			}
			if (prop.type === "JSBindingObjectPatternProperty") {
				throw new Error("Impossible");
			}

			___R$project$rome$$romejs$js$parser$parser$expression_ts$checkPropClash(
				parser,
				prop,
				propHash,
			);
			properties.push(prop);
		}

		return parser.finishNode(
			start,
			{
				type: "JSObjectExpression",
				properties,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPattern(
		parser,
		refShorthandDefaultPos,
	) {
		const propHash = new Set();
		let first = true;

		const start = parser.getPosition();
		const properties = [];
		let rest;

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"object pattern",
		);

		let firstRestLocation = undefined;

		while (true) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				)
			) {
				break;
			}

			if (first) {
				first = false;
			} else {
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				);

				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					)
				) {
					break;
				}
			}

			let isGenerator = false;
			let isAsync = false;
			let start = parser.getPosition();

			if (
				parser.eat(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
				)
			) {
				const argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
					parser,
				);
				rest = argument;

				if (firstRestLocation !== undefined) {
					parser.addDiagnostic({
						loc: argument.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.MULTIPLE_DESTRUCTURING_RESTS,
					});
				}

				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
					)
				) {
					break;
				}

				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
					) &&
					parser.lookaheadState().tokenType ===
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR
				) {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TRAILING_COMMA_AFTER_REST,
					});
					parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
					);
					break;
				} else {
					firstRestLocation = argument.loc;
					continue;
				}
			}

			start = parser.getPosition();

			const key = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyKey(
				parser,
			);
			const prop = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyValue(
				parser,
				{
					key,
					start,
					isGenerator,
					isAsync,
					isPattern: true,
					refShorthandDefaultPos,
					escapePosition: undefined,
				},
			);

			if (prop === undefined) {
				continue;
			}

			___R$project$rome$$romejs$js$parser$parser$expression_ts$checkPropClash(
				parser,
				prop,
				propHash,
			);

			if (prop.type !== "JSBindingObjectPatternProperty") {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_OBJECT_PATTERN_PROP,
					loc: prop.loc,
				});
				continue;
			}

			properties.push(prop);
		}

		parser.expectClosing(openContext);

		if (firstRestLocation !== undefined) {
			___R$project$rome$$romejs$js$parser$parser$lval_ts$raiseRestNotLast(
				parser,
				firstRestLocation,
			);
		}

		return parser.finishNode(
			start,
			{
				type: "JSBindingObjectPattern",
				properties,
				rest,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$isGetterOrSetterMethod(
		parser,
		key,
		// `key` is always from `name.key`, we just need it here to refine
		keyVal,
		isPattern,
	) {
		return (
			!isPattern &&
			key.type === "JSStaticPropertyKey" &&
			keyVal.type === "JSIdentifier" &&
			(keyVal.name === "get" || keyVal.name === "set") &&
			(parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
			) ||
			// get "string"() {}
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num,
			) ||
			// get 1() {}
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			) ||
			// get ["string"]() {}
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			) ||
			// get foo() {}
			!!parser.state.tokenType.keyword) // get debugger() {}
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkGetterSetterParamCount(
		parser,
		method,
		kind,
	) {
		const head = method.head;

		if (kind === "get") {
			if (head.rest !== undefined || head.params.length !== 0) {
				parser.addDiagnostic({
					loc: method.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.GETTER_WITH_PARAMS,
				});
			}
		} else if (kind === "set") {
			if (head.rest !== undefined) {
				parser.addDiagnostic({
					loc: head.rest.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.SETTER_WITH_REST,
				});
			} else if (head.params.length !== 1) {
				parser.addDiagnostic({
					loc: method.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.SETTER_NOT_ONE_PARAM,
				});
			}
		}
	}



	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectMethod(
		parser,
		{
			key,
			start,
			isGenerator,
			isAsync,
			isPattern,
			escapePosition,
		},
	) {
		if (
			isAsync ||
			isGenerator ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			)
		) {
			if (isPattern) {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.OBJECT_METHOD_IN_PATTERN,
				});
			}

			const partial = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMethod(
				parser,
				{
					kind: "method",
					isClass: false,
					isGenerator,
					isAsync,
					isConstructor: false,
				},
			);

			const {body} = partial;
			if (body === undefined || body.type !== "JSBlockStatement") {
				throw new Error("Expected body");
			}

			return parser.finishNode(
				start,
				Object.assign(
					{},
					partial,
					{body, key, type: "JSObjectMethod", kind: "method"},
				),
			);
		}

		if (
			___R$project$rome$$romejs$js$parser$parser$expression_ts$isGetterOrSetterMethod(
				parser,
				key,
				key.value,
				isPattern,
			)
		) {
			if (isAsync) {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ASYNC_GETTER_SETTER,
				});
			}

			if (isGenerator) {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.GENERATOR_GETTER_SETTER,
				});
			}

			const kind = key.value.name;
			if (kind !== "get" && kind !== "set") {
				throw new Error(
					"Name should be get or set as we already validated it as such",
				);
			}
			parser.banUnicodeEscape(escapePosition, kind);

			const newKey = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyKey(
				parser,
			);

			const partial = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMethod(
				parser,
				{
					kind,
					isClass: false,
					isGenerator: false,
					isAsync: false,
					isConstructor: false,
				},
			);

			const {body, head} = partial;
			if (body === undefined || body.type !== "JSBlockStatement") {
				throw new Error("Expected body");
			}

			const method = parser.finishNode(
				start,
				{
					head,
					body,
					key: newKey,
					type: "JSObjectMethod",
					kind,
				},
			);
			___R$project$rome$$romejs$js$parser$parser$expression_ts$checkGetterSetterParamCount(
				parser,
				method,
				method.kind,
			);
			return method;
		}

		return undefined;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectProperty(
		parser,
		key,
		start,
		isPattern,
		refShorthandDefaultPos,
	) {
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			if (isPattern) {
				const value = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseMaybeDefault(
					parser,
				);
				return parser.finishNode(
					start,
					{
						key,
						type: "JSBindingObjectPatternProperty",
						value,
					},
				);
			} else {
				const value = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
					parser,
					"object property value",
					false,
					refShorthandDefaultPos,
				);
				return parser.finishNode(
					start,
					{
						key,
						type: "JSObjectProperty",
						value,
					},
				);
			}
		}

		if (key.type === "JSStaticPropertyKey" && key.value.type === "JSIdentifier") {
			___R$project$rome$$romejs$js$parser$parser$expression_ts$checkReservedWord(
				parser,
				key.value.name,
				parser.getLoc(key.value),
				true,
				true,
			);

			if (isPattern) {
				let value = ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
					parser,
					parser.cloneNode(key.value),
				);

				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
					) &&
					refShorthandDefaultPos
				) {
					if (
						refShorthandDefaultPos.index ===
						___R$project$rome$$romejs$ob1$index_ts$ob1Number0
					) {
						refShorthandDefaultPos.index = parser.state.startPos.index;
					}

					value = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseMaybeDefault(
						parser,
						start,
						value,
					);
				}

				return parser.finishNode(
					start,
					{
						type: "JSBindingObjectPatternProperty",
						key,
						value,
					},
				);
			}

			return parser.finishNode(
				start,
				{
					type: "JSObjectProperty",
					key,
					value: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
						parser,
						parser.cloneNode(key.value),
					),
				},
			);
		}

		return undefined;
	}



	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyValue(
		parser,
		{
			key,
			start,
			isGenerator,
			isAsync,
			isPattern,
			refShorthandDefaultPos,
			escapePosition,
		},
	) {
		// parse type parameters for object method shorthand
		let typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeParameters(
			parser,
		);
		if (
			typeParameters !== undefined &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			)
		) {
			parser.unexpectedToken();
		}

		let node =
			___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectMethod(
				parser,
				{
					key,
					start,
					isGenerator,
					isAsync,
					isPattern,
					escapePosition,
				},
			) ||
			___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectProperty(
				parser,
				key,
				start,
				isPattern,
				refShorthandDefaultPos,
			);

		if (node === undefined) {
			parser.unexpectedToken();
			return undefined;
		}

		if (typeParameters === undefined) {
			return node;
		} else {
			if (
				node.type === "JSObjectProperty" ||
				node.type === "JSBindingObjectPatternProperty"
			) {
				parser.addDiagnostic({
					loc: typeParameters.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.OBJECT_PROPERTY_WITH_TYPE_PARAMETERS,
				});
				return node;
			}

			return Object.assign(
				{},
				node,
				{head: Object.assign({}, node.head, {typeParameters})},
			);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyKey(
		parser,
	) {
		const start = parser.getPosition();

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			)
		) {
			const openContext = parser.expectOpening(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
				"property name",
			);

			const value = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"property name",
			);
			parser.expectClosing(openContext);
			return parser.finishNode(
				start,
				{
					type: "JSComputedPropertyKey",
					value,
				},
			);
		} else {
			parser.pushScope("PROPERTY_NAME", true);

			// We check if it's valid for it to be a private name when we push it.
			let value;
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num,
				)
			) {
				value = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNumericLiteral(
					parser,
				);
			} else if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
				)
			) {
				value = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
					parser,
				);
			} else {
				value = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybePrivateName(
					parser,
				);
			}

			parser.popScope("PROPERTY_NAME");

			return parser.finishNode(
				start,
				{
					type: "JSStaticPropertyKey",
					value,
				},
			);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMethod(
		parser,
		opts,
	) {
		const {kind, isClass, isGenerator, isAsync, isConstructor} = opts;

		const oldYieldPos = parser.state.yieldPos;
		const oldAwaitPos = parser.state.awaitPos;
		parser.pushScope("FUNCTION", true);
		parser.pushScope("NON_ARROW_FUNCTION");
		parser.pushScope("METHOD", kind);
		parser.pushScope("GENERATOR", isGenerator);
		parser.state.yieldPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
		parser.state.awaitPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;

		const allowTSModifiers = isConstructor;
		const headStart = parser.getPosition();
		const {typeParameters, rest, params} = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionParams(
			parser,
			kind,
			allowTSModifiers,
		);
		const start = parser.getPosition();
		const {body, head} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionBodyAndFinish(
			parser,
			{
				headStart,
				rest,
				params,
				id: undefined,
				allowBodiless: isClass,
				isArrowFunction: false,
				isAsync,
				isGenerator,
				isMethod: true,
				start,
			},
		);

		parser.popScope("METHOD");
		parser.popScope("GENERATOR");
		parser.popScope("FUNCTION");
		parser.popScope("NON_ARROW_FUNCTION");
		parser.state.yieldPos = oldYieldPos;
		parser.state.awaitPos = oldAwaitPos;

		return {
			head: Object.assign({}, head, {typeParameters}),
			body,
		};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$createFunctionHead(
		parser,
		params,
		rest,
		opts,
	) {
		const nonRestParams = [];

		for (const param of params) {
			switch (param.type) {
				case "JSBindingIdentifier":
				case "JSBindingAssignmentPattern":
				case "JSBindingObjectPattern":
				case "JSBindingArrayPattern": {
					nonRestParams.push(param);
					break;
				}

				default:
					throw new Error("TODO");
			}
		}

		return Object.assign(
			{type: "JSFunctionHead", rest},
			___R$project$rome$$romejs$js$parser$parser$statement_ts$splitFunctionParams(
				nonRestParams,
			),
			opts,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrowExpression(
		parser,
		start,
		opts,
		isAsync = false,
	) {
		// if we got there, it's no more "yield in possible arrow parameters";
		// it's just "yield in arrow parameters"
		if (parser.state.yieldInPossibleArrowParameters) {
			parser.addDiagnostic({
				start: parser.state.yieldInPossibleArrowParameters,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.YIELD_NAME_IN_GENERATOR,
			});
		}

		parser.pushScope("FUNCTION", true);

		const oldYieldPos = parser.state.yieldPos;
		const oldAwaitPos = parser.state.awaitPos;
		const oldMaybeInArrowParameters = parser.state.maybeInArrowParameters;
		parser.pushScope("GENERATOR", false);
		parser.state.maybeInArrowParameters = false;
		parser.state.yieldPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
		parser.state.awaitPos = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;

		const headEnd = parser.getLastEndPosition();

		let params = [];
		let rest = opts.rest;

		if (opts.bindingList !== undefined) {
			params = opts.bindingList;
		}

		if (opts.assignmentList !== undefined) {
			({params, rest} = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toFunctionParamsBindingList(
				parser,
				opts.assignmentList,
				"arrow function parameters",
			));
		}

		let head = parser.finishNodeAt(
			start,
			headEnd,
			___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$createFunctionHead(
				parser,
				params,
				rest,
				{
					hasHoistedVars: false,
					async: isAsync,
				},
			),
		);

		const {body, hasHoistedVars} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionBody(
			parser,
			{
				id: undefined,
				allowBodiless: false,
				isArrowFunction: true,
				isMethod: false,
				isAsync,
				isGenerator: false,
				start,
			},
		);

		head = Object.assign({}, head, {hasHoistedVars});

		___R$project$rome$$romejs$js$parser$parser$expression_ts$checkFunctionNameAndParams(
			parser,
			{
				isArrowFunction: true,
				isMethod: false,
				id: undefined,
				params,
				rest,
				start,
			},
			body,
		);

		parser.popScope("GENERATOR");
		parser.popScope("FUNCTION");
		parser.state.maybeInArrowParameters = oldMaybeInArrowParameters;
		parser.state.yieldPos = oldYieldPos;
		parser.state.awaitPos = oldAwaitPos;

		return parser.finishNode(
			start,
			{
				type: "JSArrowFunctionExpression",
				body,
				head,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$isStrictBody(
		parser,
		body,
	) {
		if (body.type === "JSBlockStatement" && body.directives !== undefined) {
			for (const directive of body.directives) {
				if (directive.value === "use strict") {
					return true;
				}
			}
		}

		return false;
	}



	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionBodyAndFinish(
		parser,
		opts,
	) {
		let returnType = undefined;

		// For arrow functions, `parseArrow` handles the return type itself.
		if (
			!opts.isArrowFunction &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			returnType = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOrTypePredicateAnnotation(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			);
		}

		const headEnd = parser.getLastEndPosition();
		const head = parser.finishNodeAt(
			opts.headStart,
			headEnd,
			___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$createFunctionHead(
				parser,
				opts.params,
				opts.rest,
				{
					generator: opts.isGenerator,
					async: opts.isAsync,
					hasHoistedVars: false,
					returnType,
				},
			),
		);

		if (
			opts.allowBodiless &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			) &&
			parser.isLineTerminator()
		) {
			return {
				head,
				body: undefined,
			};
		}

		const {body, hasHoistedVars} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionBody(
			parser,
			opts,
		);

		___R$project$rome$$romejs$js$parser$parser$expression_ts$checkFunctionNameAndParams(
			parser,
			{
				isArrowFunction: opts.isArrowFunction,
				isMethod: opts.isMethod,
				id: opts.id,
				start: opts.start,
				params: opts.params,
				rest: opts.rest,
			},
			body,
		);

		head.hasHoistedVars = hasHoistedVars;

		return {
			head,
			body,
		};
	}



	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseFunctionBody(
		parser,
		opts,
	) {
		if (opts.isArrowFunction) {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$forwardNoArrowParamsConversionAt(
				parser,
				opts.start,
				() =>
					___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseFunctionBody(
						parser,
						opts,
					)
				,
			);
		} else {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseFunctionBody(
				parser,
				opts,
			);
		}
	}

	// Parse function body and check parameters.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$_parseFunctionBody(
		parser,
		opts,
	) {
		const {isArrowFunction, isAsync, isGenerator} = opts;

		const isExpression =
			isArrowFunction &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			);

		parser.pushScope("PARAMETERS", false);
		parser.pushScope("ASYNC", isAsync);

		let hasHoistedVars = false;
		let body;
		if (isExpression) {
			body = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"function body",
			);
		} else {
			// Start a new scope with regard to labels and the `inGenerator`
			// flag (restore them to their old value afterwards).
			const oldLabels = parser.state.labels;
			parser.pushScope("GENERATOR", isGenerator);
			parser.state.labels = [];

			const oldhasHoistedVars = parser.state.hasHoistedVars;
			parser.state.hasHoistedVars = false;

			body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlock(
				parser,
				true,
			);
			hasHoistedVars = parser.state.hasHoistedVars;

			parser.popScope("GENERATOR");

			parser.state.hasHoistedVars = oldhasHoistedVars;
			parser.state.labels = oldLabels;
		}

		parser.popScope("ASYNC");
		parser.popScope("PARAMETERS");

		return {body, hasHoistedVars};
	}



	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkFunctionNameAndParams(
		parser,
		opts,
		body,
		force,
	) {
		const {isArrowFunction, isMethod, id, rest, params, start} = opts;

		if (
			!___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$isSimpleParamList(
				params,
				rest,
			) &&
			body.type === "JSBlockStatement" &&
			body.directives !== undefined
		) {
			const firstDirective = body.directives[0];
			if (firstDirective !== undefined && firstDirective.value === "use strict") {
				parser.addDiagnostic({
					loc: firstDirective.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.STRICT_DIRECTIVE_IN_NON_SIMPLE_PARAMS,
				});
			}
		}

		if (
			isArrowFunction &&
			force !== true &&
			parser.state.noArrowParamsConversionAt.includes(start.index)
		) {
			return undefined;
		}

		// If this is a strict mode function, verify that argument names

		// are not repeated, and it does not try to bind the words `eval`
		const _isStrictBody = ___R$project$rome$$romejs$js$parser$parser$expression_ts$isStrictBody(
			parser,
			body,
		);
		const isStrict = parser.inScope("STRICT") || _isStrictBody;

		const isSimpleParams = ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$isSimpleParamList(
			params,
			rest,
		);
		const shouldCheckLVal =
			isStrict || isArrowFunction || isMethod || !isSimpleParams;

		parser.pushScope("STRICT", isStrict);

		if (shouldCheckLVal) {
			const clashes = new Map();

			if (id !== undefined) {
				___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
					parser,
					id,
					true,
					undefined,
					"function name",
				);
			}

			for (const param of params) {
				if (_isStrictBody && param.type !== "JSBindingIdentifier") {
					parser.addDiagnostic({
						loc: param.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.NON_SIMPLE_PARAM_IN_EXPLICIT_STRICT_FUNCTION,
					});
				}
				___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
					parser,
					param,
					true,
					clashes,
					"function parameter list",
				);
			}
		}

		parser.popScope("STRICT");
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$isSimpleParamList(
		params,
		rest,
	) {
		if (rest !== undefined) {
			return false;
		}

		for (const param of params) {
			if (param.type !== "JSBindingIdentifier") {
				return false;
			}
		}

		return true;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionList(
		parser,
		context,
		openContext,
		allowEmpty,
		refShorthandDefaultPos,
	) {
		const elts = [];
		let first = true;

		while (true) {
			if (
				parser.match(openContext.close) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				)
			) {
				break;
			}

			if (first) {
				first = false;
			} else {
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				);

				if (parser.match(openContext.close)) {
					break;
				}
			}

			elts.push(
				___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallArgument(
					parser,
					context,
					allowEmpty,
					refShorthandDefaultPos,
				),
			);
		}

		parser.expectClosing(openContext);

		return elts;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionListNonEmpty(
		parser,
		context,
		openContext,
		refShorthandDefaultPos,
	) {
		const val = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionList(
			parser,
			context,
			openContext,
			false,
			refShorthandDefaultPos,
		);
		// @ts-ignore: Passed allowEmpty: false above
		return val;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallArgument(
		parser,
		context,
		allowHoles = false,
		refShorthandDefaultPos,
		refNeedsArrowPos,
		refTrailingCommaPos,
	) {
		if (
			allowHoles &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
			)
		) {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrayHole(
				parser,
			);
		} else if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
			)
		) {
			const spreadNodeStart = parser.state.startPos;

			const elt = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenItem(
				parser,
				___R$project$rome$$romejs$js$parser$parser$lval_ts$parseSpread(
					parser,
					refShorthandDefaultPos,
					refNeedsArrowPos,
				),
				spreadNodeStart,
			);

			if (
				refTrailingCommaPos &&
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				)
			) {
				refTrailingCommaPos.index = parser.state.startPos.index;
			}

			return elt;
		} else {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				context,
				false,
				refShorthandDefaultPos,
				___R$project$rome$$romejs$js$parser$parser$expression_ts$parseParenItem,
				refNeedsArrowPos,
			);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
		parser,
		liberal,
	) {
		const start = parser.getPosition();
		const name = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifierName(
			parser,
			liberal,
		);
		return ___R$project$rome$$romejs$js$parser$parser$expression_ts$createIdentifier(
			parser,
			start,
			name,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
		parser,
		liberal,
	) {
		return ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
			parser,
			___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				liberal,
			),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseReferenceIdentifier(
		parser,
		liberal,
	) {
		return ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
			parser,
			___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				liberal,
			),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
		parser,
		node,
	) {
		return parser.finalizeNode(
			Object.assign({}, node, {type: "JSBindingIdentifier"}),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$toAssignmentIdentifier(
		parser,
		node,
	) {
		return parser.finalizeNode(
			Object.assign({}, node, {type: "JSAssignmentIdentifier"}),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
		parser,
		node,
	) {
		return parser.finalizeNode(
			Object.assign({}, node, {type: "JSReferenceIdentifier"}),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$toIdentifier(
		parser,
		node,
	) {
		return Object.assign({}, node, {type: "JSIdentifier"});
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$createIdentifier(
		parser,
		start,
		name,
	) {
		const node = parser.finishNode(
			start,
			{
				type: "JSIdentifier",
				name,
			},
		);
		parser.getLoc(node).identifierName = name;
		return node;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifierName(
		parser,
		liberal = false,
	) {
		const loc = parser.finishLocAt(parser.state.startPos, parser.state.endPos);

		if (!liberal) {
			___R$project$rome$$romejs$js$parser$parser$expression_ts$checkReservedWord(
				parser,
				String(parser.state.tokenValue),
				loc,
				!!parser.state.tokenType.keyword,
				false,
			);
		}

		let name;

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			)
		) {
			name = String(parser.state.tokenValue);
		} else if (parser.state.tokenType.keyword !== undefined) {
			name = parser.state.tokenType.keyword;

			// `class` and `function` keywords push new context into this.context.

			// But there is no chance to pop the context if the keyword is consumed

			// as an identifier such as a property name.

			// If the previous token is a dot, this does not apply because the

			// context-managing code already ignored the keyword
			if (
				(name === "class" || name === "function") &&
				(parser.state.lastEndPos.index !==
				___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
					parser.state.lastStartPos.index,
				) ||
				parser.input.charCodeAt(
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						parser.state.lastStartPos.index,
					),
				) !== ___R$project$rome$$romejs$string$charcodes$index_ts.dot)
			) {
				parser.state.context.pop();
			}
		} else {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_IDENTIFIER,
			});
			name = "";
		}

		if (!liberal) {
			___R$project$rome$$romejs$js$parser$parser$expression_ts$checkReservedWord(
				parser,
				name,
				loc,
				parser.state.tokenType.keyword !== undefined,
				false,
			);
		}

		parser.next();
		return name;
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$checkReservedWord(
		parser,
		word,
		loc,
		checkKeywords,
		isBinding,
	) {
		if (parser.isSyntaxEnabled("ts")) {
			// TypeScript support in Babel disables reserved word checking...
			// This is mostly because TS allows reserved words in certain scenarios
			// TODO we should just allow those rather than relying on this hack
			return undefined;
		}

		if (parser.inScope("GENERATOR") && word === "yield") {
			parser.addDiagnostic({
				loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.YIELD_NAME_IN_GENERATOR,
			});
		}

		if (parser.inScope("ASYNC") && word === "await") {
			parser.addDiagnostic({
				loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.AWAIT_NAME_IN_ASYNC,
			});
		}

		if (parser.inScope("CLASS_PROPERTY") && word === "arguments") {
			parser.addDiagnostic({
				loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ARGUMENTS_IN_CLASS_FIELD,
			});
		}

		if (
			checkKeywords &&
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isKeyword(word)
		) {
			parser.addDiagnostic({
				loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNEXPECTED_KEYWORD(
					word,
				),
			});
		}

		let isReserved = false;
		if (parser.inScope("STRICT")) {
			if (isBinding) {
				isReserved = ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictBindReservedWord(
					word,
					parser.inModule,
				);
			} else {
				isReserved = ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictReservedWord(
					word,
					parser.inModule,
				);
			}
		} else {
			isReserved = ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isReservedWord(
				word,
				parser.inModule,
			);
		}

		if (isReserved) {
			if (!parser.inScope("ASYNC") && word === "await") {
				parser.addDiagnostic({
					loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.AWAIT_OUTSIDE_ASYNC,
				});
			} else {
				parser.addDiagnostic({
					loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.RESERVED_WORD(
						word,
					),
				});
			}
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseAwait(
		parser,
	) {
		if (!parser.state.awaitPos) {
			parser.state.awaitPos = parser.state.index;
		}

		if (!parser.inScope("ASYNC")) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.AWAIT_OUTSIDE_ASYNC,
			});
		}

		const start = parser.getPosition();
		parser.next();

		if (parser.inScope("PARAMETERS")) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.AWAIT_IN_ASYNC_PARAMS,
			});
		}

		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			)
		) {
			parser.addDiagnostic({
				start,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.AWAIT_STAR,
			});
		}

		const argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeUnary(
			parser,
			"await argument",
		);
		return parser.finishNode(start, {type: "JSAwaitExpression", argument});
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseYield(
		parser,
		noIn,
	) {
		if (!parser.state.yieldPos) {
			parser.state.yieldPos = parser.state.index;
		}

		const start = parser.getPosition();

		if (parser.inScope("PARAMETERS")) {
			parser.addDiagnostic({
				start,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.YIELD_IN_GENERATOR_PARAMS,
			});
		}

		if (
			parser.state.maybeInArrowParameters &&
			// We only set yieldInPossibleArrowParameters if we haven't already
			// found a possible invalid JSYieldExpression.
			parser.state.yieldInPossibleArrowParameters === undefined
		) {
			parser.state.yieldInPossibleArrowParameters = start;
		}

		parser.next();

		let delegate;
		let argument;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
			) ||
			(!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			) &&
			!parser.state.tokenType.startsExpr) ||
			parser.canInsertSemicolon()
		) {
			delegate = false;
		} else {
			delegate = parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			);
			argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"yield argument",
				noIn,
			);
		}

		return parser.finishNode(
			start,
			{
				type: "JSYieldExpression",
				delegate,
				argument,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseNullLiteral(
		parser,
	) {
		const start = parser.getPosition();
		parser.next();
		return parser.finishNode(start, {type: "JSNullLiteral"});
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
		parser,
	) {
		const start = parser.getPosition();
		const value = String(parser.state.tokenValue);
		parser.next();
		return parser.finishNode(
			start,
			{
				type: "JSStringLiteral",
				value,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseBigIntLiteral(
		parser,
	) {
		const start = parser.getPosition();
		const value = String(parser.state.tokenValue);
		parser.next();
		return parser.finishNode(
			start,
			{
				type: "JSBigIntLiteral",
				value,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseNumericLiteral(
		parser,
	) {
		const start = parser.getPosition();
		const {tokenValue} = parser.state;
		if (
			!(tokenValue instanceof
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$NumberTokenValue)
		) {
			throw new Error("Expected NumberTokenValue");
		}

		const {value, format} = tokenValue;
		parser.next();
		return parser.finishNode(
			start,
			{
				type: "JSNumericLiteral",
				format,
				value,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseRegExpLiteral(
		parser,
	) {
		const start = parser.getPosition();
		const value = parser.state.tokenValue;
		if (
			!(value instanceof
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$RegExpTokenValue)
		) {
			throw new Error("Expected regex token value");
		}
		parser.next();

		const {flags, pattern} = value;

		const regexParser = ___R$project$rome$$romejs$codec$js$regexp$index_ts$createRegExpParser({
			offsetPosition: Object.assign(
				{},
				start,
				{
					column: ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(start.column),
					index: ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(start.index),
				},
			),
			path: parser.filename,
			input: pattern,
			unicode: flags.has("u"),
		});

		const {diagnostics, expression} = regexParser.parse();

		for (const diagnostic of diagnostics) {
			parser.addDiagnostic(diagnostic);
		}

		return parser.finishNode(
			start,
			{
				type: "JSRegExpLiteral",
				expression,
				global: flags.has("g"),
				multiline: flags.has("m"),
				sticky: flags.has("y"),
				insensitive: flags.has("i"),
				noDotNewline: flags.has("s"),
				unicode: flags.has("u"),
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseImportOrMetaProperty(
		parser,
	) {
		if (
			parser.lookaheadState().tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot
		) {
			return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseImportMetaProperty(
				parser,
			);
		} else {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseImportCall(
				parser,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseImportCall(
		parser,
	) {
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import,
		);

		const start = parser.getPosition();
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			"array",
		);

		let argument;

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_EXACT_ARGUMENTS,
			});

			argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
				parser,
				parser.createUnknownIdentifier("import call argument"),
			);
		} else {
			const callArg = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseCallArgument(
				parser,
				"call expression argument",
				false,
			);
			if (callArg.type === "JSArrayHole") {
				throw new Error(
					"Expected argument, parseExpressionListItem was passed maybeAllowEmpty: false",
				);
			} else {
				argument = callArg;
			}
		}

		// TODO warn on multiple arguments
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
			)
		) {
			parser.addDiagnostic({
				start: parser.state.lastStartPos,
				end: parser.state.lastEndPos,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_TRAILING_COMMA,
			});
		}

		if (argument.type === "JSSpreadElement") {
			parser.addDiagnostic({
				loc: argument.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_SPREAD,
			});
		}

		parser.expectClosing(openContext);

		const spreadOrExpression =
			argument.type === "JSAmbiguousFlowTypeCastExpression"
				? argument.expression
				: argument;

		const expression =
			spreadOrExpression.type === "JSSpreadElement"
				? spreadOrExpression.argument
				: spreadOrExpression;

		return parser.finishNode(
			start,
			{type: "JSImportCall", argument: expression},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseSuper(
		parser,
	) {
		if (
			!parser.inScope("METHOD") &&
			!parser.inScope("CLASS_PROPERTY") &&
			parser.sourceType !== "template"
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.SUPER_OUTSIDE_METHOD,
			});
		}

		const start = parser.getPosition();
		parser.next();

		if (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_SUPER_SUFFIX,
			});
		}

		const loc = parser.finishLoc(start);

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) &&
			(parser.getLastScope("METHOD") !== "constructor" ||
			parser.getLastScope("CLASS") !== "derived") &&
			parser.sourceType !== "template"
		) {
			parser.addDiagnostic({
				loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.SUPER_CALL_OUTSIDE_CONSTRUCTOR,
			});
		}

		return parser.finalizeNode({
			type: "JSSuper",
			loc,
		});
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseDoExpression(
		parser,
	) {
		const start = parser.getPosition();
		parser.next();
		const oldLabels = parser.state.labels;
		parser.state.labels = [];
		parser.pushScope("FUNCTION", false);
		const body = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlock(
			parser,
			false,
		);
		parser.popScope("FUNCTION");
		parser.state.labels = oldLabels;
		return parser.finishNode(
			start,
			{
				type: "JSDoExpression",
				body,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrayHole(
		parser,
	) {
		return parser.finishNode(
			parser.getPosition(),
			{
				type: "JSArrayHole",
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$expression_ts$parseArrayExpression(
		parser,
		refShorthandDefaultPos,
	) {
		const start = parser.getPosition();
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
			"array",
		);

		const elements = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListOptional(
			parser,
			___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionList(
				parser,
				"array element",
				openContext,
				true,
				refShorthandDefaultPos,
			),
		);

		return parser.finishNode(
			start,
			{
				type: "JSArrayExpression",
				elements,
			},
		);
	}


  // project-rome/@romejs/js-parser/parser/lval.ts
const ___R$project$rome$$romejs$js$parser$parser$lval_ts = {
		toAssignmentPattern: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentPattern,
		toTargetAssignmentPattern: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern,
		toTargetBindingPattern: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetBindingPattern,
		toParamBindingPattern: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toParamBindingPattern,
		toBindingPattern: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toBindingPattern,
		toAssignmentObjectProperty: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentObjectProperty,
		toAssignableList: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignableList,
		toFunctionParamsBindingList: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toFunctionParamsBindingList,
		toReferencedList: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedList,
		toReferencedListOptional: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListOptional,
		normalizeReferencedItem: ___R$project$rome$$romejs$js$parser$parser$lval_ts$normalizeReferencedItem,
		filterSpread: ___R$project$rome$$romejs$js$parser$parser$lval_ts$filterSpread,
		toReferencedListDeep: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeep,
		toReferencedListDeepOptional: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeepOptional,
		parseSpread: ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseSpread,
		parseTargetBindingPattern: ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseTargetBindingPattern,
		parseBindingList: ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingList,
		parseBindingListNonEmpty: ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListNonEmpty,
		parseBindingListItem: ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListItem,
		parseBindingListItemTypes: ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListItemTypes,
		parseMaybeDefault: ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseMaybeDefault,
		checkLVal: ___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal,
		checkToRestConversion: ___R$project$rome$$romejs$js$parser$parser$lval_ts$checkToRestConversion,
		hasCommaAfterRest: ___R$project$rome$$romejs$js$parser$parser$lval_ts$hasCommaAfterRest,
		raiseRestNotLast: ___R$project$rome$$romejs$js$parser$parser$lval_ts$raiseRestNotLast,
		checkCommaAfterRestFromSpread: ___R$project$rome$$romejs$js$parser$parser$lval_ts$checkCommaAfterRestFromSpread,
	};
	const ___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$VALID_REST_ARGUMENT_TYPES = [
		"JSIdentifier",
		"JSMemberExpression",
	];


	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentPattern(
		parser,
		node,
		contextDescription,
	) {
		switch (node.type) {
			case "JSAssignmentObjectPattern":
			case "JSAssignmentArrayPattern":
			case "JSAssignmentAssignmentPattern":
			case "JSAssignmentObjectPatternProperty":
			case "JSAssignmentIdentifier":
			case "JSMemberExpression":
				return node;

			case "JSAmbiguousFlowTypeCastExpression":
				return ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentPattern(
					parser,
					___R$project$rome$$romejs$js$parser$parser$typescript_ts$ambiguousTypeCastToParameter(
						parser,
						node,
					),
					contextDescription,
				);

			case "JSBindingIdentifier":
			case "JSReferenceIdentifier":
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$toAssignmentIdentifier(
					parser,
					node,
				);

			case "TSAsExpression":
				return Object.assign(
					{},
					node,
					{
						type: "TSAssignmentAsExpression",
						expression: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
							parser,
							node.expression,
							contextDescription,
						),
					},
				);

			case "TSNonNullExpression":
				return Object.assign(
					{},
					node,
					{
						type: "TSAssignmentNonNullExpression",
						expression: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
							parser,
							node.expression,
							contextDescription,
						),
					},
				);

			case "TSTypeAssertion":
				return Object.assign(
					{},
					node,
					{
						type: "TSAssignmentTypeAssertion",
						expression: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
							parser,
							node.expression,
							contextDescription,
						),
					},
				);

			case "JSObjectExpression": {
				const props = [];
				let rest;
				for (let index = 0; index < node.properties.length; index++) {
					const prop = node.properties[index];
					if (prop.type === "JSSpreadProperty") {
						const arg = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
							parser,
							prop.argument,
							contextDescription,
						);
						if (arg.type === "JSAssignmentIdentifier") {
							rest = arg;
						} else {
							parser.addDiagnostic({
								loc: arg.loc,
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_OBJECT_REST_ARGUMENT,
							});
						}
						continue;
					}

					props.push(
						___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentObjectProperty(
							parser,
							prop,
						),
					);
				}
				return {
					type: "JSAssignmentObjectPattern",
					loc: node.loc,
					properties: props,
					rest,
				};
			}

			case "JSArrayExpression": {
				const {list: elements, rest} = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignableList(
					parser,
					node.elements,
					contextDescription,
				);
				return {
					type: "JSAssignmentArrayPattern",
					loc: node.loc,
					elements,
					rest,
				};
			}

			case "JSAssignmentExpression": {
				if (node.operator !== "=") {
					parser.addDiagnostic({
						loc: parser.getLoc(node.left),
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_ASSIGNMENT_PATTERN_OPERATOR,
					});
				}

				return Object.assign(
					{},
					node,
					{
						type: "JSAssignmentAssignmentPattern",
						left: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
							parser,
							node.left,
							contextDescription,
						),
						right: node.right,
						loc: node.loc,
					},
				);
			}

			default: {
				parser.addDiagnostic({
					loc: node.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_LEFT_HAND_SIDE(
						contextDescription,
					),
				});
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$toAssignmentIdentifier(
					parser,
					parser.createUnknownIdentifier(contextDescription),
				);
			}
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
		parser,
		node,
		contextDescription,
	) {
		const binding = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentPattern(
			parser,
			node,
			contextDescription,
		);

		switch (binding.type) {
			case "JSAssignmentIdentifier":
			case "JSAssignmentArrayPattern":
			case "JSAssignmentObjectPattern":
			case "JSMemberExpression":
			case "TSAssignmentAsExpression":
			case "TSAssignmentNonNullExpression":
			case "TSAssignmentTypeAssertion":
				return binding;

			default: {
				parser.addDiagnostic({
					loc: node.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_ASSIGNMENT_TARGET,
				});
				return {
					type: "JSAssignmentIdentifier",
					loc: node.loc,
					name: "X",
				};
			}
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetBindingPattern(
		parser,
		node,
		contextDescription,
	) {
		const binding = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toBindingPattern(
			parser,
			node,
			contextDescription,
		);

		switch (binding.type) {
			case "JSBindingIdentifier":
			case "JSBindingArrayPattern":
			case "JSBindingObjectPattern":
				return binding;

			default:
				// TODO return Unknown
				throw new Error("TODO " + binding.type);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toParamBindingPattern(
		parser,
		node,
		contextDescription,
	) {
		const binding = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toBindingPattern(
			parser,
			node,
			contextDescription,
		);

		switch (binding.type) {
			case "JSBindingIdentifier":
			case "JSBindingArrayPattern":
			case "JSBindingObjectPattern":
			case "JSBindingAssignmentPattern":
				return binding;

			default:
				// TODO return Unknown
				throw new Error("TODO " + binding.type);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toBindingPattern(
		parser,
		node,
		contextDescription,
	) {
		const binding = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentPattern(
			parser,
			node,
			contextDescription,
		);

		if (binding.type === "JSMemberExpression") {
			parser.addDiagnostic({
				loc: node.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.BINDING_MEMBER_EXPRESSION,
			});

			return {
				type: "JSBindingIdentifier",
				name: "X",
				loc: node.loc,
			};
		}

		switch (binding.type) {
			case "JSAssignmentObjectPattern": {
				const newNode = Object.assign(
					{},
					binding,
					{
						type: "JSBindingObjectPattern",
						rest: binding.rest === undefined
							? undefined
							: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
									parser,
									binding.rest,
								),
						properties: binding.properties.map((prop) => {
							const bindingProp = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toBindingPattern(
								parser,
								prop,
								contextDescription,
							);

							if (bindingProp.type !== "JSBindingObjectPatternProperty") {
								throw new Error("impossible condition");
							}

							return bindingProp;
						}),
					},
				);
				return newNode;
			}

			case "JSAssignmentAssignmentPattern": {
				const newNode = Object.assign(
					{},
					binding,
					{
						type: "JSBindingAssignmentPattern",
						left: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetBindingPattern(
							parser,
							binding.left,
							contextDescription,
						),
					},
				);
				return newNode;
			}

			case "JSAssignmentArrayPattern": {
				const newNode = Object.assign(
					{},
					binding,
					{
						type: "JSBindingArrayPattern",
						elements: binding.elements.map((elem) =>
							elem.type === "JSArrayHole"
								? elem
								: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toParamBindingPattern(
										parser,
										elem,
										contextDescription,
									)
						),
						rest: binding.rest === undefined
							? undefined
							: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetBindingPattern(
									parser,
									binding.rest,
									contextDescription,
								),
					},
				);
				return newNode;
			}

			case "JSAssignmentIdentifier": {
				const newNode = Object.assign(
					{},
					binding,
					{type: "JSBindingIdentifier"},
				);
				return newNode;
			}

			case "JSAssignmentObjectPatternProperty": {
				const newNode = Object.assign(
					{},
					binding,
					{
						type: "JSBindingObjectPatternProperty",
						value: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toBindingPattern(
							parser,
							binding.value,
							contextDescription,
						),
					},
				);
				return newNode;
			}

			default:
				throw new Error("Unknown node " + node.type);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentObjectProperty(
		parser,
		prop,
	) {
		switch (prop.type) {
			case "JSObjectMethod": {
				parser.addDiagnostic({
					loc: prop.key.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.OBJECT_PATTERN_CANNOT_CONTAIN_METHODS,
				});

				const fakeProp = {
					type: "JSAssignmentObjectPatternProperty",
					loc: prop.loc,
					key: {
						type: "JSStaticPropertyKey",
						value: {
							type: "JSIdentifier",
							name: "X",
							loc: prop.loc,
						},
						loc: prop.loc,
					},
					value: {
						type: "JSAssignmentIdentifier",
						name: "X",
						loc: prop.loc,
					},
				};

				return fakeProp;
			}

			case "JSObjectProperty":
				return Object.assign(
					{},
					prop,
					{
						type: "JSAssignmentObjectPatternProperty",
						value: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentPattern(
							parser,
							prop.value,
							"assignment object property value",
						),
					},
				);

			default: {
				parser.addDiagnostic({
					loc: prop.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_OBJECT_PATTERN_PROPERTY,
				});
				return {
					type: "JSAssignmentObjectPatternProperty",
					loc: prop.loc,
					key: {
						type: "JSStaticPropertyKey",
						loc: prop.loc,
						value: {
							type: "JSIdentifier",
							loc: prop.loc,
							name: "X",
						},
					},
					value: {
						type: "JSAssignmentIdentifier",
						loc: prop.loc,
						name: "X",
					},
				};
			}
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignableList(
		parser,
		exprList,
		contextDescription,
	) {
		const newList = [];
		let rest;

		let end = exprList.length;

		// Validate last element
		if (end > 0) {
			let last = exprList[end - 1];

			if (last !== undefined && last.type === "JSSpreadElement") {
				const arg = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
					parser,
					last.argument,
					contextDescription,
				);
				rest = arg;
				end--;
			}

			if (
				last !== undefined &&
				last.type === "JSAmbiguousFlowTypeCastExpression" &&
				last.expression.type === "JSSpreadElement"
			) {
				rest = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$ambiguousTypeCastToParameter(
					parser,
					Object.assign({}, last, {expression: last.expression.argument}),
				);
				end--;
			}
		}

		// Turn type casts that we found in function parameter head into type annotated params
		for (let i = 0; i < end; i++) {
			const expr = exprList[i];

			if (expr.type === "JSAmbiguousFlowTypeCastExpression") {
				exprList[i] = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$ambiguousTypeCastToParameter(
					parser,
					expr,
				);
			}

			if (expr.type === "TSAsExpression" || expr.type === "TSTypeAssertion") {
				parser.addDiagnostic({
					loc: expr.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_UNEXPECTED_CAST_IN_PARAMETER_POSITION,
				});
			}
		}

		for (let i = 0; i < end; i++) {
			const elt = exprList[i];

			if (elt.type === "JSSpreadElement") {
				___R$project$rome$$romejs$js$parser$parser$lval_ts$raiseRestNotLast(
					parser,
					parser.getLoc(elt),
				);
			}

			if (elt.type === "JSArrayHole") {
				newList.push(elt);
				continue;
			}

			const assign = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignmentPattern(
				parser,
				elt,
				contextDescription,
			);
			newList.push(assign);
		}

		return {list: newList, rest};
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toFunctionParamsBindingList(
		parser,
		exprList,
		contextDescription,
	) {
		const bindingList = [];

		const {list: assignmentList, rest: assignmentRest} = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toAssignableList(
			parser,
			exprList,
			contextDescription,
		);

		const bindingRest =
			assignmentRest === undefined
				? assignmentRest
				: ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetBindingPattern(
						parser,
						assignmentRest,
						contextDescription,
					);

		for (const item of assignmentList) {
			if (item === undefined) {
				// TODO should never happen?
				continue;
			}

			if (item.type === "JSAssignmentAssignmentPattern") {
				const binding = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toBindingPattern(
					parser,
					item,
					contextDescription,
				);
				if (binding.type !== "JSBindingAssignmentPattern") {
					throw new Error("TODO");
				}

				bindingList.push(binding);
				continue;
			}

			const binding = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetBindingPattern(
				parser,
				item,
				contextDescription,
			);
			bindingList.push(binding);
		}

		return {params: bindingList, rest: bindingRest};
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedList(
		parser,
		exprList,
		isParenthesizedExpr,
	) {
		for (let i = 0; i < exprList.length; i++) {
			const expr = exprList[i];
			exprList[i] = ___R$project$rome$$romejs$js$parser$parser$lval_ts$normalizeReferencedItem(
				parser,
				expr,
				exprList.length > 1,
				isParenthesizedExpr,
			);
		}

		// @ts-ignore: We actually filtered them out
		return exprList;
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListOptional(
		parser,
		exprList,
		isParenthesizedExpr,
	) {
		for (let i = 0; i < exprList.length; i++) {
			const expr = exprList[i];
			if (expr.type !== "JSArrayHole") {
				exprList[i] = ___R$project$rome$$romejs$js$parser$parser$lval_ts$normalizeReferencedItem(
					parser,
					expr,
					exprList.length > 1,
					isParenthesizedExpr,
				);
			}
		}

		// @ts-ignore: We actually filtered them out
		return exprList;
	}



	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$normalizeReferencedItem(
		parser,
		expr,
		multiple,
		isParenthesizedExpr,
	) {
		if (expr.type !== "JSAmbiguousFlowTypeCastExpression") {
			return expr;
		}

		parser.addDiagnostic({
			loc: expr.loc,
			description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.FLOW_TYPE_CAST_IN_TS,
		});

		if (!parser.isParenthesized(expr) && (multiple || !isParenthesizedExpr)) {
			parser.addDiagnostic({
				loc: expr.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TYPE_CAST_EXPECTED_PARENS,
			});
		}

		if (expr.optional) {
			parser.addDiagnostic({
				loc: expr.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TYPE_CAST_CANNOT_BE_OPTIONAL,
			});
		}

		const {typeAnnotation, expression} = expr;

		if (typeAnnotation === undefined) {
			parser.addDiagnostic({
				loc: expr.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TYPE_CAST_WITHOUT_ANNOTATION,
			});
			return expression;
		}

		return expression;
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$filterSpread(
		parser,
		elems,
	) {
		for (let i = 0; i < elems.length; i++) {
			const elem = elems[i];
			if (elem.type === "JSSpreadElement") {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNEXPECTED_SPREAD,
				});

				elems[i] = ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
					parser,
					parser.createUnknownIdentifier("spread substitute"),
				);
			}
		}
		// @ts-ignore Technically wrong but we removed all JSSpreadElement
		return elems;
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeep(
		parser,
		exprList,
		isParenthesizedExpr,
	) {
		const refList = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedList(
			parser,
			exprList,
			isParenthesizedExpr,
		);
		___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeepItems(
			parser,
			refList,
		);
		return refList;
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeepOptional(
		parser,
		exprList,
		isParenthesizedExpr,
	) {
		const refList = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListOptional(
			parser,
			exprList,
			isParenthesizedExpr,
		);
		___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeepItems(
			parser,
			refList,
		);
		return refList;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeepItems(
		parser,
		exprList,
	) {
		for (let i = 0; i < exprList.length; i++) {
			const expr = exprList[i];
			if (expr.type === "JSArrayExpression") {
				___R$project$rome$$romejs$js$parser$parser$lval_ts$toReferencedListDeepOptional(
					parser,
					expr.elements,
				);
			}
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseSpread(
		parser,
		refShorthandDefaultPos,
		refNeedsArrowPos,
	) {
		const start = parser.getPosition();
		parser.next();

		const argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
			parser,
			"spread argument",
			false,
			refShorthandDefaultPos,
			undefined,
			refNeedsArrowPos,
		);

		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				parser.state.commaAfterSpreadAt,
			) === -1 &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
			)
		) {
			parser.state.commaAfterSpreadAt = parser.state.index;
		}

		return parser.finishNode(
			start,
			{
				type: "JSSpreadElement",
				argument,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseTargetBindingPattern(
		parser,
	) {
		switch (parser.state.tokenType) {
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$parseArrayPattern(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPattern(
					parser,
					___R$project$rome$$romejs$js$parser$utils$location_ts$createIndexTracker(),
				);
		}

		return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
			parser,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$parseArrayPattern(
		parser,
	) {
		const start = parser.getPosition();
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
			"array pattern",
		);
		const {list: elements, rest} = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingList(
			parser,
			openContext,
			true,
		);
		return parser.finishNode(
			start,
			{
				type: "JSBindingArrayPattern",
				elements,
				rest,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingList(
		parser,
		openContext,
		allowHoles = false,
		allowTSModifiers = false,
	) {
		const elts = [];
		let rest;

		let first = true;
		while (true) {
			if (
				parser.match(openContext.close) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				)
			) {
				parser.expectClosing(openContext);
				break;
			}

			if (first) {
				first = false;
			} else {
				if (
					!parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
					)
				) {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_COMMA_SEPARATOR(
							openContext.name,
						),
					});
					break;
				}
			}

			if (
				allowHoles &&
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				)
			) {
				elts.push(
					___R$project$rome$$romejs$js$parser$parser$expression_ts$parseArrayHole(
						parser,
					),
				);
			} else if (parser.match(openContext.close)) {
				parser.expectClosing(openContext);
				break;
			} else if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
				)
			) {
				parser.next();

				rest = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListItemTypes(
					parser,
					parser.getPosition(),
					___R$project$rome$$romejs$js$parser$parser$lval_ts$parseTargetBindingPattern(
						parser,
					),
				);

				if (
					!___R$project$rome$$romejs$js$parser$parser$lval_ts$hasCommaAfterRest(
						parser,
					)
				) {
					parser.expectClosing(openContext);
					break;
				}
			} else {
				elts.push(
					___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListItem(
						parser,
						allowTSModifiers,
					),
				);
			}
		}
		return {list: elts, rest};
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListNonEmpty(
		parser,
		openContext,
		allowTSModifiers,
	) {
		const list = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingList(
			parser,
			openContext,
			false,
			allowTSModifiers,
		);
		// @ts-ignore: Need to make this more explicit we set `allowEmpty: false` above
		return list;
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListItem(
		parser,
		allowTSModifiers,
	) {
		const start = parser.getPosition();

		let accessibility;
		let readonly = false;
		if (allowTSModifiers) {
			accessibility = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAccessModifier(
				parser,
			);
			readonly = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$hasTSModifier(
				parser,
				["readonly"],
			);
		}

		const left = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListItemTypes(
			parser,
			start,
			___R$project$rome$$romejs$js$parser$parser$lval_ts$parseTargetBindingPattern(
				parser,
			),
		);
		const elt = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseMaybeDefault(
			parser,
			start,
			left,
		);

		if (accessibility !== undefined || readonly) {
			if (!parser.isSyntaxEnabled("ts")) {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_DISABLED_BUT_ACCESSIBILITY_OR_READONLY,
				});
			}

			if (
				elt.type !== "JSBindingIdentifier" &&
				elt.type !== "JSBindingAssignmentPattern"
			) {
				parser.addDiagnostic({
					start,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_PARAMETER_PROPERTY_BINDING_PATTERN,
				});
			}

			return parser.finishNode(
				start,
				Object.assign(
					{},
					elt,
					{
						meta: parser.finishNode(
							start,
							{
								type: "JSPatternMeta",
								accessibility,
								readonly,
							},
						),
					},
				),
			);
		}

		return elt;
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListItemTypes(
		parser,
		start,
		param,
	) {
		let typeAnnotation;
		let optional;

		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			)
		) {
			if (param.type !== "JSBindingIdentifier") {
				parser.addDiagnostic({
					loc: param.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TYPE_BINDING_PARAMETER_OPTIONAL,
				});
			}

			optional = true;
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
				parser,
				true,
			);
		}

		return parser.finalizeNode(
			Object.assign(
				{},
				param,
				{
					meta: parser.finishNode(
						start,
						{
							type: "JSPatternMeta",
							optional,
							typeAnnotation,
						},
					),
				},
			),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseMaybeDefault(
		parser,
		start = parser.getPosition(),
		left = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseTargetBindingPattern(
			parser,
		),
	) {
		let target;

		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
			)
		) {
			const right = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"assignment pattern right",
			);
			const assign = parser.finishNode(
				start,
				{
					type: "JSBindingAssignmentPattern",
					left,
					right,
				},
			);
			target = assign;
		} else {
			target = left;
		}

		if (
			target.type === "JSBindingAssignmentPattern" &&
			target.meta !== undefined &&
			target.meta.typeAnnotation !== undefined &&
			parser.getLoc(target.right).start.index <
			parser.getLoc(target.meta.typeAnnotation).start.index
		) {
			parser.addDiagnostic({
				loc: target.meta.typeAnnotation.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TYPE_ANNOTATION_AFTER_ASSIGNMENT,
			});
		}

		return target;
	}

	const ___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$ALLOWED_PARENTHESIZED_LVAL_TYPES = [
		"JSIdentifier",
		"JSMemberExpression",
		"TSAsExpression",
		"TSTypeAssertion",
		"TSAssignmentTypeAssertion",
		"TSAssignmentAsExpression",
		"TSAssignmentNonNullExpression",
	];

	// Verify that a node is an lval — something that can be assigned
	// to.
	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
		parser,
		expr,
		maybeIsBinding,
		checkClashes,
		contextDescription,
	) {
		const isBinding = maybeIsBinding === undefined ? false : maybeIsBinding;

		// Verify that nodes aren't parenthesized
		if (
			parser.isParenthesized(expr) &&
			!___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$ALLOWED_PARENTHESIZED_LVAL_TYPES.includes(
				expr.type,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_PARENTEHSIZED_LVAL(
					expr.type === "JSBindingObjectPattern"
						? "object"
						: expr.type === "JSBindingArrayPattern"
							? "array"
							: undefined,
				),
				loc: expr.loc,
			});
		}

		switch (expr.type) {
			case "TSAsExpression":
			case "TSNonNullExpression":
			case "TSTypeAssertion": {
				___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
					parser,
					expr.expression,
					isBinding,
					checkClashes,
					contextDescription,
				);
				return undefined;
			}

			case "JSBindingIdentifier":
			case "JSReferenceIdentifier":
			case "JSAssignmentIdentifier": {
				if (
					parser.inScope("STRICT") &&
					___R$project$rome$$romejs$js$parser$utils$identifier_ts$isStrictBindReservedWord(
						expr.name,
						parser.inModule,
					)
				) {
					parser.addDiagnostic({
						loc: expr.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.RESERVED_WORD(
							expr.name,
						),
					});
				}

				if (checkClashes !== undefined) {
					const clash = checkClashes.get(expr.name);

					if (clash === undefined) {
						checkClashes.set(expr.name, expr);
					} else {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ARGUMENT_CLASH_IN_STRICT(
								expr.name,
								expr.loc,
							),
							loc: expr.loc,
						});
					}
				}
				break;
			}

			case "JSAssignmentObjectPattern":
			case "JSBindingObjectPattern": {
				if (expr.rest !== undefined) {
					___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
						parser,
						expr.rest,
						isBinding,
						checkClashes,
						"rest property",
					);
				}

				for (let prop of expr.properties) {
					if (prop.type === "JSBindingObjectPatternProperty") {
						___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
							parser,
							prop.value,
							isBinding,
							checkClashes,
							"object destructuring pattern",
						);
					} else {
						___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
							parser,
							prop,
							isBinding,
							checkClashes,
							"object destructuring pattern",
						);
					}
				}
				break;
			}

			case "JSAssignmentObjectPatternProperty":
			case "JSBindingObjectPatternProperty":
				break;

			case "JSAssignmentArrayPattern":
			case "JSBindingArrayPattern": {
				if (expr.rest !== undefined) {
					___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
						parser,
						expr.rest,
						isBinding,
						checkClashes,
						"rest element",
					);
				}

				for (const elem of expr.elements) {
					___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
						parser,
						elem,
						isBinding,
						checkClashes,
						"array destructuring pattern",
					);
				}
				break;
			}

			case "JSBindingAssignmentPattern": {
				___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
					parser,
					expr.left,
					isBinding,
					checkClashes,
					"assignment pattern",
				);
				break;
			}
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$checkToRestConversion(
		parser,
		node,
	) {
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$lval_ts$VALID_REST_ARGUMENT_TYPES.includes(
				node.argument.type,
			) ===
			false
		) {
			parser.addDiagnostic({
				loc: node.argument.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.REST_INVALID_ARGUMENT,
			});
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$hasCommaAfterRest(
		parser,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
			)
		) {
			___R$project$rome$$romejs$js$parser$parser$lval_ts$raiseRestNotLast(
				parser,
			);
			return true;
		}

		return false;
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$raiseRestNotLast(
		parser,
		loc,
		start,
	) {
		parser.addDiagnostic({
			start,
			loc,
			description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DESTRUCTURING_REST_ELEMENT_NOT_LAST,
		});
	}

	function ___R$project$rome$$romejs$js$parser$parser$lval_ts$checkCommaAfterRestFromSpread(
		parser,
	) {
		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				parser.state.commaAfterSpreadAt,
			) >
			-1
		) {
			___R$project$rome$$romejs$js$parser$parser$lval_ts$raiseRestNotLast(
				parser,
				undefined,
				parser.getPositionFromIndex(parser.state.commaAfterSpreadAt),
			);
		}
	}


  // project-rome/@romejs/js-parser/parser/jsx.ts
const ___R$project$rome$$romejs$js$parser$parser$jsx_ts = {
		parseJSXText: ___R$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXText,
		parseJSXElement: ___R$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElement,
	};
	// Indicates whether we should create a JSXIdentifier or a JSXReferenceIdentifier
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$isHTMLTagName(
		tagName,
	) {
		return (
			/^[a-z]|-/.test(tagName) &&
			___R$project$rome$$romejs$js$ast$utils$isValidIdentifierName_ts$default(
				tagName,
			)
		);
	}

	// Transforms JSX element name to string.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
		node,
	) {
		if (node === undefined) {
			return "";
		}

		switch (node.type) {
			case "JSXIdentifier":
			case "JSXReferenceIdentifier":
				return node.name;

			case "JSXNamespacedName":
				return node.namespace.name + ":" + node.name.name;

			case "JSXMemberExpression":
				return (
					___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
						node.object,
					) +
					"." +
					___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
						node.property,
					)
				);
		}
	}

	// Parse next token as JSX identifier
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXIdentifier(
		parser,
	) {
		const start = parser.getPosition();
		let name;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxName,
			)
		) {
			name = String(parser.state.tokenValue);
		} else if (parser.state.tokenType.keyword !== undefined) {
			name = parser.state.tokenType.keyword;
		} else {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_UNKNOWN_IDENTIFIER_TOKEN,
			});
			name = "";
		}

		parser.next();
		return parser.finishNode(
			start,
			{
				type: "JSXIdentifier",
				name,
			},
		);
	}

	// Parse namespaced identifier.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXNamespacedName(
		parser,
	) {
		const start = parser.getPosition();

		const namespace = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXIdentifier(
			parser,
		);
		if (
			!parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			return namespace;
		}

		const name = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXIdentifier(
			parser,
		);
		return parser.finishNode(
			start,
			{
				type: "JSXNamespacedName",
				name,
				namespace,
			},
		);
	}

	// Parses element name in any form - namespaced, member
	// or single identifier.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElementName(
		parser,
	) {
		const start = parser.getPosition();

		const namespacedName = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXNamespacedName(
			parser,
		);

		let node;
		if (
			namespacedName.type === "JSXIdentifier" &&
			!___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$isHTMLTagName(
				namespacedName.name,
			)
		) {
			node = Object.assign({}, namespacedName, {type: "JSXReferenceIdentifier"});
		} else {
			node = namespacedName;
		}

		while (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			)
		) {
			const property = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXIdentifier(
				parser,
			);
			node = parser.finishNode(
				start,
				{
					type: "JSXMemberExpression",
					object: node,
					property,
				},
			);
		}

		return node;
	}

	// Parses any type of JSX attribute value.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXAttributeValue(
		parser,
	) {
		let node;
		switch (parser.state.tokenType) {
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL: {
				node = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXExpressionContainer(
					parser,
				);
				if (node.expression.type === "JSXEmptyExpression") {
					parser.addDiagnostic({
						loc: node.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_EMPTY_ATTRIBUTE_VALUE,
					});
				}
				return node;
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart:
				return ___R$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElement(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string:
				return ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
					parser,
				);

			default: {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_INVALID_ATTRIBUTE_VALUE,
				});
				return parser.finishNode(
					parser.getPosition(),
					{
						type: "JSStringLiteral",
						value: "?",
					},
				);
			}
		}
	}

	// JSXEmptyExpression is unique type since it doesn't actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXEmptyExpression(
		parser,
	) {
		return parser.finishNode(
			parser.state.lastEndPos,
			{
				type: "JSXEmptyExpression",
			},
		);
	}

	// Parse JSX spread child
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXSpreadChild(
		parser,
	) {
		const start = parser.getPosition();
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"jsx spread child",
		);
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
		);
		const expression = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
			parser,
			"jsx spread child expression",
		);
		parser.expectClosing(openContext);

		return parser.finishNode(
			start,
			{
				type: "JSXSpreadChild",
				expression,
			},
		);
	}

	// Parses JSX expression enclosed into curly brackets.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXExpressionContainer(
		parser,
	) {
		const start = parser.getPosition();
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"jsx expression container",
		);
		let expression;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			)
		) {
			expression = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXEmptyExpression(
				parser,
			);
		} else {
			expression = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
				parser,
				"jsx inner expression container",
			);
		}
		parser.expectClosing(openContext);
		return parser.finishNode(
			start,
			{
				type: "JSXExpressionContainer",
				expression,
			},
		);
	}

	// Parses following JSX attribute name-value pair.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXAttribute(
		parser,
	) {
		const start = parser.getPosition();

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			)
		) {
			const openContext = parser.expectOpening(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				"jsx attribute spread",
			);
			parser.expect(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
			);
			const argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"jsx attribute spread",
			);
			parser.expectClosing(openContext);
			return parser.finishNode(
				start,
				{
					type: "JSXSpreadAttribute",
					argument,
				},
			);
		}

		const name = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXNamespacedName(
			parser,
		);
		const value = parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
		)
			? ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXAttributeValue(
					parser,
				)
			: undefined;
		return parser.finishNode(
			start,
			{
				type: "JSXAttribute",
				name,
				value,
			},
		);
	}


	// Parses JSX opening tag starting after "<".
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXOpeningElementAt(
		parser,
		start,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagEnd,
			)
		) {
			parser.expect(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagEnd,
			);
			return {
				typeArguments: undefined,
				name: undefined,
				loc: {
					filename: parser.filename,
					start,
					end: parser.getPosition(),
				},
				attributes: [],
				selfClosing: false,
			};
		}

		const attributes = [];
		const name = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElementName(
			parser,
		);

		let typeArguments;
		if (parser.isRelational("<")) {
			if (!parser.isSyntaxEnabled("ts")) {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_ELEM_TYPE_ARGUMENTS_OUTSIDE_TS,
				});
			}

			typeArguments = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments(
				parser,
			);
		}

		// We need to check for isRelational('>') here as the above type arguments parsing can put the tokenizer

		// into an unusual state for: <foo<bar>></foo>
		while (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.slash,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagEnd,
			) &&
			!parser.atEOF()
		) {
			attributes.push(
				___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXAttribute(
					parser,
				),
			);
		}
		const selfClosing = parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.slash,
		);
		if (
			!parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagEnd,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_UNCLOSED_SELF_CLOSING_TAG,
			});
		}
		return {
			typeArguments,
			name,
			attributes,
			selfClosing,
			loc: parser.getLoc(name),
		};
	}

	// Parses JSX closing tag starting after "</".
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXClosingElementAt(
		parser,
	) {
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagEnd,
			)
		) {
			return undefined;
		}

		const name = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElementName(
			parser,
		);

		if (
			!parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagEnd,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_UNCLOSED_CLOSING_TAG,
			});
		}

		return name;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$recoverFromUnclosedJSX(
		parser,
	) {
		// jsxOpenTag
		parser.state.context.pop();
		parser.state.exprAllowed = false;
	}

	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElementAt(
		parser,
		start,
	) {
		const children = [];
		const openingDef = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXOpeningElementAt(
			parser,
			start,
		);

		let closingNameLoc;
		let closingName;

		// Parse children for unclosed elements
		if (openingDef.selfClosing === false) {
			contents: while (true) {
				switch (parser.state.tokenType) {
					case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart: {
						const start = parser.getPosition();
						parser.next();
						if (
							parser.eat(
								___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.slash,
							)
						) {
							closingName = ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXClosingElementAt(
								parser,
							);
							closingNameLoc = {
								filename: parser.filename,
								start,
								end: parser.getPosition(),
							};
							break contents;
						}
						children.push(
							___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElementAt(
								parser,
								start,
							),
						);
						break;
					}

					case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxText: {
						children.push(
							___R$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXText(
								parser,
							),
						);
						break;
					}

					case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL: {
						if (
							parser.lookaheadState().tokenType ===
							___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis
						) {
							children.push(
								___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXSpreadChild(
									parser,
								),
							);
						} else {
							children.push(
								___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXExpressionContainer(
									parser,
								),
							);
						}
						break;
					}

					case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof: {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_UNCLOSED_ELEMENT(
								___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
									openingDef.name,
								),
								openingDef.loc,
							),
						});
						break contents;
					}

					default: {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_UNKNOWN_CHILD_START(
								___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
									openingDef.name,
								),
								openingDef.loc,
							),
						});

						// We don't need to do it for the tt.eof case above because nothing will ever be parsed after
						___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$recoverFromUnclosedJSX(
							parser,
						);

						break contents;
					}
				}
			}

			// Unclosed element, would have produced an error above but we still want to produce a valid AST and avoid the below error conditions
			if (closingNameLoc === undefined) {
				closingName = openingDef.name;
				closingNameLoc = openingDef.loc;
			}

			// Fragment open, element close
			if (openingDef.name === undefined && closingName !== undefined) {
				parser.addDiagnostic({
					loc: openingDef.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_EXPECTED_CLOSING_FRAGMENT_TAG(
						___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
							openingDef.name,
						),
						openingDef.loc,
					),
				});
			}

			// Element open, fragment close
			if (openingDef.name !== undefined && closingName === undefined) {
				parser.addDiagnostic({
					loc: openingDef.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_EXPECTED_CLOSING_TAG(
						___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
							openingDef.name,
						),
						openingDef.loc,
					),
				});
			}

			// Validate element names: Element open, element close
			if (openingDef.name !== undefined && closingName !== undefined) {
				if (
					___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
						closingName,
					) !==
					___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
						openingDef.name,
					)
				) {
					parser.addDiagnostic({
						loc: openingDef.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_EXPECTED_CLOSING_TAG(
							___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$getQualifiedJSXName(
								openingDef.name,
							),
							openingDef.loc,
						),
					});
				}
			}
		}

		___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$checkAccidentalFragment(
			parser,
		);

		const openingName = openingDef.name;
		if (openingName === undefined) {
			return parser.finishNode(
				start,
				{
					type: "JSXFragment",
					children,
				},
			);
		} else {
			return parser.finishNode(
				start,
				{
					type: "JSXElement",
					name: openingName,
					typeArguments: openingDef.typeArguments,
					attributes: openingDef.attributes,
					selfClosing: openingDef.selfClosing,
					children,
				},
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$checkAccidentalFragment(
		parser,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.relational,
			) &&
			parser.state.tokenValue === "<"
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNWRAPPED_ADJACENT_JHX,
			});
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXText(
		parser,
	) {
		// No need to assert syntax here because we wont get that far as parseJSXElement would have already been called
		const start = parser.getPosition();
		const value = String(parser.state.tokenValue);
		parser.next();
		return parser.finishNode(
			start,
			{
				type: "JSXText",
				value,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElement(
		parser,
	) {
		// Only necessary here as this is the only JSX entry point
		if (!parser.isSyntaxEnabled("jsx")) {
			if (parser.isSyntaxEnabled("ts")) {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_IN_TS_EXTENSION,
				});
			} else {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.JSX_DISABLED,
				});
			}
		}

		const start = parser.getPosition();
		parser.next();
		return ___R$$priv$project$rome$$romejs$js$parser$parser$jsx_ts$parseJSXElementAt(
			parser,
			start,
		);
	}


  // project-rome/@romejs/js-parser/parser/typescript.ts
const ___R$project$rome$$romejs$js$parser$parser$typescript_ts = {
		parseTSModifier: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModifier,
		hasTSModifier: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$hasTSModifier,
		ambiguousTypeCastToParameter: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$ambiguousTypeCastToParameter,
		maybeParseTSTypeParameters: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeParameters,
		maybeParseTSTypeArguments: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeArguments,
		parseTSTypeParameters: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeParameters,
		tryTSNextParseConstantContext: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSNextParseConstantContext,
		tsCheckLiteralForConstantContext: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckLiteralForConstantContext,
		tryTSParseIndexSignature: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseIndexSignature,
		parseTSTypeOrTypePredicateAnnotation: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOrTypePredicateAnnotation,
		parseTSTypeAnnotation: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation,
		parseTSTypeAssertion: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAssertion,
		parseTSHeritageClause: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSHeritageClause,
		parseTSInterfaceDeclaration: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSInterfaceDeclaration,
		parseTSTypeAlias: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAlias,
		tsNextThenParseType: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsNextThenParseType,
		parseTSEnumDeclaration: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEnumDeclaration,
		parseTSModuleBlock: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleBlock,
		parseTSModuleOrNamespaceDeclaration: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleOrNamespaceDeclaration,
		parseTSAmbientExternalModuleDeclaration: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAmbientExternalModuleDeclaration,
		parseTSImportEqualsDeclaration: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSImportEqualsDeclaration,
		parseTSDeclare: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSDeclare,
		parseTSTypeExpressionStatement: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeExpressionStatement,
		parseTSAbstractClass: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAbstractClass,
		parseTSExportDefaultAbstractClass: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExportDefaultAbstractClass,
		parseTSTypeArguments: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments,
		isTSDeclarationStart: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$isTSDeclarationStart,
		parseTSAccessModifier: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAccessModifier,
		isTSAbstractClass: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$isTSAbstractClass,
		parseTSExport: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExport,
	};

	// Doesn't handle 'void' or 'null' because those are keywords, not identifiers.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$keywordTypeFromName(
		value,
	) {
		switch (value) {
			case "any":
				return "TSAnyKeywordTypeAnnotation";

			case "boolean":
				return "TSBooleanKeywordTypeAnnotation";

			case "bigint":
				return "TSBigIntKeywordTypeAnnotation";

			case "never":
				return "TSNeverKeywordTypeAnnotation";

			case "number":
				return "TSNumberKeywordTypeAnnotation";

			case "object":
				return "TSObjectKeywordTypeAnnotation";

			case "string":
				return "TSStringKeywordTypeAnnotation";

			case "symbol":
				return "TSSymbolKeywordTypeAnnotation";

			case "undefined":
				return "TSUndefinedKeywordTypeAnnotation";

			case "unknown":
				return "TSUnknownKeywordTypeAnnotation";

			default:
				return undefined;
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsIdentifier(
		parser,
	) {
		// TODO: actually a bit more complex in TypeScript, but shouldn't matter.
		// See https://github.com/Microsoft/TypeScript/issues/15008
		return parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsNextTokenCanFollowModifier(
		parser,
	) {
		// Note: TypeScript's implementation is much more complicated because
		// more things are considered modifiers there.
		// This implementation only handles modifiers not handled by @babel/parser itself. And 'static'.
		// TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...
		parser.next();
		return (
			!parser.hasPrecedingLineBreak() &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bang,
			)
		);
	}

	/** Parses a modifier matching one the given modifier names.*/
	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModifier(
		parser,
		allowedModifiers,
	) {
		if (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			)
		) {
			return undefined;
		}

		// @ts-ignore: We are lying here but we validate it in all the correct places
		const modifier = String(parser.state.tokenValue);
		if (
			allowedModifiers.includes(modifier) &&
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParse(
				parser,
				___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsNextTokenCanFollowModifier,
			)
		) {
			return modifier;
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$hasTSModifier(
		parser,
		allowedModifiers,
	) {
		return (
			___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModifier(
				parser,
				allowedModifiers,
			) !== undefined
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsListTerminator(
		parser,
		kind,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
			)
		) {
			return true;
		}

		switch (kind) {
			case "EnumMembers":
			case "TypeMembers":
				return parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				);

			case "HeritageClauseElement":
				return parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
				);

			case "TupleElementTypes":
				return parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
				);

			case "TypeParametersOrArguments":
				return parser.isRelational(">");
		}

		throw new Error("Unreachable");
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$addTSDiagnostic(
		parser,
		label,
		start,
	) {
		if (parser.isSyntaxEnabled("ts")) {
			return;
		}

		parser.addDiagnostic({
			start,
			description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_REQUIRED(
				label,
			),
		});
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSList(
		parser,
		kind,
		parseElement,
	) {
		const result = [];
		while (
			!___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsListTerminator(
				parser,
				kind,
			)
		) {
			// Skipping 'parseListElement' from the TS source since that's just for error handling.
			result.push(parseElement(parser));
		}
		return result;
	}

	/**
 * If !expectSuccess, returns undefined instead of failing to parse.
 * If expectSuccess, parseElement should always return a defined value.
 */
	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSDelimitedList(
		parser,
		kind,
		parseElement,
	) {
		const result = [];

		while (true) {
			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsListTerminator(
					parser,
					kind,
				)
			) {
				break;
			}

			const element = parseElement(parser);
			if (element === undefined) {
				break;
			}

			result.push(element);

			if (
				parser.eat(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				)
			) {
				continue;
			}

			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsListTerminator(
					parser,
					kind,
				)
			) {
				break;
			}

			// This will fail with an error about a missing comma
			if (
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				)
			) {
				break;
			}
		}

		return result;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSBracketedList(
		parser,
		kind,
		parseElement,
		bracket,
		skipFirstToken,
	) {
		if (!skipFirstToken) {
			if (bracket) {
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
				);
			} else {
				parser.expectRelational("<");
			}
		}

		const result = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSDelimitedList(
			parser,
			kind,
			parseElement,
		);

		if (bracket) {
			parser.expect(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
			);
		} else {
			parser.expectRelational(">");
		}

		return result;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSImportType(
		parser,
	) {
		const start = parser.getPosition();
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import,
		);
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			"ts import type",
		);

		if (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
			)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_IMPORT_ARG_NOT_STRING,
			});
		}

		const argument = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionAtom(
			parser,
			"ts import argument",
		);
		parser.expectClosing(openContext);

		let qualifier;
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			)
		) {
			qualifier = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEntityName(
				parser,
				/* allowReservedWords */ true,
			);
		}

		let typeParameters;
		if (parser.isRelational("<")) {
			typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments(
				parser,
			);
		}

		return parser.finishNode(
			start,
			{
				type: "TSImportType",
				argument,
				qualifier,
				typeParameters,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEntityName(
		parser,
		allowReservedWords,
	) {
		let entity = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseReferenceIdentifier(
			parser,
		);
		while (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			)
		) {
			const start = parser.getLoc(entity).start;
			const right = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				allowReservedWords,
			);
			entity = parser.finishNode(
				start,
				{
					type: "TSQualifiedName",
					left: entity,
					right,
				},
			);
		}
		return entity;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeReference(
		parser,
	) {
		const start = parser.getPosition();
		const typeName = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEntityName(
			parser,
			/* allowReservedWords */ false,
		);
		let typeParameters;
		if (!parser.hasPrecedingLineBreak() && parser.isRelational("<")) {
			typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments(
				parser,
			);
		}
		return parser.finishNode(
			start,
			{
				type: "TSTypeReference",
				typeName,
				typeParameters,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSThisTypePredicate(
		parser,
		lhs,
	) {
		parser.next();
		const start = parser.getLoc(lhs).start;
		const parameterName = lhs;
		const typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
			parser,
			/* eatColon */ false,
		);

		return parser.finishNode(
			start,
			{
				type: "TSTypePredicate",
				asserts: false,
				parameterName,
				typeAnnotation,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSThisTypeNode(
		parser,
	) {
		const start = parser.getPosition();
		parser.next();
		return parser.finishNode(
			start,
			{
				type: "TSThisType",
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeQuery(
		parser,
	) {
		const start = parser.getPosition();
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._typeof,
		);
		let exprName;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import,
			)
		) {
			exprName = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSImportType(
				parser,
			);
		} else {
			exprName = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEntityName(
				parser,
				/* allowReservedWords */ true,
			);
		}
		return parser.finishNode(
			start,
			{
				type: "TSTypeQuery",
				exprName,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$ambiguousTypeCastToParameter(
		parser,
		node,
	) {
		const start = parser.getPosition();
		const expr = ___R$project$rome$$romejs$js$parser$parser$lval_ts$toTargetAssignmentPattern(
			parser,
			node.expression,
			"parameter",
		);

		const meta = parser.finishNode(
			start,
			{
				type: "JSPatternMeta",
				optional: node.optional,
				typeAnnotation: node.typeAnnotation,
			},
		);

		return parser.finishNode(
			start,
			Object.assign(
				{},
				expr,
				{
					// @ts-ignore
					meta,
				},
			),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeParameters(
		parser,
	) {
		if (parser.isRelational("<")) {
			return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeParameters(
				parser,
			);
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeArguments(
		parser,
	) {
		if (parser.isRelational("<")) {
			return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments(
				parser,
			);
		} else {
			return undefined;
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeParameter(
		parser,
	) {
		const start = parser.getPosition();
		const name = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifierName(
			parser,
		);
		const constraint = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsEatThenParseType(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._extends,
		);
		const _default = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsEatThenParseType(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
		);
		return parser.finishNode(
			start,
			{
				type: "TSTypeParameter",
				name,
				constraint,
				default: _default,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryParseTSTypeParameters(
		parser,
	) {
		if (parser.isRelational("<")) {
			return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeParameters(
				parser,
			);
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeParameters(
		parser,
	) {
		const start = parser.getPosition();

		parser.expectRelational("<");

		const params = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSBracketedList(
			parser,
			"TypeParametersOrArguments",
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeParameter,
			/* bracket */ false,
			/* skipFirstToken */ true,
		);

		return parser.finishNode(
			start,
			{
				type: "TSTypeParameterDeclaration",
				params,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSNextParseConstantContext(
		parser,
	) {
		if (
			parser.lookaheadState().tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const
		) {
			parser.next();
			return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeReference(
				parser,
			);
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckLiteralForConstantContext(
		parser,
		node,
	) {
		switch (node.type) {
			case "JSStringLiteral":
			case "JSTemplateLiteral":
			case "JSNumericLiteral":
			case "JSBooleanLiteral":
			case "JSSpreadElement":
			case "JSObjectMethod":
			case "JSObjectExpression":
				break;

			case "JSArrayExpression": {
				for (const elem of node.elements) {
					if (elem) {
						___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckLiteralForConstantContext(
							parser,
							elem,
						);
					}
				}
				break;
			}

			case "JSObjectProperty": {
				___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckLiteralForConstantContext(
					parser,
					node.value,
				);
				break;
			}

			case "JSUnaryExpression": {
				___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckLiteralForConstantContext(
					parser,
					node.argument,
				);
				break;
			}

			default:
				parser.addDiagnostic({
					loc: node.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_CONSTANT_NOT_LITERAL,
				});
		}
	}

	// Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,
	// but here it's always false, because parser.is only used for types.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSSignatureDeclarationMeta(
		parser,
		returnToken,
	) {
		const start = parser.getPosition();

		// Arrow fns *must* have return token (`=>`). Normal functions can omit it.
		const returnTokenRequired =
			returnToken ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow;
		const typeParameters = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryParseTSTypeParameters(
			parser,
		);
		const {list: parameters, rest} = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSBindingListForSignature(
			parser,
		);

		let typeAnnotation;
		if (returnTokenRequired) {
			typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOrTypePredicateAnnotation(
				parser,
				returnToken,
			);
		} else if (parser.match(returnToken)) {
			typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOrTypePredicateAnnotation(
				parser,
				returnToken,
			);
		}

		return {
			typeAnnotation,
			meta: parser.finishNode(
				start,
				{
					type: "TSSignatureDeclarationMeta",
					typeParameters,
					parameters,
					rest,
				},
			),
		};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSBindingListForSignature(
		parser,
	) {
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			"ts signature parameters",
		);
		const {list: patterns, rest} = ___R$project$rome$$romejs$js$parser$parser$lval_ts$parseBindingListNonEmpty(
			parser,
			openContext,
		);
		const validPatterns = [];

		for (const pattern of patterns) {
			if (
				pattern.type === "JSBindingIdentifier" ||
				pattern.type === "JSBindingObjectPattern" ||
				pattern.type === "JSBindingArrayPattern"
			) {
				validPatterns.push(pattern);
			} else {
				parser.addDiagnostic({
					loc: pattern.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_INVALID_SIGNATURE_BINDING_NODE,
				});
			}
		}

		return {list: validPatterns, rest};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeMemberSemicolon(
		parser,
	) {
		if (
			!parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
			)
		) {
			parser.semicolon();
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSConstructSignatureDeclaration(
		parser,
	) {
		const start = parser.getPosition();
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._new,
		);
		const {meta, typeAnnotation} = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSSignatureDeclarationMeta(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
		);
		parser.semicolon();
		return parser.finishNode(
			start,
			{
				type: "TSConstructSignatureDeclaration",
				meta,
				typeAnnotation,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSCallSignatureDeclaration(
		parser,
	) {
		const start = parser.getPosition();
		const {meta, typeAnnotation} = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSSignatureDeclarationMeta(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
		);
		parser.semicolon();
		return parser.finishNode(
			start,
			{
				type: "TSCallSignatureDeclaration",
				meta,
				typeAnnotation,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsUnambiguouslyIndexSignature(
		parser,
	) {
		parser.next(); // Skip '{'
		return (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			) &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseIndexSignature(
		parser,
		start,
	) {
		if (
			!(parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			) &&
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$lookaheadTS(
				parser,
				___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsUnambiguouslyIndexSignature,
			))
		) {
			return undefined;
		}

		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
		);

		const idStart = parser.getPosition();
		const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
			parser,
		);

		const keyTypeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
			parser,
		);
		const key = parser.finishNode(
			idStart,
			Object.assign(
				{},
				id,
				{
					meta: parser.finishNode(
						idStart,
						Object.assign(
							{},
							id.meta,
							{type: "JSPatternMeta", typeAnnotation: keyTypeAnnotation},
						),
					),
				},
			),
		);

		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
		);

		const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseTypeAnnotation(
			parser,
		);

		parser.semicolon();
		return parser.finishNode(
			start,
			{
				type: "TSIndexSignature",
				typeAnnotation,
				key,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSPropertyOrMethodSignature(
		parser,
		start,
		readonly,
	) {
		const key = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyKey(
			parser,
		);
		const optional = parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
		);

		if (
			!readonly &&
			(parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) ||
			parser.isRelational("<"))
		) {
			const {meta, typeAnnotation} = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSSignatureDeclarationMeta(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			);
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeMemberSemicolon(
				parser,
			);
			return parser.finishNode(
				start,
				{
					type: "TSMethodSignature",
					optional,
					meta,
					key,
					returnType: typeAnnotation,
				},
			);
		} else {
			const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseTypeAnnotation(
				parser,
			);
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeMemberSemicolon(
				parser,
			);
			return parser.finishNode(
				start,
				{
					type: "TSPropertySignature",
					optional,
					readonly,
					typeAnnotation,
					key,
				},
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeMember(
		parser,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) ||
			parser.isRelational("<")
		) {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSCallSignatureDeclaration(
				parser,
			);
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._new,
			) &&
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$lookaheadTS(
				parser,
				___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsStartOfConstructSignature,
			)
		) {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSConstructSignatureDeclaration(
				parser,
			);
		}

		const start = parser.getPosition();
		const readonly = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$hasTSModifier(
			parser,
			["readonly"],
		);

		const idx = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseIndexSignature(
			parser,
			start,
		);
		if (idx) {
			return Object.assign({}, idx, {readonly});
		}

		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSPropertyOrMethodSignature(
			parser,
			start,
			readonly,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsStartOfConstructSignature(
		parser,
	) {
		parser.next();
		return (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) || parser.isRelational("<")
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeLiteral(
		parser,
	) {
		const start = parser.getPosition();
		const members = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSObjectTypeMembers(
			parser,
		);
		return parser.finishNode(
			start,
			{
				type: "TSTypeLiteral",
				members,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSObjectTypeMembers(
		parser,
	) {
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"ts object type members",
		);
		const members = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSList(
			parser,
			"TypeMembers",
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeMember,
		);
		parser.expectClosing(openContext);
		return members;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsStartOfMappedType(
		parser,
	) {
		parser.next();

		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.plusMin,
			)
		) {
			return parser.isContextual("readonly");
		}

		if (parser.isContextual("readonly")) {
			parser.next();
		}

		if (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			)
		) {
			return false;
		}

		parser.next();

		if (
			!___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsIdentifier(
				parser,
			)
		) {
			return false;
		}

		parser.next();

		return parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSMappedTypeParameter(
		parser,
	) {
		const start = parser.getPosition();
		const name = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifierName(
			parser,
		);
		const constraint = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsExpectThenParseType(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._in,
		);
		return parser.finishNode(
			start,
			{
				type: "TSTypeParameter",
				name,
				constraint,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$toPlusMin(
		val,
	) {
		const str = String(val);
		if (str === "+" || str === "-") {
			return str;
		} else {
			throw new Error("Expected +/-");
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSMappedType(
		parser,
	) {
		const start = parser.getPosition();

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"ts mapped type",
		);

		let readonly;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.plusMin,
			)
		) {
			readonly = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$toPlusMin(
				parser.state.tokenValue,
			);
			parser.next();
			parser.expectContextual("readonly");
		} else if (parser.eatContextual("readonly")) {
			readonly = true;
		}

		const paramOpenContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
			"ts mapped type parameter",
		);
		const typeParameter = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSMappedTypeParameter(
			parser,
		);
		parser.expectClosing(paramOpenContext);

		let optional;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.plusMin,
			)
		) {
			optional = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$toPlusMin(
				parser.state.tokenValue,
			);
			parser.next();
			parser.expect(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			);
		} else if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			)
		) {
			optional = true;
		}

		const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseType(
			parser,
		);
		parser.semicolon();
		parser.expectClosing(openContext);

		return parser.finishNode(
			start,
			{
				type: "TSMappedType",
				typeParameter,
				typeAnnotation,
				optional,
				readonly,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTupleType(
		parser,
	) {
		const start = parser.getPosition();
		const elementDefs = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSBracketedList(
			parser,
			"TupleElementTypes",
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTupleElementType,
			/* bracket */ true,
			/* skipFirstToken */ false,
		);

		// Validate the elementTypes to ensure:
		//   No mandatory elements may follow optional elements

		//   If there's a rest element, it must be at the end of the tuple
		let seenOptionalElement = false;
		const elementTypes = [];
		let rest;
		for (const {type, isRest} of elementDefs) {
			if (rest !== undefined) {
				// No elements should come after a rest, we should have already produced an error
				continue;
			}

			if (type.type === "TSOptionalType") {
				seenOptionalElement = true;
			} else if (seenOptionalElement && !isRest) {
				parser.addDiagnostic({
					loc: type.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_REQUIRED_FOLLOWS_OPTIONAL,
				});
			}

			if (isRest) {
				rest = type;
			} else {
				elementTypes.push(type);
			}
		}

		return parser.finishNode(
			start,
			{
				type: "TSTupleType",
				elementTypes,
				rest,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTupleElementType(
		parser,
	) {
		// parses `...TsType[]`
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
			)
		) {
			parser.next(); // skips ellipsis
			const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
				parser,
			);
			___R$project$rome$$romejs$js$parser$parser$lval_ts$hasCommaAfterRest(
				parser,
			);

			return {
				isRest: true,
				type: typeAnnotation,
			};
		}

		const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
			parser,
		);

		// Parses `TsType?`
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			)
		) {
			const start = parser.getLoc(typeAnnotation).start;
			return {
				isRest: false,
				type: parser.finishNode(
					start,
					{
						type: "TSOptionalType",
						typeAnnotation,
					},
				),
			};
		}

		return {
			isRest: false,
			type: typeAnnotation,
		};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSParenthesizedType(
		parser,
	) {
		const start = parser.getPosition();
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			"ts parenthesized type",
		);
		const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
			parser,
		);
		parser.expectClosing(openContext);
		return parser.finishNode(
			start,
			{
				type: "TSParenthesizedType",
				typeAnnotation,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSFunctionType(
		parser,
	) {
		const start = parser.getPosition();
		const {meta, typeAnnotation} = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSSignatureDeclarationMeta(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
		);

		if (typeAnnotation === undefined) {
			throw new Error(
				"Type annotation return type required as we passed tt.arrow above",
			);
		}

		return parser.finishNode(
			start,
			{
				type: "TSFunctionType",
				meta,
				typeAnnotation,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSConstructorType(
		parser,
	) {
		const start = parser.getPosition();
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._new,
		);

		const {meta, typeAnnotation} = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSSignatureDeclarationMeta(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
		);

		if (typeAnnotation === undefined) {
			throw new Error(
				"Type annotation return type required as we passed tt.arrow above",
			);
		}

		return parser.finishNode(
			start,
			{
				type: "TSConstructorType",
				meta,
				typeAnnotation,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTemplateLiteralType(
		parser,
	) {
		const templateNode = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseTemplate(
			parser,
			false,
		);

		if (templateNode.expressions.length > 0) {
			parser.addDiagnostic({
				loc: parser.getLoc(templateNode.expressions[0]),
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_TEMPLATE_LITERAL_WITH_SUBSTITUION,
			});
		}

		return {
			type: "TSTemplateLiteralTypeAnnotation",
			value: templateNode.quasis[0].raw,
			loc: templateNode.loc,
		};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSNonArrayType(
		parser,
	) {
		switch (parser.state.tokenType) {
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._void:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._null: {
				let type;
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._void,
					)
				) {
					type = "TSVoidKeywordTypeAnnotation";
				} else if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._null,
					)
				) {
					type = "TSNullKeywordTypeAnnotation";
				} else {
					type = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$keywordTypeFromName(
						String(parser.state.tokenValue),
					);
				}

				if (
					type !== undefined &&
					parser.lookaheadState().tokenType !==
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot
				) {
					const start = parser.getPosition();
					parser.next();
					return parser.finishNode(
						start,
						({
							type,
						}),
					);
				}
				return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeReference(
					parser,
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._true:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._false:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.plusMin:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeLiteralAnnotation(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._this: {
				const thisKeyword = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSThisTypeNode(
					parser,
				);
				if (parser.isContextual("is") && !parser.hasPrecedingLineBreak()) {
					return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSThisTypePredicate(
						parser,
						thisKeyword,
					);
				} else {
					return thisKeyword;
				}
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._typeof:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeQuery(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSImportType(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL:
				if (
					___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$lookaheadTS(
						parser,
						___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsStartOfMappedType,
					)
				) {
					return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSMappedType(
						parser,
					);
				} else {
					return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeLiteral(
						parser,
					);
				}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTupleType(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSParenthesizedType(
					parser,
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote:
				return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTemplateLiteralType(
					parser,
				);
		}

		parser.addDiagnostic({
			description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_UNKNOWN_NON_ARRAY_START,
		});
		parser.next();

		return parser.finishNode(
			parser.getPosition(),
			{
				type: "TSTypeReference",
				typeName: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toReferenceIdentifier(
					parser,
					parser.createUnknownIdentifier("ts non array type start"),
				),
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeLiteralAnnotation(
		parser,
	) {
		const start = parser.getPosition();

		switch (parser.state.tokenType) {
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string: {
				const value = String(parser.state.tokenValue);
				parser.next();
				return parser.finishNode(
					start,
					{
						type: "TSStringLiteralTypeAnnotation",
						value,
					},
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num: {
				const {tokenValue} = parser.state;
				if (
					!(tokenValue instanceof
					___R$project$rome$$romejs$js$parser$tokenizer$index_ts$NumberTokenValue)
				) {
					throw new Error("Expected NumberTokenValue");
				}

				const {value, format} = tokenValue;
				parser.next();
				return parser.finishNode(
					start,
					{
						type: "TSNumericLiteralTypeAnnotation",
						value,
						format,
					},
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._true:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._false: {
				const value = parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._true,
				);
				parser.next();
				return parser.finishNode(
					start,
					{
						type: "TSBooleanLiteralTypeAnnotation",
						value,
					},
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.plusMin: {
				const {tokenValue} = parser.state;
				if (tokenValue === "-") {
					parser.next();

					if (
						!parser.match(
							___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num,
						)
					) {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TYPE_NUMERIC_LITERAL_EXPECTED,
						});
						parser.next();
						return parser.finishNode(
							start,
							{
								type: "TSNumericLiteralTypeAnnotation",
								value: 0,
							},
						);
					}

					const {tokenValue} = parser.state;
					if (
						!(tokenValue instanceof
						___R$project$rome$$romejs$js$parser$tokenizer$index_ts$NumberTokenValue)
					) {
						throw new Error("Expected NumberTokenValue");
					}

					const {value, format} = tokenValue;
					parser.next();
					return parser.finishNode(
						start,
						{
							type: "TSNumericLiteralTypeAnnotation",
							value: -value,
							format,
						},
					);
				} else {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TYPE_NUMERIC_LITERAL_PLUS,
					});
					parser.next();

					if (
						!parser.match(
							___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num,
						)
					) {
						parser.addDiagnostic({
							description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TYPE_NUMERIC_LITERAL_EXPECTED,
						});
						parser.next();
						return parser.finishNode(
							start,
							{
								type: "TSNumericLiteralTypeAnnotation",
								value: 0,
							},
						);
					}

					return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeLiteralAnnotation(
						parser,
					);
				}
			}

			default:
				throw new Error(
					"Caller should have already validated the range of token types",
				);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSArrayTypeOrHigher(
		parser,
	) {
		let type = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSNonArrayType(
			parser,
		);

		while (
			!parser.hasPrecedingLineBreak() &&
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			)
		) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
				)
			) {
				const start = parser.getLoc(type).start;
				const elementType = type;
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
				);
				type = parser.finishNode(
					start,
					{
						type: "TSArrayType",
						elementType,
					},
				);
			} else {
				const start = parser.getLoc(type).start;
				const objectType = type;
				const indexType = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
					parser,
				);
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
				);
				type = parser.finishNode(
					start,
					{
						type: "TSIndexedAccessType",
						objectType,
						indexType,
					},
				);
			}
		}
		return type;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOperator(
		parser,
		operator,
	) {
		const start = parser.getPosition();
		parser.expectContextual(operator);

		const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOperatorOrHigher(
			parser,
		);

		const node = parser.finishNode(
			start,
			{
				type: "TSTypeOperator",
				typeAnnotation,
				operator,
			},
		);

		if (operator === "readonly") {
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckTypeAnnotationForReadOnly(
				parser,
				typeAnnotation,
			);
		}

		return node;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckTypeAnnotationForReadOnly(
		parser,
		node,
	) {
		switch (node.type) {
			case "TSTupleType":
			case "TSArrayType":
				return;

			default: {
				parser.addDiagnostic({
					loc: node.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_INVALID_READONLY_MODIFIER,
				});
				break;
			}
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSInferType(
		parser,
	) {
		const inferStart = parser.getPosition();
		parser.expectContextual("infer");

		const start = parser.getPosition();
		const name = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifierName(
			parser,
		);
		const typeParameter = parser.finishNode(
			start,
			{
				type: "TSTypeParameter",
				name,
			},
		);

		return parser.finishNode(
			inferStart,
			{
				type: "TSInferType",
				typeParameter,
			},
		);
	}

	const ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$TS_TYPE_OPERATORS = [
		"keyof",
		"unique",
		"readonly",
	];

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOperatorOrHigher(
		parser,
	) {
		let operator;

		for (const op of ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$TS_TYPE_OPERATORS) {
			if (parser.isContextual(op)) {
				operator = op;
				break;
			}
		}

		if (operator !== undefined) {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOperator(
				parser,
				operator,
			);
		} else if (parser.isContextual("infer")) {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSInferType(
				parser,
			);
		} else {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSArrayTypeOrHigher(
				parser,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSUnionOrIntersectionType(
		parser,
		kind,
		parseConstituentType,
		operator,
	) {
		parser.eat(operator);
		let type = parseConstituentType(parser);

		if (parser.match(operator)) {
			const types = [type];
			while (parser.eat(operator)) {
				types.push(parseConstituentType(parser));
			}

			const start = parser.getLoc(type).start;
			if (kind === "JSUnionTypeAnnotation") {
				type = parser.finishNode(
					start,
					{
						type: "TSUnionTypeAnnotation",
						types,
					},
				);
			} else if (kind === "TSIntersectionTypeAnnotation") {
				type = parser.finishNode(
					start,
					{
						type: "TSIntersectionTypeAnnotation",
						types,
					},
				);
			}
		}

		return type;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSIntersectionTypeAnnotationOrHigher(
		parser,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSUnionOrIntersectionType(
			parser,
			"TSIntersectionTypeAnnotation",
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOperatorOrHigher,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bitwiseAND,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseUnionTypeAnnotationOrHigher(
		parser,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSUnionOrIntersectionType(
			parser,
			"JSUnionTypeAnnotation",
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSIntersectionTypeAnnotationOrHigher,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bitwiseOR,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsStartOfFunctionType(
		parser,
	) {
		if (parser.isRelational("<")) {
			return true;
		}
		return (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) &&
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$lookaheadTS(
				parser,
				___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsUnambiguouslyStartOfFunctionType,
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsSkipParameterStart(
		parser,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._this,
			)
		) {
			parser.next();
			return true;
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			)
		) {
			let braceStackCounter = 1;
			parser.next();

			while (braceStackCounter > 0) {
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
					)
				) {
					braceStackCounter++;
				} else if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					)
				) {
					braceStackCounter--;
				}

				parser.next();
			}
			return true;
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
			)
		) {
			let braceStackCounter = 1;
			parser.next();

			while (braceStackCounter > 0) {
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
					)
				) {
					braceStackCounter++;
				} else if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
					)
				) {
					braceStackCounter--;
				}

				parser.next();
			}
			return true;
		}

		return false;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsUnambiguouslyStartOfFunctionType(
		parser,
	) {
		parser.next();
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
			)
		) {
			// ()
			// (...
			return true;
		}
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsSkipParameterStart(
				parser,
			)
		) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
				) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
				) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
				)
			) {
				// (xxx :
				// (xxx ,
				// (xxx ?
				// (xxx =
				return true;
			}
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
				)
			) {
				parser.next();
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
					)
				) {
					// (xxx ) =>
					return true;
				}
			}
		}
		return false;
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeOrTypePredicateAnnotation(
		parser,
		returnToken,
	) {
		let start = parser.getPosition();
		parser.pushScope("TYPE", true);
		parser.expect(returnToken);

		let hasAsserts = parser.eatContextual("asserts");
		let parameterName;
		let typePredicateVariable;
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsIdentifier(
				parser,
			)
		) {
			typePredicateVariable = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParse(
				parser,
				___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypePredicatePrefix,
			);
		}
		if (typePredicateVariable === undefined) {
			if (hasAsserts) {
				parameterName = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
					parser,
				);
				if (parameterName === undefined) {
					throw Error("Should have an identifier after asserts");
				}
			} else {
				parser.popScope("TYPE");
				return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
					parser,
					/* eatColon */ false,
					start,
				);
			}
		} else {
			parameterName = typePredicateVariable;
		}

		let type;
		if (typePredicateVariable) {
			type = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
				parser,
				/* eatColon */ false,
			);
			start = parser.getLoc(typePredicateVariable).start;
		}

		parser.popScope("TYPE");

		return parser.finishNode(
			start,
			{
				type: "TSTypePredicate",
				asserts: hasAsserts,
				parameterName,
				typeAnnotation: type,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseTypeAnnotation(
		parser,
	) {
		return parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
		)
			? ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
					parser,
				)
			: undefined;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseType(
		parser,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsEatThenParseType(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypePredicatePrefix(
		parser,
	) {
		const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
			parser,
		);
		if (parser.isContextual("is") && !parser.hasPrecedingLineBreak()) {
			parser.next();
			return id;
		} else {
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
		parser,
		eatColon = true,
		start = parser.getPosition(),
	) {
		parser.pushScope("TYPE", true);

		if (eatColon) {
			parser.expect(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			);
		}

		const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
			parser,
			start,
		);
		parser.popScope("TYPE");
		return typeAnnotation;
	}

	/** Be sure to be in a type context before calling parser. using `tsInType`.*/
	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
		parser,
		start = parser.getPosition(),
	) {
		parser.pushScope("TYPE", true);

		const type = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSNonConditionalType(
			parser,
		);
		if (
			parser.hasPrecedingLineBreak() ||
			!parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._extends,
			)
		) {
			parser.popScope("TYPE");
			return type;
		}

		const checkType = type;

		const extendsType = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSNonConditionalType(
			parser,
		);
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
		);

		const trueType = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
			parser,
		);
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
		);

		const falseType = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
			parser,
		);
		parser.popScope("TYPE");

		return parser.finishNode(
			start,
			{
				type: "TSConditionalType",
				checkType,
				extendsType,
				trueType,
				falseType,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSNonConditionalType(
		parser,
	) {
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsStartOfFunctionType(
				parser,
			)
		) {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSFunctionType(
				parser,
			);
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._new,
			)
		) {
			// As in `new () => Date`
			return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSConstructorType(
				parser,
			);
		}

		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseUnionTypeAnnotationOrHigher(
			parser,
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAssertion(
		parser,
	) {
		const start = parser.getPosition();
		const _const = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSNextParseConstantContext(
			parser,
		);
		const typeAnnotation =
			_const ||
			___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsNextThenParseType(
				parser,
			);
		parser.expectRelational(">");

		const expression = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeUnary(
			parser,
			"ts type assertion",
		);
		if (_const) {
			___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsCheckLiteralForConstantContext(
				parser,
				expression,
			);
		}

		return parser.finishNode(
			start,
			{
				type: "TSTypeAssertion",
				expression,
				typeAnnotation,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSHeritageClause(
		parser,
		descriptor,
	) {
		const originalStart = parser.state.startPos;
		const delimitedList = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSDelimitedList(
			parser,
			"HeritageClauseElement",
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExpressionWithTypeArguments,
		);

		if (delimitedList.length === 0) {
			parser.addDiagnostic({
				start: originalStart,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_EMPTY_LIST(
					descriptor,
				),
			});
		}

		return delimitedList;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExpressionWithTypeArguments(
		parser,
	) {
		const start = parser.getPosition();

		// Note: TS uses parseLeftHandSideExpressionOrHigher,

		// then has grammar errors later if it's not an EntityName.
		const expression = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEntityName(
			parser,
			/* allowReservedWords */ false,
		);

		let typeParameters;
		if (parser.isRelational("<")) {
			typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments(
				parser,
			);
		}

		return parser.finishNode(
			start,
			{
				type: "TSExpressionWithTypeArguments",
				expression,
				typeParameters,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSInterfaceDeclaration(
		parser,
		start,
	) {
		parser.pushScope("TYPE", true);
		const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
			parser,
		);
		const typeParameters = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryParseTSTypeParameters(
			parser,
		);

		let _extends;
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._extends,
			)
		) {
			_extends = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSHeritageClause(
				parser,
				"extends",
			);
		}

		const bodyStart = parser.getPosition();
		const bodyItems = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSObjectTypeMembers(
			parser,
		);
		const body = parser.finishNode(
			bodyStart,
			{
				type: "TSInterfaceBody",
				body: bodyItems,
			},
		);

		parser.popScope("TYPE");
		return parser.finishNode(
			start,
			{
				type: "TSInterfaceDeclaration",
				id,
				body,
				typeParameters,
				extends: _extends,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAlias(
		parser,
		start,
	) {
		const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
			parser,
		);
		const typeParameters = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryParseTSTypeParameters(
			parser,
		);
		const typeAnnotation = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsExpectThenParseType(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
		);
		parser.semicolon();
		return parser.finishNode(
			start,
			{
				type: "TSTypeAliasTypeAnnotation",
				id,
				typeParameters,
				right: typeAnnotation,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsInNoContext(
		parser,
		cb,
	) {
		const oldContext = parser.state.context;
		parser.state.context = [oldContext[0]];
		const res = cb(parser);
		parser.state.context = oldContext;
		return res;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsEatThenParseType(
		parser,
		token,
	) {
		if (parser.match(token)) {
			return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsNextThenParseType(
				parser,
			);
		} else {
			return undefined;
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsExpectThenParseType(
		parser,
		token,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsDoThenParseType(
			parser,
			() => {
				parser.expect(token);
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tsNextThenParseType(
		parser,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsDoThenParseType(
			parser,
			() => parser.next(),
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsDoThenParseType(
		parser,
		cb,
	) {
		cb();
		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType(
			parser,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEnumMember(
		parser,
	) {
		const start = parser.getPosition();
		// Computed property names are grammar errors in an enum, so accept just string literal or identifier.
		const id = parser.match(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
		)
			? ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
					parser,
				)
			: ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
					parser,
					/* liberal */ true,
				);

		let initializer;
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
			)
		) {
			initializer = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"ts enum member initializer",
			);
		}

		return parser.finishNode(
			start,
			{
				type: "TSEnumMember",
				initializer,
				id,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEnumDeclaration(
		parser,
		start,
		isConst,
	) {
		parser.addDiagnosticFilter({
			message: "enum is a reserved word",
			start,
		});

		const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
			parser,
		);

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"ts enum declaration",
		);

		const members = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSDelimitedList(
			parser,
			"EnumMembers",
			___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEnumMember,
		);
		parser.expectClosing(openContext);

		return parser.finishNode(
			start,
			{
				type: "TSEnumDeclaration",
				members,
				id,
				const: isConst,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleBlock(
		parser,
	) {
		const start = parser.getPosition();

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"ts module block",
		);

		// Inside of a module block is considered 'top-level', meaning it can have imports and exports.
		const {body} = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseBlockOrModuleBlockBody(
			parser,
			/* allowDirectives */ false,
			/* topLevel */ true,
			openContext,
		);
		return parser.finishNode(
			start,
			{
				type: "TSModuleBlock",
				body,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleOrNamespaceDeclaration(
		parser,
		start,
	) {
		const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
			parser,
		);

		let body;
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			)
		) {
			body = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleOrNamespaceDeclaration(
				parser,
				parser.getPosition(),
			);
		} else {
			body = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleBlock(
				parser,
			);
		}

		return parser.finishNode(
			start,
			{
				type: "TSModuleDeclaration",
				id,
				body,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAmbientExternalModuleDeclaration(
		parser,
		start,
	) {
		let global;
		let id;
		if (parser.isContextual("global")) {
			global = true;
			id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
				parser,
			);
		} else if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
			)
		) {
			id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
				parser,
			);
		} else {
			throw parser.unexpected();
		}

		let body;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			)
		) {
			body = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleBlock(
				parser,
			);
		} else {
			parser.semicolon();
		}

		return parser.finishNode(
			start,
			{
				type: "TSModuleDeclaration",
				id,
				global,
				body,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSImportEqualsDeclaration(
		parser,
		start,
		isExport = false,
	) {
		const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
			parser,
		);
		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
		);

		const moduleReference = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleReference(
			parser,
		);
		parser.semicolon();

		return parser.finishNode(
			start,
			{
				type: "TSImportEqualsDeclaration",
				id,
				moduleReference,
				isExport,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsExternalModuleReference(
		parser,
	) {
		return (
			parser.isContextual("require") &&
			parser.lookaheadState().tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleReference(
		parser,
	) {
		return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsIsExternalModuleReference(
			parser,
		)
			? ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExternalModuleReference(
					parser,
				)
			: ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEntityName(
					parser,
					/* allowReservedWords */ false,
				);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExternalModuleReference(
		parser,
	) {
		const start = parser.getPosition();
		parser.expectContextual("require");
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
			"ts external module reference",
		);

		let expression;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
			)
		) {
			expression = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
				parser,
			);
		} else {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_EXTERNAL_MODULE_REFERENCE_ARG_NOT_STRING,
			});

			// Skip as much of the next expression as we can
			___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionAtom(
				parser,
				"ts external module reference expression",
			);

			// Create a fake string literal
			expression = parser.finishNode(
				start,
				{
					type: "JSStringLiteral",
					value: "",
				},
			);
		}

		parser.expectClosing(openContext);

		return parser.finishNode(
			start,
			{
				type: "TSExternalModuleReference",
				expression,
			},
		);
	}

	// Utilities


	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$lookaheadTS(
		parser,
		f,
	) {
		const state = parser.cloneState();
		const res = f(parser);
		parser.state = state;
		return res;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParse(
		parser,
		f,
	) {
		const state = parser.cloneState();
		const result = f(parser);
		if (result === undefined || result === false) {
			parser.state = state;
			return undefined;
		} else {
			return result;
		}
	}



	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSDeclare(
		parser,
		start,
	) {
		let starttype = parser.state.tokenType;
		let kind;
		if (parser.isContextual("let")) {
			starttype = ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._var;
			kind = "let";
		}

		if (
			starttype ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const,
			) &&
			parser.isLookaheadContextual("enum")
		) {
			// `const enum = 0;` not allowed because 'enum' is a strict mode reserved word.
			parser.expect(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const,
			);
			parser.expectContextual("enum");
			return Object.assign(
				{declare: true},
				___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEnumDeclaration(
					parser,
					start,
					/* isConst */ true,
				),
			);
		}

		switch (starttype) {
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function:
				return Object.assign(
					{},
					___R$project$rome$$romejs$js$parser$parser$statement_ts$parseFunctionDeclaration(
						parser,
						start,
						false,
					),
					{declare: true},
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._class:
				return Object.assign(
					{},
					___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClassDeclaration(
						parser,
						start,
					),
					{declare: true},
				);

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const:
			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._var: {
				kind =
					kind === undefined
						? ___R$project$rome$$romejs$js$parser$parser$statement_ts$assertVarKind(
								String(parser.state.tokenValue),
							)
						: kind;
				return Object.assign(
					{declare: true},
					___R$project$rome$$romejs$js$parser$parser$statement_ts$parseVarStatement(
						parser,
						start,
						kind,
					),
				);
			}

			case ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name: {
				const value = String(parser.state.tokenValue);

				if (value === "global") {
					return Object.assign(
						{declare: true},
						___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAmbientExternalModuleDeclaration(
							parser,
							start,
						),
					);
				} else if (
					___R$project$rome$$romejs$js$parser$parser$typescript_ts$isTSDeclarationStart(
						parser,
					)
				) {
					const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseReferenceIdentifier(
						parser,
					);
					const decl = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeExpressionStatement(
						parser,
						start,
						id,
					);

					if (decl === undefined) {
						throw new Error("Should have returned a node");
					}

					if (
						decl.type !== "TSInterfaceDeclaration" &&
						decl.type !== "TSTypeAliasTypeAnnotation" &&
						decl.type !== "TSEnumDeclaration" &&
						decl.type !== "JSFunctionDeclaration" &&
						decl.type !== "JSClassDeclaration" &&
						decl.type !== "JSVariableDeclarationStatement" &&
						decl.type !== "TSDeclareFunction" &&
						decl.type !== "TSModuleDeclaration"
					) {
						throw new Error(
							"Encountered a non-TS declare node when calling parseTSTypeExpressionStatement",
						);
					}

					return Object.assign({}, decl, {declare: true});
				}
			}
		}

		parser.addDiagnostic({
			description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.TS_UNKNOWN_DECLARE_START,
		});

		// Fake node
		const loc = parser.finishLoc(start);
		return {
			type: "JSVariableDeclarationStatement",
			loc,
			declaration: {
				type: "JSVariableDeclaration",
				loc,
				kind: "var",
				declarations: [
					{
						type: "JSVariableDeclarator",
						loc,
						id: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
							parser,
							parser.createUnknownIdentifier("typescript declare start", start),
						),
						init: undefined,
					},
				],
			},
		};
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeExpressionStatement(
		parser,
		start,
		expr,
	) {
		// TODO TypeScript does not like parser.isLineTerminator()
		if (expr.type !== "JSReferenceIdentifier") {
			return undefined;
		}

		if (parser.hasPrecedingLineBreak()) {
			return undefined;
		}

		switch (expr.name) {
			case "declare":
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._class,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._var,
					) ||
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._export,
					)
				) {
					return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSDeclare(
						parser,
						start,
					);
				} else {
					break;
				}

			case "interface": {
				parser.addDiagnosticFilter({
					message: "interface is a reserved word",
					start,
				});

				return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSInterfaceDeclaration(
					parser,
					start,
				);
			}

			case "type":
				// TODO perform some lookahead to make sure we want to do this
				return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAlias(
					parser,
					start,
				);

			case "abstract":
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._class,
					)
				) {
					___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$addTSDiagnostic(
						parser,
						"abstract class",
						start,
					);
					return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAbstractClass(
						parser,
						start,
					);
				} else {
					break;
				}

			case "enum": {
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
					)
				) {
					___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$addTSDiagnostic(
						parser,
						"enum declaration",
						start,
					);
					return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSEnumDeclaration(
						parser,
						start,
						/* isConst */ false,
					);
				} else {
					break;
				}
			}

			case "module":
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
					)
				) {
					___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$addTSDiagnostic(
						parser,
						"ambient external module declaration",
						start,
					);
					return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAmbientExternalModuleDeclaration(
						parser,
						start,
					);
				} else if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
					) &&
					!parser.isLineTerminator()
				) {
					___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$addTSDiagnostic(
						parser,
						"module or namespace declaration",
						start,
					);
					return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleOrNamespaceDeclaration(
						parser,
						start,
					);
				} else {
					break;
				}

			case "namespace": {
				if (
					!parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
					)
				) {
					return undefined;
				}

				___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$addTSDiagnostic(
					parser,
					"module or namespace declaration",
					start,
				);
				return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleOrNamespaceDeclaration(
					parser,
					start,
				);
			}

			// TODO abstract this into typescript.js
			case "global":
				// `global { }` (with no `declare`) may appear inside an ambient module declaration.
				// Would like to use parseTSAmbientExternalModuleDeclaration here, but already ran past 'global'.
				if (
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
					)
				) {
					___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$addTSDiagnostic(
						parser,
						"module declaration",
						start,
					);
					const global = true;
					const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
						parser,
						expr,
					);
					const body = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModuleBlock(
						parser,
					);
					return parser.finishNode(
						start,
						{
							type: "TSModuleDeclaration",
							global,
							id,
							body,
						},
					);
				}
		}

		return undefined;
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAbstractClass(
		parser,
		start,
	) {
		return Object.assign(
			{},
			___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClassDeclaration(
				parser,
				start,
			),
			{abstract: true},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExportDefaultAbstractClass(
		parser,
		start,
	) {
		return Object.assign(
			{},
			___R$project$rome$$romejs$js$parser$parser$classes_ts$parseExportDefaultClassDeclaration(
				parser,
				start,
			),
			{abstract: true},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeArguments(
		parser,
	) {
		const start = parser.getPosition();
		parser.pushScope("TYPE", true);

		const params = ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$tsInNoContext(
			parser,
			() => {
				parser.expectRelational("<");
				return ___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSDelimitedList(
					parser,
					"TypeParametersOrArguments",
					___R$$priv$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSType,
				);
			},
		);

		// This reads the next token after the `>` too, so do parser.in the enclosing context.

		// But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false
		parser.state.exprAllowed = false;
		parser.popScope("TYPE");
		parser.expectRelational(">");

		return parser.finishNode(
			start,
			{
				type: "TSTypeParameterInstantiation",
				params,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$isTSDeclarationStart(
		parser,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			)
		) {
			switch (parser.state.tokenValue) {
				case "abstract":
				case "declare":
				case "enum":
				case "interface":
				case "module":
				case "namespace":
				case "type":
					return true;
			}
		}

		return false;
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAccessModifier(
		parser,
	) {
		return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModifier(
			parser,
			["public", "protected", "private"],
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$isTSAbstractClass(
		parser,
	) {
		return (
			parser.isContextual("abstract") &&
			parser.lookaheadState().tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._class
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExport(
		parser,
		start,
	) {
		if (!parser.isSyntaxEnabled("ts")) {
			return undefined;
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import,
			)
		) {
			// `export const A =B;`
			parser.expect(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._import,
			);
			return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSImportEqualsDeclaration(
				parser,
				start,
				/* isExport */ true,
			);
		}

		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
			)
		) {
			// `export = x;`
			const expression = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpression(
				parser,
				"ts export assignment",
			);
			parser.semicolon();
			return parser.finishNode(
				start,
				{
					type: "TSExportAssignment",
					expression,
				},
			);
		}

		if (parser.eatContextual("as")) {
			// `export as namespace A;`
			// See `parseNamespaceExportDeclaration` in TypeScript's own parser
			parser.expectContextual("namespace");
			const id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
			);
			parser.semicolon();
			return parser.finishNode(
				start,
				{
					type: "TSNamespaceExportDeclaration",
					id,
				},
			);
		}

		return undefined;
	}


  // project-rome/@romejs/js-parser/parser/classes.ts
const ___R$project$rome$$romejs$js$parser$parser$classes_ts = {
		parseClassExpression: ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClassExpression,
		parseExportDefaultClassDeclaration: ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseExportDefaultClassDeclaration,
		parseClassDeclaration: ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClassDeclaration,
		parseClass: ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClass,
	};
	function ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClassExpression(
		parser,
		start,
	) {
		return parser.finalizeNode(
			Object.assign(
				{},
				___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClass(
					parser,
					start,
					true,
				),
				{type: "JSClassExpression"},
			),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseExportDefaultClassDeclaration(
		parser,
		start,
	) {
		let ___R$ = ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClass(
			parser,
			start,
			true,
		);
		let shape = Object.assign({}, ___R$);
		delete shape.id;
		let {id} = ___R$;
		if (id === undefined) {
			id = {
				type: "JSBindingIdentifier",
				name: "*default*",
				// Does this `loc` make sense?
				loc: shape.loc,
			};
		}

		return parser.finalizeNode(
			Object.assign({}, shape, {type: "JSClassDeclaration", id}),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClassDeclaration(
		parser,
		start,
	) {
		const ___R$1 = ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClass(
			parser,
			start,
			false,
		);
		const shape = Object.assign({}, ___R$1);
		delete shape.id;
		const {id} = ___R$1;
		if (id === undefined) {
			throw new Error("Expected id");
		}

		return parser.finalizeNode(
			Object.assign({}, shape, {type: "JSClassDeclaration", id}),
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseClass(
		parser,
		start,
		optionalId,
	) {
		parser.pushScope("METHOD", false);
		parser.pushScope("STRICT", true);

		parser.next();
		const {id, typeParameters} = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassId(
			parser,
			optionalId,
		);
		const {superClass, superTypeParameters, implemented} = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassSuper(
			parser,
		);

		parser.pushScope("CLASS", superClass === undefined ? "normal" : "derived");

		const bodyStart = parser.getPosition();
		const body = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassBody(
			parser,
		);

		parser.popScope("CLASS");
		parser.popScope("STRICT");
		parser.popScope("METHOD");

		// We have two finishNodes here to consume the innerComments inside of the body
		// This is since in the Rome AST, we don't have a ClassBody node, so the comment
		// algorithm thinks that the JSClassHead location is too broad, and thinks a different
		// node should consume them.
		const meta = parser.finishNode(
			start,
			parser.finishNode(
				bodyStart,
				{
					type: "JSClassHead",
					body,
					typeParameters,
					superClass,
					superTypeParameters,
					implements: implemented,
				},
			),
		);

		return {
			loc: parser.finishLoc(start),
			id,
			meta,
		};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isClassProperty(
		parser,
	) {
		return (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bang,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isClassMethod(
		parser,
	) {
		return (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
			) || parser.isRelational("<")
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isNonstaticConstructor(
		parser,
		key,
		meta,
	) {
		// Class property
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			return false;
		}

		// Static
		if (meta.static) {
			return false;
		}

		if (
			key.type === "JSStaticPropertyKey" &&
			key.value.type === "JSIdentifier" &&
			key.value.name === "constructor"
		) {
			return true;
		}

		if (
			key.value.type === "JSStringLiteral" &&
			key.value.value === "constructor"
		) {
			return true;
		}

		return false;
	}



	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassBody(
		parser,
	) {
		// class bodies are implicitly strict
		parser.pushScope("STRICT", true);
		parser.state.classLevel = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
			parser.state.classLevel,
		);

		const state = {hadConstructor: false};

		const body = [];

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"class body",
		);

		while (true) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				)
			) {
				break;
			}

			if (
				parser.eat(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
				)
			) {
				continue;
			}

			const member = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMember(
				parser,
				state,
			);
			if (member !== undefined) {
				body.push(member);
			}
		}

		parser.expectClosing(openContext);

		parser.state.classLevel = ___R$project$rome$$romejs$ob1$index_ts$ob1Dec(
			parser.state.classLevel,
		);
		parser.popScope("STRICT");

		return body;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMember(
		parser,
		state,
	) {
		const start = parser.getPosition();
		const escapePosition = parser.state.escapePosition;

		let accessibility;
		if (parser.isSyntaxEnabled("ts")) {
			accessibility = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSAccessModifier(
				parser,
			);
		}

		let isStatic = false;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			) &&
			parser.state.tokenValue === "static"
		) {
			const keyId = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				true,
			); // eats 'static'
			const key = {
				type: "JSStaticPropertyKey",
				value: keyId,
				loc: keyId.loc,
			};

			const meta = parser.finishNode(
				start,
				{
					type: "JSClassPropertyMeta",
					static: false,
					typeAnnotation: undefined,
					accessibility,
					optional: false,
					abstract: false,
					readonly: false,
				},
			);

			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isClassMethod(
					parser,
				)
			) {
				// A method named 'static'
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMethod(
					parser,
					{
						start,
						meta,
						key,
						kind: "method",
						isStatic: false,
						isAsync: false,
						isGenerator: false,
						isConstructor: false,
					},
				);
			}

			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isClassProperty(
					parser,
				)
			) {
				// A property named 'static'
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassProperty(
					parser,
					start,
					key,
					meta,
				);
			}

			if (escapePosition !== undefined) {
				parser.addDiagnostic({
					index: escapePosition,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ESCAPE_SEQUENCE_IN_WORD(
						"static",
					),
				});
			}

			// Otherwise something static
			isStatic = true;
		}

		return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMemberWithIsStatic(
			parser,
			start,
			state,
			isStatic,
			accessibility,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMemberWithIsStatic(
		parser,
		start,
		state,
		isStatic,
		accessibility,
	) {
		let abstract = false;
		let readonly = false;

		const mod = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSModifier(
			parser,
			["abstract", "readonly"],
		);
		switch (mod) {
			case "readonly": {
				readonly = true;
				abstract = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$hasTSModifier(
					parser,
					["abstract"],
				);
				break;
			}

			case "abstract": {
				abstract = true;
				readonly = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$hasTSModifier(
					parser,
					["readonly"],
				);
				break;
			}
		}

		const nameOpts = {
			start,
			static: isStatic,
			accessibility,
			readonly,
			abstract,
		};

		if (!abstract && !isStatic && accessibility === undefined) {
			const indexSignature = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$tryTSParseIndexSignature(
				parser,
				start,
			);
			if (indexSignature) {
				return Object.assign({}, indexSignature, {readonly});
			}
		}

		// Must be a property (if not an index signature).
		if (readonly) {
			const {key, meta} = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPropertyMeta(
				parser,
				nameOpts,
			);
			if (key.value.type === "JSPrivateName") {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateProperty(
					parser,
					start,
					key.value,
					meta,
				);
			} else {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$pushClassProperty(
					parser,
					start,
					key,
					meta,
				);
			}
		}

		// Generator methods
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			)
		) {
			const {meta, key} = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPropertyMeta(
				parser,
				nameOpts,
			);

			if (key.value.type === "JSPrivateName") {
				// Private generator method
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateMethod(
					parser,
					{
						start,
						key: key.value,
						meta,
						isGenerator: true,
						isAsync: false,
						kind: "method",
					},
				);
			}

			if (
				___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isNonstaticConstructor(
					parser,
					key,
					meta,
				)
			) {
				parser.addDiagnostic({
					loc: key.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.GENERATOR_CLASS_CONSTRUCTOR,
				});
			}

			return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMethod(
				parser,
				{
					start,
					key,
					meta,
					kind: "method",
					isStatic: false,
					isGenerator: true,
					isAsync: false,
					isConstructor: false,
				},
			);
		}

		const escapePosition = parser.state.escapePosition;
		const {meta, key} = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPropertyMeta(
			parser,
			nameOpts,
		);

		// Regular method
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isClassMethod(
				parser,
			)
		) {
			// Private method
			if (key.value.type === "JSPrivateName") {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateMethod(
					parser,
					{
						start,
						key: key.value,
						meta,
						isGenerator: false,
						isAsync: false,
						kind: "method",
					},
				);
			}

			const isConstructor = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isNonstaticConstructor(
				parser,
				key,
				meta,
			);

			let kind = "method";
			if (isConstructor) {
				kind = "constructor";

				// TypeScript allows multiple overloaded constructor declarations
				if (state.hadConstructor && !parser.isSyntaxEnabled("ts")) {
					parser.addDiagnostic({
						loc: key.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DUPLICATE_CLASS_CONSTRUCTOR,
					});
				}
				state.hadConstructor = true;
			}

			return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMethod(
				parser,
				{
					start,
					key,
					meta,
					kind,
					isStatic,
					isGenerator: false,
					isAsync: false,
					isConstructor,
				},
			);
		}

		// Class property
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isClassProperty(
				parser,
			)
		) {
			if (key.value.type === "JSPrivateName") {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateProperty(
					parser,
					start,
					key.value,
					meta,
				);
			} else {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$pushClassProperty(
					parser,
					start,
					key,
					meta,
				);
			}
		}

		// Async method
		if (
			key.value.type === "JSIdentifier" &&
			key.value.name === "async" &&
			!parser.isLineTerminator()
		) {
			parser.banUnicodeEscape(escapePosition, "async");

			// an async method
			const isGenerator = parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			);

			// The so-called parsed name would have been "async": get the real name.
			const {meta, key} = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPropertyMeta(
				parser,
				nameOpts,
			);

			if (key.value.type === "JSPrivateName") {
				// private async method
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateMethod(
					parser,
					{
						start,
						key: key.value,
						meta,
						isGenerator,
						isAsync: true,
						kind: "method",
					},
				);
			} else {
				const method = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMethod(
					parser,
					{
						start,
						key,
						meta,
						kind: "method",
						isStatic,
						isGenerator,
						isAsync: true,
						isConstructor: false,
					},
				);

				if (
					___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isNonstaticConstructor(
						parser,
						key,
						meta,
					)
				) {
					parser.addDiagnostic({
						loc: key.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ASYNC_CLASS_CONSTRUCTOR,
					});
				}

				return method;
			}
		}

		// Getter/setter method
		if (
			key.value.type === "JSIdentifier" &&
			(key.value.name === "get" || key.value.name === "set") &&
			!(parser.isLineTerminator() &&
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			))
		) {
			// `get\n*` is an uninitialized property named 'get' followed by a generator.
			// a getter or setter
			const kind = key.value.name;
			parser.banUnicodeEscape(escapePosition, kind);

			// The so-called parsed name would have been "get/set": get the real name.
			const {meta, key: methodKey} = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPropertyMeta(
				parser,
				nameOpts,
			);

			if (methodKey.value.type === "JSPrivateName") {
				// private getter/setter
				const method = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateMethod(
					parser,
					{
						start,
						key: methodKey.value,
						meta,
						isGenerator: false,
						isAsync: false,
						kind,
					},
				);
				___R$project$rome$$romejs$js$parser$parser$expression_ts$checkGetterSetterParamCount(
					parser,
					method,
					method.kind,
				);
				return method;
			} else {
				const method = ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMethod(
					parser,
					{
						start,
						key: methodKey,
						meta,
						kind,
						isStatic: false,
						isGenerator: false,
						isAsync: false,
						isConstructor: false,
					},
				);

				if (
					___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isNonstaticConstructor(
						parser,
						key,
						meta,
					)
				) {
					parser.addDiagnostic({
						loc: methodKey.loc,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.GET_SET_CLASS_CONSTRUCTOR,
					});
				}

				___R$project$rome$$romejs$js$parser$parser$expression_ts$checkGetterSetterParamCount(
					parser,
					method,
					method.kind,
				);
				return method;
			}
		}

		if (parser.isLineTerminator()) {
			// an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)
			if (key.value.type === "JSPrivateName") {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateProperty(
					parser,
					start,
					key.value,
					meta,
				);
			} else {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$pushClassProperty(
					parser,
					start,
					key,
					meta,
				);
			}
		}

		parser.addDiagnostic({
			description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNKNOWN_CLASS_PROPERTY_START,
		});
		return undefined;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPropertyMeta(
		parser,
		opts,
	) {
		let typeAnnotation;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
				parser,
				true,
			);
		}

		const key = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseObjectPropertyKey(
			parser,
		);

		if (
			key.type === "JSStaticPropertyKey" &&
			opts.static === true &&
			key.value.type === "JSIdentifier" &&
			key.value.name === "prototype"
		) {
			parser.addDiagnostic({
				loc: key.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.CLASS_STATIC_PROTOTYPE_PROPERTY,
			});
		}

		if (
			key.value.type === "JSPrivateName" &&
			key.value.id.name === "constructor"
		) {
			parser.addDiagnostic({
				loc: key.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.CLASS_PRIVATE_FIELD_NAMED_CONSTRUCTOR,
			});
		}

		let optional = false;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			)
		) {
			optional = true;
			parser.expectSyntaxEnabled("ts");
			parser.next();
		}

		return {
			key,
			meta: parser.finishNode(
				opts.start,
				Object.assign(
					{type: "JSClassPropertyMeta", typeAnnotation, optional},
					opts,
				),
			),
		};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$pushClassProperty(
		parser,
		start,
		key,
		meta,
	) {
		// This only affects properties, not methods.
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$isNonstaticConstructor(
				parser,
				key,
				meta,
			)
		) {
			parser.addDiagnostic({
				loc: key.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.CLASS_PROPERTY_NAME_CONSTRUCTOR,
			});
		}

		return ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassProperty(
			parser,
			start,
			key,
			meta,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassMethod(
		parser,
		opts,
	) {
		const {start, key, meta, kind, isGenerator, isAsync, isConstructor} = opts;

		const typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeParameters(
			parser,
		);

		const {head, body} = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMethod(
			parser,
			{
				kind,
				isClass: true,
				isGenerator,
				isAsync,
				isConstructor,
			},
		);

		const method = {
			head: Object.assign({}, head, {typeParameters}),
			loc: parser.finishLoc(start),
			kind,
			key,
			meta,
		};

		if (body === undefined) {
			return parser.finalizeNode(
				Object.assign({}, method, {type: "TSDeclareMethod", body: undefined}),
			);
		} else {
			if (body.type !== "JSBlockStatement") {
				throw new Error("Expected JSBlockStatement body");
			}

			if (key.value.type === "JSPrivateName") {
				throw new Error("Expected to hit other private methods instead");
			}

			return parser.finalizeNode(
				Object.assign({}, method, {body, type: "JSClassMethod"}),
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateMethod(
		parser,
		opts,
	) {
		const {start, key, meta, isGenerator, isAsync, kind} = opts;

		const typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeParameters(
			parser,
		);
		const method = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMethod(
			parser,
			{
				kind,
				isClass: true,
				isGenerator,
				isAsync,
				isConstructor: false,
			},
		);

		const {body} = method;
		if (body === undefined || body.type !== "JSBlockStatement") {
			throw new Error("Expected body");
		}

		return parser.finishNode(
			start,
			Object.assign(
				{},
				method,
				{
					body,
					meta,
					key,
					kind,
					type: "JSClassPrivateMethod",
					head: Object.assign({}, method.head, {typeParameters}),
				},
			),
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassPrivateProperty(
		parser,
		start,
		key,
		meta,
	) {
		parser.pushScope("CLASS_PROPERTY", true);

		let typeAnnotation;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
				parser,
				true,
			);
		}

		const value = parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
		)
			? ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
					parser,
					"class private property value",
				)
			: undefined;
		parser.semicolon();
		parser.popScope("CLASS_PROPERTY");

		return parser.finishNode(
			start,
			{
				meta,
				key,
				type: "JSClassPrivateProperty",
				value,
				typeAnnotation,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassProperty(
		parser,
		start,
		key,
		meta,
	) {
		// TODO maybe parsing should be abstracted for private class properties too?
		let definite;
		if (
			!meta.optional &&
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bang,
			)
		) {
			definite = true;
			parser.expectSyntaxEnabled("ts");
		}

		let typeAnnotation;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
			)
		) {
			typeAnnotation = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAnnotation(
				parser,
				true,
			);
		}

		parser.pushScope("CLASS_PROPERTY", true);

		let value;
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq,
			)
		) {
			parser.next();
			value = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
				parser,
				"class property value",
			);
		}
		parser.semicolon();

		parser.popScope("CLASS_PROPERTY");

		if (key.value.type === "JSPrivateName") {
			throw new Error(
				"PrivateName encountered in regular parseClassProperty, expects method is parsePrivateClassProperty",
			);
		}

		return parser.finishNode(
			start,
			{
				meta,
				key,
				type: "JSClassProperty",
				definite,
				typeAnnotation,
				value,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassId(
		parser,
		optionalId,
	) {
		let idAllowed = true;

		// Allow `class implements Foo {}` in class expressions
		if (optionalId === true && parser.isContextual("implements")) {
			idAllowed = false;
		}

		let id;
		if (idAllowed) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
				)
			) {
				id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
					parser,
				);
			} else if (!optionalId) {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.REQUIRED_CLASS_NAME,
				});
				id = ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
					parser,
					parser.createUnknownIdentifier("required class name"),
				);
			}
		}

		const typeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeParameters(
			parser,
		);
		return {id, typeParameters};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$classes_ts$parseClassSuper(
		parser,
	) {
		let superClass = parser.eat(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._extends,
		)
			? ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionWithPossibleSubscripts(
					parser,
					"class heritage",
				)
			: undefined;
		let superTypeParameters;

		if (superClass !== undefined) {
			superTypeParameters = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$maybeParseTSTypeArguments(
				parser,
			);
		}

		let implemented;
		if (parser.isContextual("implements")) {
			parser.next();
			implemented = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSHeritageClause(
				parser,
				"implements",
			);
		}

		return {superClass, superTypeParameters, implemented};
	}


  // project-rome/@romejs/js-parser/parser/modules.ts
const ___R$project$rome$$romejs$js$parser$parser$modules_ts = {
		parseExport: ___R$project$rome$$romejs$js$parser$parser$modules_ts$parseExport,
		parseImport: ___R$project$rome$$romejs$js$parser$parser$modules_ts$parseImport,
		isMaybeDefaultImport: ___R$project$rome$$romejs$js$parser$parser$modules_ts$isMaybeDefaultImport,
		hasTypeImportKind: ___R$project$rome$$romejs$js$parser$parser$modules_ts$hasTypeImportKind,
	};


	function ___R$project$rome$$romejs$js$parser$parser$modules_ts$parseExport(
		parser,
		start,
	) {
		const tsNode = ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExport(
			parser,
			start,
		);
		if (tsNode !== undefined) {
			return tsNode;
		}

		let exportKind = "value";
		let declaration;
		let localSpecifiers;

		// export * from '...'';
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$shouldParseExportStar(
				parser,
			)
		) {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportStar(
				parser,
				start,
			);
		} else if (
			___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$isExportDefaultSpecifier(
				parser,
			)
		) {
			const defStart = parser.getPosition();
			const defExported = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				true,
			);

			let namedSpecifiers = [];
			let defaultSpecifier = parser.finishNode(
				defStart,
				{
					type: "JSExportDefaultSpecifier",
					exported: defExported,
				},
			);
			let namespaceSpecifier;

			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				) &&
				parser.lookaheadState().tokenType ===
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star
			) {
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				);
				const specifierStart = parser.getPosition();
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
				);
				parser.expectContextual("as");
				const exported = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
					parser,
				);
				namespaceSpecifier = parser.finishNode(
					specifierStart,
					{
						type: "JSExportNamespaceSpecifier",
						exported,
					},
				);
			} else {
				namedSpecifiers = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportLocalSpecifiersMaybe(
					parser,
				);
			}

			const source = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportFromExpect(
				parser,
			);
			return ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$createExportExternalDeclaration(
				parser,
				start,
				defaultSpecifier,
				namespaceSpecifier,
				namedSpecifiers,
				source,
			);
		} else if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._default,
			)
		) {
			// export default ...
			const declaration = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportDefaultExpression(
				parser,
			);
			___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkExport(
				parser,
				{
					specifiers: localSpecifiers,
					declaration,
					isDefault: true,
				},
			);

			const node = parser.finishNode(
				start,
				{
					type: "JSExportDefaultDeclaration",
					declaration,
				},
			);
			return node;
		} else if (
			___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$shouldParseExportDeclaration(
				parser,
			)
		) {
			let source;
			({
				declaration,
				source,
				localSpecifiers,
				exportKind,
			} = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportDeclaration(
				parser,
			));

			if (source !== undefined) {
				if (declaration !== undefined) {
					throw new Error(
						"When there's a source we don't also expect a declaration",
					);
				}

				return ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$createExportExternalDeclaration(
					parser,
					start,
					undefined,
					undefined,
					localSpecifiers === undefined ? [] : localSpecifiers,
					source,
					exportKind,
				);
			}
		} else if (
			parser.isContextual("async") &&
			!___R$project$rome$$romejs$js$parser$parser$statement_ts$isAsyncFunctionDeclarationStart(
				parser,
			)
		) {
			const next = parser.lookaheadState();

			parser.addDiagnostic({
				start: next.startPos,
				end: next.endPos,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPORT_ASYNC_NO_FUNCTION_KEYWORD,
			});
			declaration = undefined;
			localSpecifiers = [];
		} else {
			// export { x, y as z } [from '...']';
			localSpecifiers = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportSpecifiers(
				parser,
			);

			const source = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportFrom(
				parser,
				false,
			);
			if (source !== undefined) {
				return ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$createExportExternalDeclaration(
					parser,
					start,
					undefined,
					undefined,
					localSpecifiers,
					source,
				);
			}
		}

		___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkExport(
			parser,
			{
				specifiers: localSpecifiers,
				declaration,
				isDefault: false,
			},
		);

		if (declaration !== undefined) {
			if (
				declaration.type !== "JSVariableDeclarationStatement" &&
				declaration.type !== "JSClassDeclaration" &&
				declaration.type !== "JSFunctionDeclaration" &&
				declaration.type !== "TSModuleDeclaration" &&
				declaration.type !== "TSEnumDeclaration" &&
				declaration.type !== "TSTypeAliasTypeAnnotation" &&
				declaration.type !== "TSInterfaceDeclaration" &&
				declaration.type !== "TSDeclareFunction"
			) {
				parser.addDiagnostic({
					loc: declaration.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_EXPORT_DECLARATION,
				});
				return declaration;
			}
		}

		const node = parser.finishNode(
			start,
			{
				type: "JSExportLocalDeclaration",
				exportKind,
				specifiers: localSpecifiers,
				declaration,
			},
		);
		return node;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$createExportExternalDeclaration(
		parser,
		start,
		defaultSpecifier,
		namespaceSpecifier,
		namedSpecifiers,
		source,
		exportKind,
	) {
		___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkExport(
			parser,
			{
				specifiers: [defaultSpecifier, namespaceSpecifier, ...namedSpecifiers],
				declaration: undefined,
				isDefault: false,
				localIsExternal: true,
			},
		);

		const node = parser.finishNode(
			start,
			{
				type: "JSExportExternalDeclaration",
				exportKind,
				source,
				namedSpecifiers: [],
				defaultSpecifier,
				namespaceSpecifier,
			},
		);

		// We convert the specifiers after we've finished the JSExportExternalDeclaration node
		// as the comment attachment logic may mess with the specifiers and so we need to
		// clone them after
		return Object.assign(
			{},
			node,
			{
				namedSpecifiers: ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$convertLocalToExternalSpecifiers(
					parser,
					namedSpecifiers,
				),
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$convertLocalToExternalSpecifiers(
		parser,
		specifiers = [],
	) {
		return specifiers.map((specifier) => {
			return Object.assign(
				{},
				specifier,
				{
					type: "JSExportExternalSpecifier",
					local: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toIdentifier(
						parser,
						specifier.local,
					),
				},
			);
		});
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportDefaultExpression(
		parser,
	) {
		if (parser.isSyntaxEnabled("ts")) {
			if (
				___R$project$rome$$romejs$js$parser$parser$typescript_ts$isTSAbstractClass(
					parser,
				)
			) {
				const start = parser.getPosition();
				parser.next(); // Skip 'abstract'
				return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSExportDefaultAbstractClass(
					parser,
					start,
				);
			}

			if (parser.state.tokenValue === "interface" && !parser.isLineTerminator()) {
				const start = parser.getPosition();
				parser.next();
				return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSInterfaceDeclaration(
					parser,
					start,
				);
			}
		}

		const start = parser.getPosition();
		const isAsync = ___R$project$rome$$romejs$js$parser$parser$statement_ts$isAsyncFunctionDeclarationStart(
			parser,
		);
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function,
			) ||
			isAsync
		) {
			if (isAsync) {
				parser.eatContextual("async");
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._function,
				);
			}

			return ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseExportDefaultFunctionDeclaration(
				parser,
				start,
				isAsync,
			);
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._class,
			)
		) {
			return ___R$project$rome$$romejs$js$parser$parser$classes_ts$parseExportDefaultClassDeclaration(
				parser,
				start,
			);
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._var,
			) ||
			___R$project$rome$$romejs$js$parser$parser$statement_ts$isLetStart(parser)
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_EXPORT_DEFAULT,
			});
		}

		const res = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseMaybeAssign(
			parser,
			"export default declaration",
		);
		parser.semicolon();
		return res;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportDeclaration(
		parser,
	) {
		if (parser.isContextual("type")) {
			const start = parser.getPosition();
			parser.next();

			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
				)
			) {
				// export { foo, bar };
				const specifiers = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportSpecifiers(
					parser,
				);
				const source = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportFrom(
					parser,
					false,
				);
				return {
					exportKind: "type",
					localSpecifiers: specifiers,
					source,
				};
			} else {
				// export type Foo = Bar;
				return {
					exportKind: "type",
					declaration: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSTypeAlias(
						parser,
						start,
					),
				};
			}
		}

		if (parser.isContextual("interface")) {
			const declarationNode = parser.getPosition();
			parser.next();
			return {
				exportKind: "type",
				declaration: ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSInterfaceDeclaration(
					parser,
					declarationNode,
				),
			};
		}

		return {
			exportKind: "value",
			declaration: ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseStatement(
				parser,
			),
		};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$isExportDefaultSpecifier(
		parser,
	) {
		// export Foo from "mod"
		// export Foo, {Bar} from "mod"
		const lookahead = parser.lookaheadState();
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			) &&
			(lookahead.tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma ||
			(lookahead.tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name &&
			lookahead.tokenValue === "from"))
		) {
			return true;
		}

		if (
			parser.isSyntaxEnabled("ts") &&
			___R$project$rome$$romejs$js$parser$parser$typescript_ts$isTSDeclarationStart(
				parser,
			)
		) {
			return false;
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			) &&
			(parser.state.tokenValue === "type" ||
			parser.state.tokenValue === "interface" ||
			parser.state.tokenValue === "opaque")
		) {
			return false;
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			)
		) {
			return (
				parser.state.tokenValue !== "async" && parser.state.tokenValue !== "let"
			);
		}

		if (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._default,
			)
		) {
			return false;
		}

		return false;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportLocalSpecifiersMaybe(
		parser,
	) {
		if (
			parser.eat(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
			)
		) {
			return ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportSpecifiers(
				parser,
			);
		} else {
			return [];
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportFromExpect(
		parser,
	) {
		// @ts-ignore: `expect` parameter will always return a JSStringLiteral
		return ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportFrom(
			parser,
			true,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportFrom(
		parser,
		expect,
	) {
		let source;

		if (parser.eatContextual("from")) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
				)
			) {
				source = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
					parser,
				);
			} else {
				const expr = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseExpressionAtom(
					parser,
					"export from",
				);

				parser.addDiagnostic({
					loc: expr.loc,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPORT_FROM_NOT_STRING,
				});

				source = {
					type: "JSStringLiteral",
					value: "",
					loc: expr.loc,
				};
			}
		} else if (expect) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPORT_MISSING_FROM,
			});

			source = {
				type: "JSStringLiteral",
				value: "",
				loc: parser.finishLoc(parser.getPosition()),
			};
		}

		parser.semicolon();

		return source;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$shouldParseExportStar(
		parser,
	) {
		return (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			) ||
			(parser.isContextual("type") &&
			parser.lookaheadState().tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star)
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportStar(
		parser,
		start,
	) {
		let exportKind;
		if (parser.eatContextual("type")) {
			exportKind = "type";
		}

		parser.expect(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
		);

		if (parser.isContextual("as")) {
			const {source, namespaceSpecifier, namedSpecifiers} = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportNamespace(
				parser,
				exportKind,
			);
			return parser.finishNode(
				start,
				{
					type: "JSExportExternalDeclaration",
					namespaceSpecifier,
					exportKind,
					namedSpecifiers,
					source,
				},
			);
		} else {
			const source = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportFrom(
				parser,
				true,
			);
			if (source === undefined) {
				throw new Error(
					"Passed `true` above which expects there to be a string",
				);
			}
			return parser.finishNode(
				start,
				{
					type: "JSExportAllDeclaration",
					exportKind,
					source,
				},
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportNamespace(
		parser,
		exportKind,
	) {
		if (exportKind === "type") {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPORT_TYPE_NAMESPACE,
			});
		}

		const specifierStart = parser.state.lastStartPos;
		parser.next();
		const exported = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
			parser,
			true,
		);

		const namespaceSpecifier = parser.finishNode(
			specifierStart,
			{
				type: "JSExportNamespaceSpecifier",
				exported,
			},
		);

		const namedSpecifiers = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$convertLocalToExternalSpecifiers(
			parser,
			___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportLocalSpecifiersMaybe(
				parser,
			),
		);

		const source = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportFromExpect(
			parser,
		);
		return {source, namespaceSpecifier, namedSpecifiers};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$shouldParseExportDeclaration(
		parser,
	) {
		return (
			___R$project$rome$$romejs$js$parser$parser$typescript_ts$isTSDeclarationStart(
				parser,
			) ||
			parser.isContextual("type") ||
			parser.isContextual("interface") ||
			parser.isContextual("opaque") ||
			parser.state.tokenType.keyword === "var" ||
			parser.state.tokenType.keyword === "const" ||
			parser.state.tokenType.keyword === "function" ||
			parser.state.tokenType.keyword === "class" ||
			___R$project$rome$$romejs$js$parser$parser$statement_ts$isLetStart(parser) ||
			___R$project$rome$$romejs$js$parser$parser$statement_ts$isAsyncFunctionDeclarationStart(
				parser,
			) ||
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.at,
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkExport(
		parser,
		{
			specifiers,
			declaration,
			localIsExternal = false,
			isDefault = false,
		},
	) {
		// Check for duplicate exports
		if (isDefault) {
			// Default exports
			if (declaration !== undefined) {
				___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkDuplicateExports(
					parser,
					declaration,
					"default",
				);
			}
			return undefined;
		}

		if (declaration !== undefined) {
			// Exported declarations
			if (declaration.type === "JSFunctionDeclaration") {
				if (declaration.id === undefined) {
					throw new Error("Expected declaration.id");
				}

				___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkDuplicateExports(
					parser,
					declaration,
					declaration.id.name,
				);
			}

			if (declaration.type === "JSClassDeclaration") {
				if (declaration.id === undefined) {
					throw new Error("Expected declaration.id");
				}

				___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkDuplicateExports(
					parser,
					declaration,
					declaration.id.name,
				);
			}

			if (declaration.type === "JSVariableDeclaration") {
				for (const node of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
					declaration,
				)) {
					___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkDuplicateExports(
						parser,
						node,
						node.name,
					);
				}
			}
		}

		if (specifiers !== undefined) {
			// Named exports
			for (const specifier of specifiers) {
				if (specifier === undefined) {
					continue;
				}

				___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkDuplicateExports(
					parser,
					specifier,
					specifier.exported.name,
				);

				if (specifier.type === "JSExportLocalSpecifier" && !localIsExternal) {
					const {local} = specifier;
					if (local !== undefined) {
						// check for keywords used as local names
						___R$project$rome$$romejs$js$parser$parser$expression_ts$checkReservedWord(
							parser,
							local.name,
							parser.getLoc(local),
							true,
							false,
						);
					}
				}
			}
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$checkDuplicateExports(
		parser,
		node,
		name,
	) {
		if (parser.isSyntaxEnabled("ts")) {
			// Refer to checkReservedWord for an explanation
			return undefined;
		}

		const existing = parser.state.exportedIdentifiers.get(name);
		if (existing !== undefined) {
			parser.addDiagnostic({
				loc: node.loc,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DUPLICATE_EXPORT(
					name,
					existing,
				),
			});
		}

		parser.state.exportedIdentifiers.set(name, parser.getLoc(node));
	}

	// Parses a comma-separated list of module exports.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseExportSpecifiers(
		parser,
	) {
		const specifiers = [];
		let first = true;

		// export { x, y as z } [from '...']';
		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"export specifiers",
		);

		while (true) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				)
			) {
				parser.expectClosing(openContext);
				break;
			}

			if (first) {
				first = false;
			} else {
				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				);
				if (
					parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					)
				) {
					break;
				}
			}

			const start = parser.getPosition();
			const local = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseReferenceIdentifier(
				parser,
				true,
			);
			const exported = parser.eatContextual("as")
				? ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
						parser,
						true,
					)
				: ___R$project$rome$$romejs$js$parser$parser$expression_ts$toIdentifier(
						parser,
						parser.cloneNode(local),
					);
			specifiers.push(
				parser.finishNode(
					start,
					{
						type: "JSExportLocalSpecifier",
						local,
						exported,
						// TODO exportKind?
					},
				),
			);
		}

		return specifiers;
	}



	function ___R$project$rome$$romejs$js$parser$parser$modules_ts$parseImport(
		parser,
		start,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			) &&
			parser.lookaheadState().tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq
		) {
			return ___R$project$rome$$romejs$js$parser$parser$typescript_ts$parseTSImportEqualsDeclaration(
				parser,
				start,
			);
		}

		let namedSpecifiers = [];
		let namespaceSpecifier;
		let defaultSpecifier;
		let source;
		let importKind;

		// import '...'
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
			)
		) {
			source = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
				parser,
			);
		} else {
			({
				namedSpecifiers,
				namespaceSpecifier,
				defaultSpecifier,
				importKind,
			} = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseImportSpecifiers(
				parser,
				start,
			));

			if (
				parser.expectContextual("from") &&
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
				)
			) {
				source = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseStringLiteral(
					parser,
				);
			} else {
				parser.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_MISSING_SOURCE,
				});

				source = parser.finishNode(
					start,
					{
						type: "JSStringLiteral",
						value: "",
					},
				);
			}
		}

		parser.semicolon();
		return parser.finishNode(
			start,
			{
				type: "JSImportDeclaration",
				namedSpecifiers,
				namespaceSpecifier,
				defaultSpecifier,
				source,
				importKind,
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$shouldParseDefaultImport(
		parser,
		kind,
	) {
		if (
			___R$project$rome$$romejs$js$parser$parser$modules_ts$hasTypeImportKind(
				kind,
			)
		) {
			return ___R$project$rome$$romejs$js$parser$parser$modules_ts$isMaybeDefaultImport(
				parser.state,
			);
		} else {
			return parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			);
		}
	}

	function ___R$project$rome$$romejs$js$parser$parser$modules_ts$isMaybeDefaultImport(
		state,
	) {
		return (
			(state.tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name ||
			!!state.tokenType.keyword) &&
			state.tokenValue !== "from"
		);
	}

	function ___R$project$rome$$romejs$js$parser$parser$modules_ts$hasTypeImportKind(
		kind,
	) {
		return kind === "type" || kind === "typeof";
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseImportSpecifierLocal(
		parser,
		importKind,
		contextDescription,
	) {
		const start = parser.getPosition();

		const local = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
			parser,
		);

		___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
			parser,
			local,
			true,
			undefined,
			contextDescription,
		);

		return parser.finishNode(
			start,
			{
				type: "JSImportSpecifierLocal",
				name: local,
				importKind,
			},
		);
	}

	// Parses a comma-separated list of module imports.
	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseImportSpecifiers(
		parser,
		start,
	) {
		let importKind = undefined;

		// Ensure that when parsing `import from './type.js` we don't mistakenly think it's an import type';

		// TODO probably need to check for a comma and `as`
		const lh = parser.lookaheadState();
		if (
			lh.tokenType !==
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name ||
			(lh.tokenType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name &&
			lh.tokenValue !== "from")
		) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._typeof,
				)
			) {
				importKind = "typeof";
			} else if (parser.isContextual("type")) {
				importKind = "type";
			}
		}

		if (importKind) {
			if (
				importKind === "type" &&
				lh.tokenType ===
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star
			) {
				parser.addDiagnostic({
					start: lh.startPos,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_TYPE_STAR,
				});
			}

			if (
				___R$project$rome$$romejs$js$parser$parser$modules_ts$isMaybeDefaultImport(
					lh,
				) ||
				lh.tokenType ===
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL ||
				lh.tokenType ===
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star
			) {
				parser.next();
			}
		}

		let namedSpecifiers = [];
		let namespaceSpecifier;
		let defaultSpecifier;

		let first = true;

		// import defaultObj, { x, y as z } from '...'';
		if (
			___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$shouldParseDefaultImport(
				parser,
				importKind,
			)
		) {
			const meta = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseImportSpecifierLocal(
				parser,
				importKind,
				"default import specifier",
			);

			defaultSpecifier = parser.finishNode(
				start,
				{
					type: "JSImportDefaultSpecifier",
					local: meta,
				},
			);

			if (
				!parser.eat(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				)
			) {
				return {
					namedSpecifiers,
					namespaceSpecifier,
					defaultSpecifier,
					importKind,
				};
			}
		}

		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star,
			)
		) {
			parser.next();
			parser.expectContextual("as");

			const meta = ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseImportSpecifierLocal(
				parser,
				importKind,
				"import namespace specifier",
			);

			namespaceSpecifier = parser.finishNode(
				start,
				{
					type: "JSImportNamespaceSpecifier",
					local: meta,
				},
			);

			return {namedSpecifiers, namespaceSpecifier, defaultSpecifier, importKind};
		}

		const openContext = parser.expectOpening(
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
			"import specifiers",
		);

		while (true) {
			if (
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				) ||
				parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				)
			) {
				parser.expectClosing(openContext);
				break;
			}

			if (first) {
				first = false;
			} else {
				// Detect an attempt to deep destructure
				if (
					parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
					)
				) {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DESTRUCTURING_IN_IMPORT,
					});
				}

				parser.expect(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				);

				if (
					parser.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					)
				) {
					break;
				}
			}

			namedSpecifiers.push(
				___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseImportSpecifier(
					parser,
					importKind,
				),
			);
		}

		return {namedSpecifiers, namespaceSpecifier, defaultSpecifier, importKind};
	}

	function ___R$$priv$project$rome$$romejs$js$parser$parser$modules_ts$parseImportSpecifier(
		parser,
		nodeKind,
	) {
		const start = parser.getPosition();
		const firstIdentPos = parser.state.startPos;
		const firstIdent = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
			parser,
			true,
		);

		let imported;
		let local;
		let importKind = undefined;
		if (firstIdent.name === "type") {
			importKind = "type";
		} else if (firstIdent.name === "typeof") {
			importKind = "typeof";
		}

		let isBinding = false;
		if (parser.isContextual("as") && !parser.isLookaheadContextual("as")) {
			const asIdent = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				true,
			);
			if (
				importKind !== undefined &&
				!parser.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
				) &&
				parser.state.tokenType.keyword === undefined
			) {
				// `import {type as ,` or `import {type as }`
				imported = asIdent;
				local = ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
					parser,
					parser.cloneNode(asIdent),
				);
			} else {
				// `import {type as foo`
				imported = firstIdent;
				importKind = undefined;
				local = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
					parser,
				);
			}
		} else if (
			importKind !== undefined &&
			(parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
			) ||
			parser.state.tokenType.keyword)
		) {
			// `import {type foo`
			imported = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseIdentifier(
				parser,
				true,
			);
			if (parser.eatContextual("as")) {
				local = ___R$project$rome$$romejs$js$parser$parser$expression_ts$parseBindingIdentifier(
					parser,
				);
			} else {
				isBinding = true;
				local = ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
					parser,
					parser.cloneNode(imported),
				);
			}
		} else {
			isBinding = true;
			imported = firstIdent;
			importKind = undefined;
			local = ___R$project$rome$$romejs$js$parser$parser$expression_ts$toBindingIdentifier(
				parser,
				parser.cloneNode(imported),
			);
		}

		const nodeIsTypeImport = ___R$project$rome$$romejs$js$parser$parser$modules_ts$hasTypeImportKind(
			nodeKind,
		);
		const specifierIsTypeImport = ___R$project$rome$$romejs$js$parser$parser$modules_ts$hasTypeImportKind(
			importKind,
		);

		if (nodeIsTypeImport && specifierIsTypeImport) {
			parser.addDiagnostic({
				start: firstIdentPos,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IMPORT_KIND_SPECIFIER_ON_IMPORT_DECLARATION_WITH_KIND,
			});
		}

		const loc = parser.finishLoc(start);

		if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {
			___R$project$rome$$romejs$js$parser$parser$expression_ts$checkReservedWord(
				parser,
				local.name,
				loc,
				true,
				true,
			);
		}

		___R$project$rome$$romejs$js$parser$parser$lval_ts$checkLVal(
			parser,
			local,
			true,
			undefined,
			"import specifier",
		);

		return parser.finishNode(
			start,
			{
				type: "JSImportSpecifier",
				imported,
				local: parser.finishNode(
					start,
					{
						type: "JSImportSpecifierLocal",
						name: local,
						importKind,
					},
				),
			},
		);
	}


  // project-rome/@romejs/js-parser/parser/index.ts



  // project-rome/@romejs/js-parser/tokenizer/unicodeMistakes.ts
const ___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES = new Map();

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u07fa",
		["Nko Lajanyalan", "_"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe4d",
		["Dashed Low Line", "_"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe4e",
		["Centreline Low Line", "_"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe4f",
		["Wavy Low Line", "_"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff3f",
		["Fullwidth Low Line", "_"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2010",
		["Hyphen", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2011",
		["Non-Breaking Hyphen", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2012",
		["Figure Dash", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2013",
		["En Dash", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2014",
		["Em Dash", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe58",
		["Small Em Dash", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u06d4",
		["Arabic Full Stop", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2043",
		["Hyphen Bullet", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02d7",
		["Modifier Letter Minus Sign", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2212",
		["Minus Sign", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2796",
		["Heavy Minus Sign", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2cba",
		["Coptic Letter Dialect-P Ni", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u30fc",
		["Katakana-Hiragana Prolonged Sound Mark", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff0d",
		["Fullwidth Hyphen-Minus", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2015",
		["Horizontal Bar", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2500",
		["Box Drawings Light Horizontal", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2501",
		["Box Drawings Heavy Horizontal", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u31d0",
		["CJK Stroke H", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua7f7",
		["Latin Epigraphic Letter Dideways", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1173",
		["Hangul Jungseong Eu", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3161",
		["Hangul Letter Eu", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u4e00",
		["CJK Unified Ideograph-4E00", "-"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2f00",
		["Kangxi Radical One", "-"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u060d",
		["Arabic Date Separator", ","],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u066b",
		["Arabic Decimal Separator", ","],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u201a",
		["Single Low-9 Quotation Mark", ","],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\xb8",
		["Cedilla", ","],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua4f9",
		["Lisu Letter Tone Na Po", ","],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff0c",
		["Fullwidth Comma", ","],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u037e",
		["Greek Question Mark", ";"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff1b",
		["Fullwidth Semicolon", ";"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe14",
		["Presentation Form For Vertical Semicolon", ";"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0903",
		["Devanagari Sign Visarga", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0a83",
		["Gujarati Sign Visarga", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff1a",
		["Fullwidth Colon", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0589",
		["Armenian Full Stop", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0703",
		["Syriac Supralinear Colon", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0704",
		["Syriac Sublinear Colon", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u16ec",
		["Runic Multiple Punctuation", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe30",
		["Presentation Form For Vertical Two Dot Leader", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1803",
		["Mongolian Full Stop", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1809",
		["Mongolian Manchu Full Stop", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u205a",
		["Two Dot Punctuation", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u05c3",
		["Hebrew Punctuation Sof Pasuq", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02f8",
		["Modifier Letter Raised Colon", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua789",
		["Modifier Letter Colon", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2236",
		["Ratio", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02d0",
		["Modifier Letter Triangular Colon", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua4fd",
		["Lisu Letter Tone Mya Jeu", ":"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe13",
		["Presentation Form For Vertical Colon", ":"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff01",
		["Fullwidth Exclamation Mark", "!"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u01c3",
		["Latin Letter Retroflex Click", "!"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2d51",
		["Tifinagh Letter Tuareg Yang", "!"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe15",
		["Presentation Form For Vertical Exclamation Mark", "!"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0294",
		["Latin Letter Glottal Stop", "?"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0241",
		["Latin Capital Letter Glottal Stop", "?"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u097d",
		["Devanagari Letter Glottal Stop", "?"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u13ae",
		["Cherokee Letter He", "?"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua6eb",
		["Bamum Letter Ntuu", "?"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff1f",
		["Fullwidth Question Mark", "?"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe16",
		["Presentation Form For Vertical Question Mark", "?"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{1d16d}",
		["Musical Symbol Combining Augmentation Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2024",
		["One Dot Leader", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0701",
		["Syriac Supralinear Full Stop", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0702",
		["Syriac Sublinear Full Stop", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua60e",
		["Vai Full Stop", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{10a50}",
		["Kharoshthi Punctuation Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0660",
		["Arabic-Indic Digit Zero", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u06f0",
		["Extended Arabic-Indic Digit Zero", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua4f8",
		["Lisu Letter Tone Mya Ti", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\xb7",
		["Middle Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u30fb",
		["Katakana Middle Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff65",
		["Halfwidth Katakana Middle Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u16eb",
		["Runic Single Punctuation", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0387",
		["Greek Ano Teleia", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2e31",
		["Word Separator Middle Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{10101}",
		["Aegean Word Separator Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2022",
		["Bullet", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2027",
		["Hyphenation Point", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2219",
		["Bullet Operator", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u22c5",
		["Dot Operator", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua78f",
		["Latin Letter Sinological Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1427",
		["Canadian Syllabics Final Middle Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1427",
		["Canadian Syllabics Final Middle Dot", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff0e",
		["Fullwidth Full Stop", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3002",
		["Ideographic Full Stop", "."],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe12",
		["Presentation Form For Vertical Ideographic Full Stop", "."],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u055d",
		["Armenian Comma", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff07",
		["Fullwidth Apostrophe", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2018",
		["Left Single Quotation Mark", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2019",
		["Right Single Quotation Mark", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u201b",
		["Single High-Reversed-9 Quotation Mark", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2032",
		["Prime", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2035",
		["Reversed Prime", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u055a",
		["Armenian Apostrophe", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u05f3",
		["Hebrew Punctuation Geresh", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"`",
		["Grave Accent", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1fef",
		["Greek Varia", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff40",
		["Fullwidth Grave Accent", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\xb4",
		["Acute Accent", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0384",
		["Greek Tonos", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1ffd",
		["Greek Oxia", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1fbd",
		["Greek Koronis", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1fbf",
		["Greek Psili", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1ffe",
		["Greek Dasia", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02b9",
		["Modifier Letter Prime", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u0374",
		["Greek Numeral Sign", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02c8",
		["Modifier Letter Vertical Line", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02ca",
		["Modifier Letter Acute Accent", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02cb",
		["Modifier Letter Grave Accent", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02f4",
		["Modifier Letter Middle Grave Accent", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02bb",
		["Modifier Letter Turned Comma", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02bd",
		["Modifier Letter Reversed Comma", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02bc",
		["Modifier Letter Apostrophe", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02be",
		["Modifier Letter Right Half Ring", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua78c",
		["Latin Small Letter Saltillo", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u05d9",
		["Hebrew Letter Yod", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u07f4",
		["Nko High Tone Apostrophe", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u07f5",
		["Nko Low Tone Apostrophe", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u144a",
		["Canadian Syllabics West-Cree P", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u16cc",
		["Runic Letter Short-Twig-Sol S", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{16f51}",
		["Miao Sign Aspiration", "'"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{16f52}",
		["Miao Sign Reformed Voicing", "'"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1cd3",
		["Vedic Sign Nihshvasa", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff02",
		["Fullwidth Quotation Mark", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u201c",
		["Left Double Quotation Mark", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u201d",
		["Right Double Quotation Mark", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u201f",
		["Double High-Reversed-9 Quotation Mark", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2033",
		["Double Prime", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2036",
		["Reversed Double Prime", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3003",
		["Ditto Mark", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u05f4",
		["Hebrew Punctuation Gershayim", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02dd",
		["Double Acute Accent", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02ba",
		["Modifier Letter Double Prime", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02f6",
		["Modifier Letter Middle Double Acute Accent", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02f5",
		["Modifier Letter Middle Double Grave Accent", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02ee",
		["Modifier Letter Double Apostrophe", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u05f2",
		["Hebrew Ligature Yiddish Double Yod", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u275e",
		["Heavy Double Comma Quotation Mark Ornament", '"'],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u275d",
		["Heavy Double Turned Comma Quotation Mark Ornament", '"'],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff08",
		["Fullwidth Left Parenthesis", "("],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2768",
		["Medium Left Parenthesis Ornament", "("],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufd3e",
		["Ornate Left Parenthesis", "("],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff09",
		["Fullwidth Right Parenthesis", ")"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2769",
		["Medium Right Parenthesis Ornament", ")"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufd3f",
		["Ornate Right Parenthesis", ")"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff3b",
		["Fullwidth Left Square Bracket", "["],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2772",
		["Light Left Tortoise Shell Bracket Ornament", "["],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u300c",
		["Left Corner Bracket", "["],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u300e",
		["Left White Corner Bracket", "["],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3010",
		["Left Black Lenticular Bracket", "["],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3014",
		["Left Tortoise Shell Bracket", "["],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3016",
		["Left White Lenticular Bracket", "["],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3018",
		["Left White Tortoise Shell Bracket", "["],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u301a",
		["Left White Square Bracket", "["],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff3d",
		["Fullwidth Right Square Bracket", "]"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2773",
		["Light Right Tortoise Shell Bracket Ornament", "]"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u300d",
		["Right Corner Bracket", "]"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u300f",
		["Right White Corner Bracket", "]"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3011",
		["Right Black Lenticular Bracket", "]"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3015",
		["Right Tortoise Shell Bracket", "]"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3017",
		["Right White Lenticular Bracket", "]"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3019",
		["Right White Tortoise Shell Bracket", "]"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u301b",
		["Right White Square Bracket", "]"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2774",
		["Medium Left Curly Bracket Ornament", "{"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{1d114}",
		["Musical Symbol Brace", "{"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff5b",
		["Fullwidth Left Curly Bracket", "{"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2775",
		["Medium Right Curly Bracket Ornament", "}"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff5d",
		["Fullwidth Right Curly Bracket", "}"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u204e",
		["Low Asterisk", "*"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u066d",
		["Arabic Five Pointed Star", "*"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2217",
		["Asterisk Operator", "*"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{1031f}",
		["Old Italic Letter Ess", "*"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff0a",
		["Fullwidth Asterisk", "*"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1735",
		["Philippine Single Punctuation", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2041",
		["Caret Insertion Point", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2215",
		["Division Slash", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2044",
		["Fraction Slash", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2571",
		["Box Drawings Light Diagonal Upper Right To Lower Left", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u27cb",
		["Mathematical Rising Diagonal", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u29f8",
		["Big Solidus", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{1d23a}",
		["Greek Instrumental Notation Symbol-47", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u31d3",
		["CJK Stroke Sp", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3033",
		["Vertical Kana Repeat Mark Upper Half", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2cc6",
		["Coptic Capital Letter Old Coptic Esh", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u30ce",
		["Katakana Letter No", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u4e3f",
		["CJK Unified Ideograph-4E3F", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2f03",
		["Kangxi Radical Slash", "/"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff0f",
		["Fullwidth Solidus", "/"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff3c",
		["Fullwidth Reverse Solidus", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufe68",
		["Small Reverse Solidus", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2216",
		["Set Minus", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u27cd",
		["Mathematical Falling Diagonal", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u29f5",
		["Reverse Solidus Operator", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u29f9",
		["Big Reverse Solidus", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u29f9",
		["Greek Vocal Notation Symbol-16", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u29f9",
		["Greek Instrumental Symbol-48", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u31d4",
		["CJK Stroke D", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u4e36",
		["CJK Unified Ideograph-4E36", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2f02",
		["Kangxi Radical Dot", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3001",
		["Ideographic Comma", "\\"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u30fd",
		["Katakana Iteration Mark", "\\"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua778",
		["Latin Small Letter Um", "&"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff06",
		["Fullwidth Ampersand", "&"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u16ed",
		["Runic Cross Punctuation", "+"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2795",
		["Heavy Plus Sign", "+"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{1029b}",
		["Lycian Letter H", "+"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ufb29",
		["Hebrew Letter Alternative Plus Sign", "+"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff0b",
		["Fullwidth Plus Sign", "+"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2039",
		["Single Left-Pointing Angle Quotation Mark", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u276e",
		["Heavy Left-Pointing Angle Quotation Mark Ornament", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02c2",
		["Modifier Letter Left Arrowhead", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{1d236}",
		["Greek Instrumental Symbol-40", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1438",
		["Canadian Syllabics Pa", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u16b2",
		["Runic Letter Kauna", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u276c",
		["Medium Left-Pointing Angle Bracket Ornament", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u27e8",
		["Mathematical Left Angle Bracket", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2329",
		["Left-Pointing Angle Bracket", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3008",
		["Left Angle Bracket", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u31db",
		["CJK Stroke Pd", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u304f",
		["Hiragana Letter Ku", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{21fe8}",
		["CJK Unified Ideograph-21FE8", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u300a",
		["Left Double Angle Bracket", "<"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff1c",
		["Fullwidth Less-Than Sign", "<"],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1400",
		["Canadian Syllabics Hyphen", "="],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u2e40",
		["Double Hyphen", "="],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u30a0",
		["Katakana-Hiragana Double Hyphen", "="],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\ua4ff",
		["Lisu Punctuation Full Stop", "="],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff1d",
		["Fullwidth Equals Sign", "="],
	);

	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u203a",
		["Single Right-Pointing Angle Quotation Mark", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u276f",
		["Heavy Right-Pointing Angle Quotation Mark Ornament", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u02c3",
		["Modifier Letter Right Arrowhead", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{1d237}",
		["Greek Instrumental Symbol-42", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u1433",
		["Canadian Syllabics Po", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u{16f3f}",
		["Miao Letter Archaic Zza", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u276d",
		["Medium Right-Pointing Angle Bracket Ornament", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u27e9",
		["Mathematical Right Angle Bracket", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u232a",
		["Right-Pointing Angle Bracket", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u3009",
		["Right Angle Bracket", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\u300b",
		["Right Double Angle Bracket", ">"],
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.set(
		"\uff1e",
		["Fullwidth Greater-Than Sign", ">"],
	);

	const ___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES = new Map();
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		" ",
		"Space",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"_",
		"Underscore",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"-",
		"Minus/Hyphen",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		",",
		"Comma",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		";",
		"Semicolon",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		":",
		"Colon",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"!",
		"Exclamation Mark",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"?",
		"Question Mark",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		".",
		"Period",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"'",
		"Single Quote",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		'"',
		"Quotation Mark",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"(",
		"Left Parenthesis",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		")",
		"Right Parenthesis",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"[",
		"Left Square Bracket",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"]",
		"Right Square Bracket",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"{",
		"Left Curly Brace",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"}",
		"Right Curly Brace",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"*",
		"Asterisk",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"/",
		"Slash",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"\\",
		"Backslash",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"&",
		"Ampersand",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"+",
		"Plus Sign",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"<",
		"Less-Than Sign",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		"=",
		"Equals Sign",
	);
	___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.set(
		">",
		"Greater-Than Sign",
	);


  // project-rome/@romejs/js-parser/tokenizer/index.ts
const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$HEX_NUMBER = /^[\da-fA-F]+$/;
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$DECIMAL_NUMBER = /^\d+$/;

	// The following character codes are forbidden from 'being
	// an immediate sibling of JSNumericLiteralSeparator _
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$forbiddenNumericSeparatorSiblings = {
		decBinOct: [
			___R$project$rome$$romejs$string$charcodes$index_ts.dot,
			___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseB,
			___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseE,
			___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseO,
			___R$project$rome$$romejs$string$charcodes$index_ts.underscore,
			// multiple separators are not allowed
			___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseB,
			___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseE,
			___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseO,
		],
		hex: [
			___R$project$rome$$romejs$string$charcodes$index_ts.dot,
			___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseX,
			___R$project$rome$$romejs$string$charcodes$index_ts.underscore,
			// multiple separators are not allowed
			___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseX,
		],
	};

	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsBin = [
		// 0 - 1
		___R$project$rome$$romejs$string$charcodes$index_ts.digit0,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit1,
	];
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsOct = [
		// 0 - 7
		...___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsBin,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit2,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit3,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit4,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit5,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit6,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit7,
	];
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsDec = [
		// 0 - 9
		...___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsOct,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit8,
		___R$project$rome$$romejs$string$charcodes$index_ts.digit9,
	];

	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsHex = [
		// 0 - 9, A - F, a - f,
		...___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsDec,
		___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseA,
		___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseB,
		___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseC,
		___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseD,
		___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseE,
		___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseF,
		___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseA,
		___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseB,
		___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseC,
		___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseD,
		___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseE,
		___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseF,
	];
	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblings = {
		bin: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsBin,
		oct: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsOct,
		dec: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsDec,
		hex: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblingsHex,
	};

	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.


	class ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$RegExpTokenValue {
		constructor(pattern, flags) {
			this.pattern = pattern;
			this.flags = flags;
		}
	}

	class ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$NumberTokenValue {
		constructor(value, format) {
			this.value = value;
			this.format = format;
		}
	}

	// ## Tokenizer
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
		parser,
	) {
		const index = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
			parser.state.index,
		);
		parser.state.index = index;
		return index;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
		parser,
	) {
		return ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(parser.state.index);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$codePointToString(
		code,
	) {
		// UTF-16 Decoding
		if (code <= 65535) {
			return String.fromCharCode(code);
		} else {
			return String.fromCharCode(
				(code - 65536 >> 10) + 55296,
				(code - 65536 & 1023) + 56320,
			);
		}
	}

	// Toggle strict mode. Re-reads the next number or string to please
	// pedantic tests (`"use strict"; 010;` should fail).
	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$setStrict(
		parser,
		isStrict,
	) {
		parser.pushScope("STRICT", isStrict);

		if (
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num,
			) &&
			!parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
			)
		) {
			return undefined;
		}

		parser.state.index = parser.state.startPos.index;
		while (parser.state.index < parser.state.lineStartIndex) {
			parser.state.lineStartIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
				parser.input.lastIndexOf(
					"\n",
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
						parser.state.lineStartIndex,
					) - 2,
				) + 1,
			);
			parser.state.curLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
				parser.state.curLine,
			);
		}
		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(parser);
	}

	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
		parser,
	) {
		return parser.state.context[parser.state.context.length - 1];
	}

	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(
		parser,
	) {
		const curContext = ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
			parser,
		);

		if (!curContext || !curContext.preserveSpace) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$skipSpace(
				parser,
			);
		}

		parser.state.containsOctal = false;
		parser.state.octalPosition = undefined;
		parser.state.startPos = parser.getPositionFromState();

		if (parser.state.index >= parser.length) {
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
			);
			return undefined;
		}

		if (curContext !== undefined && curContext.override) {
			curContext.override(parser);
		} else {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readToken(
				parser,
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$fullCharCodeAtPos(
					parser,
				),
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readToken(
		parser,
		code,
	) {
		const matchedJSX = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readJSXToken(
			parser,
			code,
		);
		if (matchedJSX) {
			return undefined;
		} else {
			return ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readNormalToken(
				parser,
				code,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readJSXToken(
		parser,
		code,
	) {
		if (parser.inScope("PROPERTY_NAME")) {
			return false;
		}

		if (parser.inScope("TYPE")) {
			return false;
		}

		if (!parser.shouldTokenizeJSX()) {
			return false;
		}

		const context = ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
			parser,
		);

		if (
			context ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxInner
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsx(
				parser,
			);
			return true;
		}

		if (
			context ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxOpenTag ||
			context ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxCloseTag
		) {
			if (
				___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart(
					code,
				)
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxWord(
					parser,
				);
				return true;
			}

			if (
				code ===
				___R$project$rome$$romejs$string$charcodes$index_ts.greaterThan
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagEnd,
				);
				return true;
			}

			if (
				(code ===
				___R$project$rome$$romejs$string$charcodes$index_ts.quotationMark ||
				code === ___R$project$rome$$romejs$string$charcodes$index_ts.apostrophe) &&
				context ===
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxOpenTag
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxString(
					parser,
					code,
				);
				return true;
			}
		}

		if (
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.lessThan &&
			parser.state.exprAllowed &&
			parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 1,
			) !== ___R$project$rome$$romejs$string$charcodes$index_ts.exclamationMark
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart,
			);
			return true;
		}

		return false;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readNormalToken(
		parser,
		code,
	) {
		// JSIdentifier or keyword. '\uXXXX' sequences are allowed in
		// identifiers, so '\' also dispatches to that.
		if (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart(
				code,
			) ||
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.backslash
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readWord(
				parser,
			);
		} else {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getTokenFromCode(
				parser,
				code,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$fullCharCodeAtPos(
		parser,
	) {
		return ___R$project$rome$$romejs$js$parser$utils$identifier_ts$getFullCharCodeAt(
			parser.input,
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			),
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$pushComment(
		parser,
		opts,
	) {
		const loc = parser.finishLocAt(opts.startPos, opts.endPos);
		let comment;
		if (opts.block) {
			comment = parser.comments.addComment({
				type: "JSCommentBlock",
				value: ___R$project$rome$$romejs$string$utils$removeCarriageReturn_ts$removeCarriageReturn(
					opts.text,
				),
				loc,
			});
		} else {
			comment = parser.comments.addComment({
				type: "JSCommentLine",
				value: opts.text,
				loc,
			});
		}

		// We should enable jsx syntax when there's a comment with @\jsx
		if (opts.text.includes("@jsx")) {
			parser.syntax.add("jsx");
		}

		if (parser.isLookahead === false) {
			parser.state.comments.push(comment);
			___R$project$rome$$romejs$js$parser$parser$comments_ts$addComment(
				parser,
				comment,
			);
		}

		if (parser.shouldCreateToken()) {
			/*parser.pushToken({
      type: tt.comment,
      loc,
    });*/
		}

		return comment;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$skipBlockComment(
		parser,
	) {
		const startPos = parser.getPositionFromState();
		const startIndex = parser.state.index;
		parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
			parser.state.index,
			2,
		);

		const endIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
			parser.input.indexOf(
				"*/",
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			),
		);

		if (endIndex === ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1) {
			parser.addDiagnostic({
				end: parser.getPositionFromIndex(
					___R$project$rome$$romejs$ob1$index_ts$ob1Sub(parser.state.index, 2),
				),
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNTERMINATED_BLOCK_COMMENT,
			});
			return undefined;
		}

		// Skip */
		parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
			endIndex,
			2,
		);

		___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreakG.lastIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
			startIndex,
		);

		let match;
		while (
			(match = ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreakG.exec(
				parser.input,
			)) &&
			match.index <
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(parser.state.index)
		) {
			parser.state.curLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
				parser.state.curLine,
			);
			parser.resetTokenizerLine();
			parser.state.lineStartIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
				match.index + match[0].length,
			);
		}

		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$pushComment(
			parser,
			{
				block: true,
				text: parser.getRawInput(
					___R$project$rome$$romejs$ob1$index_ts$ob1Add(startIndex, 2),
					endIndex,
				),
				startPos,
				endPos: parser.getPositionFromState(),
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$parseLineComment(
		parser,
		startSkip,
	) {
		const startIndex = parser.state.index;
		const startPos = parser.getPositionFromState();
		parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
			parser.state.index,
			startSkip,
		);
		let ch = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			),
		);
		if (parser.state.index < parser.length) {
			while (
				ch !== ___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed &&
				ch !==
				___R$project$rome$$romejs$string$charcodes$index_ts.carriageReturn &&
				ch !== ___R$project$rome$$romejs$string$charcodes$index_ts.lineSeparator &&
				ch !==
				___R$project$rome$$romejs$string$charcodes$index_ts.paragraphSeparator &&
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				) < parser.length
			) {
				ch = parser.input.charCodeAt(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					),
				);
			}
		}
		const endPos = parser.getPositionFromState();
		const text = parser.getRawInput(
			___R$project$rome$$romejs$ob1$index_ts$ob1Add(startIndex, startSkip),
			parser.state.index,
		);

		return {
			startPos,
			endPos,
			text,
		};
	}

	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$skipLineComment(
		parser,
		startSkip,
	) {
		const lineComment = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$parseLineComment(
			parser,
			startSkip,
		);
		return ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$pushComment(
			parser,
			{
				block: false,
				text: lineComment.text,
				startPos: lineComment.startPos,
				endPos: lineComment.endPos,
			},
		);
	}

	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$skipInterpreterDirective(
		parser,
		startSkip,
	) {
		const lineComment = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$parseLineComment(
			parser,
			startSkip,
		);
		const loc = parser.finishLocAt(lineComment.startPos, lineComment.endPos);
		return {
			type: "JSInterpreterDirective",
			value: lineComment.text,
			loc,
		};
	}

	// Called at the start of the parse and after every token. Skips
	// whitespace and comments, and.
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$skipSpace(
		parser,
	) {
		loop: while (parser.state.index < parser.length) {
			const ch = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);

			if (parser.state.lineStart) {
				if (
					ch === ___R$project$rome$$romejs$string$charcodes$index_ts.space ||
					ch === ___R$project$rome$$romejs$string$charcodes$index_ts.tab
				) {
					parser.state.indentLevel = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
						parser.state.indentLevel,
					);
				} else {
					parser.state.lineStart = false;
				}
			}

			if (
				ch ===
				___R$project$rome$$romejs$string$charcodes$index_ts.carriageReturn &&
				parser.input.charCodeAt(
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(parser.state.index) + 1,
				) === ___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
			}

			switch (ch) {
				case ___R$project$rome$$romejs$string$charcodes$index_ts.space:
				case ___R$project$rome$$romejs$string$charcodes$index_ts.nonBreakingSpace: {
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
						parser,
					);
					break;
				}

				case ___R$project$rome$$romejs$string$charcodes$index_ts.carriageReturn:
				case ___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed:
				case ___R$project$rome$$romejs$string$charcodes$index_ts.lineSeparator:
				case ___R$project$rome$$romejs$string$charcodes$index_ts.paragraphSeparator: {
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
						parser,
					);
					parser.state.curLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
						parser.state.curLine,
					);
					parser.resetTokenizerLine();
					break;
				}

				case ___R$project$rome$$romejs$string$charcodes$index_ts.slash: {
					switch (
						parser.input.charCodeAt(
							___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
								parser,
							) + 1,
						)
					) {
						case ___R$project$rome$$romejs$string$charcodes$index_ts.asterisk: {
							// Break the loop and don't consume Flow comment code
							if (
								parser.input.charCodeAt(
									___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
										parser,
									) + 2,
								) === ___R$project$rome$$romejs$string$charcodes$index_ts.colon &&
								parser.input.charCodeAt(
									___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
										parser,
									) + 3,
								) === ___R$project$rome$$romejs$string$charcodes$index_ts.colon
							) {
								break loop;
							}

							___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$skipBlockComment(
								parser,
							);
							break;
						}

						case ___R$project$rome$$romejs$string$charcodes$index_ts.slash: {
							___R$project$rome$$romejs$js$parser$tokenizer$index_ts$skipLineComment(
								parser,
								2,
							);
							break;
						}

						default:
							break loop;
					}
					break;
				}

				default:
					if (
						(ch > ___R$project$rome$$romejs$string$charcodes$index_ts.backSpace &&
						ch < ___R$project$rome$$romejs$string$charcodes$index_ts.shiftOut) ||
						(ch >=
						___R$project$rome$$romejs$string$charcodes$index_ts.oghamSpaceMark &&
						___R$project$rome$$romejs$js$parser$utils$whitespace_ts$nonASCIIwhitespace.test(
							String.fromCharCode(ch),
						))
					) {
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
							parser,
						);
					} else {
						break loop;
					}
			}
		}
	}

	// Called at the end of every token. Sets `end`, `val`, and
	// maintains `context` and `exprAllowed`, and skips the space after
	// the token, so that the next one's `start` will point at the
	// right position.
	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
		parser,
		type,
		val,
	) {
		parser.state.endPos = parser.getPositionFromState();

		const prevType = parser.state.tokenType;
		parser.state.tokenType = type;
		parser.state.tokenValue = val;

		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$updateContext(
			parser,
			prevType,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenDot(
		parser,
	) {
		const next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);
		if (
			next >= ___R$project$rome$$romejs$string$charcodes$index_ts.digit0 &&
			next <= ___R$project$rome$$romejs$string$charcodes$index_ts.digit9
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readNumber(
				parser,
				true,
			);
			return undefined;
		}

		const next2 = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 2,
		);
		if (
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.dot &&
			next2 === ___R$project$rome$$romejs$string$charcodes$index_ts.dot
		) {
			parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
				parser.state.index,
				3,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.ellipsis,
			);
		} else {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenSlash(
		parser,
	) {
		const next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);

		// If this starts with /*:: then it's a Flow comment

		// TODO Flow also allows "flow-include" in place of "::"
		if (
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.asterisk &&
			parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 2,
			) === ___R$project$rome$$romejs$string$charcodes$index_ts.colon &&
			parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 3,
			) === ___R$project$rome$$romejs$string$charcodes$index_ts.colon
		) {
			parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
				parser.state.index,
				4,
			);
			parser.pushScope("FLOW_COMMENT");
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(parser);
			return;
		}

		// '/'
		if (parser.state.exprAllowed) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$readRegexp(parser);
			return;
		}

		if (next === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.assign,
				2,
			);
		} else {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.slash,
				1,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenMultModulo(
		parser,
		code,
	) {
		let next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);

		// */ Is the end of a Flow comment
		if (
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.asterisk &&
			parser.inScope("FLOW_COMMENT") &&
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.slash
		) {
			parser.popScope("FLOW_COMMENT");
			parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
				parser.state.index,
				2,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(parser);
			return;
		}

		// '%*'
		let type =
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.asterisk
				? ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.star
				: ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.modulo;
		let width = 1;
		const exprAllowed = parser.state.exprAllowed;

		// Exponentiation operator **
		if (
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.asterisk &&
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.asterisk
		) {
			width++;
			next = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 2,
			);
			type = ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.exponent;
		}

		if (
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo &&
			!exprAllowed
		) {
			width++;
			type = ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.assign;
		}

		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
			parser,
			type,
			width,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenPipeAmp(
		parser,
		code,
	) {
		// '|&'
		const next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);

		if (next === code) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				code === ___R$project$rome$$romejs$string$charcodes$index_ts.verticalBar
					? ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.logicalOR
					: ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.logicalAND,
				2,
			);
			return undefined;
		}

		// '|}'
		if (
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.verticalBar &&
			next ===
			___R$project$rome$$romejs$string$charcodes$index_ts.rightCurlyBrace
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceBarR,
				2,
			);
			return undefined;
		}

		if (next === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.assign,
				2,
			);
			return undefined;
		}

		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
			parser,
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.verticalBar
				? ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bitwiseOR
				: ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bitwiseAND,
			1,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenCaret(
		parser,
	) {
		// '^'
		const next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);
		if (next === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.assign,
				2,
			);
		} else {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bitwiseXOR,
				1,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenPlusMin(
		parser,
		code,
	) {
		// '+-'
		const next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);

		if (next === code) {
			if (
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.dash &&
				!parser.inModule &&
				parser.input.charCodeAt(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					) + 2,
				) === ___R$project$rome$$romejs$string$charcodes$index_ts.greaterThan &&
				(parser.state.lastEndPos.index ===
				___R$project$rome$$romejs$ob1$index_ts$ob1Number0 ||
				___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak.test(
					parser.getRawInput(parser.state.lastEndPos.index, parser.state.index),
				))
			) {
				// A `-->` line comment
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$skipLineComment(
					parser,
					3,
				);
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$skipSpace(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(parser);
				return undefined;
			}
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.incDec,
				2,
			);
			return undefined;
		}

		if (next === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.assign,
				2,
			);
		} else {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.plusMin,
				1,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenLtGt(
		parser,
		code,
	) {
		// '<>'
		const next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);
		let size = 1;

		// we need to check if we're in a type to avoid interpreting the >> in Array<Array<string>> as a bitshift
		if (next === code && !parser.inScope("TYPE")) {
			size =
				code === ___R$project$rome$$romejs$string$charcodes$index_ts.greaterThan &&
				parser.input.charCodeAt(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					) + 2,
				) === ___R$project$rome$$romejs$string$charcodes$index_ts.greaterThan
					? 3
					: 2;
			if (
				parser.input.charCodeAt(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					) + size,
				) ===
				___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.assign,
					size + 1,
				);
				return undefined;
			}
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bitShift,
				size,
			);
			return undefined;
		}

		if (
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.lessThan &&
			next ===
			___R$project$rome$$romejs$string$charcodes$index_ts.exclamationMark &&
			!parser.inModule &&
			parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 2,
			) === ___R$project$rome$$romejs$string$charcodes$index_ts.dash &&
			parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 3,
			) === ___R$project$rome$$romejs$string$charcodes$index_ts.dash
		) {
			// `<!--`, an XML-style comment that should be interpreted as a line comment
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$skipLineComment(
				parser,
				4,
			);
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$skipSpace(
				parser,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(parser);
			return undefined;
		}

		if (next === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo) {
			// <= | >=
			size = 2;
		}

		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.relational,
			size,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenEqExcl(
		parser,
		code,
	) {
		// '=!'
		const next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);
		if (next === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.equality,
				parser.input.charCodeAt(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					) + 2,
				) === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo
					? 3
					: 2,
			);
			return undefined;
		}
		if (
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo &&
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.greaterThan
		) {
			// '=>'
			parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
				parser.state.index,
				2,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow,
			);
			return undefined;
		}
		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
			parser,
			code === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo
				? ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eq
				: ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bang,
			1,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenQuestion(
		parser,
	) {
		const next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 1,
		);
		const next2 = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) + 2,
		);
		if (
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.questionMark &&
			!parser.inScope("TYPE")
		) {
			if (next2 === ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo) {
				// '??='
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.assign,
					3,
				);
			} else {
				// '??'
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.nullishCoalescing,
					2,
				);
			}
		} else if (
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.dot &&
			!(next2 >= ___R$project$rome$$romejs$string$charcodes$index_ts.digit0 &&
			next2 <= ___R$project$rome$$romejs$string$charcodes$index_ts.digit9)
		) {
			// '.' not followed by a number
			parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
				parser.state.index,
				2,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.questionDot,
			);
		} else {
			// '?'
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.question,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenNumberSign(
		parser,
	) {
		// Only tokenize a hash if we're inside of a class, or if we're the first character in the file (hashbang indicator)
		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(parser.state.classLevel) >
			0 ||
			parser.state.index === ___R$project$rome$$romejs$ob1$index_ts$ob1Number0
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.hash,
			);
			return undefined;
		}

		// TODO make this a diagnostic, and advance to the next line if suspected hashbang
		parser.addDiagnostic({
			description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNEXPECTED_HASH(
				parser.input[___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 1] === "!",
			),
		});
		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);
		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(parser);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getTokenFromCode(
		parser,
		code,
	) {
		if (code === ___R$project$rome$$romejs$string$charcodes$index_ts.digit0) {
			const next = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 1,
			);

			// '0x', '0X' - hex number
			if (
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseX ||
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseX
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readRadixNumber(
					parser,
					16,
					"hex",
				);
				return undefined;
			}

			// '0o', '0O' - octal number
			if (
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseO ||
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseO
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readRadixNumber(
					parser,
					8,
					"octal",
				);
				return undefined;
			}

			// '0b', '0B' - binary number
			if (
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseB ||
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseB
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readRadixNumber(
					parser,
					2,
					"binary",
				);
				return undefined;
			}
		}

		switch (code) {
			case ___R$project$rome$$romejs$string$charcodes$index_ts.numberSign:
				return ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenNumberSign(
					parser,
				);

			// The interpretation of a dot depends on whether it is followed

			// by a digit or another two dots.
			case ___R$project$rome$$romejs$string$charcodes$index_ts.dot: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenDot(
					parser,
				);
				return undefined;
			}

			// Punctuation tokens.
			case ___R$project$rome$$romejs$string$charcodes$index_ts.leftParenthesis: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenL,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.rightParenthesis: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.semicolon: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.comma: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.comma,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.leftSquareBracket: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketL,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.rightSquareBracket: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bracketR,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.leftCurlyBrace: {
				if (
					parser.input.charCodeAt(
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
							parser,
						) + 1,
					) ===
					___R$project$rome$$romejs$string$charcodes$index_ts.verticalBar
				) {
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
						parser,
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceBarL,
						2,
					);
				} else {
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
						parser,
					);
					___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
						parser,
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
					);
				}
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.rightCurlyBrace: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.colon: {
				if (
					parser.input.charCodeAt(
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
							parser,
						) + 1,
					) ===
					___R$project$rome$$romejs$string$charcodes$index_ts.colon
				) {
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
						parser,
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.doubleColon,
						2,
					);
				} else {
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
						parser,
					);
					___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
						parser,
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon,
					);
				}
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.questionMark: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenQuestion(
					parser,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.atSign: {
				// The token @@ is the start of a Flow iterator name
				const next = parser.input.charCodeAt(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					) + 1,
				);
				if (next === ___R$project$rome$$romejs$string$charcodes$index_ts.atSign) {
					parser.state.isIterator = true;
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readWord(
						parser,
					);
				} else {
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
						parser,
					);
					___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
						parser,
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.at,
					);
				}
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.graveAccent: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote,
				);
				return undefined;
			}

			// Anything else beginning with a digit is an integer, octal

			// number, or float.
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit0:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit1:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit2:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit3:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit4:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit5:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit6:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit7:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit8:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.digit9: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readNumber(
					parser,
					false,
				);
				return undefined;
			}

			// Quotes produce strings.
			case ___R$project$rome$$romejs$string$charcodes$index_ts.quotationMark:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.apostrophe: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readString(
					parser,
					code,
				);
				return undefined;
			}

			// Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is

			// often referred to. `finishOp` simply skips the amount of

			// characters it is given as second argument, and returns a token

			// of the type given by its first argument.
			case ___R$project$rome$$romejs$string$charcodes$index_ts.slash: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenSlash(
					parser,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.percentSign:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.asterisk: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenMultModulo(
					parser,
					code,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.verticalBar:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.ampersand: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenPipeAmp(
					parser,
					code,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.caret: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenCaret(
					parser,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.plusSign:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.dash: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenPlusMin(
					parser,
					code,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.lessThan:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.greaterThan: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenLtGt(
					parser,
					code,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.equalsTo:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.exclamationMark: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenEqExcl(
					parser,
					code,
				);
				return undefined;
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.tilde: {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.tilde,
					1,
				);
				return undefined;
			}
		}

		const char = parser.input[___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
			parser,
		)];
		const unicodeMistake = ___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$UNICODE_MISTAKES.get(
			char,
		);
		if (unicodeMistake !== undefined) {
			const [unicodeName, equivalentChar] = unicodeMistake;
			const equivalentName = ___R$project$rome$$romejs$js$parser$tokenizer$unicodeMistakes_ts$ASCII_NAMES.get(
				equivalentChar,
			);
			if (equivalentName === undefined) {
				throw new Error("Expected ASCII name for " + equivalentChar);
			}

			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNEXPECTED_UNICODE_CHARACTER(
					char,
					unicodeName,
					equivalentChar,
					equivalentName,
				),
			});

			// Read the token as the equivalent character
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getTokenFromCode(
				parser,
				equivalentChar.charCodeAt(0),
			);
			return;
		}

		parser.addDiagnostic({
			description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PARSER_CORE.UNEXPECTED_CHARACTER(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$codePointToString(
					code,
				),
			),
		});

		// Skip unknown characters
		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);
		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(parser);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$finishOp(
		parser,
		type,
		size,
	) {
		const str = parser.getRawInput(
			parser.state.index,
			___R$project$rome$$romejs$ob1$index_ts$ob1Add(parser.state.index, size),
		);
		parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
			parser.state.index,
			size,
		);
		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
			parser,
			type,
			str,
		);
	}

	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$readRegexp(
		parser,
	) {
		const start = parser.state.index;
		let escaped;
		let inClass;
		while (true) {
			if (parser.state.index >= parser.length) {
				parser.addDiagnostic({
					end: parser.getPositionFromIndex(parser.state.index),
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNTERMINATED_REGEX,
				});
				break;
			}

			const ch = parser.input.charAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);
			if (
				___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak.test(
					ch,
				)
			) {
				if (
					parser.input.charAt(
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
							parser,
						) - 2,
					) ===
					String.fromCharCode(
						___R$project$rome$$romejs$string$charcodes$index_ts.backslash,
					) ||
					parser.input.charAt(
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
							parser,
						) - 3,
					) ===
					String.fromCharCode(
						___R$project$rome$$romejs$string$charcodes$index_ts.backslash,
					)
				) {
					const line = parser.input.slice(
						0,
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
							parser,
						),
					);
					const backslashIndex = line.lastIndexOf(
						String.fromCharCode(
							___R$project$rome$$romejs$string$charcodes$index_ts.backslash,
						),
					);
					parser.addDiagnostic({
						end: parser.getPositionFromIndex(
							___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(backslashIndex),
						),
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DANGLING_BACKSLASH_IN_REGEX,
					});
					break;
				}
				parser.addDiagnostic({
					end: parser.getPositionFromIndex(parser.state.index),
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNTERMINATED_REGEX,
				});
				break;
			}

			if (escaped) {
				escaped = false;
			} else {
				if (ch === "[") {
					inClass = true;
				} else if (ch === "]" && inClass) {
					inClass = false;
				} else if (ch === "/" && !inClass) {
					break;
				}

				escaped = ch === "\\";
			}

			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
		}

		const content = parser.getRawInput(start, parser.state.index);
		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);

		const rawMods = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readWord1(
			parser,
		);
		if (parser.state.escapePosition !== undefined) {
			parser.addDiagnostic({
				index: parser.state.escapePosition,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNICODE_ESCAPE_IN_REGEX_FLAGS,
			});
		}
		const mods = ___R$project$rome$$romejs$js$parser$utils$regex_ts$validateRegexFlags(
			rawMods,
			(metadata, flagPosition) => {
				parser.addDiagnostic({
					index: ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
							___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
								parser,
							) - rawMods.length,
						),
						flagPosition,
					),
					description: metadata,
				});
			},
		);

		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.regexp,
			new ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$RegExpTokenValue(
				content,
				mods,
			),
		);
	}

	// Read an integer in the given radix. Return null if zero digits
	// were read, the integer value otherwise. When `len` is given, this
	// will return `null` unless the integer has exactly `len` digits.
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readInt(
		parser,
		radix,
		len,
	) {
		const start = parser.state.index;
		const forbiddenSiblings =
			radix === 16
				? ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$forbiddenNumericSeparatorSiblings.hex
				: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$forbiddenNumericSeparatorSiblings.decBinOct;

		let allowedSiblings;
		if (radix === 16) {
			allowedSiblings = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblings.hex;
		} else if (radix === 10) {
			allowedSiblings = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblings.dec;
		} else if (radix === 8) {
			allowedSiblings = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblings.oct;
		} else {
			allowedSiblings = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$allowedNumericSeparatorSiblings.bin;
		}

		let total = 0;

		for (let i = 0, e = len === undefined ? Infinity : len; i < e; ++i) {
			const code = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);
			let val;

			const prev = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) - 1,
			);
			const next = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				) + 1,
			);
			if (
				code ===
				___R$project$rome$$romejs$string$charcodes$index_ts.underscore
			) {
				if (allowedSiblings.indexOf(next) === -1) {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_INT_TOKEN,
					});
				}

				if (
					forbiddenSiblings.indexOf(prev) > -1 ||
					forbiddenSiblings.indexOf(next) > -1 ||
					Number.isNaN(next)
				) {
					parser.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_INT_TOKEN,
					});
				}

				// Ignore this _ character
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				continue;
			}

			if (code >= ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseA) {
				val =
					code -
					___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseA +
					___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed;
			} else if (
				code >=
				___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseA
			) {
				val =
					code -
					___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseA +
					___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed;
			} else if (
				___R$project$rome$$romejs$string$charcodes$index_ts.isDigit(code)
			) {
				val = code - ___R$project$rome$$romejs$string$charcodes$index_ts.digit0; // 0-9
			} else {
				val = Infinity;
			}

			if (val >= radix) {
				break;
			}

			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			total = total * radix + val;
		}

		if (
			parser.state.index === start ||
			(len !== undefined &&
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			) -
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(start) !==
			len)
		) {
			return undefined;
		}

		return total;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readRadixNumber(
		parser,
		radix,
		format,
	) {
		const start = parser.state.index;
		let isBigInt = false;

		parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
			parser.state.index,
			2,
		); // 0x
		let val = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readInt(
			parser,
			radix,
		);
		if (val === undefined) {
			parser.addDiagnostic({
				index: ___R$project$rome$$romejs$ob1$index_ts$ob1Add(start, 2),
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_NUMBER_IN_RADIX(
					radix,
				),
			});
			val = 0;
		}

		if (
			parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			) ===
			___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseN
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			isBigInt = true;
		}

		if (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$fullCharCodeAtPos(
					parser,
				),
			)
		) {
			parser.addDiagnostic({
				index: parser.state.index,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IDENTIFIER_AFTER_NUMBER,
			});
		}

		if (isBigInt) {
			const str = parser.getRawInput(start, parser.state.index).replace(
				/[_n]/g,
				"",
			);
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bigint,
				str,
			);
			return undefined;
		}

		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num,
			new ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$NumberTokenValue(
				val,
				format,
			),
		);
	}

	// Read an integer, octal integer, or floating-point number.
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readNumber(
		parser,
		startsWithDot,
	) {
		const start = parser.state.startPos;
		let isFloat = false;
		let isBigInt = false;

		if (
			!startsWithDot &&
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readInt(
				parser,
				10,
			) === undefined
		) {
			parser.addDiagnostic({
				index: parser.state.index,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_NUMBER,
			});
		}

		let isOctal =
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(parser.state.index) -
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(start.index) >=
			2 &&
			parser.input.charCodeAt(
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(start.index),
			) === ___R$project$rome$$romejs$string$charcodes$index_ts.digit0;
		if (isOctal) {
			if (parser.inScope("STRICT")) {
				parser.addDiagnostic({
					index: parser.state.index,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.LEGACY_OCTAL_IN_STRICT_MODE,
				});
			}

			if (/[89]/.test(parser.getRawInput(start.index, parser.state.index))) {
				isOctal = false;
			}
		}

		let next = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			),
		);
		if (
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.dot &&
			!isOctal
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readInt(
				parser,
				10,
			);
			isFloat = true;
			next = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);
		}

		if (
			(next === ___R$project$rome$$romejs$string$charcodes$index_ts.uppercaseE ||
			next === ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseE) &&
			!isOctal
		) {
			next = parser.input.charCodeAt(
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
						parser,
					),
				),
			);

			if (
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.plusSign ||
				next === ___R$project$rome$$romejs$string$charcodes$index_ts.dash
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
			}

			if (
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readInt(
					parser,
					10,
				) ===
				undefined
			) {
				parser.addDiagnostic({
					index: parser.state.index,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_NUMBER,
				});
			}

			isFloat = true;
			next = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);
		}

		if (next === ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseN) {
			// Disallow floats and legacy octal syntax, new style octal ("0o") is handled in readRadixNumber
			if (isFloat) {
				parser.addDiagnostic({
					index: parser.state.index,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.DECIMAL_BIGINT,
				});
			}

			if (isOctal) {
				parser.addDiagnostic({
					index: parser.state.index,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.OCTAL_BIGINT,
				});
			}

			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			isBigInt = true;
		}

		if (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart(
				parser.input.codePointAt(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					),
				),
			)
		) {
			parser.addDiagnostic({
				index: parser.state.index,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.IDENTIFIER_AFTER_NUMBER,
			});
		}

		// Remove "_" for numeric literal separator, and "n" for BigInts
		const str = parser.getRawInput(start.index, parser.state.index).replace(
			/[_n]/g,
			"",
		);

		if (isBigInt) {
			___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
				parser,
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.bigint,
				str,
			);
			return undefined;
		}

		const num = isOctal ? parseInt(str, 8) : parseFloat(str);
		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.num,
			new ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$NumberTokenValue(
				num,
				isOctal ? "octal" : undefined,
			),
		);
	}

	// Read a string value, interpreting backslash-escapes.
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readCodePoint(
		parser,
		throwOnInvalid,
	) {
		const ch = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			),
		);
		let code;

		if (
			ch ===
			___R$project$rome$$romejs$string$charcodes$index_ts.leftCurlyBrace
		) {
			const codePos = parser.state.index;
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			code = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readHexChar(
				parser,
				parser.input.indexOf(
					"}",
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					),
				) -
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
				throwOnInvalid,
			);
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			if (code === undefined) {
				// @ts-ignore
				parser.state.invalidTemplateEscapePosition--; // to point to the '\'' instead of the 'u'
			} else if (code > 1114111) {
				if (throwOnInvalid) {
					parser.addDiagnostic({
						index: codePos,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.OUT_OF_BOUND_CODE_POINT,
					});
				} else {
					parser.state.invalidTemplateEscapePosition = ___R$project$rome$$romejs$ob1$index_ts$ob1Sub(
						codePos,
						2,
					);
					return undefined;
				}
			}
		} else {
			code = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readHexChar(
				parser,
				4,
				throwOnInvalid,
			);
		}
		return code;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readString(
		parser,
		quote,
	) {
		let out = "";
		let chunkStart = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);

		while (true) {
			if (parser.state.index >= parser.length) {
				parser.addDiagnostic({
					end: parser.getPositionFromIndex(parser.state.index),
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNTERMINATED_STRING,
				});
				break;
			}

			const ch = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);
			if (ch === quote) {
				break;
			}

			if (ch === ___R$project$rome$$romejs$string$charcodes$index_ts.backslash) {
				out += parser.getRawInput(chunkStart, parser.state.index);
				out += ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readEscapedChar(
					parser,
					false,
				);
				chunkStart = parser.state.index;
			} else if (
				ch === ___R$project$rome$$romejs$string$charcodes$index_ts.lineSeparator ||
				ch ===
				___R$project$rome$$romejs$string$charcodes$index_ts.paragraphSeparator
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
				parser.state.curLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
					parser.state.curLine,
				);
			} else {
				if (
					___R$project$rome$$romejs$js$parser$utils$whitespace_ts$isNewLine(ch)
				) {
					parser.addDiagnostic({
						end: parser.getPositionFromIndex(parser.state.index),
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNTERMINATED_STRING,
					});
				}
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
			}
		}

		out += parser.getRawInput(chunkStart, parser.state.index);
		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);
		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
			out,
		);
	}

	// Reads template string tokens.
	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$readTemplateToken(
		parser,
	) {
		let out = "";
		let chunkStart = parser.state.index;
		let containsInvalid = false;

		while (true) {
			if (parser.state.index >= parser.length) {
				parser.addDiagnostic({
					end: parser.getPositionFromIndex(parser.state.index),
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNTERMINATED_TEMPLATE,
				});
				break;
			}

			const ch = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);
			if (
				ch === ___R$project$rome$$romejs$string$charcodes$index_ts.graveAccent ||
				(ch === ___R$project$rome$$romejs$string$charcodes$index_ts.dollarSign &&
				parser.input.charCodeAt(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
						parser,
					) + 1,
				) === ___R$project$rome$$romejs$string$charcodes$index_ts.leftCurlyBrace)
			) {
				if (
					parser.state.index === parser.state.startPos.index &&
					parser.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.template,
					)
				) {
					if (
						ch ===
						___R$project$rome$$romejs$string$charcodes$index_ts.dollarSign
					) {
						parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
							parser.state.index,
							2,
						);
						___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
							parser,
							___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dollarBraceL,
						);
						return undefined;
					} else {
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
							parser,
						);
						___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
							parser,
							___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.backQuote,
						);
						return undefined;
					}
				}
				out += parser.getRawInput(chunkStart, parser.state.index);
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.template,
					containsInvalid ? undefined : out,
				);
				return undefined;
			}

			if (ch === ___R$project$rome$$romejs$string$charcodes$index_ts.backslash) {
				out += parser.getRawInput(chunkStart, parser.state.index);
				const escaped = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readEscapedChar(
					parser,
					true,
				);
				if (escaped === undefined) {
					containsInvalid = true;
				} else {
					out += escaped;
				}
				chunkStart = parser.state.index;
			} else if (
				___R$project$rome$$romejs$js$parser$utils$whitespace_ts$isNewLine(ch)
			) {
				out += parser.getRawInput(chunkStart, parser.state.index);
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);

				if (
					ch ===
					___R$project$rome$$romejs$string$charcodes$index_ts.carriageReturn &&
					parser.input.charCodeAt(
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
							parser,
						),
					) === ___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed
				) {
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
						parser,
					);
				}

				switch (ch) {
					case ___R$project$rome$$romejs$string$charcodes$index_ts.carriageReturn:
					case ___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed: {
						out += "\n";
						break;
					}

					default: {
						out += String.fromCharCode(ch);
						break;
					}
				}

				parser.state.curLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
					parser.state.curLine,
				);
				parser.resetTokenizerLine();
				chunkStart = parser.state.index;
			} else {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
			}
		}
	}

	// Used to read escaped characters
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readEscapedChar(
		parser,
		inTemplate,
	) {
		const throwOnInvalid = !inTemplate;
		const ch = parser.input.charCodeAt(
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				),
			),
		);
		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);

		if (
			ch === ___R$project$rome$$romejs$string$charcodes$index_ts.carriageReturn &&
			parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			) === ___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
		}

		switch (ch) {
			case ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseN:
				return "\n";

			case ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseR:
				return "\r";

			case ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseX: {
				const code = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readHexChar(
					parser,
					2,
					throwOnInvalid,
				);
				return code === undefined ? undefined : String.fromCharCode(code);
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseU: {
				const code = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readCodePoint(
					parser,
					throwOnInvalid,
				);
				return code === undefined
					? undefined
					: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$codePointToString(
							code,
						);
			}

			case ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseT:
				return "\t";

			case ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseB:
				return "\b";

			case ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseV:
				return "\x0b";

			case ___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseF:
				return "\f";

			case ___R$project$rome$$romejs$string$charcodes$index_ts.carriageReturn:
			case ___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed: {
				parser.state.curLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
					parser.state.curLine,
				);
				parser.resetTokenizerLine();
				return "";
			}

			default: {
				if (
					ch >= ___R$project$rome$$romejs$string$charcodes$index_ts.digit0 &&
					ch <= ___R$project$rome$$romejs$string$charcodes$index_ts.digit7
				) {
					const codePos = ___R$project$rome$$romejs$ob1$index_ts$ob1Dec(
						parser.state.index,
					);
					const octalMatches = parser.input.substr(
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
							parser,
						) - 1,
						3,
					).match(/^[0-7]+/);

					let octalStr = octalMatches[0];
					let octal = parseInt(octalStr, 8);
					if (octal > 255) {
						octalStr = octalStr.slice(0, -1);
						octal = parseInt(octalStr, 8);
					}

					if (octal > 0) {
						if (inTemplate) {
							parser.state.invalidTemplateEscapePosition = codePos;
							return undefined;
						} else if (parser.inScope("STRICT")) {
							parser.addDiagnostic({
								index: codePos,
								description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.OCTAL_IN_STRICT_MODE,
							});
						} else if (!parser.state.containsOctal) {
							// These properties are only used to throw an error for an octal which occurs
							// in a directive which occurs prior to a "use strict" directive.
							parser.state.containsOctal = true;
							parser.state.octalPosition = codePos;
						}
					}

					parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
						parser.state.index,
						octalStr.length - 1,
					);
					return String.fromCharCode(octal);
				}

				return String.fromCharCode(ch);
			}
		}
	}

	// Used to read character escape sequences ('\x', '\u').
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readHexChar(
		parser,
		len,
		throwOnInvalid,
	) {
		const start = parser.state.index;
		const n = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readInt(
			parser,
			16,
			len,
		);

		if (n === undefined) {
			if (throwOnInvalid) {
				parser.addDiagnostic({
					index: start,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.BAD_HEX_ESCAPE,
				});
				return 0;
			}

			const codePos = parser.state.index;
			parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Dec(
				codePos,
			);
			parser.state.invalidTemplateEscapePosition = ___R$project$rome$$romejs$ob1$index_ts$ob1Dec(
				codePos,
			);
		}

		return n;
	}

	// Read an identifier, and return it as a string. Sets `parser.state.escapePosition`
	// to an index if the word contained a '\u' escape.
	//
	// Incrementally adds only escaped chars, adding other chunks as-is
	// as a micro-optimization.
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readWord1(
		parser,
	) {
		parser.state.escapePosition = undefined;
		let word = "";
		let first = true;
		let chunkStart = parser.state.index;

		while (parser.state.index < parser.length) {
			const ch = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$fullCharCodeAtPos(
				parser,
			);

			if (
				___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierChar(
					ch,
				)
			) {
				parser.state.index = ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
					parser.state.index,
					ch <= 65535 ? 1 : 2,
				);
			} else if (
				parser.state.isIterator &&
				ch === ___R$project$rome$$romejs$string$charcodes$index_ts.atSign
			) {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
			} else if (
				ch ===
				___R$project$rome$$romejs$string$charcodes$index_ts.backslash
			) {
				parser.state.escapePosition = parser.state.index;

				word += parser.getRawInput(chunkStart, parser.state.index);

				if (
					parser.input.charCodeAt(
						___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
							___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
								parser,
							),
						),
					) !==
					___R$project$rome$$romejs$string$charcodes$index_ts.lowercaseU
				) {
					parser.addDiagnostic({
						index: parser.state.index,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_UNICODE_ESCAPE,
					});
				}

				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);

				const esc = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readCodePoint(
					parser,
					true,
				);
				if (esc === undefined) {
					throw new Error("readCodePoint() should have thrown an error");
				}

				const isValid = first
					? ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierStart
					: ___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierChar;
				if (isValid(esc) === false) {
					parser.addDiagnostic({
						index: parser.state.index,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_UNICODE_ESCAPE,
					});
				}

				word += ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$codePointToString(
					esc,
				);
				chunkStart = parser.state.index;
			} else {
				break;
			}

			first = false;
		}

		return word + parser.getRawInput(chunkStart, parser.state.index);
	}

	// Read an identifier or keyword token. Will check for reserved
	// words when necessary.
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readWord(
		parser,
	) {
		const word = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readWord1(
			parser,
		);

		// @ts-ignore: The value of keywordTypes has a generic parameter of `string` instead of the labels that we would actually find in keywordTypes
		let type =
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$keywords.get(word) ||
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name;

		if (type.keyword !== undefined && parser.state.escapePosition !== undefined) {
			parser.addDiagnostic({
				index: parser.state.escapePosition,
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ESCAPE_SEQUENCE_IN_KEYWORD(
					word,
				),
			});
		}

		if (
			parser.state.isIterator &&
			(!___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$isIterator(
				word,
			) ||
			!parser.inScope("TYPE"))
		) {
			parser.addDiagnostic({
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.INVALID_IDENTIFIER_NAME(
					word,
				),
			});
		}

		___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
			parser,
			type,
			word,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$isIterator(
		word,
	) {
		return word === "@@iterator" || word === "@@asyncIterator";
	}

	function ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$isBraceBlock(
		parser,
		prevType,
	) {
		const parent = ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
			parser,
		);
		if (
			parent ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.functionExpression ||
			parent ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.functionStatement
		) {
			return true;
		}
		if (
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.colon &&
			(parent ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.braceStatement ||
			parent ===
			___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.braceExpression)
		) {
			return !parent.isExpr;
		}

		// The check for `tt.name && exprAllowed` detects whether we are

		// after a `yield` or `of` construct. See the `updateContext` for

		// `tt.name`.
		if (
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._return ||
			(prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name &&
			parser.state.exprAllowed)
		) {
			return ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak.test(
				parser.getRawInput(
					parser.state.lastEndPos.index,
					parser.state.startPos.index,
				),
			);
		}

		if (
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._else ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.parenR ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.arrow
		) {
			return true;
		}

		if (
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL
		) {
			return (
				parent ===
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.braceStatement
			);
		}

		if (
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._var ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types._const
		) {
			return false;
		}

		if (
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.relational
		) {
			// `class C<T> { ... }`
			return true;
		}

		return !parser.state.exprAllowed;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$updateContext(
		parser,
		prevType,
	) {
		if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceL,
			)
		) {
			const curContext = ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$getCurContext(
				parser,
			);
			if (
				curContext ===
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxOpenTag
			) {
				parser.state.context.push(
					___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.braceExpression,
				);
			} else if (
				curContext ===
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxInner
			) {
				parser.state.context.push(
					___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.templateQuasi,
				);
			} else {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$_updateContext(
					parser,
					prevType,
				);
			}

			parser.state.exprAllowed = true;
		} else if (
			parser.match(
				___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.slash,
			) &&
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart
		) {
			parser.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
			parser.state.context.push(
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.jsxCloseTag,
			); // reconsider as closing tag context
			parser.state.exprAllowed = false;
		} else {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$_updateContext(
				parser,
				prevType,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$_updateContext(
		parser,
		prevType,
	) {
		const type = parser.state.tokenType;

		if (
			type.keyword !== undefined &&
			(prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.dot ||
			prevType ===
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.questionDot)
		) {
			parser.state.exprAllowed = false;
		} else if (type.updateContext !== undefined) {
			type.updateContext(parser, prevType);
		} else {
			parser.state.exprAllowed = type.beforeExpr;
		}
	}

	// Reads inline JSX contents token.
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsx(
		parser,
	) {
		let out = "";
		let chunkStart = parser.state.index;
		while (true) {
			if (parser.state.index >= parser.length) {
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				);
				break;
			}

			const code = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);

			if (
				code === ___R$project$rome$$romejs$string$charcodes$index_ts.lessThan ||
				code ===
				___R$project$rome$$romejs$string$charcodes$index_ts.leftCurlyBrace
			) {
				if (parser.state.index === parser.state.startPos.index) {
					if (
						code ===
						___R$project$rome$$romejs$string$charcodes$index_ts.lessThan &&
						parser.state.exprAllowed
					) {
						___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
							parser,
						);
						return ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
							parser,
							___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxTagStart,
						);
					}

					return ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getTokenFromCode(
						parser,
						code,
					);
				}

				out += parser.getRawInput(chunkStart, parser.state.index);
				return ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
					parser,
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxText,
					out,
				);
			}

			if (code === ___R$project$rome$$romejs$string$charcodes$index_ts.ampersand) {
				out += parser.getRawInput(chunkStart, parser.state.index);
				out += ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxEntity(
					parser,
				);
				chunkStart = parser.state.index;
				continue;
			}

			if (
				___R$project$rome$$romejs$js$parser$utils$whitespace_ts$isNewLine(code)
			) {
				out += parser.getRawInput(chunkStart, parser.state.index);
				out += ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxNewLine(
					parser,
					true,
				);
				chunkStart = parser.state.index;
			} else {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
			}
		}
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxNewLine(
		parser,
		normalizeCRLF,
	) {
		const ch = parser.input.charCodeAt(
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			),
		);
		let out;
		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);

		if (
			ch === ___R$project$rome$$romejs$string$charcodes$index_ts.carriageReturn &&
			parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			) === ___R$project$rome$$romejs$string$charcodes$index_ts.lineFeed
		) {
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			out = normalizeCRLF ? "\n" : "\r\n";
		} else {
			out = String.fromCharCode(ch);
		}

		parser.state.curLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
			parser.state.curLine,
		);
		parser.resetTokenizerLine();
		return out;
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxString(
		parser,
		quote,
	) {
		let out = "";
		let chunkStart = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);
		while (true) {
			if (parser.state.index >= parser.length) {
				parser.addDiagnostic({
					end: parser.getPositionFromIndex(parser.state.index),
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNTERMINATED_JSX_STRING,
				});
				break;
			}

			const ch = parser.input.charCodeAt(
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
					parser,
				),
			);
			if (ch === quote) {
				break;
			}

			if (ch === ___R$project$rome$$romejs$string$charcodes$index_ts.ampersand) {
				out += parser.getRawInput(chunkStart, parser.state.index);
				out += ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxEntity(
					parser,
				);
				chunkStart = parser.state.index;
			} else if (
				___R$project$rome$$romejs$js$parser$utils$whitespace_ts$isNewLine(ch)
			) {
				out += parser.getRawInput(chunkStart, parser.state.index);
				out += ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxNewLine(
					parser,
					false,
				);
				chunkStart = parser.state.index;
			} else {
				___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
					parser,
				);
			}
		}

		out += parser.getRawInput(chunkStart, parser.state.index);
		___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);
		return ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.string,
			out,
		);
	}

	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxEntity(
		parser,
	) {
		let str = "";
		let count = 0;
		let entity;
		let ch = parser.input[___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
			parser,
		)];

		const startIndex = ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
			parser,
		);

		while (parser.state.index < parser.length && count++ < 10) {
			ch = parser.input[___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$getIndex(
				parser,
			)];
			___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
				parser,
			);
			if (ch === ";") {
				if (str[0] === "#") {
					if (str[1] === "x") {
						str = str.substr(2);
						if (
							___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$HEX_NUMBER.test(
								str,
							)
						) {
							entity = String.fromCodePoint(parseInt(str, 16));
						}
					} else {
						str = str.substr(1);
						if (
							___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$DECIMAL_NUMBER.test(
								str,
							)
						) {
							entity = String.fromCodePoint(parseInt(str, 10));
						}
					}
				} else {
					entity = ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$xhtmlEntityNameToChar[str];
				}
				break;
			}
			str += ch;
		}

		if (entity === undefined) {
			parser.state.index = startIndex;
			return "&";
		} else {
			return entity;
		}
	}

	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can't contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.
	function ___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$readTokenJsxWord(
		parser,
	) {
		let ch;
		const start = parser.state.index;
		do {
			ch = parser.input.charCodeAt(
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
					___R$$priv$project$rome$$romejs$js$parser$tokenizer$index_ts$bumpIndex(
						parser,
					),
				),
			);
		} while (
			___R$project$rome$$romejs$js$parser$utils$identifier_ts$isIdentifierChar(
				ch,
			) ||
			ch === ___R$project$rome$$romejs$string$charcodes$index_ts.dash
		);
		return ___R$project$rome$$romejs$js$parser$tokenizer$index_ts$finishToken(
			parser,
			___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.jsxName,
			parser.getRawInput(start, parser.state.index),
		);
	}


  // project-rome/@romejs/js-parser/ParserBranchFinder.ts




	class ___R$project$rome$$romejs$js$parser$ParserBranchFinder_ts$default {
		constructor(parser) {
			this.parser = parser;
			this.branch = undefined;
			this.picked = false;
		}

		hasOptimalBranch() {
			return this.branch !== undefined && this.branch.optimal;
		}

		hasBranch() {
			return this.branch !== undefined;
		}

		add(callback, opts = {}) {
			const topBranch = this.branch;

			// If we already have a branch that produced no errors then no point continuing
			if (topBranch !== undefined && topBranch.optimal) {
				return this;
			}

			const {maxNewDiagnostics, diagnosticsPriority} = opts;
			const {parser} = this;
			const prevState = parser.cloneState();

			parser.pushScope("MAX_NEW_DIAGNOSTICS", maxNewDiagnostics);

			let result;
			try {
				result = callback(parser);
			} catch (err) {
				if (
					err instanceof
					___R$project$rome$$romejs$js$parser$parser_ts$DiagnosticsFatalError
				) {
					parser.setState(prevState);
					return this;
				} else {
					throw err;
				}
			}

			if (result === undefined) {
				parser.setState(prevState);
				return this;
			}

			// We capture the state at this point because it could have been previously changed
			const newState = parser.state;
			parser.popScope("MAX_NEW_DIAGNOSTICS");
			parser.setState(prevState);

			// Verify that we didn't exceed the maxDiagnostics, this should have already been done in Parser#addDiagnostic

			// but do it again as a sanity check. Previously some code caused the state to be manipulated in odd ways
			const newDiagnosticCount = newState.diagnostics.length;
			const prevDiagnosticCount = prevState.diagnostics.length;
			if (
				maxNewDiagnostics !== undefined &&
				newDiagnosticCount - prevDiagnosticCount > maxNewDiagnostics
			) {
				throw new Error(
					"Max diagnostics unexpectedly exceeded " +
					maxNewDiagnostics +
					". Prev: " +
					prevDiagnosticCount +
					" New: " +
					newDiagnosticCount,
				);
			}

			const branch = {
				diagnosticsPriority,
				result,
				state: newState,
				newDiagnosticCount: newDiagnosticCount - prevDiagnosticCount,
				diagnosticCount: newDiagnosticCount,
				optimal: newDiagnosticCount === prevDiagnosticCount,
			};

			// Promote this branch to the leader if it's the first, or if it has less diagnostics than the current
			let shouldPromote = false;

			if (topBranch === undefined || branch.optimal) {
				shouldPromote = true;
			} else {
				// Promote if the branch has less diagnostics than the top branch
				if (branch.diagnosticCount < topBranch.diagnosticCount) {
					shouldPromote = true;
				}

				// Promote if we have a priority but the top branch doesn't
				if (
					branch.diagnosticsPriority !== undefined &&
					topBranch.diagnosticsPriority === undefined
				) {
					shouldPromote = true;
				}

				// Promote if we have a priority, and the top branch does, and we're higher
				if (
					branch.diagnosticsPriority !== undefined &&
					topBranch.diagnosticsPriority !== undefined &&
					branch.diagnosticsPriority > topBranch.diagnosticsPriority
				) {
					shouldPromote = true;
				}

				// Don't promote if the top branch has a priority but we don't
				if (
					topBranch.diagnosticsPriority !== undefined &&
					branch.diagnosticsPriority === undefined
				) {
					shouldPromote = false;
				}
			}

			if (shouldPromote) {
				this.branch = branch;
			}

			return this;
		}

		getBranch() {
			if (this.branch === undefined) {
				throw new Error("No branch");
			} else {
				return this.branch;
			}
		}

		pickOptional() {
			if (this.hasBranch()) {
				return this.pick();
			} else {
				return undefined;
			}
		}

		pick() {
			if (this.picked) {
				throw new Error("Already been picked");
			}
			this.picked = true;

			const {parser} = this;
			const branch = this.getBranch();

			const {result, state} = branch;
			parser.setState(state);
			return result;
		}
	}


  // project-rome/@romejs/js-parser/tokenizer/state.ts








	const ___R$$priv$project$rome$$romejs$js$parser$tokenizer$state_ts$EMPTY_POS = {
		line: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
		column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
		index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
	};

	function ___R$project$rome$$romejs$js$parser$tokenizer$state_ts$createInitialState() {
		return {
			scopes: {},
			diagnostics: [],
			diagnosticFilters: [],
			hasHoistedVars: false,
			corrupt: false,
			tokens: [],
			potentialArrowAt: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1,
			commaAfterSpreadAt: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1,
			yieldPos: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			awaitPos: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			noArrowAt: [],
			noArrowParamsConversionAt: [],
			maybeInArrowParameters: false,
			isIterator: false,
			noAnonFunctionType: false,
			classLevel: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			labels: [],
			yieldInPossibleArrowParameters: undefined,
			comments: [],
			trailingComments: [],
			leadingComments: [],
			commentStack: [],
			commentPreviousNode: undefined,
			index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			lineStartIndex: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			curLine: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
			tokenType: ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
			tokenValue: undefined,
			startPos: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$state_ts$EMPTY_POS,
			endPos: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$state_ts$EMPTY_POS,
			lastStartPos: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$state_ts$EMPTY_POS,
			lastEndPos: ___R$$priv$project$rome$$romejs$js$parser$tokenizer$state_ts$EMPTY_POS,
			context: [
				___R$project$rome$$romejs$js$parser$tokenizer$context_ts$types.braceStatement,
			],
			exprAllowed: true,
			containsOctal: false,
			escapePosition: undefined,
			octalPosition: undefined,
			invalidTemplateEscapePosition: undefined,
			exportedIdentifiers: new Map(),
			lineStart: true,
			indentLevel: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
		};
	}


  // project-rome/@romejs/js-parser/CommentsConsumer.ts
class ___R$project$rome$$romejs$js$parser$CommentsConsumer_ts$default {
		constructor(seedComments = []) {
			this.idToComment = new Map();
			this.counter = seedComments.length;
			this.setComments(seedComments);
		}

		setComments(comments) {
			this.idToComment.clear();

			for (const comment of comments) {
				this.idToComment.set(comment.id, comment);
			}
		}

		getCommentsFromIds(ids) {
			if (ids === undefined) {
				return [];
			}

			const comments = [];

			for (const id of ids) {
				const comment = this.getCommentFromId(id);
				if (comment !== undefined) {
					comments.push(comment);
				}
			}

			return comments;
		}

		getIdsFromComments(comments) {
			return comments.map((comment) => comment.id);
		}

		getAllComments() {
			return Array.from(this.idToComment.values());
		}

		getCommentFromId(id) {
			return this.idToComment.get(id);
		}

		assertGetCommentFromId(id) {
			const comment = this.getCommentFromId(id);
			if (comment === undefined) {
				throw new Error("No comment found for id " + id);
			}
			return comment;
		}

		getNextId() {
			return String(this.counter++);
		}

		updateComment(comment) {
			this.idToComment.set(comment.id, comment);
		}

		removeComment(id) {
			this.idToComment.delete(id);
		}

		addComment(withoutId) {
			const withId = Object.assign({}, withoutId, {id: this.getNextId()});
			this.idToComment.set(withId.id, withId);
			return withId;
		}
	}


  // project-rome/@romejs/js-parser/parser.ts
const ___R$$priv$project$rome$$romejs$js$parser$parser_ts$TOKEN_MISTAKES = {
		";": ":",
		",": ".",
	};

	class ___R$project$rome$$romejs$js$parser$parser_ts$DiagnosticsFatalError
		extends Error {
		constructor() {
			super(
				"Diagnostics exceeded maxDiagnostics state cap, this error is expected to be handled by a try-catch in the call stack",
			);
		}
	}





	const ___R$$priv$project$rome$$romejs$js$parser$parser_ts$SCOPE_TYPES = [
		"FUNCTION_LOC",
		"NON_ARROW_FUNCTION",
		"FUNCTION",
		"GENERATOR",
		"ASYNC",
		"PROPERTY_NAME",
		"CLASS_PROPERTY",
		"PARAMETERS",
		"METHOD",
		"CLASS",
		"TYPE",
		"MAX_NEW_DIAGNOSTICS",
		"STRICT",
		"FLOW_COMMENT",
	];

	const ___R$project$rome$$romejs$js$parser$parser_ts$createJSParser = ___R$project$rome$$romejs$parser$core$index_ts$createParser((
		ParserCore,
		ParserWithRequiredPath,
	) => {
		// rome-ignore lint/js/noExplicitAny
		class JSParser extends ParserWithRequiredPath {
			constructor(options) {
				const state = ___R$project$rome$$romejs$js$parser$tokenizer$state_ts$createInitialState();

				const parserOpts = {
					path: options.path,
					mtime: options.mtime,
					input: options.input,
				};
				super(parserOpts, "parse/js", state);

				this.isTrackingTokens = options.tokens;

				this.isLookahead = false;

				this.sourceType = options.sourceType;
				this.options = options;
				this.inModule =
					this.options.sourceType === "template" ||
					this.options.sourceType === "module";
				this.parenthesized = new Set();
				this.comments = new ___R$project$rome$$romejs$js$parser$CommentsConsumer_ts$default();

				// Turn options.syntax into a Set, probably faster than doing `includes` on the array
				// We may also push stuff to it as we read comments such as `@\flow`
				this.syntax = new Set(options.syntax);
			}

			resetTokenizerLine() {
				this.state.lineStartIndex = this.state.index;
				this.state.lineStart = true;
				this.state.indentLevel = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
			}

			getScope(type) {
				let scope = this.state.scopes[type];
				if (scope === undefined) {
					scope = [];
					this.state.scopes[type] = scope;
				}
				return scope;
			}

			getLastScope(type) {
				const scope = this.getScope(type);
				return scope[scope.length - 1];
			}

			pushScope(type, value) {
				//console.log('+' + type);
				//console.group();
				this.getScope(type).push(value);
			}

			popScope(type) {
				//console.groupEnd();
				//console.log('-' + type);
				this.getScope(type).pop();
			}

			inScope(type) {
				return this.hasScope(type) && this.getLastScope(type) !== false;
			}

			hasScope(type) {
				const scope = this.state.scopes[type];
				return scope !== undefined && scope.length > 0;
			}

			addParenthesized(node) {
				this.parenthesized.add(this.getLoc(node).start.index);
			}

			isParenthesized(node) {
				return this.parenthesized.has(this.getLoc(node).start.index);
			}

			setState(newState) {
				// Verify that this new state doesn't exceed any previous maxDiagnostic cap
				// maxDiagnostics will be at -1 when it's own limit has been exceeded, in
				// this case, we are likely replacing the State with another that's valid
				// and doesn't exceed
				const maxDiagnostics = this.getLastScope("MAX_NEW_DIAGNOSTICS");
				if (typeof maxDiagnostics === "number" && maxDiagnostics !== -1) {
					const diff =
						newState.diagnostics.length - this.state.diagnostics.length;
					if (diff > maxDiagnostics) {
						throw new ___R$project$rome$$romejs$js$parser$parser_ts$DiagnosticsFatalError();
					}
				}

				this.state = newState;
			}

			atEOF() {
				return this.match(
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
				);
			}

			createBranch() {
				return new ___R$project$rome$$romejs$js$parser$ParserBranchFinder_ts$default(
					this,
				);
			}

			tryBranch(fn) {
				const branch = new ___R$project$rome$$romejs$js$parser$ParserBranchFinder_ts$default(
					this,
				);
				branch.add(fn, {maxNewDiagnostics: 0});
				if (branch.hasBranch()) {
					return branch.pickOptional();
				} else {
					return undefined;
				}
			}

			finalizeNode(node) {
				___R$project$rome$$romejs$js$parser$parser$comments_ts$attachComments(
					this,
					node,
				);
				return node;
			}

			// Sometimes we want to pretend we're in different locations to consume the comments of other nodes
			finishNodeWithCommentStarts(starts, node) {
				for (const start of starts) {
					node = this.finishNode(start, node);
				}
				return node;
			}

			finishNode(start, node) {
				return this.finishNodeAt(start, this.getLastEndPosition(), node);
			}

			finishNodeAt(start, end, node) {
				// Maybe mutating `node` is better...?
				const newNode = Object.assign(
					{},
					node,
					{loc: this.finishLocAt(start, end)},
				);
				return this.finalizeNode(newNode);
			}

			createUnknownIdentifier(
				reason,
				start = this.getPosition(),
				end = this.getLastEndPosition(),
			) {
				this.state.corrupt = true;
				return {
					type: "JSIdentifier",
					name: "INVALID_PLACEHOLDER",
					loc: this.finishLocAt(start, end),
				};
			}

			createUnknownStringLiteral(
				reason,
				start = this.getPosition(),
				end = this.getLastEndPosition(),
			) {
				this.state.corrupt = true;
				return {
					type: "JSStringLiteral",
					value: "INVALID_PLACEHOLDER",
					loc: this.finishLocAt(start, end),
				};
			}

			assertNoSpace(
				_metadata = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNEXPECTED_SPACE,
			) {
				const {state} = this;

				if (state.startPos.index > state.lastEndPos.index) {
					this.addDiagnostic({
						start: state.lastEndPos,
						end: state.lastEndPos,
						description: _metadata,
					});
				}
			}

			getDiagnostics() {
				const collector = new ___R$project$rome$$romejs$diagnostics$DiagnosticsProcessor_ts$default({
					origins: [
						{
							category: "js-parser",
						},
					],
					//unique: ['start.line'],
				});

				for (const filter of this.state.diagnosticFilters) {
					collector.addFilter(filter);
				}

				// TODO remove any trailing "eof" diagnostic
				return collector.addDiagnostics(this.state.diagnostics).slice(0, 1);
			}

			addDiagnosticFilter(diag) {
				this.state.diagnosticFilters.push(diag);
			}

			addCompleteDiagnostic(diags) {
				this.state.diagnostics = [...this.state.diagnostics, ...diags];
			}

			shouldCreateToken() {
				return this.isTrackingTokens && this.isLookahead === false;
			}

			createToken(state) {
				const token = {
					type: state.tokenType,
					start: state.startPos.index,
					end: state.endPos.index,
					loc: {
						filename: this.filename,
						start: state.startPos,
						end: state.endPos,
					},
				};
				this.pushToken(token);
				return token;
			}

			pushToken(token) {
				const lastToken = this.state.tokens[this.state.tokens.length - 1];
				if (lastToken !== undefined) {
					if (token.loc.start.index < lastToken.loc.end.index) {
						throw new Error(
							"Trying to push a token that appears before the last pushed token",
						);
					}
				}

				this.state.tokens.push(token);
			}

			addDiagnostic(opts) {
				if (this.isLookahead) {
					return;
				}

				let maxDiagnostics = this.getLastScope("MAX_NEW_DIAGNOSTICS");
				if (typeof maxDiagnostics === "number") {
					maxDiagnostics--;
					this.popScope("MAX_NEW_DIAGNOSTICS");
					this.pushScope("MAX_NEW_DIAGNOSTICS", maxDiagnostics);
					if (maxDiagnostics < 0) {
						throw new ___R$project$rome$$romejs$js$parser$parser_ts$DiagnosticsFatalError();
					}
				}

				if (this.state.diagnostics.length > 0) {
					//return;
				}

				let {start, end} = opts;

				if (opts.index !== undefined) {
					start = this.getPositionFromIndex(opts.index);
					end = start;
				}

				if (opts.location !== undefined) {
					start = opts.location.start;
					end = opts.location.end;
				}

				if (start === undefined && end === undefined && opts.loc !== undefined) {
					start = opts.loc.start;
					end = opts.loc.end;
				}

				// If we weren't given a start then default to the provided end, or the current token start
				if (start === undefined && end === undefined) {
					start = this.getPosition();
					end = this.getLastEndPosition();
				}

				if (start === undefined && end !== undefined) {
					start = end;
				}

				if (start !== undefined && end === undefined) {
					end = start;
				}

				this.state.diagnostics.push({
					description: Object.assign({category: "parse/js"}, opts.description),
					location: {
						filename: this.filename,
						sourceType: this.sourceType,
						mtime: this.mtime,
						start,
						end,
					},
				});
			}

			shouldTokenizeJSX() {
				return !this.isSyntaxEnabled("ts") || this.isSyntaxEnabled("jsx");
			}

			isSyntaxEnabled(syntax) {
				return this.syntax.has(syntax);
			}

			expectSyntaxEnabled(syntax) {
				if (!this.isSyntaxEnabled(syntax)) {
					this.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_ENABLE_SYNTAX(
							syntax,
						),
					});
				}
			}

			isRelational(op) {
				return (
					this.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.relational,
					) && this.state.tokenValue === op
				);
			}

			expectRelational(op) {
				if (this.eatRelational(op)) {
					return true;
				} else {
					this.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_RELATIONAL_OPERATOR,
					});
					return false;
				}
			}

			isLookaheadRelational(op) {
				const l = this.lookaheadState();
				return (
					l.tokenType ===
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.relational &&
					l.tokenValue === op
				);
			}

			banUnicodeEscape(index, name) {
				if (index !== undefined) {
					this.addDiagnostic({
						index,
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.ESCAPE_SEQUENCE_IN_WORD(
							name,
						),
					});
				}
			}

			// eat() for relational operators.
			eatRelational(op) {
				if (this.isRelational(op)) {
					this.next();
					return true;
				} else {
					return false;
				}
			}

			// Tests whether parsed token is a contextual keyword.
			isContextual(name) {
				return (
					this.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name,
					) &&
					this.state.tokenValue === name &&
					this.state.escapePosition === undefined
				);
			}

			isLookaheadContextual(name) {
				const l = this.lookaheadState();
				return (
					l.tokenType ===
					___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.name &&
					l.tokenValue === name &&
					l.escapePosition === undefined
				);
			}

			// Consumes contextual keyword if possible.
			eatContextual(name) {
				if (this.isContextual(name)) {
					this.next();
					return true;
				} else {
					return false;
				}
			}

			// Asserts that following token is given contextual keyword.
			expectContextual(
				name,
				_metadata = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_KEYWORD(
					name,
				),
			) {
				if (this.eatContextual(name)) {
					return true;
				} else {
					this.addDiagnostic({
						description: _metadata,
					});
					return false;
				}
			}

			// Test whether a semicolon can be inserted at the current position.
			canInsertSemicolon() {
				return (
					this.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
					) ||
					this.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.braceR,
					) ||
					this.hasPrecedingLineBreak()
				);
			}

			hasPrecedingLineBreak() {
				return ___R$project$rome$$romejs$js$parser$utils$whitespace_ts$lineBreak.test(
					this.getRawInput(
						this.state.lastEndPos.index,
						this.state.startPos.index,
					),
				);
			}

			isLineTerminator() {
				return (
					this.eat(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.semi,
					) || this.canInsertSemicolon()
				);
			}

			// Consume a semicolon, or, failing that, see if we are allowed to

			// pretend that there is a semicolon at this position.
			semicolon() {
				if (!this.isLineTerminator()) {
					this.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_SEMI_OR_LINE_TERMINATOR,
					});
				}
			}

			// Expect a token of a given type. If found, consume it, otherwise,

			// raise an unexpected token error at given pos.
			expect(type, pos) {
				if (this.eat(type)) {
					return true;
				} else {
					this.unexpectedToken(pos, type);
					return false;
				}
			}

			expectOpening(open, close, name) {
				const pos = this.getPosition();
				const indent = this.state.indentLevel;
				this.expect(open);
				return {
					indent,
					start: pos,
					name,
					open,
					close,
				};
			}

			expectClosing(context) {
				if (this.match(context.close)) {
					this.next();
					return true;
				} else {
					const currPos = this.getPosition();

					this.addDiagnostic({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.EXPECTED_CLOSING(
							context.name,
							context.close.label,
							{
								filename: this.filename,
								start: currPos,
								end: currPos,
							},
						),
						start: context.start,
						end: context.start,
					});

					return false;
				}
			}

			// Raise an unexpected token error. Can take the expected token type

			// instead of a message string.
			unexpectedToken(pos, tokenType) {
				let expectedToken;
				let possibleShiftMistake = false;

				if (tokenType !== undefined) {
					expectedToken = tokenType.label;

					const possibleMistake = ___R$$priv$project$rome$$romejs$js$parser$parser_ts$TOKEN_MISTAKES[tokenType.label];
					possibleShiftMistake =
						possibleMistake !== undefined &&
						possibleMistake === this.state.tokenType.label;
				}

				this.addDiagnostic({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.JS_PARSER.UNEXPECTED_TOKEN(
						expectedToken,
						possibleShiftMistake,
					),
					start: pos === undefined ? this.state.startPos : pos,
					end: pos === undefined ? this.state.endPos : pos,
				});
			}

			unexpected() {
				throw new Error(
					"js-parser should never throw an exception, use addDiagnostic or unexpectedToken instead",
				);
			}

			tokenize() {
				throw new Error("js-parser does not use the parser-core tokenizer");
			}

			cloneNode(node) {
				if (
					node.leadingComments === undefined &&
					node.trailingComments === undefined &&
					node.innerComments === undefined
				) {
					return Object.assign({}, node);
				} else {
					return Object.assign(
						{},
						node,
						{
							leadingComments: undefined,
							trailingComments: undefined,
							innerComments: undefined,
						},
					);
				}
			}

			// Reset the start location of node to the start location of locationNode
			resetStartLocationFromNode(node, locationNode) {
				node.loc = Object.assign(
					{},
					this.getLoc(node),
					{start: this.getLoc(locationNode).start},
				);
			}

			next() {
				if (this.shouldCreateToken()) {
					this.createToken(this.state);
				}

				this.state.lastEndPos = this.state.endPos;
				this.state.lastStartPos = this.state.startPos;
				___R$project$rome$$romejs$js$parser$tokenizer$index_ts$nextToken(this);
			}

			eat(type) {
				if (this.match(type)) {
					this.next();
					return true;
				}

				return false;
			}

			match(type) {
				return this.state.tokenType === type;
			}

			lookaheadState() {
				const old = this.state;
				this.state = this.cloneState(true);

				this.isLookahead = true;
				this.next();
				this.isLookahead = false;

				const curr = this.state;
				this.state = old;
				return curr;
			}

			cloneState(skipArrays = false) {
				const state = Object.assign({}, this.state);

				for (const key in state) {
					// @ts-ignore
					let val = state[key];

					const shouldSlice = skipArrays === false || key === "context";
					if (shouldSlice && Array.isArray(val)) {
						// @ts-ignore
						state[key] = val.slice();
					}
				}

				const scopes = Object.assign({}, state.scopes);
				state.scopes = scopes;
				for (const type of ___R$$priv$project$rome$$romejs$js$parser$parser_ts$SCOPE_TYPES) {
					const scope = scopes[type];
					if (scope !== undefined) {
						scopes[type] = scope.slice();
					}
				}

				return state;
			}

			// Overrides ParserCore#getPosition
			getPosition() {
				return this.state.startPos;
			}

			// Overrides ParserCore#getLastEndPosition
			getLastEndPosition() {
				return this.state.lastEndPos;
			}

			// Private method to actually generate a Position
			getPositionFromState() {
				const {state} = this;
				return {
					index: state.index,
					line: state.curLine,
					column: ___R$project$rome$$romejs$ob1$index_ts$ob1Sub(
						state.index,
						state.lineStartIndex,
					),
				};
			}

			parse() {
				if (this.inModule) {
					this.pushScope("ASYNC", true);
					this.pushScope("STRICT", true);
				}

				const program = ___R$project$rome$$romejs$js$parser$parser$statement_ts$parseTopLevel(
					this,
				);

				if (this.inModule) {
					this.popScope("ASYNC");
					this.popScope("STRICT");
				}

				// Smoke test for unpopped scopes
				for (const type of ___R$$priv$project$rome$$romejs$js$parser$parser_ts$SCOPE_TYPES) {
					if (this.hasScope(type)) {
						throw new Error(
							"Finished parsing but there was still a " + type + " scope stack",
						);
					}
				}

				// Smoke test for token exhaustion
				if (
					!this.match(
						___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.eof,
					)
				) {
					throw new Error("Finish parsing but we arent at the end of the file");
				}

				return program;
			}
		}

		return JSParser;
	});




  // project-rome/@romejs/js-parser/index.ts
function ___R$project$rome$$romejs$js$parser$index_ts$parseJS(userOptions) {
		const options = ___R$project$rome$$romejs$js$parser$options_ts$normalizeOptions(
			userOptions,
		);
		return ___R$project$rome$$romejs$js$parser$parser_ts$createJSParser(options).parse();
	}

	function ___R$project$rome$$romejs$js$parser$index_ts$tokenizeJS(
		input,
		userOptions,
	) {
		const options = ___R$project$rome$$romejs$js$parser$options_ts$normalizeOptions(
			userOptions,
		);
		const parser = ___R$project$rome$$romejs$js$parser$parser_ts$createJSParser(
			Object.assign({}, options, {tokens: true, input}),
		);
		parser.parse();

		const diagnostics = parser.getDiagnostics();
		let tokens = parser.state.tokens;

		// If we have any diagnostics, then mark anything from the first as invalid
		if (diagnostics.length > 0) {
			const firstDiag = diagnostics[0];
			const invalidStart = firstDiag.location.start;
			const invalidEnd = firstDiag.location.end;
			if (invalidStart === undefined || invalidEnd === undefined) {
				throw new Error(
					"All parser diagnostics are expected to have a start/end",
				);
			}

			const invalidStartIndex = invalidStart.index;

			const invalidToken = {
				type: ___R$project$rome$$romejs$js$parser$tokenizer$types_ts$types.invalid,
				start: invalidStart.index,
				end: invalidEnd.index,
				loc: {
					filename: parser.filename,
					start: invalidStart,
					end: invalidEnd,
				},
			};

			// Remove all tokens after our invalid one
			tokens = tokens.filter((token) => {
				return token.loc.start.index >= invalidStartIndex;
			});

			tokens.push(invalidToken);
		}

		return tokens;
	}


  // project-rome/@romejs/js-ast-utils/template.ts






	const ___R$$priv$project$rome$$romejs$js$ast$utils$template_ts$templateCache = new Map();

	function ___R$$priv$project$rome$$romejs$js$ast$utils$template_ts$getTemplate(
		strs,
	) {
		const cached = ___R$$priv$project$rome$$romejs$js$ast$utils$template_ts$templateCache.get(
			strs,
		);
		if (cached) {
			return cached;
		}

		// calculate amount of placeholders to insert
		const pathCount = strs.length - 1;

		// create path ids
		let placeholders = {};
		const placeholderIds = [];
		for (let i = 0; i < pathCount; i++) {
			const id = "__" + String(i) + "__";
			placeholderIds.push(id);
			placeholders[id] = undefined;
		}

		// interpolate placeholders and original code
		let code = "";
		for (let i = 0; i < strs.length; i++) {
			// add original part of code
			code += strs[i];

			// add in placeholder
			const placeholder = placeholderIds[i];
			if (placeholder) {
				code += placeholder;
			}
		}

		// parse the interpolated code
		let ast = ___R$project$rome$$romejs$js$parser$index_ts$parseJS({
			input: code,
			sourceType: "template",
			path: ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
				"template",
			),
		});

		// remove `loc` properties
		ast = ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$jsRoot.assert(
			___R$project$rome$$romejs$js$ast$utils$removeLoc_ts$default(ast),
		);

		// traverse and find placeholders paths
		function collectPlaceholderPaths(path) {
			const {node} = path;
			if (
				___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(node) &&
				node.name in placeholders
			) {
				placeholders[node.name] = {
					type: node.type,
					path: path.getPathKeys(),
				};
			}
			return node;
		}

		const context = new ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default({
			ast,
		});
		context.reduce(
			ast,
			[{name: "collectPlaceholderPaths", enter: collectPlaceholderPaths}],
		);

		const placeholderPaths = [];
		for (const id in placeholders) {
			const path = placeholders[id];
			if (path === undefined) {
				throw new Error("Failed to find placeholder path for " + id);
			} else {
				placeholderPaths.push(path);
			}
		}

		return {ast, placeholderPaths};
	}



	function ___R$$priv$project$rome$$romejs$js$ast$utils$template_ts$createIdentifier(
		substitute,
		expectedIdType,
	) {
		if (typeof substitute === "string") {
			// @ts-ignore: No idea why this error exists
			return {
				type: expectedIdType,
				name: substitute,
			};
		} else {
			return substitute;
		}
	}

	function ___R$project$rome$$romejs$js$ast$utils$template_ts$default(
		strs,
		...substitutions
	) {
		const {ast, placeholderPaths} = ___R$$priv$project$rome$$romejs$js$ast$utils$template_ts$getTemplate(
			strs,
		);

		// no substitutions so we can just return the ast!
		if (!substitutions.length) {
			return ast;
		}

		// this case should never be hit
		if (placeholderPaths.length !== substitutions.length) {
			throw new Error("Expected subtituions to be the same length as paths");
		}

		const newAst = Object.assign({}, ast);

		for (let i = 0; i < placeholderPaths.length; i++) {
			const {type, path} = placeholderPaths[i];

			const substitute = ___R$$priv$project$rome$$romejs$js$ast$utils$template_ts$createIdentifier(
				substitutions[i],
				type,
			);
			// rome-ignore lint/js/noExplicitAny
			let target = newAst;

			for (let i = 0; i < path.length; i++) {
				const key = path[i];
				const isLast = i === path.length - 1;

				if (isLast) {
					target[key] = substitute;
				} else {
					let currTarget = target[key];
					if (Array.isArray(currTarget)) {
						currTarget = currTarget.slice();
					} else {
						currTarget = Object.assign({}, currTarget);
					}
					target[key] = currTarget;
					target = currTarget;
				}
			}
		}

		return newAst;
	}

	___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression = (
		strs,
		...substitutions
	) => {
		var ___R$;
		const first =
			(___R$ = ___R$project$rome$$romejs$js$ast$utils$template_ts$default,
			___R$.statement.apply(___R$, [strs, ...substitutions]));

		// Ensure that the single statement is an JSExpressionStatement
		if (first.type !== "JSExpressionStatement") {
			throw new Error("Single statement should be an JSExpressionStatement");
		}

		return first.expression;
	};

	___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement = (
		strs,
		...substitutions
	) => {
		// Parse the template, with caching
		const ast = ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$jsRoot.assert(
			___R$project$rome$$romejs$js$ast$utils$template_ts$default.apply(
				null,
				[strs, ...substitutions],
			),
		);

		// Ensure that there's only a single statement in the JSRoot body
		const body = ast.body;
		if (body.length !== 1) {
			throw new Error("More than one statement isn't allowed for a template.");
		}
		return body[0];
	};


  // project-rome/@romejs/js-ast-utils/createPropertyKey.ts
function ___R$project$rome$$romejs$js$ast$utils$createPropertyKey_ts$default(
		name,
	) {
		if (
			___R$project$rome$$romejs$js$ast$utils$isValidIdentifierName_ts$default(
				name,
			)
		) {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
				name,
			);
		} else {
			return ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.quick(
				name,
			);
		}
	}


  // project-rome/@romejs/js-ast-utils/valueToNode.ts
function ___R$project$rome$$romejs$js$ast$utils$valueToNode_ts$default(
		value,
		ancestry = [],
	) {
		if (ancestry.includes(value)) {
			throw new Error("Recursion detected");
		}

		switch (typeof value) {
			case "string":
				return ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.quick(
					value,
				);

			case "boolean":
				return ___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts$jsBooleanLiteral.quick(
					value,
				);

			case "number":
				return ___R$project$rome$$romejs$ast$js$literals$JSNumericLiteral_ts$jsNumericLiteral.quick(
					value,
				);

			case "undefined":
				return ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
					"undefined",
				);

			case "object": {
				if (value === null) {
					return ___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts$jsNullLiteral.create({

					});
				}

				const subAncestry = [...ancestry, value];

				if (Array.isArray(value)) {
					return ___R$project$rome$$romejs$ast$js$expressions$JSArrayExpression_ts$jsArrayExpression.quick(
						value.map((elem) =>
							___R$project$rome$$romejs$js$ast$utils$valueToNode_ts$default(
								elem,
								subAncestry,
							)
						),
					);
				}

				const obj = (value);
				const props = [];

				for (let key in obj) {
					props.push(
						___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts$jsObjectProperty.create({
							key: ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts$jsStaticPropertyKey.create({
								value: ___R$project$rome$$romejs$js$ast$utils$createPropertyKey_ts$default(
									key,
								),
							}),
							value: ___R$project$rome$$romejs$js$ast$utils$valueToNode_ts$default(
								obj[key],
								subAncestry,
							),
						}),
					);
				}

				return ___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression.quick(
					props,
				);
			}

			default:
				throw new Error("Do not know how to turn this value into a literal");
		}
	}


  // project-rome/@romejs/js-ast-utils/createMemberProperty.ts
function ___R$project$rome$$romejs$js$ast$utils$createMemberProperty_ts$default(
		name,
	) {
		if (
			___R$project$rome$$romejs$js$ast$utils$isValidIdentifierName_ts$default(
				name,
			)
		) {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSStaticMemberProperty_ts$jsStaticMemberProperty.quick(
				___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
					name,
				),
			);
		} else {
			return ___R$project$rome$$romejs$ast$js$auxiliary$JSComputedMemberProperty_ts$jsComputedMemberProperty.quick(
				___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.quick(
					name,
				),
			);
		}
	}


  // project-rome/@romejs/js-ast-utils/getJSXAttribute.ts
function ___R$$priv$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$isEmptyAttributeValue(
		node,
	) {
		switch (node.type) {
			case "JSStringLiteral":
				return node.value === "";

			case "JSXExpressionContainer":
				return ___R$$priv$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$isEmptyAttributeValue(
					node.expression,
				);

			case "JSReferenceIdentifier":
				return node.name === "undefined";

			case "JSXEmptyExpression":
				return true;

			default:
				return false;
		}
	}

	function ___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
		tag,
		name,
		allowEmpty = false,
	) {
		for (const attr of tag.attributes) {
			if (attr.type === "JSXAttribute" && attr.name.name === name) {
				const {value} = attr;

				if (
					value !== undefined &&
					!allowEmpty &&
					___R$$priv$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$isEmptyAttributeValue(
						value,
					)
				) {
					return undefined;
				}

				return attr;
			}
		}
		return undefined;
	}


  // project-rome/@romejs/js-ast-utils/hasJSXAttribute.ts
function ___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
		tag,
		name,
		allowEmpty = false,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
				tag,
				name,
				allowEmpty,
			) !== undefined
		);
	}


  // project-rome/@romejs/js-ast-utils/isJSXElement.ts
function ___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
		node,
		name,
	) {
		return (
			node.type === "JSXElement" &&
			(name
				? ___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
						node.name,
						name,
					)
				: true)
		);
	}


  // project-rome/@romejs/js-ast-utils/index.ts



  // project-rome/@romejs/consume/Consumer.ts


	function ___R$$priv$project$rome$$romejs$consume$Consumer_ts$isComputedPart(
		part,
	) {
		return (
			typeof part === "number" ||
			!___R$project$rome$$romejs$js$ast$utils$isValidIdentifierName_ts$default(
				part,
			)
		);
	}

	class ___R$project$rome$$romejs$consume$Consumer_ts$default {
		constructor(opts) {
			this.path = opts.filePath;
			this.filename = this.path === undefined ? undefined : this.path.join();

			this.value = opts.value;
			this.parent = opts.parent;
			this.keyPath = opts.objectPath;
			this.context = opts.context;
			this.onDefinition = opts.onDefinition;
			this.propertyMetadata = opts.propertyMetadata;
			this.usedNames = new Set(opts.usedNames);
			this.forkCache = new Map();
			this.forceDiagnosticTarget = opts.forceDiagnosticTarget;
			this.declared = false;

			// See shouldDispatchUnexpected for explanation
			this.hasHandledUnexpected = false;
			this.handleUnexpected = opts.handleUnexpectedDiagnostic;
		}

		capture() {
			let diagnostics = [];
			const definitions = [];

			const consumer = this.clone({
				onDefinition: (def, consumer) => {
					if (this.onDefinition !== undefined) {
						this.onDefinition(def, consumer);
					}

					definitions.push(def);
				},
				handleUnexpectedDiagnostic(diag) {
					diagnostics.push(diag);
				},
			});
			return {consumer, definitions, diagnostics};
		}

		async bufferDiagnostics(callback) {
			const {diagnostics, consumer} = await this.capture();
			const result = await callback(consumer);
			if (result === undefined || diagnostics.length > 0) {
				throw new ___R$project$rome$$romejs$diagnostics$errors_ts$DiagnosticsError(
					"Captured diagnostics",
					diagnostics,
				);
			}
			return result;
		}

		handleThrownDiagnostics(callback) {
			if (this.handleUnexpected === undefined) {
				callback();
			} else {
				const {diagnostics} = ___R$project$rome$$romejs$diagnostics$wrap_ts$catchDiagnosticsSync(
					callback,
				);

				if (diagnostics !== undefined) {
					for (const diag of diagnostics) {
						this.handleUnexpected(diag);
					}
				}
			}
		}

		declareDefinition(partialDef, inputName) {
			if (this.declared) {
				return;
			}

			if (this.onDefinition === undefined) {
				return;
			}

			const metadata = Object.assign({inputName}, this.propertyMetadata);

			const def = Object.assign(
				{},
				partialDef,
				{objectPath: this.keyPath, metadata},
			);

			this.declared = true;

			this.onDefinition(def, this);
		}

		getDiagnosticLocation(target = "all") {
			const {getDiagnosticPointer} = this.context;
			if (getDiagnosticPointer === undefined) {
				return {};
			}

			const {forceDiagnosticTarget} = this;
			if (forceDiagnosticTarget !== undefined) {
				target = forceDiagnosticTarget;
			}
			return getDiagnosticPointer(this.keyPath, target);
		}

		getLocation(target) {
			const location = this.getDiagnosticLocation(target);
			if (
				location === undefined ||
				location.start === undefined ||
				location.end === undefined
			) {
				return {
					filename: this.filename,
					start: ___R$project$rome$$romejs$parser$core$types_ts$UNKNOWN_POSITION,
					end: ___R$project$rome$$romejs$parser$core$types_ts$UNKNOWN_POSITION,
				};
			} else {
				return {
					filename: location.filename,
					start: location.start,
					end: location.end,
				};
			}
		}

		getLocationRange(startIndex, endIndex = startIndex, target) {
			const loc = this.getLocation(target);
			if (
				loc.start ===
				___R$project$rome$$romejs$parser$core$types_ts$UNKNOWN_POSITION
			) {
				return loc;
			}

			const {start, end} = loc;

			// We don't support handling line differences here... yet?
			if (start.line !== end.line) {
				return loc;
			}

			return Object.assign(
				{},
				loc,
				{
					start: Object.assign(
						{},
						start,
						{
							column: ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
								start.column,
								startIndex,
							),
							index: ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
								start.index,
								startIndex,
							),
						},
					),
					end: Object.assign(
						{},
						start,
						{
							column: ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
								start.column,
								endIndex,
							),
							index: ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
								start.index,
								endIndex,
							),
						},
					),
				},
			);
		}

		getKey() {
			return this.clone({
				forceDiagnosticTarget: "key",
				value: this.getParentKey(),
			});
		}

		getParentKey() {
			return this.keyPath[this.keyPath.length - 1];
		}

		hasChangedFromSource() {
			const {getOriginalValue} = this.context;
			if (getOriginalValue === undefined) {
				return false;
			}

			const originalValue = getOriginalValue(this.keyPath);
			return !this.wasInSource() || this.value !== originalValue;
		}

		wasInSource() {
			return this.getDiagnosticLocation() !== undefined;
		}

		getKeyPathString(path = this.keyPath) {
			const {normalizeKey} = this.context;
			let str = "";

			for (let i = 0; i < path.length; i++) {
				let part = path[i];
				const nextPart = path[i + 1];

				if (typeof part === "string" && normalizeKey !== undefined) {
					part = normalizeKey(part);
				}

				// If we are a computed property then wrap in brackets, the previous part would not have inserted a dot
				// We allow a computed part at the beginning of a path
				if (
					___R$$priv$project$rome$$romejs$consume$Consumer_ts$isComputedPart(
						part,
					) &&
					i > 0
				) {
					const inner =
						typeof part === "number"
							? String(part)
							: ___R$project$rome$$romejs$string$escape$escapeString_ts$default(
									part,
									{
										quote: "'",
									},
								);

					str += "[" + inner + "]";
				} else {
					if (
						nextPart === undefined ||
						___R$$priv$project$rome$$romejs$consume$Consumer_ts$isComputedPart(
							nextPart,
						)
					) {
						// Don't append a dot if there are no parts or the next is computed
						str += part;
					} else {
						str += part + ".";
					}
				}
			}

			return str;
		}

		generateUnexpectedMessage(msg, opts) {
			const {at = "suffix", atParent = false} = opts;
			const {parent} = this;

			let target = this;

			if (atParent) {
				if (parent === undefined) {
					// Cannot target the parent if it does not exist
					return msg;
				} else {
					target = parent;
				}
			}

			if (at === "suffix") {
				msg += " at <emphasis>" + target.getKeyPathString() + "</emphasis>";
			} else {
				msg = "<emphasis>" + target.getKeyPathString() + "</emphasis> " + msg;
			}

			return msg;
		}

		unexpected(
			description = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.INVALID,
			opts = {},
		) {
			const {target = "value"} = opts;

			const {filename} = this;
			let location = this.getDiagnosticLocation(target);
			const fromSource = location !== undefined;

			const message = this.generateUnexpectedMessage(
				description.message.value,
				opts,
			);
			description = Object.assign(
				{},
				description,
				{
					message: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createBlessedDiagnosticMessage(
						message,
					),
				},
			);

			const advice = [...(description.advice || [])];

			// Make the errors more descriptive
			if (fromSource) {
				if (this.hasChangedFromSource()) {
					advice.push({
						type: "log",
						category: "warn",
						text: "Our internal value has been modified since we read the original source",
					});
				}
			} else {
				// Go up the consumer tree and take the position from the first consumer found in the source
				let consumer = this;
				do {
					const possibleLocation = consumer.getDiagnosticLocation(target);
					if (possibleLocation !== undefined) {
						location = possibleLocation;
						break;
					}
					consumer = consumer.parent;
				} while (consumer !== undefined);

				// If consumer is undefined and we have no filename then we were not able to find a location,
				// in this case, just throw a normal error
				if (consumer === undefined && filename === undefined) {
					throw new Error(message);
				}

				// Warn that we didn't find this value in the source if it's parent wasn't either
				if (this.parent === undefined || !this.parent.wasInSource()) {
					advice.push({
						type: "log",
						category: "warn",
						text: "This value was expected to be found at <emphasis>" +
						this.getKeyPathString() +
						"</emphasis> but was not in the original source",
					});
				}
			}

			if (opts.loc !== undefined) {
				location = opts.loc;
			}

			if (location === undefined) {
				throw new Error(message);
			}

			const diagnostic = {
				description: Object.assign(
					{category: this.context.category},
					description,
					{advice},
				),
				location: Object.assign({}, location, {filename: this.filename}),
			};

			const err = ___R$project$rome$$romejs$diagnostics$errors_ts$createSingleDiagnosticError(
				diagnostic,
			);

			if (this.handleUnexpected === undefined) {
				throw err;
			} else {
				if (this.shouldDispatchUnexpected()) {
					this.handleUnexpected(diagnostic);
					this.hasHandledUnexpected = true;
				}

				// Still allow throwing the diagnostic
				return err;
			}
		}

		// Only dispatch a single error for the current consumer, and suppress any if we have a parent consumer with errors
		// We do this since we could be producing redundant stale errors based on
		// results we've normalized to allow us to continue
		shouldDispatchUnexpected() {
			if (this.hasHandledUnexpected) {
				return false;
			}

			const {parent} = this;
			if (parent !== undefined) {
				return parent.shouldDispatchUnexpected();
			}

			return true;
		}

		clone(opts) {
			return new ___R$project$rome$$romejs$consume$Consumer_ts$default(
				Object.assign(
					{
						usedNames: this.usedNames,
						onDefinition: this.onDefinition,
						handleUnexpectedDiagnostic: this.handleUnexpected,
						filePath: this.path,
						context: this.context,
						value: this.value,
						parent: this.parent,
						objectPath: this.keyPath,
						propertyMetadata: this.propertyMetadata,
					},
					opts,
				),
			);
		}

		fork(key, value, propertyMetadata) {
			// We require this cache as we sometimes want to store state about a forked property such as used items
			const cached = this.forkCache.get(String(key));
			if (
				cached !== undefined &&
				cached.value === value &&
				(cached.propertyMetadata === undefined ||
				cached.propertyMetadata === propertyMetadata)
			) {
				return cached;
			}

			const forked = this.clone({
				propertyMetadata,
				value,
				parent: this,
				objectPath: [...this.keyPath, key],
			});
			this.forkCache.set(String(key), forked);
			return forked;
		}

		_normalizeValueForSet(value) {
			if (value instanceof Set) {
				return Array.from(value);
			}

			if (value instanceof Map) {
				const obj = {};
				for (const [key, val] of value) {
					obj[key] = val;
				}
				return obj;
			}

			return value;
		}

		getValue(def) {
			if (this.exists()) {
				return this.value;
			} else {
				return def;
			}
		}

		setValue(rawValue) {
			const value = this._normalizeValueForSet(rawValue);
			this.value = value;

			// If we're at the root (as indicated by the lack of these properties) then go no where else
			const {parent, keyPath} = this;
			if (parent === undefined || keyPath.length === 0) {
				return this;
			}

			// Validate the parent is an object
			const parentValue = parent.asUnknown();
			if (
				parentValue === undefined ||
				parentValue === null ||
				typeof parentValue !== "object"
			) {
				throw parent.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.SET_PROPERTY_NON_OBJECT,
				);
			}

			// Mutate the parent
			const parentObj = parent.asOriginalUnknownObject();
			const key = this.getParentKey();
			parentObj[String(key)] = value;
			parent.setValue(parentObj);

			return this;
		}

		has(key) {
			return this.get(key).asUnknown() != null;
		}

		setProperty(key, value) {
			return this.get(key).setValue(value);
		}

		get(key, metadata) {
			const value = this.asOriginalUnknownObject();
			this.markUsedProperty(key);
			return this.fork(key, value[key], metadata);
		}

		markUsedProperty(name) {
			this.usedNames.add(name);
		}

		enforceUsedProperties(type = "property", recursive = true) {
			if (!this.isObject()) {
				return;
			}

			let knownProperties = Array.from(this.usedNames.keys());

			const {normalizeKey} = this.context;
			if (normalizeKey !== undefined) {
				knownProperties = knownProperties.map((key) => normalizeKey(key));
			}

			for (const [key, value] of this.asMap(false, false)) {
				if (!this.usedNames.has(key)) {
					value.unexpected(
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.UNUSED_PROPERTY(
							this.getKeyPathString([key]),
							type,
							knownProperties,
						),
						{
							target: "key",
							at: "suffix",
							atParent: true,
						},
					);
				}

				if (recursive) {
					value.enforceUsedProperties(type, true);
				}
			}
		}

		asPossibleParsedJSON() {
			if (typeof this.asUnknown() === "string") {
				return this.clone({
					value: JSON.parse(this.asString()),
				});
			} else {
				return this;
			}
		}

		// JSON
		asJSONValue() {
			const {value} = this;

			switch (typeof value) {
				case "number":
				case "string":
				case "boolean":
					return value;
			}

			if (value === null) {
				return null;
			}

			if (Array.isArray(value)) {
				return this.asJSONArray();
			}

			if (this.isObject()) {
				return this.asJSONObject();
			}

			this.unexpected(
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_JSON_VALUE,
			);
			return "";
		}

		asJSONArray() {
			const arr = [];
			for (const value of this.asArray()) {
				arr.push(value.asJSONValue());
			}
			return arr;
		}

		asJSONObject() {
			const obj = {};
			for (const [key, value] of this.asMap()) {
				obj[key] = value.asJSONPropertyValue();
			}
			return obj;
		}

		asJSONPropertyValue() {
			if (this.exists()) {
				return this.asJSONValue();
			} else {
				return undefined;
			}
		}

		exists() {
			return this.value != null;
		}

		isObject() {
			const {value} = this;
			return (
				typeof value === "object" &&
				value !== null &&
				value.constructor === Object
			);
		}

		asUnknownObject(optional = false) {
			this.declareDefinition({
				type: "object",
				default: undefined,
				required: !optional,
			});

			return Object.assign({}, this.asOriginalUnknownObject(optional));
		}

		asOriginalUnknownObject(optional = false) {
			if (optional === true && !this.exists()) {
				return {};
			}

			const {value} = this;
			if (
				!___R$project$rome$$romejs$typescript$helpers$index_ts$isPlainObject(
					value,
				)
			) {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_OBJECT,
				);
				return {};
			}

			return value;
		}

		asMap(optional, markUsed = true) {
			this.declareDefinition({
				type: "object",
				default: undefined,
				required: !optional,
			});

			const value = this.asOriginalUnknownObject(optional);
			const map = new Map();
			for (const key in value) {
				if (markUsed) {
					this.markUsedProperty(key);
				}
				map.set(key, this.fork(key, value[key]));
			}
			return map;
		}

		asPlainArray(optional = false) {
			this.declareDefinition({
				type: "array",
				default: undefined,
				required: !optional,
			});

			if (optional === true && !this.exists()) {
				return [];
			}

			const {value} = this;

			if (!Array.isArray(value)) {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_ARRAY,
				);
				return [];
			}

			return [...value];
		}

		asArray(optional) {
			const arr = this.asPlainArray(optional);

			return arr.map((val, index) => {
				return this.fork(index, val);
			});
		}

		asImplicitArray() {
			if (Array.isArray(this.asUnknown())) {
				return this.asArray();
			} else if (this.exists()) {
				return [this];
			} else {
				return [];
			}
		}

		asDateOrVoid(def) {
			this.declareDefinition({
				type: "date",
				default: def,
				required: false,
			});
			if (this.exists()) {
				return this.asUndeclaredDate(def);
			} else {
				return undefined;
			}
		}

		asDate(def) {
			this.declareDefinition({
				type: "date",
				default: def,
				required: def === undefined,
			});
			return this.asUndeclaredDate(def);
		}

		asUndeclaredDate(def) {
			const value = this.getValue(def);
			if (!(value instanceof Date)) {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_DATE,
				);
				return new Date();
			}
			return value;
		}

		asBooleanOrVoid(def) {
			this.declareDefinition({
				type: "boolean",
				default: def,
				required: false,
			});
			if (this.exists()) {
				return this.asUndeclaredBoolean(def);
			} else {
				return undefined;
			}
		}

		asBoolean(def) {
			this.declareDefinition({
				type: "boolean",
				default: def,
				required: def === undefined,
			});
			return this.asUndeclaredBoolean(def);
		}

		asUndeclaredBoolean(def) {
			const value = this.getValue(def);
			if (typeof value !== "boolean") {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_BOOLEAN,
				);
				return false;
			}
			return value;
		}

		asStringOrVoid(def) {
			this.declareDefinition({
				type: "string",
				default: def,
				required: false,
			});

			if (this.exists()) {
				return this.asUndeclaredString(def);
			} else {
				return undefined;
			}
		}

		asString(def) {
			this.declareDefinition({
				type: "string",
				default: def,
				required: def === undefined,
			});
			return this.asUndeclaredString(def);
		}

		asUndeclaredString(def) {
			const value = this.getValue(def);
			if (typeof value !== "string") {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_STRING,
				);
				return "";
			}
			return value;
		}

		asStringSet(validValues, def) {
			this.declareDefinition({
				type: "string",
				default: def,
				required: def === undefined,
				allowedValues: validValues,
			});
			return this.asUndeclaredStringSet(validValues, def);
		}

		asUndeclaredStringSet(validValues, def) {
			const value = this.asUndeclaredString(String(def));

			// @ts-ignore
			if (validValues.includes(value)) {
				// @ts-ignore
				return value;
			} else {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.INVALID_STRING_SET_VALUE(
						value,
						// rome-ignore lint/js/noExplicitAny
						((validValues)),
					),
					{
						target: "value",
					},
				);
				return validValues[0];
			}
		}

		asStringSetOrVoid(validValues, def) {
			this.declareDefinition({
				type: "string",
				default: def,
				required: false,
				allowedValues: validValues,
			});

			if (this.exists()) {
				return this.asUndeclaredStringSet(validValues, def);
			} else {
				return undefined;
			}
		}

		asBigIntOrVoid(def) {
			this.declareDefinition({
				type: "bigint",
				default: def,
				required: false,
			});
			if (this.exists()) {
				return this.asUndeclaredBigInt(def);
			} else {
				return undefined;
			}
		}

		asBigInt(def) {
			this.declareDefinition({
				type: "bigint",
				default: def,
				required: def === undefined,
			});
			return this.asUndeclaredBigInt(def);
		}

		asUndeclaredBigInt(def) {
			const value = this.getValue(def);

			if (typeof value === "number") {
				return BigInt(value);
			}

			if (typeof value === "bigint") {
				return value;
			}

			this.unexpected(
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_BIGINT,
			);
			return BigInt("0");
		}

		_declareOptionalFilePath(def) {
			this.declareDefinition(
				{
					type: "string",
					default: def,
					required: false,
				},
				"path",
			);
		}

		asURLFilePath(def) {
			const path = this.asUnknownFilePath(def);
			if (path.isURL()) {
				return path.assertURL();
			} else {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_URL,
				);
				return ___R$project$rome$$romejs$path$index_ts$createURLFilePath(
					"unknown://",
				).append(path);
			}
		}

		asURLFilePathOrVoid(def) {
			if (this.exists()) {
				return this.asURLFilePath(def);
			} else {
				this._declareOptionalFilePath(def);
				return undefined;
			}
		}

		asUnknownFilePath(def) {
			this.declareDefinition(
				{
					type: "string",
					default: def,
					required: def === undefined,
				},
				"path",
			);

			return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
				this.asUndeclaredString(def),
			);
		}

		asUnknownFilePathOrVoid(def) {
			if (this.exists()) {
				return this.asUnknownFilePath(def);
			} else {
				this._declareOptionalFilePath(def);
				return undefined;
			}
		}

		asAbsoluteFilePath(def, cwd) {
			const path = this.asUnknownFilePath(def);
			if (path.isAbsolute()) {
				return path.assertAbsolute();
			} else if (cwd !== undefined && path.isRelative()) {
				return cwd.resolve(path);
			} else {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_ABSOLUTE_PATH,
				);
				return ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
					"/",
				).append(path);
			}
		}

		asAbsoluteFilePathOrVoid(def, cwd) {
			if (this.exists()) {
				return this.asAbsoluteFilePath(def, cwd);
			} else {
				this._declareOptionalFilePath(def);
				return undefined;
			}
		}

		asRelativeFilePath(def) {
			const path = this.asUnknownFilePath(def);
			if (path.isRelative()) {
				return path.assertRelative();
			} else {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_RELATIVE_PATH,
				);
				return path.toExplicitRelative();
			}
		}

		asRelativeFilePathOrVoid(def) {
			if (this.exists()) {
				return this.asRelativeFilePath(def);
			} else {
				this._declareOptionalFilePath(def);
				return undefined;
			}
		}

		asExplicitRelativeFilePath(def) {
			const path = this.asRelativeFilePath(def);

			if (path.isExplicitRelative()) {
				return path;
			} else {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_EXPLICIT_RELATIVE_PATH,
				);
				return path.toExplicitRelative();
			}
		}

		asExplicitRelativeFilePathOrVoid(def) {
			if (this.exists()) {
				return this.asExplicitRelativeFilePath(def);
			} else {
				this._declareOptionalFilePath(def);
				return undefined;
			}
		}

		asNumberOrVoid(def) {
			this.declareDefinition({
				type: "number",
				default: def,
				required: false,
			});

			if (this.exists()) {
				return this.asUndeclaredNumber(def);
			} else {
				return undefined;
			}
		}

		asZeroIndexedNumber() {
			return ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(this.asNumber());
		}

		asOneIndexedNumber() {
			return ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1(this.asNumber());
		}

		asNumberFromString(def) {
			this.declareDefinition({
				type: "number",
				default: def,
				required: def === undefined,
			});
			return this.asUndeclaredNumberFromString(def);
		}

		asNumberFromStringOrVoid(def) {
			this.declareDefinition({
				type: "number",
				default: def,
				required: false,
			});

			if (this.exists()) {
				return this.asUndeclaredNumberFromString(def);
			} else {
				return undefined;
			}
		}

		asUndeclaredNumberFromString(def) {
			if (def !== undefined && !this.exists()) {
				return def;
			}

			const str = this.asUndeclaredString();
			const num = Number(str);
			if (isNaN(num)) {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_VALID_NUMBER,
				);
				return NaN;
			} else {
				return num;
			}
		}

		asNumber(def) {
			this.declareDefinition({
				type: "number",
				default: def,
				required: def === undefined,
			});
			return this.asUndeclaredNumber(def);
		}







		asNumberInRange(opts) {
			const num = this.asUndeclaredNumber(opts.default);
			const min = ___R$project$rome$$romejs$ob1$index_ts$ob1Get(opts.min);
			const max = ___R$project$rome$$romejs$ob1$index_ts$ob1Get(opts.max);

			this.declareDefinition({
				type: "number",
				default: opts.default,
				required: opts.default !== undefined,
				min,
				max,
			});

			// Nice error message when both min and max are specified
			if (min !== undefined && max !== undefined && (num < min || num > max)) {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_NUMBER_BETWEEN(
						min,
						max,
					),
				);
				return num;
			}

			if (min !== undefined && num < min) {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_NUMBER_HIGHER(
						min,
					),
				);
			}

			if (max !== undefined && num > max) {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_NUMBER_LOWER(
						max,
					),
				);
			}

			return num;
		}

		asUndeclaredNumber(def) {
			const value = this.getValue(def);
			if (typeof value !== "number") {
				this.unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.CONSUME.EXPECTED_NUMBER,
				);
				return 0;
			}
			return value;
		}

		asUnknown() {
			return this.value;
		}

		// rome-ignore lint/js/noExplicitAny
		asAny() {
			return this.value;
		}
	}


  // project-rome/@romejs/consume/index.ts
const ___R$$priv$project$rome$$romejs$consume$index_ts$EMPTY_CONSUME_OPTIONS = {
		propertyMetadata: undefined,
		value: undefined,
		handleUnexpectedDiagnostic: undefined,
		onDefinition: undefined,
		filePath: undefined,
		objectPath: [],
		parent: undefined,
	};

	function ___R$project$rome$$romejs$consume$index_ts$consume(opts) {
		return new ___R$project$rome$$romejs$consume$Consumer_ts$default(
			Object.assign(
				{},
				___R$$priv$project$rome$$romejs$consume$index_ts$EMPTY_CONSUME_OPTIONS,
				opts,
			),
		);
	}

	function ___R$project$rome$$romejs$consume$index_ts$consumeUnknown(
		value,
		category,
	) {
		return new ___R$project$rome$$romejs$consume$Consumer_ts$default(
			Object.assign(
				{},
				___R$$priv$project$rome$$romejs$consume$index_ts$EMPTY_CONSUME_OPTIONS,
				{
					context: {
						category,
					},
					value,
				},
			),
		);
	}


  // project-rome/@romejs/codec-json/stringify.ts
function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$joinList(
		open,
		close,
		indent,
		items,
	) {
		if (items.length === 0) {
			return open + close;
		}

		if (items.length === 1) {
			// Trim to remove indentation
			const first = items[0].trim();

			// We never want to place a comment in between braces because it will break for line comments

			// and look weird for blocks
			if (first[0] !== "/") {
				return open + first + close;
			}
		}

		return [open, ...items, indent + close].join("\n");
	}

	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyKey(
		key,
	) {
		if (___R$project$rome$$romejs$codec$json$parse_ts$isValidWord(key)) {
			// A property key doesn't need quotes if it's a valid word
			return key;
		} else {
			return ___R$project$rome$$romejs$string$escape$escapeString_ts$default(
				key,
				{
					quote: '"',
					ignoreWhitespaceEscapes: true,
					json: true,
				},
			);
		}
	}

	function ___R$project$rome$$romejs$codec$json$stringify_ts$stringifyComments(
		indent,
		comments,
	) {
		return comments.map((node) => {
			if (node.type === "BlockComment") {
				return indent + "/*" + node.value + "*/";
			} else {
				// node.type === 'LineComment'
				return indent + "//" + node.value;
			}
		});
	}

	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyPrimitives(
		value,
	) {
		if (value === null) {
			return "null";
		}

		// Coerce primitive objects to their primitive form, as specified in ECMA262 24.5.2.1
		if (
			value instanceof Number ||
			value instanceof String ||
			value instanceof Boolean
		) {
			value = value.valueOf();
		}

		// Basic primitive types
		switch (typeof value) {
			case "symbol":
			case "function":
			case "undefined":
				return "null";

			case "boolean":
				return value ? "true" : "false";

			case "string":
				return ___R$project$rome$$romejs$string$escape$escapeString_ts$default(
					value,
					{
						quote: '"',
						json: true,
						ignoreWhitespaceEscapes: true,
					},
				);

			case "bigint":
				// This is the actual V8 message lol
				throw new Error("Do not know how to serialize a BigInt");

			case "number":
				return ___R$project$rome$$romejs$pretty$format$index_ts$formatNumber(
					value,
				);
		}

		return undefined;
	}

	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$sortMapKeys(
		map,
	) {
		return new Set(
			Array.from(map.keys()).sort(
				___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare,
			),
		);
	}

	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$sortMap(map) {
		const sortedMap = new Map();
		const sortedKeys = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$sortMapKeys(
			map,
		);

		// Add any prioritized keys so they're before anything alphabetized
		for (const key of ___R$project$rome$$romejs$pretty$format$index_ts$PRIORITIZE_KEYS) {
			if (sortedKeys.has(key)) {
				sortedKeys.delete(key);

				const val = map.get(key);
				if (val === undefined) {
					throw new Error("Expected value");
				}

				sortedMap.set(key, val);
			}
		}

		// Now add the rest
		for (const key of sortedKeys) {
			const val = map.get(key);
			if (val === undefined) {
				throw new Error("Expected value");
			}

			sortedMap.set(key, val);
		}

		return sortedMap;
	}





	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$getComments(
		consumer,
		opts,
	) {
		const comments = opts.comments.get(consumer.keyPath.join("."));
		if (comments === undefined) {
			return {
				inner: [],
				outer: [],
			};
		} else {
			return comments;
		}
	}

	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyArray(
		consumer,
		info,
	) {
		const {level, prevIndent, nextIndent, stack} = info;

		let buff = [];

		const arr = consumer.asArray();
		for (const consumer of arr) {
			// Add element comments
			const comments = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$getComments(
				consumer,
				info,
			).outer;
			buff = buff.concat(
				___R$project$rome$$romejs$codec$json$stringify_ts$stringifyComments(
					nextIndent,
					comments,
				),
			);

			// Add the actual element line
			const element = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyConsumer(
				consumer,
				{
					comments: info.comments,
					isTopLevel: false,
					level: level + 1,
					stack,
				},
			);
			buff.push("" + nextIndent + element);
		}

		// Add inner comments
		const innerComments = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$getComments(
			consumer,
			info,
		).inner;
		buff = buff.concat(
			___R$project$rome$$romejs$codec$json$stringify_ts$stringifyComments(
				nextIndent,
				innerComments,
			),
		);

		return ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$joinList(
			"[",
			"]",
			prevIndent,
			buff,
		);
	}

	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyPlainObject(
		consumer,
		info,
	) {
		const {level, prevIndent, stack, isTopLevel} = info;
		let {nextIndent} = info;

		// Must be an object if we failed all the other conditions
		let buff = [];
		const map = consumer.asMap();

		// Remove function, symbol, and undefined properties
		for (const [key, consumer] of map) {
			const value = consumer.asUnknown();

			if (
				typeof value === "function" ||
				typeof value === "undefined" ||
				typeof value === "symbol"
			) {
				map.delete(key);
			}
		}

		let propLevel = level + 1;

		// We only want to increase the level for properties when we aren't at the top
		if (isTopLevel && level === 0) {
			propLevel = 0;
			nextIndent = "";
		}

		// Build properties
		for (const [key, consumer] of ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$sortMap(
			map,
		)) {
			// Add property comments
			const comments = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$getComments(
				consumer,
				info,
			).outer;
			buff = buff.concat(
				___R$project$rome$$romejs$codec$json$stringify_ts$stringifyComments(
					nextIndent,
					comments,
				),
			);

			// Add the actual property line
			const propKey = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyKey(
				key,
			);
			const propValue = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyConsumer(
				consumer,
				{
					comments: info.comments,
					isTopLevel: false,
					level: propLevel,
					stack,
				},
			);
			buff.push("" + nextIndent + propKey + ": " + propValue);
		}

		// We track this so we know whether we can safely put everything at the top level

		// If we only have comments then there's no way the parser could infer it was originally an object
		const hasProps = buff.length > 0;

		// Add inner comments
		const innerComments = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$getComments(
			consumer,
			info,
		).inner;
		buff = buff.concat(
			___R$project$rome$$romejs$codec$json$stringify_ts$stringifyComments(
				nextIndent,
				innerComments,
			),
		);

		if (level === 0 && isTopLevel) {
			if (hasProps) {
				return buff.join("\n");
			} else if (buff.length > 0) {
				// Otherwise we just have a bunch of comments
				// Indent them correctly and just output it as a normal object
				buff = buff.map((str) => {
					return "  " + str;
				});
			}
		}

		return ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$joinList(
			"{",
			"}",
			prevIndent,
			buff,
		);
	}

	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyObject(
		consumer,
		value,
		opts,
	) {
		const {isTopLevel, level, stack} = opts;

		const info = {
			comments: opts.comments,
			isTopLevel,
			nextIndent: "\t".repeat(level + 1),
			prevIndent: level === 0 ? "" : "\t".repeat(level - 1),
			level,
			stack,
		};

		try {
			stack.add(value);

			if (Array.isArray(value) || value instanceof Set) {
				return ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyArray(
					consumer,
					info,
				);
			}

			return ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyPlainObject(
				consumer,
				info,
			);
		} finally {
			stack.delete(value);
		}
	}

	function ___R$project$rome$$romejs$codec$json$stringify_ts$stringifyRootConsumer(
		consumer,
		pathToComments,
	) {
		const opts = {
			comments: pathToComments,
			isTopLevel: true,
			level: 0,
			stack: new Set(),
		};

		// Nothing else handles comments at the top level
		const inner = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyConsumer(
			consumer,
			opts,
		);
		const comments = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$getComments(
			consumer,
			opts,
		);
		const outer = ___R$project$rome$$romejs$codec$json$stringify_ts$stringifyComments(
			"",
			comments.outer,
		);

		return [...outer, inner].join("\n");
	}

	function ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyConsumer(
		consumer,
		opts,
	) {
		const value = consumer.asUnknown();

		// Stringify primitives
		const asPrim = ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyPrimitives(
			value,
		);
		if (asPrim !== undefined) {
			return asPrim;
		}

		// Check if we're already stringfying this value to prevent recursion
		if (opts.stack.has(value)) {
			throw new TypeError("Recursive");
		}

		return ___R$$priv$project$rome$$romejs$codec$json$stringify_ts$stringifyObject(
			consumer,
			value,
			opts,
		);
	}


  // project-rome/@romejs/codec-json/index.ts


	function ___R$project$rome$$romejs$codec$json$index_ts$consumeJSON(opts) {
		return ___R$project$rome$$romejs$codec$json$index_ts$consumeJSONExtra(opts).consumer;
	}

	function ___R$project$rome$$romejs$codec$json$index_ts$consumeJSONExtra(opts) {
		const parser = ___R$project$rome$$romejs$codec$json$parse_ts$createJSONParser(
			opts,
		);
		const {value, context} = parser.parse();

		return {
			hasExtensions: parser.hasExtensions,
			consumer: ___R$project$rome$$romejs$consume$index_ts$consume({
				filePath: parser.path,
				context,
				objectPath: [],
				value,
				parent: undefined,
			}),
			comments: parser.pathToComments,
		};
	}

	function ___R$project$rome$$romejs$codec$json$index_ts$parseJSON(opts) {
		return ___R$project$rome$$romejs$codec$json$parse_ts$createJSONParser(opts).parse().value;
	}

	function ___R$project$rome$$romejs$codec$json$index_ts$tokenizeJSON(opts) {
		return ___R$project$rome$$romejs$codec$json$parse_ts$createJSONParser(opts).tokenizeAll();
	}

	function ___R$project$rome$$romejs$codec$json$index_ts$stringifyRJSONFromConsumer(
		opts,
	) {
		return ___R$project$rome$$romejs$codec$json$stringify_ts$stringifyRootConsumer(
			opts.consumer,
			opts.comments,
		);
	}

	function ___R$project$rome$$romejs$codec$json$index_ts$stringifyRJSON(value) {
		return ___R$project$rome$$romejs$codec$json$stringify_ts$stringifyRootConsumer(
			___R$project$rome$$romejs$consume$index_ts$consumeUnknown(
				value,
				"parse/json",
			),
			new Map(),
		);
	}

	function ___R$project$rome$$romejs$codec$json$index_ts$stringifyJSON(value) {
		return JSON.stringify(value, null, "\t");
	}


  // project-rome/@romejs/v8/InspectorClient.ts


	class ___R$project$rome$$romejs$v8$InspectorClient_ts$InspectorClientCloseError
		extends Error {
		constructor() {
			super("Inspector connection closed");
		}
	}

	class ___R$project$rome$$romejs$v8$InspectorClient_ts$default {
		constructor(socket) {
			this.socket = socket;
			this.id = 0;

			this.subscriptions = new Map();
			this.callbacks = new Map();

			this.alive = true;

			this.init();
		}

		end() {
			this.socket.end();
		}

		init() {
			const {socket} = this;

			socket.errorEvent.subscribe((err) => {
				this.alive = false;
				for (const [, {reject}] of this.callbacks) {
					reject(err);
				}
				this.callbacks.clear();
				this.end();
			});

			socket.endEvent.subscribe(() => {
				this.alive = false;
				for (const [, {reject}] of this.callbacks) {
					reject(
						new ___R$project$rome$$romejs$v8$InspectorClient_ts$InspectorClientCloseError(),
					);
				}
				this.callbacks.clear();
			});

			socket.completeFrameEvent.subscribe((frame) => {
				const json = frame.payload.toString();
				const data = ___R$project$rome$$romejs$codec$json$index_ts$consumeJSON({
					input: json,
				});

				// Message reply
				const id = data.get("id").asNumberOrVoid();
				if (id !== undefined) {
					const handler = this.callbacks.get(id);
					if (handler !== undefined) {
						if (data.has("error")) {
							const errorMessage = data.get("error").get("message").asString();
							handler.reject(new Error(errorMessage));
						} else {
							handler.resolve(data.get("result"));
						}
						this.callbacks.delete(id);
					}
					return;
				}

				// Event
				const method = data.get("method").asStringOrVoid();
				if (method !== undefined) {
					const subs = this.subscriptions.get(method);
					if (subs !== undefined) {
						for (const sub of subs) {
							const {callback, once} = sub;
							callback(data.get("params"));
							if (once) {
								subs.delete(sub);
							}
						}
					}
				}
			});
		}

		subscribe(method, sub) {
			let subs = this.subscriptions.get(method);
			if (subs === undefined) {
				subs = new Set();
				this.subscriptions.set(method, subs);
			}
			subs.add(sub);
		}

		assertAlive() {
			if (!this.alive) {
				throw new Error("InspectorClient has no active socket");
			}
		}

		async wait(method) {
			return new Promise((resolve) => {
				this.assertAlive();
				this.subscribe(
					method,
					{
						once: true,
						callback: resolve,
					},
				);
			});
		}

		call(method, params) {
			const id = ++this.id;

			return new Promise((resolve, reject) => {
				this.assertAlive();
				this.callbacks.set(id, {resolve, reject});

				this.socket.sendJSON({
					id,
					method,
					params,
				});
			});
		}
	}


  // project-rome/@romejs/v8/CoverageCollector.ts
const ___R$$priv$project$rome$$romejs$v8$CoverageCollector_ts$inspector = _dereq_(
		"inspector",
	);
	function ___R$$priv$project$rome$$romejs$v8$CoverageCollector_ts$createCoverageFileStats(
		covered,
		uncovered,
	) {
		const total = uncovered + covered;
		return {
			uncovered,
			covered,
			total,
			percent: total === 0 ? 100 : 100 / total * covered,
		};
	}

	class ___R$project$rome$$romejs$v8$CoverageCollector_ts$default {
		constructor() {
			this.sourceMaps = new Map();
		}

		addSourceMap(filename, code, map) {
			this.sourceMaps.set(
				filename,
				{
					ranges: [],
					map,
					code,
				},
			);
		}

		addCoverage(entries) {
			for (const entry of entries) {
				const filename = ___R$project$rome$$romejs$v8$utils_ts$urlToFilename(
					entry.url,
				);

				const data = this.sourceMaps.get(filename);
				if (data === undefined) {
					continue;
				}

				for (const {ranges, functionName, isBlockCoverage} of entry.functions) {
					data.ranges = data.ranges.concat(
						ranges.map((range) => {
							let kind = "expression";
							if (functionName !== "") {
								kind = "function";
							} else if (isBlockCoverage) {
								kind = "branch";
							}

							return Object.assign({kind}, range);
						}),
					);
				}
			}
		}

		generate() {
			const insertedLocs = new Map();
			const locs = [];

			for (const data of this.sourceMaps.values()) {
				const {ranges, code, map} = data;

				// Turn an index into a position in the compiled source
				let line = ___R$project$rome$$romejs$ob1$index_ts$ob1Number1;
				let column = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
				let index = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
				const indexCache = new Map();
				function findIndex(newIndex) {
					const cached = indexCache.get(newIndex);
					if (cached !== undefined) {
						return cached;
					}

					if (newIndex < index) {
						throw new Error(
							"Expected newIndex(" + newIndex + ") >= index(" + index + ")",
						);
					}

					if (
						___R$project$rome$$romejs$ob1$index_ts$ob1Get0(newIndex) >
						code.length
					) {
						throw new Error(
							"Expected newIndex(" +
							newIndex +
							") <= code.length(" +
							code.length +
							")",
						);
					}

					while (index < newIndex) {
						const char = code[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
							index,
						)];
						if (char === "\n") {
							line = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(line);
							column = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
						} else {
							column = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(column);
						}
						index = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(index);
					}

					const pos = {
						index: newIndex,
						line,
						column,
					};
					indexCache.set(newIndex, pos);
					return pos;
				}

				// Prefetch all sorted indexes
				const offsets = [];
				for (const {startOffset, endOffset} of ranges) {
					offsets.push(
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(startOffset),
					);
					offsets.push(
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(endOffset),
					);
				}
				offsets.sort((a, b) =>
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(a) -
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(b)
				);
				for (const index of offsets) {
					findIndex(index);
				}

				//
				for (const {kind, startOffset, endOffset, count} of ranges) {
					const originalStart = findIndex(
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(startOffset),
					);
					const originalEnd = findIndex(
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(endOffset),
					);

					const sourceStart = map.approxOriginalPositionFor(
						originalStart.line,
						originalStart.column,
					);
					if (sourceStart === undefined) {
						continue;
					}

					const sourceEnd = map.approxOriginalPositionFor(
						originalEnd.line,
						originalEnd.column,
					);
					if (sourceEnd === undefined) {
						continue;
					}

					if (sourceStart.source !== sourceEnd.source) {
						throw new Error(
							"Expected the same source for start and end: " +
							sourceStart.source +
							" !== " +
							sourceEnd.source,
						);
					}

					const key =
						sourceStart.source +
						":" +
						String(startOffset) +
						"-" +
						String(endOffset);
					const alreadyInserted = insertedLocs.get(key);
					if (alreadyInserted !== undefined) {
						alreadyInserted.count += count;
						continue;
					}

					const loc = {
						kind,
						filename: sourceStart.source,
						count,
						start: {
							index: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
								startOffset,
							),
							line: sourceStart.line,
							column: sourceStart.column,
						},
						end: {
							index: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
								endOffset,
							),
							line: sourceEnd.line,
							column: sourceEnd.column,
						},
					};
					insertedLocs.set(key, loc);
					locs.push(loc);
				}

				map.clearCache();
			}

			// Assemble files
			const rangesByFile = new Map();
			for (const loc of locs) {
				let ranges = rangesByFile.get(loc.filename);
				if (ranges === undefined) {
					ranges = [];
					rangesByFile.set(loc.filename, ranges);
				}
				ranges.push(loc);
			}

			const files = [];
			for (const [filename, ranges] of rangesByFile) {
				const coveredLines = new Set();
				const uncoveredLines = new Set();

				let uncoveredFunctions = new Set();
				let coveredFunctions = new Set();
				let uncoveredBranches = new Set();
				let coveredBranches = new Set();

				for (const {count, kind, start, end} of ranges) {
					// Fill in lines
					for (
						let i = start.line;
						i <= end.line;
						i = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(i)
					) {
						if (count === 0) {
							uncoveredLines.add(i);
						} else {
							coveredLines.add(i);
						}
					}

					// Mark covered kind
					if (kind === "function") {
						if (count === 0) {
							uncoveredBranches.add(start.index);
							uncoveredFunctions.add(start.line);
						} else {
							coveredFunctions.add(start.line);
							coveredBranches.add(start.index);
						}
					} else if (kind === "branch") {
						if (count === 0) {
							uncoveredBranches.add(start.index);
						} else {
							coveredBranches.add(start.index);
						}
					}
				}

				for (const line of coveredLines) {
					uncoveredLines.delete(line);
				}

				for (const index of coveredBranches) {
					uncoveredBranches.delete(index);
				}

				for (const index of coveredFunctions) {
					uncoveredFunctions.delete(index);
				}

				// No point showing fully covered files
				if (
					uncoveredLines.size === 0 &&
					uncoveredBranches.size === 0 &&
					uncoveredFunctions.size === 0
				) {
					continue;
				}

				files.push({
					filename,
					lines: ___R$$priv$project$rome$$romejs$v8$CoverageCollector_ts$createCoverageFileStats(
						coveredLines.size,
						uncoveredLines.size,
					),
					branches: ___R$$priv$project$rome$$romejs$v8$CoverageCollector_ts$createCoverageFileStats(
						coveredBranches.size,
						uncoveredBranches.size,
					),
					functions: ___R$$priv$project$rome$$romejs$v8$CoverageCollector_ts$createCoverageFileStats(
						coveredFunctions.size,
						uncoveredFunctions.size,
					),
				});
			}
			return files;
		}
	}


  // project-rome/@romejs/v8/index.ts



  // project-rome/@romejs/events/Bridge.ts


	class ___R$project$rome$$romejs$events$Bridge_ts$default {
		constructor(opts) {
			this.errorTransports = new Map();

			this.alive = true;
			this.type = opts.type;
			this.opts = opts;

			this.messageIdCounter = 0;
			this.events = new Map();

			this.hasHandshook = false;
			this.handshakeEvent = new ___R$project$rome$$romejs$events$Event_ts$default({
				name: "Bridge.handshake",
			});
			this.endEvent = new ___R$project$rome$$romejs$events$Event_ts$default({
				name: "Bridge.end",
				serial: true,
			});
			this.updatedListenersEvent = new ___R$project$rome$$romejs$events$Event_ts$default({
				name: "Bridge.updatedListenersEvent",
			});

			// A Set of event names that are being listened to on the other end

			// We track this to avoid sending over subscriptions that aren't needed
			this.listeners = new Set();

			this.prioritizedResponses = new Set();
			this.deprioritizedResponseQueue = [];

			this.postHandshakeQueue = [];

			this.heartbeatEvent = this.createEvent({
				name: "Bridge.heartbeat",
				direction: "server<->client",
			});

			if (this.type !== "server&client") {
				this.heartbeatEvent.subscribe(() => {
					return undefined;
				});
			}

			this.clear();
			this.init();
		}

		attachEndSubscriptionRemoval(subscription) {
			this.endEvent.subscribe(() => {
				subscription.unsubscribe();
			});
		}

		monitorHeartbeat(timeout, onExceeded) {
			if (this.type === "server&client") {
				// No point in monitoring this since we're the same process
				return;
			}

			this.heartbeatTimeout = setTimeout(
				async () => {
					try {
						await this.heartbeatEvent.call(undefined, {timeout});
						this.monitorHeartbeat(timeout, onExceeded);
					} catch (err) {
						if (
							err instanceof
							___R$project$rome$$romejs$events$BridgeError_ts$default
						) {
							if (this.alive) {
								onExceeded();
							}
						} else {
							throw err;
						}
					}
				},
				1000,
			);
		}

		clearPrioritization(id) {
			this.prioritizedResponses.delete(id);

			if (this.prioritizedResponses.size === 0) {
				for (const msg of this.deprioritizedResponseQueue) {
					this.sendMessage(msg);
				}
				this.deprioritizedResponseQueue = [];
			}
		}

		async handshake(opts = {}) {
			if (this.hasHandshook) {
				throw new Error("Already performed handshake");
			}

			const {timeout, second = false} = opts;

			// Send a handshake in case we were the first
			if (!second) {
				this.sendMessage({
					type: "handshake",
					first: true,
					subscriptions: this.getSubscriptions(),
				});
			}

			// Wait for a handshake from the other end
			const res = await this.handshakeEvent.wait(undefined, timeout);

			if (res.first) {
				// Send the handshake again, as it wouldn't have received the first
				this.sendMessage({
					type: "handshake",
					first: false,
					subscriptions: this.getSubscriptions(),
				});
			}

			this.receivedSubscriptions(res.subscriptions);

			this.hasHandshook = true;

			for (const msg of this.postHandshakeQueue) {
				this.sendMessage(msg);
			}
			this.postHandshakeQueue = [];
		}

		getSubscriptions() {
			const names = [];
			for (const event of this.events.values()) {
				if (event.hasSubscriptions()) {
					names.push(event.name);
				}
			}
			return names;
		}

		sendSubscriptions() {
			if (!this.hasHandshook) {
				// If we haven't had the handshake then no point sending them. They'll be sent all at once after
				return;
			}

			// Notify the other side of what we're currently subscribed to
			// We send over a list of all of our subscriptions every time
			// This is fine since we don't change subscriptions often and they aren't very large
			// If we have a lot of subscriptions, or are changing them a lot in the future then this could be optimized
			this.sendMessage({
				type: "subscriptions",
				names: this.getSubscriptions(),
			});
		}

		receivedSubscriptions(names) {
			this.listeners = new Set(names);
			this.updatedListenersEvent.send(this.listeners);
		}

		init() {
			// This method can be overridden by subclasses, it allows you to add logic such as error serializers
		}

		clear() {
			for (const [, event] of this.events) {
				event.clear();
			}
		}

		getNextMessageId() {
			return ++this.messageIdCounter;
		}

		createEvent(opts) {
			if (this.events.has(opts.name)) {
				throw new Error("Duplicate event");
			}

			const event = new ___R$project$rome$$romejs$events$BridgeEvent_ts$default(
				opts,
				this,
			);
			this.events.set(opts.name, event);
			return event;
		}

		//# Connection death
		assertAlive() {
			if (this.alive === false) {
				throw new Error("Bridge is dead");
			}
		}

		endWithError(err) {
			if (this.alive === false) {
				return;
			}

			this.alive = false;

			// Reject any pending requests
			for (const [, event] of this.events) {
				event.end(err);
			}
			this.clear();

			// Clear any currently processing heartbeat
			if (this.heartbeatTimeout !== undefined) {
				clearTimeout(this.heartbeatTimeout);
			}

			// Notify listeners
			this.endEvent.callSync(err);
		}

		end(message = "Connection died") {
			this.endWithError(
				new ___R$project$rome$$romejs$events$BridgeError_ts$default(
					message,
					this,
				),
			);
		}

		//# Error serialization
		buildError(struct, data) {
			const transport = this.errorTransports.get(struct.name);
			if (transport === undefined) {
				const err = new Error(struct.message);
				err.name = struct.name || "Error";
				err.stack = struct.stack;
				err[___R$project$rome$$romejs$v8$errors_ts$ERROR_FRAMES_PROP] = struct.frames;
				return err;
			} else {
				return transport.hydrate(struct, data);
			}
		}

		buildErrorResponse(id, event, errRaw) {
			// Just in case something that wasn't an Error was thrown
			const err = errRaw instanceof Error ? errRaw : new Error(String(errRaw));

			// Fetch some metadata for hydration
			const tranport = this.errorTransports.get(err.name);
			const metadata = tranport === undefined ? {} : tranport.serialize(err);

			return {
				id,
				event,
				type: "response",
				responseStatus: "error",
				value: ___R$project$rome$$romejs$v8$errors_ts$getErrorStructure(err),
				metadata,
			};
		}

		addErrorTransport(name, transport) {
			this.errorTransports.set(name, transport);
		}

		//# Message transmission
		sendMessage(msg) {
			// There's no try-catch gated around sendMessage because the call stack here will include some other error handler
			// We need to be specific for handleMessage because it could come from anywhere
			if (msg.type !== "handshake" && !this.hasHandshook) {
				this.postHandshakeQueue.push(msg);
				return;
			}

			this.assertAlive();

			if (msg.type === "response") {
				if (
					this.prioritizedResponses.size > 0 &&
					!this.prioritizedResponses.has(msg.id)
				) {
					this.deprioritizedResponseQueue.push(msg);
					return;
				}

				if (this.prioritizedResponses.has(msg.id)) {
					this.clearPrioritization(msg.id);
				}
			}

			const {opts} = this;
			opts.sendMessage(msg);
			if (opts.onSendMessage !== undefined) {
				opts.onSendMessage(msg);
			}
		}

		handleJSONMessage(str) {
			try {
				const data = JSON.parse(str);
				this.handleMessage(data);
			} catch (err) {
				if (err instanceof SyntaxError) {
					this.endWithError(
						new ___R$project$rome$$romejs$events$BridgeError_ts$default(
							"Error parsing message JSON: " + err.message,
							this,
						),
					);
				} else {
					this.endWithError(err);
				}
			}
		}

		handleMessage(msg) {
			try {
				this.assertAlive();

				if (msg.type === "handshake") {
					this.handshakeEvent.send({
						subscriptions: msg.subscriptions,
						first: msg.first,
					});
				}

				if (msg.type === "subscriptions") {
					this.receivedSubscriptions(msg.names);
				}

				if (msg.type === "request") {
					this.handleMessageRequest(msg);
				}

				if (msg.type === "response") {
					this.handleMessageResponse(msg);
				}
			} catch (err) {
				this.endWithError(err);
			}
		}

		handleMessageResponse(data) {
			const {id, event} = data;
			if (id === undefined) {
				throw new Error("Expected id");
			}
			if (event === undefined) {
				throw new Error("Expected event");
			}

			const eventHandler = this.events.get(event);
			if (eventHandler === undefined) {
				throw new Error("Unknown event");
			}

			eventHandler.dispatchResponse(id, data);
		}

		handleMessageRequest(data) {
			const {id, event, param, priority} = data;
			if (event === undefined) {
				throw new Error("Expected event in message request but received none");
			}

			const eventHandler = this.events.get(event);
			if (eventHandler === undefined) {
				throw new Error("Unknown event " + event);
			}

			if (id === undefined) {
				// We don't need to do anything with the return value of this since
				// there's nothing on the other end to catch it
				eventHandler.dispatchRequest(param);
			} else {
				if (priority) {
					this.prioritizedResponses.add(id);
				}

				eventHandler.dispatchRequest(param).then((value) => {
					this.sendMessage({
						event,
						id,
						type: "response",
						responseStatus: "success",
						value,
					});
				}).catch((err) => {
					this.sendMessage(this.buildErrorResponse(id, event, err));
				}).catch((err) => this.endWithError(err));
			}
		}
	}


  // project-rome/@romejs/events/bridgeCreators.ts
const ___R$project$rome$$romejs$events$bridgeCreators_ts = {
		createBridgeFromWebSocketInterface: ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromWebSocketInterface,
		createBridgeFromBrowserWebSocket: ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromBrowserWebSocket,
		createBridgeFromSocket: ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromSocket,
		createBridgeFromLocal: ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromLocal,
		createBridgeFromChildProcess: ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromChildProcess,
		createBridgeFromParentProcess: ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromParentProcess,
	};
	const ___R$$priv$project$rome$$romejs$events$bridgeCreators_ts$SOCKET_LENGTH = /^(\d+):/;

	// JSON.stringify but throw on bad data types
	// Most likely slower... But safer and our data structures are usually fairly shallow
	function ___R$$priv$project$rome$$romejs$events$bridgeCreators_ts$stringify(
		obj,
	) {
		return JSON.stringify(
			obj,
			(key, value) => {
				const type = typeof value;

				if (value === undefined || value === null) {
					return value;
				}

				// Primitives
				if (type === "string" || type === "number" || type === "boolean") {
					return value;
				}

				// Arrays and plain objects
				if (Array.isArray(value) || value.constructor === Object) {
					return value;
				}

				throw new Error(
					"Illegal data type not allowed in JSON: " +
					___R$project$rome$$romejs$pretty$format$index_ts$default(value) +
					" in " +
					___R$project$rome$$romejs$pretty$format$index_ts$default(obj),
				);
			},
		);
	}

	function ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromWebSocketInterface(
		CustomBridge,
		inf,
		opts,
	) {
		const bridge = new CustomBridge(
			Object.assign(
				{},
				opts,
				{
					sendMessage: (data) => {
						inf.sendJSON(data);
					},
				},
			),
		);

		const {socket} = inf;

		bridge.endEvent.subscribe(() => {
			socket.end();
		});

		inf.completeFrameEvent.subscribe((frame) => {
			const json = frame.payload.toString();
			bridge.handleJSONMessage(json);
		});

		socket.on(
			"error",
			(err) => {
				bridge.endWithError(err);
			},
		);

		socket.on(
			"end",
			() => {
				bridge.end("RPC WebSocket died");
			},
		);

		return bridge;
	}

	function ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromBrowserWebSocket(
		CustomBridge,
		socket,
		opts,
	) {
		const bridge = new CustomBridge(
			Object.assign(
				{},
				opts,
				{
					sendMessage: (data) => {
						socket.send(
							___R$$priv$project$rome$$romejs$events$bridgeCreators_ts$stringify(
								data,
							),
						);
					},
				},
			),
		);

		bridge.endEvent.subscribe(() => {
			socket.close();
		});

		socket.onmessage = function(event) {
			bridge.handleJSONMessage(String(event.data));
		};

		socket.onclose = () => {
			bridge.end("RPC WebSocket disconnected");
		};

		return bridge;
	}

	function ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromSocket(
		CustomBridge,
		socket,
		opts,
	) {
		const bridge = new CustomBridge(
			Object.assign(
				{},
				opts,
				{
					sendMessage: (data) => {
						const serialized = ___R$$priv$project$rome$$romejs$events$bridgeCreators_ts$stringify(
							data,
						);
						socket.write(serialized.length + ":" + serialized);
					},
				},
			),
		);

		bridge.endEvent.subscribe(() => {
			socket.end();
		});

		// buffer data and parse message on newline
		let buff = "";
		let messageLength = 0;
		socket.setEncoding("utf8");
		function checkForPossibleMessage() {
			// we're awaiting a message and have received it
			if (messageLength > 0 && buff.length >= messageLength) {
				// retrieve the message from the buffer
				const msg = buff.slice(0, messageLength);

				// clear the next message length and remove the current message from the buffer
				buff = buff.slice(messageLength);
				messageLength = 0;

				// parse it
				bridge.handleJSONMessage(msg);
			}

			// if we aren't waiting for a message and we have a buffer then check for an incoming message
			if (messageLength === 0 && buff !== "") {
				// check if we've received the starting info of a message
				const possibleLength = buff.match(
					___R$$priv$project$rome$$romejs$events$bridgeCreators_ts$SOCKET_LENGTH,
				);
				if (possibleLength != null) {
					// get the message length
					messageLength = Number(possibleLength[1]);

					// remove the length designator
					buff = buff.slice(possibleLength[0].length);

					// check if we have a full message
					checkForPossibleMessage();
				}
			}
		}

		socket.on(
			"data",
			(chunk) => {
				buff += chunk;
				checkForPossibleMessage();
			},
		);

		socket.on(
			"error",
			(err) => {
				bridge.endWithError(err);
			},
		);

		socket.on(
			"end",
			() => {
				bridge.end("Socket disconnected");
			},
		);

		return bridge;
	}

	function ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromLocal(
		CustomBridge,
		opts,
	) {
		const bridge = new CustomBridge(
			Object.assign(
				{},
				opts,
				{
					type: "server&client",
					sendMessage: (msg) => {
						bridge.handleMessage(msg);
					},
				},
			),
		);

		return bridge;
	}

	function ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromChildProcess(
		CustomBridge,
		proc,
		opts,
	) {
		const bridge = new CustomBridge(
			Object.assign(
				{},
				opts,
				{
					sendMessage: (data) => {
						proc.send(data);
					},
				},
			),
		);

		bridge.endEvent.subscribe(() => {
			proc.kill();
		});

		proc.on(
			"error",
			(err) => {
				bridge.endWithError(err);
			},
		);

		proc.on(
			"message",
			(msg) => {
				bridge.handleMessage((msg));
			},
		);

		// Catch process dying and reject any requests in flight
		proc.on(
			"close",
			() => {
				bridge.end("RPC child process died");
			},
		);

		return bridge;
	}

	function ___R$project$rome$$romejs$events$bridgeCreators_ts$createBridgeFromParentProcess(
		CustomBridge,
		opts,
	) {
		const bridge = new CustomBridge(
			Object.assign(
				{},
				opts,
				{
					sendMessage: (data) => {
						if (typeof process.send === "function") {
							process.send(data);
						} else {
							throw new Error("No process.send found");
						}
					},
				},
			),
		);

		process.on(
			"message",
			(data) => {
				bridge.handleMessage(data);
			},
		);

		// I doubt any of these will have time to dispatch but for consistency sake...
		process.on(
			"exit",
			() => {
				bridge.end("RPC self process died");
			},
		);

		return bridge;
	}


  // project-rome/@romejs/events/types.ts
const ___R$project$rome$$romejs$events$types_ts = {};

























  // project-rome/@romejs/events/utils.ts
const ___R$project$rome$$romejs$events$utils_ts = {
		mergeEventSubscriptions: ___R$project$rome$$romejs$events$utils_ts$mergeEventSubscriptions,
	};
	function ___R$project$rome$$romejs$events$utils_ts$mergeEventSubscriptions(
		subs,
	) {
		return {
			unsubscribe() {
				for (const sub of subs) {
					sub.unsubscribe();
				}
			},
		};
	}


  // project-rome/@romejs/events/index.ts



  // project-rome/@romejs/cli-reporter/util.ts
const ___R$$priv$project$rome$$romejs$cli$reporter$util_ts$readline = _dereq_(
		"readline",
	);
	function ___R$project$rome$$romejs$cli$reporter$util_ts$mergeProgresses(
		progresses,
	) {
		if (progresses.length === 1) {
			return progresses[0];
		}

		return {
			render: () => {
				for (const progress of progresses) {
					progress.render();
				}
			},
			setCurrent: (current) => {
				for (const progress of progresses) {
					progress.setCurrent(current);
				}
			},
			setTotal: (total, approximate) => {
				for (const progress of progresses) {
					progress.setTotal(total, approximate);
				}
			},
			setText: (text) => {
				for (const progress of progresses) {
					progress.setText(text);
				}
			},
			pushText: (text) => {
				for (const progress of progresses) {
					progress.pushText(text);
				}
			},
			popText: (text) => {
				for (const progress of progresses) {
					progress.popText(text);
				}
			},
			setApproximateETA: (duration) => {
				for (const progress of progresses) {
					progress.setApproximateETA(duration);
				}
			},
			tick: () => {
				for (const progress of progresses) {
					progress.tick();
				}
			},
			end: () => {
				for (const progress of progresses) {
					progress.end();
				}
			},
			pause: () => {
				for (const progress of progresses) {
					progress.pause();
				}
			},
			resume: () => {
				for (const progress of progresses) {
					progress.resume();
				}
			},
		};
	}



	function ___R$project$rome$$romejs$cli$reporter$util_ts$onKeypress(
		reporter,
		callback,
	) {
		const stdin = reporter.getStdin();

		___R$project$rome$$romejs$cli$reporter$util_ts$setRawMode(stdin, true);
		___R$$priv$project$rome$$romejs$cli$reporter$util_ts$readline.emitKeypressEvents(
			stdin,
		);

		function onkeypress(chunk, key) {
			switch (key.name) {
				case "c": {
					if (key.ctrl) {
						reporter.br(true);
						reporter.warn("Cancelled by user");
						process.exit(1);
					}
					return;
				}

				case "escape": {
					reporter.br(true);
					reporter.warn("Cancelled by user");
					process.exit(1);
					return;
				}
			}

			callback(key);
		}

		stdin.addListener("keypress", onkeypress);

		return {
			finish() {
				stdin.removeListener("keypress", onkeypress);
				___R$project$rome$$romejs$cli$reporter$util_ts$setRawMode(stdin, false);
			},
		};
	}

	function ___R$project$rome$$romejs$cli$reporter$util_ts$setRawMode(stdin, raw) {
		if (stdin.isTTY && stdin.setRawMode !== undefined) {
			stdin.setRawMode(raw);
		}

		if (raw) {
			stdin.resume();
		} else {
			stdin.pause();
		}
	}


  // project-rome/@romejs/cli-reporter/select.ts
function ___R$$priv$project$rome$$romejs$cli$reporter$select_ts$formatShortcut(
		{shortcut},
	) {
		if (shortcut === undefined) {
			return "";
		} else {
			return " <dim>(shortcut " + shortcut + ")</dim>";
		}
	}

	async function ___R$project$rome$$romejs$cli$reporter$select_ts$default(
		reporter,
		message,
		{
			options,
			defaults = [],
			radio = false,
			yes = false,
		},
	) {
		const optionNames = [];
		const seenShortcuts = new Set();

		// Verify there's no shortcut collisions and remove empty options
		for (const key in options) {
			const option = options[key];

			if (option !== undefined) {
				optionNames.push(key);

				const {shortcut} = option;
				if (shortcut !== undefined) {
					if (seenShortcuts.has(shortcut)) {
						throw new Error("Multiple options have the shortcut " + shortcut);
					} else {
						seenShortcuts.add(shortcut);
					}
				}
			}
		}

		let optionCount = optionNames.length;
		if (optionCount === 0) {
			return new Set();
		}

		if (yes) {
			return new Set(defaults);
		}

		let prompt = "<dim>\u276f</dim> <emphasis>" + message + "</emphasis>";
		reporter.logAll(prompt);

		if (radio) {
			reporter.info(
				"Use arrow keys and then <emphasis>enter</emphasis> to select an option",
			);
		} else {
			reporter.info(
				"Use arrow keys and <emphasis>space</emphasis> to select or deselect options and then <emphasis>enter</emphasis> to confirm",
			);
		}

		const selectedOptions = new Set(defaults);
		let activeOption = 0;

		// Set first option if this is a radio
		if (radio && !defaults.length) {
			selectedOptions.add(optionNames[0]);
		}

		function boundActive() {
			activeOption = Math.min(activeOption, optionCount - 1);
			activeOption = Math.max(activeOption, 0);

			if (radio) {
				selectedOptions.clear();
				selectedOptions.add(optionNames[activeOption]);
			}
		}

		// If we aren't a radio then set the active option to the bottom of any that are enabled
		if (!radio) {
			while (selectedOptions.has(optionNames[activeOption])) {
				activeOption++;
			}
		}

		function render() {
			const optionNames = Object.keys(options);
			for (let i = 0; i < optionNames.length; i++) {
				const key = optionNames[i];
				const option = options[key];
				const {label} = option;
				const shortcut = ___R$$priv$project$rome$$romejs$cli$reporter$select_ts$formatShortcut(
					option,
				);

				let formattedLabel =
					optionNames.indexOf(key) === activeOption
						? "<underline>" + label + "</underline>"
						: label;

				let symbol = "";
				if (radio) {
					symbol = selectedOptions.has(key) ? "\u25c9" : "\u25ef";
				} else {
					symbol = selectedOptions.has(key) ? "\u2611" : "\u2610";
				}

				reporter.logAll(
					"  " + symbol + " " + formattedLabel + shortcut,
					{
						// Don't put a newline on the last option
						newline: i !== optionNames.length - 1,
					},
				);
			}
		}
		function cleanup() {
			for (let i = 0; i < optionCount; i++) {
				reporter.writeAll(
					___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.eraseLine,
				);

				// Don't move above the top line
				if (i !== optionCount - 1) {
					reporter.writeAll(
						___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorUp(),
					);
				}
			}
			reporter.writeAll(
				___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorTo(0),
			);
		}
		function toggleOption(optionName) {
			if (selectedOptions.has(optionName)) {
				selectedOptions.delete(optionName);
			} else {
				selectedOptions.add(optionName);
			}
		}

		const stdin = reporter.getStdin();

		render();

		___R$project$rome$$romejs$cli$reporter$util_ts$setRawMode(stdin, true);

		await new Promise((resolve) => {
			const keypress = ___R$project$rome$$romejs$cli$reporter$util_ts$onKeypress(
				reporter,
				(key) => {
					// Check if this is an option shortcut
					if (!key.ctrl) {
						for (const optionName in options) {
							const option = options[optionName];
							if (option === undefined) {
								continue;
							}

							const {shortcut} = option;
							if (shortcut === key.name) {
								if (radio) {
									selectedOptions.clear();
									selectedOptions.add(optionName);
									finish();
								} else {
									toggleOption(optionName);
								}
								return;
							}
						}
					}

					switch (key.name) {
						case "up": {
							activeOption--;
							break;
						}

						case "down": {
							activeOption++;
							break;
						}

						case "space": {
							if (!radio) {
								toggleOption((optionNames[activeOption]));
							}
							break;
						}

						case "return": {
							finish();
							return;
						}

						default:
							return;
					}

					boundActive();
					cleanup();
					render();
				},
			);

			function finish() {
				cleanup();

				// Remove initial help message
				reporter.writeAll(
					___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorUp(),
				);
				reporter.writeAll(
					___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.eraseLine,
				);

				// Remove initial log message
				reporter.writeAll(
					___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorUp(),
				);
				reporter.writeAll(
					___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.eraseLine,
				);

				prompt += ": ";
				if (selectedOptions.size > 0) {
					prompt += Array.from(selectedOptions, (key) => options[key].label).join(
						", ",
					);
				} else {
					prompt += "<dim>none</dim>";
				}
				reporter.logAll(prompt);

				// Stop listening for keypress
				keypress.finish();
				resolve();
			}
		});

		return selectedOptions;
	}


  // project-rome/@romejs/cli-reporter/Reporter.ts
const ___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$stream = _dereq_(
		"stream",
	);
	const ___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$readline = _dereq_(
		"readline",
	);













	let ___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$remoteProgressIdCounter = 0;



	function ___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$getStreamFormat(
		stdout,
	) {
		return stdout !== undefined && stdout.isTTY === true ? "ansi" : "none";
	}

	class ___R$project$rome$$romejs$cli$reporter$Reporter_ts$default {
		constructor(opts = {}) {
			this.wrapCallback = (callback) => {
				const {wrapperFactory} = this;
				if (wrapperFactory === undefined) {
					return callback;
				} else {
					return wrapperFactory(callback);
				}
			};
			this.programName =
				opts.programName === undefined ? "rome" : opts.programName;
			this.programVersion = opts.programVersion;

			this.noProgress = process.env.CI === "1";
			this.isVerbose = Boolean(opts.verbose);

			this.startTime =
				opts.startTime === undefined ? Date.now() : opts.startTime;
			this.hasClearScreen =
				opts.hasClearScreen === undefined ? true : opts.hasClearScreen;
			this.activeElements = new Set();
			this.indentLevel = 0;
			this.indentString = "";
			this.enabled = opts.disabled === true ? 0 : 1;
			this.markupOptions =
				opts.markupOptions === undefined ? {} : opts.markupOptions;
			this.streamsWithDoubleNewlineEnd = new Set();
			this.streamsWithNewlineEnd = new Set();
			this.shouldRedirectOutToErr = false;
			this.stdin = opts.stdin;

			this.wrapperFactory = opts.wrapperFactory;

			this.remoteClientProgressBars = new Map();
			this.remoteServerProgressBars = new Map();

			this.sendRemoteServerMessage = new ___R$project$rome$$romejs$events$Event_ts$default({
				name: "sendRemoteServerMessage",
			});
			this.sendRemoteClientMessage = new ___R$project$rome$$romejs$events$Event_ts$default({
				name: "sendRemoteClientMessage",
			});

			this.isRemote = opts.useRemoteProgressBars === true;

			this.outStreams = new Set();
			this.errStreams = new Set();
			this.streams = new Set();

			if (opts.streams !== undefined) {
				for (const stream of opts.streams) {
					this.addStream(stream);
				}
			}
		}

		attachStdoutStreams(stdout, stderr) {
			const columns =
				stdout === undefined || stdout.columns === undefined
					? ___R$project$rome$$romejs$cli$reporter$Reporter_ts$default.DEFAULT_COLUMNS
					: stdout.columns;

			const columnsUpdated = new ___R$project$rome$$romejs$events$Event_ts$default({
				name: "columnsUpdated",
			});

			// Windows terminals are awful
			const unicode = process.platform !== "win32";

			const outStream = {
				type: "out",
				format: ___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$getStreamFormat(
					stdout,
				),
				columns,
				unicode,
				write(chunk) {
					if (stdout !== undefined) {
						stdout.write(chunk);
					}
				},
				teardown() {},
			};

			const errStream = {
				type: "error",
				format: ___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$getStreamFormat(
					stderr,
				),
				columns,
				unicode,
				write(chunk) {
					if (stderr !== undefined) {
						stderr.write(chunk);
					}
				},
			};

			// Watch for resizing
			if (outStream.format === "ansi" && stdout !== undefined) {
				const onStdoutResize = () => {
					if ((stdout == null ? undefined : stdout.columns) !== undefined) {
						const {columns} = stdout;
						columnsUpdated.send(columns);
						this.setStreamColumns([outStream, errStream], columns);
					}
				};

				outStream.teardown = () => {
					stdout.off("resize", onStdoutResize);
				};

				stdout.on("resize", onStdoutResize);
			}

			this.addStream(outStream);
			this.addStream(errStream);

			return {
				columnsUpdated,
				stdout: outStream,
				stderr: errStream,
			};
		}

		attachCaptureStream(format = "none") {
			let buff = "";

			const stream = {
				format,
				type: "all",
				columns: ___R$project$rome$$romejs$cli$reporter$Reporter_ts$default.DEFAULT_COLUMNS,
				unicode: true,
				write(chunk) {
					buff += chunk;
				},
			};

			this.addStream(stream);

			return {
				read() {
					return buff;
				},
				remove: () => {
					this.removeStream(stream);
				},
			};
		}

		static fromProcess(opts = {}) {
			const reporter = new ___R$project$rome$$romejs$cli$reporter$Reporter_ts$default(
				Object.assign(
					{},
					opts,
					{
						markupOptions: Object.assign(
							{cwd: ___R$project$rome$$romejs$path$index_ts$CWD_PATH},
							opts.markupOptions,
						),
					},
				),
			);

			reporter.attachStdoutStreams(process.stdout, process.stderr);

			return reporter;
		}

		processRemoteClientMessage(msg) {
			if (msg.type === "PROGRESS_CREATE") {
				this.remoteClientProgressBars.set(
					msg.id,
					this.progressLocal(
						msg.opts,
						() => {
							this.sendRemoteServerMessage.call({
								type: "ENDED",
								id: msg.id,
							});
						},
					),
				);
				return;
			}

			let bar = this.remoteClientProgressBars.get(msg.id);
			if (bar === undefined) {
				throw new Error(
					"Remote reporter message for progress bar " +
					msg.id +
					" that does not exist",
				);
			}

			bar.processRemoteClientMessage(msg);

			if (msg.type === "PROGRESS_END") {
				this.remoteClientProgressBars.delete(msg.id);
			}
		}

		receivedRemoteServerMessage(msg) {
			// Currently the only message a remote Reporter can send is that it has ended
			switch (msg.type) {
				case "ENDED": {
					const progress = this.remoteServerProgressBars.get(msg.id);
					if (progress !== undefined) {
						progress.end();
					}
				}
			}
		}

		getMessagePrefix() {
			return "";
		}

		normalizeMessage(stream, tty, opts) {
			let msg =
				stream.format !== "none" || opts.nonTTY === undefined
					? tty
					: opts.nonTTY;

			if (opts.noPrefix !== true) {
				msg = this.getMessagePrefix() + msg;
			}

			// Don't indent if there is no indent, or the message is empty
			const {indentString} = this;
			if (
				this.streamsWithNewlineEnd.has(stream) &&
				indentString !== "" &&
				msg !== ""
			) {
				// Indent each line, leaving out the indentation for empty lines
				msg =
					indentString + msg.replace(/\n([^\n])/g, "\n" + indentString + "$1");
			}

			return msg;
		}

		redirectOutToErr(should) {
			const old = this.shouldRedirectOutToErr;
			this.shouldRedirectOutToErr = should;
			return old;
		}

		setStreamColumns(streams, columns) {
			for (const stream of streams) {
				if (!this.streams.has(stream)) {
					throw new Error(
						"Trying to setStreamColumns on a stream that isn't attached to this Reporter",
					);
				}

				stream.columns = columns;
			}

			for (const elem of this.activeElements) {
				elem.render();
			}
		}

		addStream(stream) {
			this.streamsWithNewlineEnd.add(stream);
			this.streams.add(stream);

			if (stream.type === "error" || stream.type === "all") {
				this.errStreams.add(stream);
			}

			if (stream.type === "out" || stream.type === "all") {
				this.outStreams.add(stream);
			}
		}

		removeStream(stream) {
			if (stream.teardown !== undefined) {
				stream.teardown();
			}
			this.streams.delete(stream);
			this.outStreams.delete(stream);
			this.errStreams.delete(stream);
		}

		//# Stdin
		getStdin() {
			const {stdin} = this;
			if (stdin === undefined) {
				throw new Error("This operation expected a stdin but we have none");
			}
			return stdin;
		}

		async question(message, {hint, default: def = "", yes = false} = {}) {
			if (yes) {
				return def;
			}

			const stdin = this.getStdin();

			const origPrompt =
				"<dim emphasis>?</dim> <emphasis>" + message + "</emphasis>";
			let prompt = origPrompt;
			if (hint !== undefined) {
				prompt += " <dim>" + hint + "</dim>";
			}
			if (def !== "") {
				prompt += " (" + def + ")";
			}
			prompt += ": ";
			this.logAll(
				prompt,
				{
					newline: false,
				},
			);

			const rl = ___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$readline.createInterface({
				input: stdin,
				output: new ___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$stream.Writable({
					write: (chunk, encoding, callback) => {
						this.writeAll(chunk);
						callback();
					},
				}),
				terminal: false,
			});

			return new Promise((resolve) => {
				rl.on(
					"line",
					(line) => {
						rl.close();

						const normalized = line === "" ? def : line;

						// Replace initial prompt
						this.writeAll(
							___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorUp(),
						);
						this.writeAll(
							___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.eraseLine,
						);

						let prompt = origPrompt;
						prompt += ": ";
						if (normalized === "") {
							prompt += "<dim>empty</dim>";
						} else {
							prompt += normalized;
						}
						this.logAll(prompt);

						resolve(normalized);
					},
				);
			});
		}

		async questionValidate(message, validate, options = {}) {
			while (true) {
				let res;

				await this.question(
					message,
					Object.assign(
						{},
						options,
						{
							normalize: (value) => {
								res = validate(value);

								if (res[0] === true && typeof res[1] === "string") {
									return res[1];
								} else {
									return value;
								}
							},
						},
					),
				);

				if (res === undefined) {
					throw new Error("normalize should have been called");
				}

				if (res[0] === false) {
					this.error(res[1]);
					continue;
				} else {
					return res[1];
				}
			}
		}

		async radioConfirm(message) {
			const answer = await this.radio(
				message,
				{
					options: {
						yes: {
							label: "Yes",
							shortcut: "y",
						},
						no: {
							label: "No",
							shortcut: "n",
						},
					},
				},
			);
			return answer === "yes";
		}

		async confirm(message = "Press any key to continue") {
			this.logAll("<dim>" + message + "</dim>", {newline: false});

			await new Promise((resolve) => {
				const keypress = ___R$project$rome$$romejs$cli$reporter$util_ts$onKeypress(
					this,
					() => {
						keypress.finish();
						resolve();
					},
				);
			});

			// Newline
			this.logAll("");
		}

		async radio(message, arg) {
			const set = await this.select(
				message,
				Object.assign({}, arg, {radio: true}),
			);

			// Should always have at least one element
			return Array.from(set)[0];
		}

		async select(message, args) {
			return ___R$project$rome$$romejs$cli$reporter$select_ts$default(
				this,
				message,
				args,
			);
		}

		//# Control
		isEnabled(stderr) {
			return this.getStreams(stderr).size > 0;
		}

		getStreams(stderr) {
			if (this.enabled === 0) {
				return new Set();
			}

			if (this.shouldRedirectOutToErr) {
				return this.errStreams;
			}

			if (stderr) {
				return this.errStreams;
			}

			return this.outStreams;
		}

		enable() {
			let alreadyDisabled = false;

			this.enabled++;

			return () => {
				if (alreadyDisabled) {
					throw new Error("Already disabled Reporter");
				}

				this.enabled--;
				alreadyDisabled = true;
			};
		}

		//# LIFECYCLE
		teardown() {
			for (const stream of this.streams) {
				this.removeStream(stream);
			}

			for (const elem of this.activeElements) {
				elem.end();
			}
			this.activeElements.clear();
		}

		fork(opts = {}) {
			return new ___R$project$rome$$romejs$cli$reporter$Reporter_ts$default(
				Object.assign(
					{
						streams: [...this.streams],
						verbose: this.isVerbose,
						markupOptions: this.markupOptions,
						wrapperFactory: this.wrapperFactory,
					},
					opts,
				),
			);
		}

		//# INDENTATION METHODS
		indent(callback) {
			this.indentLevel++;
			this.updateIndent();

			callback();
			this.indentLevel--;
			this.updateIndent();
		}

		noIndent(callback) {
			const prevIndentLevel = this.indentLevel;
			this.indentLevel = 0;
			this.updateIndent();
			callback();
			this.indentLevel = prevIndentLevel;
			this.updateIndent();
		}

		updateIndent() {
			this.indentString = "  ".repeat(this.indentLevel);
		}

		//# INTERNAL
		prependEmoji(stream, msg, emoji, fallback) {
			if (stream.format === "none") {
				return emoji + " " + msg;
			} else {
				if (fallback === undefined) {
					return msg;
				} else {
					return fallback + " " + msg;
				}
			}
		}

		//# VISUALISATION
		table(head, rawBody) {
			let body = "";

			if (head.length > 0) {
				body += "<tr>";
				for (const field of head) {
					body += "<td><emphasis>" + field + "</emphasis></td>";
				}
				body += "</tr>";
			}

			for (const row of rawBody) {
				body += "<tr>";
				for (let field of row) {
					if (typeof field === "string" || typeof field === "number") {
						field = {align: "left", value: field};
					}

					let {value, align} = field;
					if (typeof value === "number") {
						value = "<number>" + value + "</number>";
					}
					body += '<td align="' + align + '">' + value + "</td>";
				}
				body += "</tr>";
			}

			this.logAll("<table>" + body + "</table>");
		}

		verboseInspect(val) {
			if (this.isVerbose) {
				this.inspect(val);
			}
		}

		inspect(value) {
			if (!this.isEnabled(false)) {
				return;
			}

			let formatted = value;

			if (typeof formatted !== "number" && typeof formatted !== "string") {
				formatted = ___R$project$rome$$romejs$pretty$format$index_ts$default(
					formatted,
					{markup: true},
				);
			}

			this.logAll(String(formatted));
		}

		//# ESCAPE HATCHES
		clearLineAll() {
			for (const stream of this.getStreams(false)) {
				this.clearLineSpecific(stream);
			}
		}

		clearLineSpecific(stream) {
			stream.write(
				___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.eraseLine,
			);
			stream.write(
				___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorTo(0),
			);
		}

		writeAll(msg, opts = {}) {
			for (const stream of this.getStreams(opts.stderr)) {
				this.writeSpecific(stream, msg, opts);
			}
		}

		writeSpecific(stream, msg, opts = {}) {
			if (!this.isEnabled(opts.stderr)) {
				return;
			}

			this.hasClearScreen = false;

			if (stream.format === "ansi" && this.activeElements.size > 0) {
				// A progress bar is active and has probably drawn to the screen
				this.clearLineSpecific(stream);
			}

			stream.write(msg);
		}

		//# UTILITIES
		getTotalTime() {
			return Date.now() - this.startTime;
		}

		clearScreen() {
			for (const stream of this.getStreams(false)) {
				if (stream.format === "ansi") {
					stream.write(
						___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.clearScreen,
					);
				}
			}
			this.hasClearScreen = true;
		}

		//# SECTIONS
		heading(text) {
			this.br();
			this.logAll(
				"<inverse><emphasis>" + text + "</emphasis></inverse>",
				{
					nonTTY: "# " + text,
				},
			);
			this.br();
		}

		section(title, callback) {
			this.hr(
				title === undefined ? undefined : "<emphasis>" + title + "</emphasis>",
			);
			this.indent(() => {
				callback();
				this.br();
			});
		}

		hr(text = "") {
			const {hasClearScreen} = this;

			this.br();

			if (hasClearScreen && text === undefined) {
				return;
			}

			this.logAll("<hr>" + text + "</hr>");
			this.br();
		}

		async steps(callbacks) {
			const total = callbacks.length;
			let current = 1;
			for (const {clear, message, callback} of callbacks) {
				this.step(current, total, message);

				if (clear) {
					this.hasClearScreen = true;
				}

				await callback();
				current++;

				// If a step doesn't produce any output, or just progress bars that are cleared, we can safely remove the previous `step` message line
				if (clear && this.hasClearScreen) {
					for (const stream of this.getStreams(false)) {
						if (stream.format === "ansi") {
							stream.write(
								___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorTo(
									0,
								),
							);
							stream.write(
								___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.cursorUp(),
							);
							stream.write(
								___R$project$rome$$romejs$string$markup$ansi_ts$ansiEscapes.eraseLine,
							);
						}
					}
				}
			}
		}

		step(current, total, msg) {
			if (msg.endsWith("?")) {
				msg =
					___R$project$rome$$romejs$string$utils$removeSuffix_ts$removeSuffix(
						msg,
						"?",
					) + "...?";
			} else {
				msg += "...";
			}

			this.logAll("<dim>[" + current + "/" + total + "]</dim> " + msg);
		}

		br(force = false) {
			for (const stream of this.getStreams(false)) {
				if (!this.streamsWithDoubleNewlineEnd.has(stream) || force) {
					this.logOne(stream, "");
				}
			}
		}

		stripMarkup(str) {
			return ___R$project$rome$$romejs$string$markup$format_ts$markupToPlainText(
				str,
				this.markupOptions,
			).lines.join("\n");
		}

		markupify(stream, str, viewportShrink = 0) {
			if (str === "") {
				return {lines: [""], width: 0};
			}

			const gridMarkupOptions = Object.assign(
				{},
				this.markupOptions,
				{columns: stream.columns - this.indentString.length - viewportShrink},
			);

			switch (stream.format) {
				case "ansi":
					return ___R$project$rome$$romejs$string$markup$format_ts$markupToAnsi(
						str,
						gridMarkupOptions,
					);

				case "html":
					// TODO
					return ___R$project$rome$$romejs$string$markup$format_ts$markupToPlainText(
						str,
						gridMarkupOptions,
					);

				case "none":
					return ___R$project$rome$$romejs$string$markup$format_ts$markupToPlainText(
						str,
						gridMarkupOptions,
					);

				case "markup":
					return {
						width: 0,
						lines: [str],
					};
			}
		}

		logAll(tty, opts = {}) {
			for (const stream of this.getStreams(opts.stderr)) {
				this.logOne(stream, tty, opts);
			}
		}

		logAllNoMarkup(tty, opts = {}) {
			for (const stream of this.getStreams(opts.stderr)) {
				this.logOneNoMarkup(stream, tty, opts);
			}
		}

		logOne(stream, tty, opts = {}) {
			const msg =
				stream.format !== "none" || opts.nonTTY === undefined
					? tty
					: opts.nonTTY;
			const {lines} = this.markupify(stream, msg);
			for (const line of lines) {
				this.logOneNoMarkup(stream, line, opts);
			}
		}

		logOneNoMarkup(stream, tty, opts = {}) {
			if (!this.isEnabled(opts.stderr)) {
				return;
			}

			let msg = this.normalizeMessage(stream, tty, opts);
			if (opts.newline !== false) {
				msg += "\n";
			}

			// Track if there's going to be a completely empty line
			const hasDoubleNewline = msg === "\n" || msg.endsWith("\n\n");
			if (hasDoubleNewline) {
				this.streamsWithDoubleNewlineEnd.add(stream);
			} else {
				this.streamsWithDoubleNewlineEnd.delete(stream);
			}
			if (msg.endsWith("\n")) {
				this.streamsWithNewlineEnd.add(stream);
			} else {
				this.streamsWithNewlineEnd.delete(stream);
			}

			this.writeSpecific(stream, msg, opts);
		}

		logAllWithCategory(rawInner, args, opts) {
			if (!this.isEnabled(opts.stderr)) {
				return;
			}

			const inner = ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
				opts.markupTag,
				rawInner,
			);

			for (const stream of this.getStreams(opts.stderr)) {
				// Format the prefix, selecting it depending on if we're a unicode stream
				const prefixInner = stream.unicode ? opts.unicodePrefix : opts.rawPrefix;
				const prefix = ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
					"emphasis",
					___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
						opts.markupTag,
						this.getMessagePrefix() + prefixInner,
					),
				);

				// Should only be one line
				const {lines: prefixLines, width: prefixWidth} = this.markupify(
					stream,
					prefix,
				);
				const prefixLine = prefixLines[0];
				if (prefixLines.length !== 1) {
					throw new Error("Expected 1 prefix line");
				}

				const {lines} = this.markupify(stream, inner, prefixWidth);
				for (let i = 0; i < lines.length; i++) {
					let line = lines[i];
					if (i === 0) {
						line = "" + prefixLine + line;
					} else {
						line = "" + " ".repeat(prefixWidth) + line;
					}
					this.logOneNoMarkup(
						stream,
						line,
						Object.assign({noPrefix: true}, opts),
					);
				}
			}
		}

		success(msg, ...args) {
			this.logAllWithCategory(
				msg,
				args,
				{
					unicodePrefix: "\u2714 ",
					rawPrefix: "\u221a ",
					markupTag: "success",
				},
			);
		}

		error(msg, ...args) {
			this.logAllWithCategory(
				msg,
				args,
				{
					markupTag: "error",
					unicodePrefix: "\u2716 ",
					rawPrefix: "\xd7 ",
					stderr: true,
				},
			);
		}

		errorObj(err) {
			this.error(err.stack || err.message || err.name || "Unknown Error");
		}

		info(msg, ...args) {
			this.logAllWithCategory(
				msg,
				args,
				{
					unicodePrefix: "\u2139 ",
					rawPrefix: "i ",
					markupTag: "info",
				},
			);
		}

		warn(msg, ...args) {
			this.logAllWithCategory(
				msg,
				args,
				{
					unicodePrefix: "\u26a0 ",
					rawPrefix: "! ",
					markupTag: "warn",
					stderr: true,
				},
			);
		}

		verbose(msg, ...args) {
			if (this.isVerbose) {
				this.verboseForce(msg, args);
			}
		}

		verboseForce(msg, ...args) {
			this.logAllWithCategory(
				msg,
				args,
				{
					unicodePrefix: "\u26a1 ",
					rawPrefix: "* ",
					markupTag: "dim",
				},
			);
		}

		command(command) {
			this.logAll(
				"<dim>$ " + command + "</dim>",
				{
					nonTTY: "$ " + command,
				},
			);
		}

		processedList(items, callback, opts = {}) {
			if (items.length === 0) {
				// We make some assumptions that there's at least one item
				return {truncated: false};
			}

			let truncatedCount = 0;

			let start = opts.start || 0;
			if (opts.truncate !== undefined && items.length > opts.truncate) {
				truncatedCount = items.length - opts.truncate;
				items = items.slice(0, opts.truncate);
				start += truncatedCount;
			}

			let buff = "";

			for (const item of items) {
				const reporter = this.fork({
					streams: [],
				});
				const stream = reporter.attachCaptureStream("markup");
				callback(reporter, item);
				stream.remove();
				buff += "<li>" + stream.read() + "</li>";
			}

			if (opts.ordered) {
				this.logAll(
					___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
						"ol",
						buff,
						{start, reversed: opts.reverse},
					),
				);
			} else {
				this.logAll("<ul>" + buff + "</ul>");
			}

			if (truncatedCount > 0) {
				this.logAll(
					"<dim>and <number>" + truncatedCount + "</number> others...</dim>",
				);
				return {truncated: true};
			} else {
				return {truncated: false};
			}
		}

		list(items, opts = {}) {
			return this.processedList(
				items,
				(reporter, str) => {
					reporter.logAll(str, {newline: false});
				},
				opts,
			);
		}

		progress(opts) {
			if (this.isRemote) {
				return this.progressRemote(opts);
			} else {
				return this.progressLocal(opts);
			}
		}

		progressLocal(opts, onEnd) {
			const bar = new ___R$project$rome$$romejs$cli$reporter$Progress_ts$default(
				this,
				opts,
				() => {
					this.activeElements.delete(bar);
					if (onEnd !== undefined) {
						onEnd();
					}
				},
			);
			this.activeElements.add(bar);
			return bar;
		}

		progressRemote(opts) {
			const id =
				process.pid +
				":" +
				___R$$priv$project$rome$$romejs$cli$reporter$Reporter_ts$remoteProgressIdCounter++;

			this.sendRemoteClientMessage.send({
				type: "PROGRESS_CREATE",
				opts,
				id,
			});

			let closed = false;

			const dispatch = (message) => {
				if (!closed) {
					this.sendRemoteClientMessage.send(message);
				}
			};

			const end = () => {
				this.activeElements.delete(progress);
				this.remoteServerProgressBars.delete(id);
				closed = true;
			};

			const progress = {
				render() {
					// Don't do anything
					// This is called when columns have updated and we want to force a rerender
				},
				setCurrent: (current) => {
					dispatch({
						type: "PROGRESS_SET_CURRENT",
						current,
						id,
					});
				},
				setTotal: (total, approximate = false) => {
					dispatch({
						type: "PROGRESS_SET_TOTAL",
						total,
						approximate,
						id,
					});
				},
				setText: (text) => {
					dispatch({
						type: "PROGRESS_SET_TEXT",
						text,
						id,
					});
				},
				setApproximateETA: (duration) => {
					dispatch({
						type: "PROGRESS_SET_APPROXIMATE_ETA",
						duration,
						id,
					});
				},
				pushText: (text) => {
					dispatch({
						type: "PROGRESS_PUSH_TEXT",
						text,
						id,
					});
				},
				popText: (text) => {
					dispatch({
						type: "PROGRESS_POP_TEXT",
						text,
						id,
					});
				},
				tick: () => {
					dispatch({
						type: "PROGRESS_TICK",
						id,
					});
				},
				end: () => {
					dispatch({
						type: "PROGRESS_END",
						id,
					});
				},
				pause: () => {
					dispatch({
						type: "PROGRESS_PAUSE",
						id,
					});
				},
				resume: () => {
					dispatch({
						type: "PROGRESS_RESUME",
						id,
					});
				},
			};

			this.remoteServerProgressBars.set(
				id,
				{
					end,
				},
			);

			this.activeElements.add(progress);

			return progress;
		}
	}
	___R$project$rome$$romejs$cli$reporter$Reporter_ts$default.DEFAULT_COLUMNS = 100;


  // project-rome/@romejs/cli-reporter/types.ts
const ___R$project$rome$$romejs$cli$reporter$types_ts = {};

























  // project-rome/@romejs/cli-reporter/index.ts



  // project-rome/@romejs/cli-diagnostics/highlightCode.ts
// 100KB
	const ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$FILE_SIZE_MAX = 100000;



	function ___R$project$rome$$romejs$cli$diagnostics$highlightCode_ts$default(
		opts,
	) {
		if (
			opts.input.length >
			___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$FILE_SIZE_MAX
		) {
			return ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
				opts.input,
			);
		}

		if (opts.language === "js") {
			// js-parser does not accept an "unknown" sourceType
			return ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$highlightJS(
				opts.input,
				opts.sourceType === undefined || opts.sourceType === "unknown"
					? "script"
					: opts.sourceType,
			);
		}

		if (opts.language === "json") {
			return ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$highlightJSON(
				opts.path,
				opts.input,
			);
		}

		return ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
			opts.input,
		);
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$reduce(
		input,
		tokens,
		callback,
	) {
		let prevEnd = 0;
		let buff = "";

		for (const token of tokens) {
			const start = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(token.start);
			const end = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(token.end);
			let value = input.slice(start, end);

			// Add on text between tokens
			buff += ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
				input.slice(prevEnd, start),
			);
			prevEnd = end;

			// We need to break up the token text into lines, so that we can easily split the highlighted newlines and have the ansi codes be unbroken
			const lines = value.split("\n");

			const values = lines.map((line) => {
				return callback(
					token,
					___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(line),
				);
			});

			buff += values.join("\n");
		}

		return buff;
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$invalidHighlight(
		line,
	) {
		return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
			"emphasis",
			___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
				"color",
				line,
				{bg: "red"},
			),
		);
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$highlightJSON(
		path,
		input,
	) {
		const tokens = ___R$project$rome$$romejs$codec$json$index_ts$tokenizeJSON({
			input,
			// Wont be used anywhere but activates JSON extensions if necessary
			path,
		});

		return ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$reduce(
			input,
			tokens,
			(token, value) => {
				// Try to keep the highlighting in line with JS where possible
				switch (token.type) {
					case "BlockComment":
					case "LineComment":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "brightBlack"},
						);

					case "String":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "green"},
						);

					case "Number":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "magenta"},
						);

					case "Word":
						switch (token.value) {
							case "true":
							case "false":
							case "null":
								return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
									"color",
									value,
									{fg: "cyan"},
								);

							default:
								return value;
						}

					case "Comma":
					case "Colon":
					case "Dot":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "yellow"},
						);

					case "BracketOpen":
					case "BracketClose":
					case "BraceOpen":
					case "BraceClose":
					case "Minus":
					case "Plus":
						return value;

					case "Invalid":
						return ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$invalidHighlight(
							value,
						);

					// Will never be hit
					case "EOF":
					case "SOF":
						return "";
				}
			},
		);
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$highlightJS(
		input,
		sourceType,
	) {
		const tokens = ___R$project$rome$$romejs$js$parser$index_ts$tokenizeJS(
			input,
			{
				sourceType,
				// js-parser requires a filename. Doesn't really matter since we'll never be producing an AST or diagnostics
				path: ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
					"unknown",
				),
			},
		);

		return ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$reduce(
			input,
			tokens,
			(token, value) => {
				const {type} = token;

				switch (type.label) {
					case "break":
					case "case":
					case "catch":
					case "continue":
					case "debugger":
					case "default":
					case "do":
					case "else":
					case "finally":
					case "for":
					case "function":
					case "if":
					case "return":
					case "switch":
					case "throw":
					case "try":
					case "var":
					case "const":
					case "while":
					case "with":
					case "new":
					case "this":
					case "super":
					case "class":
					case "extends":
					case "export":
					case "import":
					case "null":
					case "true":
					case "false":
					case "in":
					case "instanceof":
					case "typeof":
					case "void":
					case "delete":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "cyan"},
						);

					case "num":
					case "bigint":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "magenta"},
						);

					case "regexp":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "magenta"},
						);

					case "string":
					case "template":
					case "`":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "green"},
						);

					case "invalid":
						return ___R$$priv$project$rome$$romejs$cli$diagnostics$highlightCode_ts$invalidHighlight(
							value,
						);

					case "comment":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "brightBlack"},
						);

					case ",":
					case ";":
					case ":":
					case "::":
					case "${":
					case ".":
					case "?":
					case "?.":
						return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"color",
							value,
							{fg: "yellow"},
						);

					case "[":
					case "]":
					case "{":
					case "{|":
					case "}":
					case "|}":
					case "(":
					case ")":
						return value;

					case "=>":
					case "...":
					case "@":
					case "#":
					case "=":
					case "_=":
					case "++/--":
					case "!":
					case "~":
					case "??":
					case "||":
					case "&&":
					case "|":
					case "^":
					case "&":
					case "==/!=":
					case "</>":
					case "<</>>":
					case "+/-":
					case "%":
					case "*":
					case "/":
					case "**":
					case "jsxName":
					case "jsxText":
					case "jsxTagStart":
					case "jsxTagEnd":
					case "name":
					case "eof":
						return value;
				}
			},
		);
	}


  // project-rome/@romejs/cli-diagnostics/utils.ts
function ___R$project$rome$$romejs$cli$diagnostics$utils_ts$normalizeTabs(str) {
		return str.replace(/\t/g, "  ");
	}

	function ___R$project$rome$$romejs$cli$diagnostics$utils_ts$showInvisibles(
		str,
	) {
		let ret = "";
		for (const cha of str) {
			switch (cha) {
				case " ": {
					ret += "\xb7"; // Middle Dot, \u00B7
					break;
				}
				case "\r": {
					ret += "\u240d";
					break;
				}
				case "\n": {
					ret += "\u23ce"; // Return Symbol, \u23ce
					break;
				}
				case "\t": {
					ret += "\u21b9"; // Left Arrow To Bar Over Right Arrow To Bar, \u21b9
					break;
				}
				default: {
					ret += cha;
					break;
				}
			}
		}
		return ret;
	}

	function ___R$project$rome$$romejs$cli$diagnostics$utils_ts$cleanEquivalentString(
		str,
	) {
		str = ___R$project$rome$$romejs$string$markup$format_ts$markupToPlainTextString(
			str,
		);

		// Replace all whitespace with spaces
		str = str.replace(/[\s\n]+/g, " ");

		// Remove trailing dot
		str = str.replace(/\.+$/, "");

		// Remove surrounding quotes
		str = str.replace(/^"(.*?)"$/, "$1");

		return str;
	}

	function ___R$project$rome$$romejs$cli$diagnostics$utils_ts$joinNoBreak(lines) {
		return "<nobr>" + lines.join("\n") + "</nobr>";
	}

	function ___R$project$rome$$romejs$cli$diagnostics$utils_ts$splitLines(src) {
		return src.replace(/\t/g, " ").split(
			___R$project$rome$$romejs$js$parser$utils$whitespace_ts$NEWLINE,
		);
	}



	function ___R$project$rome$$romejs$cli$diagnostics$utils_ts$toLines(opts) {
		const raw = ___R$project$rome$$romejs$cli$diagnostics$utils_ts$splitLines(
			opts.input,
		);
		const highlighted = ___R$project$rome$$romejs$cli$diagnostics$utils_ts$splitLines(
			___R$project$rome$$romejs$cli$diagnostics$highlightCode_ts$default(opts),
		);

		if (raw.length !== highlighted.length) {
			throw new Error(
				"raw and highlighted line count mismatch " +
				raw.length +
				" !== " +
				highlighted.length,
			);
		}

		return {
			length: raw.length,
			raw,
			highlighted,
		};
	}


  // project-rome/@romejs/cli-diagnostics/constants.ts
const ___R$project$rome$$romejs$cli$diagnostics$constants_ts = {
		get GUTTER() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER;
		},
		get CODE_FRAME_INDENT() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT;
		},
		get CODE_FRAME_SELECTED_INDENT() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_SELECTED_INDENT;
		},
		get MAX_CODE_FRAME_LINES() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_FRAME_LINES;
		},
		get HALF_MAX_CODE_FRAME_LINES() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$HALF_MAX_CODE_FRAME_LINES;
		},
		get CODE_FRAME_CONTEXT_LINES() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_CONTEXT_LINES;
		},
		get MAX_CODE_LENGTH() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_LENGTH;
		},
		get MAX_PATCH_LINES() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_PATCH_LINES;
		},
		get MAX_LOG_LENGTH() {
			return ___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_LOG_LENGTH;
		},
	};
	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER = " \u2502 ";
	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT = "  ";
	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_SELECTED_INDENT = "<error>></error> ";

	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_FRAME_LINES = 8;
	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$HALF_MAX_CODE_FRAME_LINES =
		___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_FRAME_LINES /
		2;
	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_CONTEXT_LINES = 2;

	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_LENGTH = 500;
	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_PATCH_LINES = 50;
	const ___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_LOG_LENGTH = 5000;


  // project-rome/@romejs/string-diff/index.ts





	/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */
	const ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE = -1;
	const ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT = 1;
	const ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL = 0;
	const ___R$project$rome$$romejs$string$diff$index_ts$diffConstants = {
		DELETE: ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE,
		EQUAL: ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL,
		ADD: ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT,
	};

	function ___R$project$rome$$romejs$string$diff$index_ts$groupDiffByLines(
		rawDiffs,
	) {
		const diffsByLine = [];

		// Refers to the current line array being built
		let line = [];
		function flushLine() {
			if (line.length > 0) {
				diffsByLine.push(line);
				line = [];
			}
		}

		for (const tuple of rawDiffs) {
			const [type, text] = tuple;

			// Deleted lines don't affect the line count
			if (
				type ===
				___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE
			) {
				line.push(tuple);
				continue;
			}

			// Get all the lines
			const parts = text.split("\n");

			// Doesn't contain a newline
			if (parts.length <= 1) {
				line.push(tuple);
				continue;
			}

			// Deconstruct each text chunk
			const [currentLine, ...futureLines] = parts;

			// The first chunk belongs to the current line
			if (currentLine !== "") {
				line.push([type, currentLine]);
			}

			// Create unique lines for each other chunk
			for (const newLine of futureLines) {
				flushLine();
				line.push([type, newLine]);
			}
		}

		flushLine();

		return diffsByLine;
	}

	function ___R$project$rome$$romejs$string$diff$index_ts$default(text1, text2) {
		// only pass fix_unicode=true at the top level, not when main is
		// recursively invoked
		return ___R$$priv$project$rome$$romejs$string$diff$index_ts$main(
			text1,
			text2,
			true,
		);
	}

	/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info
 * @return {Array} Array of diff tuples.
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$main(
		text1,
		text2,
		fixUnicode = false,
	) {
		// Check for equality
		if (text1 === text2) {
			if (text1) {
				return [
					[
						___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL,
						text1,
					],
				];
			}
			return [];
		}

		// Trim off common prefix (speedup).
		let commonlength = ___R$$priv$project$rome$$romejs$string$diff$index_ts$commonPrefix(
			text1,
			text2,
		);
		let commonprefix = text1.substring(0, commonlength);
		text1 = text1.substring(commonlength);
		text2 = text2.substring(commonlength);

		// Trim off common suffix (speedup).
		commonlength = ___R$$priv$project$rome$$romejs$string$diff$index_ts$commonSuffix(
			text1,
			text2,
		);
		let commonsuffix = text1.substring(text1.length - commonlength);
		text1 = text1.substring(0, text1.length - commonlength);
		text2 = text2.substring(0, text2.length - commonlength);

		// Compute the diff on the middle block.
		let diffs = ___R$$priv$project$rome$$romejs$string$diff$index_ts$compute(
			text1,
			text2,
		);

		// Restore the prefix and suffix.
		if (commonprefix) {
			diffs.unshift([
				___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL,
				commonprefix,
			]);
		}
		if (commonsuffix) {
			diffs.push([
				___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL,
				commonsuffix,
			]);
		}
		___R$$priv$project$rome$$romejs$string$diff$index_ts$cleanupMerge(
			diffs,
			fixUnicode,
		);
		return diffs;
	}

	/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @return {Array} Array of diff tuples.
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$compute(
		text1,
		text2,
	) {
		let diffs = [];

		if (!text1) {
			// Just add some text (speedup).
			return [
				[
					___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT,
					text2,
				],
			];
		}

		if (!text2) {
			// Just delete some text (speedup).
			return [
				[
					___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE,
					text1,
				],
			];
		}

		let longtext = text1.length > text2.length ? text1 : text2;
		let shorttext = text1.length > text2.length ? text2 : text1;
		let i = longtext.indexOf(shorttext);
		if (i !== -1) {
			// Shorter text is inside the longer text (speedup).
			diffs = [
				[
					___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT,
					longtext.substring(0, i),
				],
				[
					___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL,
					shorttext,
				],
				[
					___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT,
					longtext.substring(i + shorttext.length),
				],
			];
			// Swap insertions for deletions if diff is reversed.
			if (text1.length > text2.length) {
				diffs[0][0] = diffs[2][0] = ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE;
			}
			return diffs;
		}

		if (shorttext.length === 1) {
			// Single character string.
			// After the previous speedup, the character can't be an equality.
			return [
				[
					___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE,
					text1,
				],
				[
					___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT,
					text2,
				],
			];
		}

		// Check to see if the problem can be split in two.
		let hm = ___R$$priv$project$rome$$romejs$string$diff$index_ts$halfMatch(
			text1,
			text2,
		);
		if (hm) {
			// A half-match was found, sort out the return data.
			let text1A = hm[0];
			let text1B = hm[1];
			let text2A = hm[2];
			let text2B = hm[3];
			let midCommon = hm[4];
			// Send both pairs off for separate processing.
			let diffsA = ___R$$priv$project$rome$$romejs$string$diff$index_ts$main(
				text1A,
				text2A,
			);
			let diffsB = ___R$$priv$project$rome$$romejs$string$diff$index_ts$main(
				text1B,
				text2B,
			);
			// Merge the results.
			return diffsA.concat(
				[
					[
						___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL,
						midCommon,
					],
				],
				diffsB,
			);
		}

		return ___R$$priv$project$rome$$romejs$string$diff$index_ts$bisect(
			text1,
			text2,
		);
	}

	/**
 * Find the 'middle snake' of a diff, split the problem in two
 * and return the recursively constructed diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @return {Array} Array of diff tuples.
 * @private
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$bisect(
		text1,
		text2,
	) {
		// Cache the text lengths to prevent multiple calls.
		let text1Length = text1.length;
		let text2Length = text2.length;
		let maxD = Math.ceil((text1Length + text2Length) / 2);
		let vOffset = maxD;
		let vLength = 2 * maxD;
		let v1 = new Array(vLength);
		let v2 = new Array(vLength);

		// Setting all elements to -1 is faster in Chrome & Firefox than mixing
		// integers and undefined.
		for (let x = 0; x < vLength; x++) {
			v1[x] = -1;
			v2[x] = -1;
		}
		v1[vOffset + 1] = 0;
		v2[vOffset + 1] = 0;
		let delta = text1Length - text2Length;

		// If the total number of characters is odd, then the front path will collide
		// with the reverse path.
		let front = delta % 2 !== 0;

		// Offsets for start and end of k loop.
		// Prevents mapping of space beyond the grid.
		let k1Start = 0;
		let k1End = 0;
		let k2Start = 0;
		let k2End = 0;
		for (let d = 0; d < maxD; d++) {
			// Walk the front path one step.
			for (let k1 = -d + k1Start; k1 <= d - k1End; k1 += 2) {
				let k1Offset = vOffset + k1;
				let x1;
				if (k1 === -d || (k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1])) {
					x1 = v1[k1Offset + 1];
				} else {
					x1 = v1[k1Offset - 1] + 1;
				}
				let y1 = x1 - k1;
				while (
					x1 < text1Length &&
					y1 < text2Length &&
					text1.charAt(x1) === text2.charAt(y1)
				) {
					x1++;
					y1++;
				}
				v1[k1Offset] = x1;
				if (x1 > text1Length) {
					// Ran off the right of the graph.
					k1End += 2;
				} else if (y1 > text2Length) {
					// Ran off the bottom of the graph.
					k1Start += 2;
				} else if (front) {
					let k2Offset = vOffset + delta - k1;
					if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {
						// Mirror x2 onto top-left coordinate system.
						let x2 = text1Length - v2[k2Offset];
						if (x1 >= x2) {
							// Overlap detected.
							return ___R$$priv$project$rome$$romejs$string$diff$index_ts$bisectSplit(
								text1,
								text2,
								x1,
								y1,
							);
						}
					}
				}
			}

			// Walk the reverse path one step.
			for (let k2 = -d + k2Start; k2 <= d - k2End; k2 += 2) {
				let k2Offset = vOffset + k2;
				let x2;
				if (k2 === -d || (k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1])) {
					x2 = v2[k2Offset + 1];
				} else {
					x2 = v2[k2Offset - 1] + 1;
				}
				let y2 = x2 - k2;
				while (
					x2 < text1Length &&
					y2 < text2Length &&
					text1.charAt(text1Length - x2 - 1) ===
					text2.charAt(text2Length - y2 - 1)
				) {
					x2++;
					y2++;
				}
				v2[k2Offset] = x2;
				if (x2 > text1Length) {
					// Ran off the left of the graph.
					k2End += 2;
				} else if (y2 > text2Length) {
					// Ran off the top of the graph.
					k2Start += 2;
				} else if (!front) {
					let k1Offset = vOffset + delta - k2;
					if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {
						let x1 = v1[k1Offset];
						let y1 = vOffset + x1 - k1Offset;
						// Mirror x2 onto top-left coordinate system.
						x2 = text1Length - x2;
						if (x1 >= x2) {
							// Overlap detected.
							return ___R$$priv$project$rome$$romejs$string$diff$index_ts$bisectSplit(
								text1,
								text2,
								x1,
								y1,
							);
						}
					}
				}
			}
		}

		// Diff took too long and hit the deadline or
		// number of diffs equals number of characters, no commonality at all.
		return [
			[___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE, text1],
			[___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT, text2],
		];
	}

	/**
 * Given the location of the 'middle snake', split the diff in two parts
 * and recurse.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} x Index of split point in text1.
 * @param {number} y Index of split point in text2.
 * @return {Array} Array of diff tuples.
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$bisectSplit(
		text1,
		text2,
		x,
		y,
	) {
		let text1A = text1.substring(0, x);
		let text2A = text2.substring(0, y);
		let text1B = text1.substring(x);
		let text2B = text2.substring(y);

		// Compute both diffs serially.
		let diffs = ___R$$priv$project$rome$$romejs$string$diff$index_ts$main(
			text1A,
			text2A,
		);
		let diffsb = ___R$$priv$project$rome$$romejs$string$diff$index_ts$main(
			text1B,
			text2B,
		);

		return diffs.concat(diffsb);
	}

	/**
 * Determine the common prefix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$commonPrefix(
		text1,
		text2,
	) {
		// Quick check for common null cases.
		if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {
			return 0;
		}

		// Binary search.
		// Performance analysis: http://neil.fraser.name/news/2007/10/09/
		let pointermin = 0;
		let pointermax = Math.min(text1.length, text2.length);
		let pointermid = pointermax;
		let pointerstart = 0;
		while (pointermin < pointermid) {
			if (
				text1.substring(pointerstart, pointermid) ===
				text2.substring(pointerstart, pointermid)
			) {
				pointermin = pointermid;
				pointerstart = pointermin;
			} else {
				pointermax = pointermid;
			}
			pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
		}

		if (
			___R$$priv$project$rome$$romejs$string$diff$index_ts$isSurrogatePairStart(
				text1.charCodeAt(pointermid - 1),
			)
		) {
			pointermid--;
		}

		return pointermid;
	}

	/**
 * Determine the common suffix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$commonSuffix(
		text1,
		text2,
	) {
		// Quick check for common null cases.
		if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {
			return 0;
		}

		// Binary search.

		// Performance analysis: http://neil.fraser.name/news/2007/10/09/
		let pointermin = 0;
		let pointermax = Math.min(text1.length, text2.length);
		let pointermid = pointermax;
		let pointerend = 0;
		while (pointermin < pointermid) {
			if (
				text1.substring(text1.length - pointermid, text1.length - pointerend) ===
				text2.substring(text2.length - pointermid, text2.length - pointerend)
			) {
				pointermin = pointermid;
				pointerend = pointermin;
			} else {
				pointermax = pointermid;
			}
			pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
		}

		if (
			___R$$priv$project$rome$$romejs$string$diff$index_ts$isSurrogatePairEnd(
				text1.charCodeAt(text1.length - pointermid),
			)
		) {
			pointermid--;
		}

		return pointermid;
	}

	/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$halfMatch(
		text1,
		text2,
	) {
		let longtext = text1.length > text2.length ? text1 : text2;
		let shorttext = text1.length > text2.length ? text2 : text1;
		if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
			return undefined; // Pointless.
		}

		// First check if the second quarter is the seed for a half-match.
		let hm1 = ___R$$priv$project$rome$$romejs$string$diff$index_ts$halfMatchI(
			longtext,
			shorttext,
			Math.ceil(longtext.length / 4),
		);

		// Check again based on the third quarter.
		let hm2 = ___R$$priv$project$rome$$romejs$string$diff$index_ts$halfMatchI(
			longtext,
			shorttext,
			Math.ceil(longtext.length / 2),
		);

		let hm;
		if (!hm1 && !hm2) {
			return undefined;
		} else if (hm2) {
			if (hm1) {
				// Both matched.  Select the longest.
				hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
			} else {
				hm = hm2;
			}
		} else {
			hm = hm1;
		}

		if (hm === undefined) {
			throw new Error("Expected half match");
		}

		// A half-match was found, sort out the return data.
		let text1A;
		let text1B;
		let text2A;
		let text2B;
		if (text1.length > text2.length) {
			text1A = hm[0];
			text1B = hm[1];
			text2A = hm[2];
			text2B = hm[3];
		} else {
			text2A = hm[0];
			text2B = hm[1];
			text1A = hm[2];
			text1B = hm[3];
		}
		let midCommon = hm[4];
		return [text1A, text1B, text2A, text2B, midCommon];
	}

	/**
 * Does a substring of shorttext exist within longtext such that the substring
 * is at least half the length of longtext?
 * Closure, but does not reference any external variables.
 * @param {string} longtext Longer string.
 * @param {string} shorttext Shorter string.
 * @param {number} i Start index of quarter length substring within longtext.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
 *     of shorttext and the common middle.  Or null if there was no match.
 * @private
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$halfMatchI(
		longtext,
		shorttext,
		i,
	) {
		// Start with a 1/4 length substring at position i as a seed.
		let seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
		let j = -1;
		let bestCommon = "";
		let bestLongtextA = "";
		let bestLongtextB = "";
		let bestShorttextA = "";
		let bestShorttextB = "";
		while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {
			let prefixLength = ___R$$priv$project$rome$$romejs$string$diff$index_ts$commonPrefix(
				longtext.substring(i),
				shorttext.substring(j),
			);
			let suffixLength = ___R$$priv$project$rome$$romejs$string$diff$index_ts$commonSuffix(
				longtext.substring(0, i),
				shorttext.substring(0, j),
			);
			if (bestCommon.length < suffixLength + prefixLength) {
				bestCommon =
					shorttext.substring(j - suffixLength, j) +
					shorttext.substring(j, j + prefixLength);
				bestLongtextA = longtext.substring(0, i - suffixLength);
				bestLongtextB = longtext.substring(i + prefixLength);
				bestShorttextA = shorttext.substring(0, j - suffixLength);
				bestShorttextB = shorttext.substring(j + prefixLength);
			}
		}

		if (bestCommon.length * 2 >= longtext.length) {
			return [
				bestLongtextA,
				bestLongtextB,
				bestShorttextA,
				bestShorttextB,
				bestCommon,
			];
		} else {
			return undefined;
		}
	}

	/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {Array} diffs Array of diff tuples.
 * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff
 */
	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$cleanupMerge(
		diffs,
		fixUnicode,
	) {
		diffs.push([
			___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL,
			"",
		]); // Add a dummy entry at the end.
		let pointer = 0;
		let countDelete = 0;
		let countInsert = 0;
		let textDelete = "";
		let textInsert = "";
		let commonlength;
		while (pointer < diffs.length) {
			if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
				diffs.splice(pointer, 1);
				continue;
			}
			switch (diffs[pointer][0]) {
				case ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT: {
					countInsert++;
					textInsert += diffs[pointer][1];
					pointer++;
					break;
				}
				case ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE: {
					countDelete++;
					textDelete += diffs[pointer][1];
					pointer++;
					break;
				}
				case ___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL: {
					let previousEquality = pointer - countInsert - countDelete - 1;
					if (fixUnicode) {
						// prevent splitting of unicode surrogate pairs.  when fix_unicode is true,
						// we assume that the old and new text in the diff are complete and correct
						// unicode-encoded JS strings, but the tuple boundaries may fall between
						// surrogate pairs.  we fix this by shaving off stray surrogates from the end
						// of the previous equality and the beginning of this equality.  this may create
						// empty equalities or a common prefix or suffix.  for example, if AB and AC are
						// emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and
						// inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this
						// particular case, both equalities go away, we absorb any previous inequalities,
						// and we keep scanning for the next equality before rewriting the tuples.
						if (
							previousEquality >= 0 &&
							___R$$priv$project$rome$$romejs$string$diff$index_ts$endsWithPairStart(
								diffs[previousEquality][1],
							)
						) {
							let stray = diffs[previousEquality][1].slice(-1);
							diffs[previousEquality][1] = diffs[previousEquality][1].slice(
								0,
								-1,
							);
							textDelete = stray + textDelete;
							textInsert = stray + textInsert;
							if (!diffs[previousEquality][1]) {
								// emptied out previous equality, so delete it and include previous delete/insert
								diffs.splice(previousEquality, 1);
								pointer--;
								let k = previousEquality - 1;
								if (
									diffs[k] &&
									diffs[k][0] ===
									___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT
								) {
									countInsert++;
									textInsert = diffs[k][1] + textInsert;
									k--;
								}
								if (
									diffs[k] &&
									diffs[k][0] ===
									___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE
								) {
									countDelete++;
									textDelete = diffs[k][1] + textDelete;
									k--;
								}
								previousEquality = k;
							}
						}
						if (
							___R$$priv$project$rome$$romejs$string$diff$index_ts$startsWithPairEnd(
								diffs[pointer][1],
							)
						) {
							let stray = diffs[pointer][1].charAt(0);
							diffs[pointer][1] = diffs[pointer][1].slice(1);
							textDelete += stray;
							textInsert += stray;
						}
					}
					if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
						// for empty equality not at end, wait for next equality
						diffs.splice(pointer, 1);
						break;
					}
					if (textDelete.length > 0 || textInsert.length > 0) {
						// note that commonPrefix and commonSuffix are unicode-aware
						if (textDelete.length > 0 && textInsert.length > 0) {
							// Factor out any common prefixes.
							commonlength = ___R$$priv$project$rome$$romejs$string$diff$index_ts$commonPrefix(
								textInsert,
								textDelete,
							);
							if (commonlength !== 0) {
								if (previousEquality >= 0) {
									diffs[previousEquality][1] += textInsert.substring(
										0,
										commonlength,
									);
								} else {
									diffs.splice(
										0,
										0,
										[
											___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL,
											textInsert.substring(0, commonlength),
										],
									);
									pointer++;
								}
								textInsert = textInsert.substring(commonlength);
								textDelete = textDelete.substring(commonlength);
							}

							// Factor out any common suffixes.
							commonlength = ___R$$priv$project$rome$$romejs$string$diff$index_ts$commonSuffix(
								textInsert,
								textDelete,
							);
							if (commonlength !== 0) {
								diffs[pointer][1] =
									textInsert.substring(textInsert.length - commonlength) +
									diffs[pointer][1];
								textInsert = textInsert.substring(
									0,
									textInsert.length - commonlength,
								);
								textDelete = textDelete.substring(
									0,
									textDelete.length - commonlength,
								);
							}
						}

						// Delete the offending records and add the merged ones.
						let n = countInsert + countDelete;
						if (textDelete.length === 0 && textInsert.length === 0) {
							diffs.splice(pointer - n, n);
							pointer = pointer - n;
						} else if (textDelete.length === 0) {
							diffs.splice(
								pointer - n,
								n,
								[
									___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT,
									textInsert,
								],
							);
							pointer = pointer - n + 1;
						} else if (textInsert.length === 0) {
							diffs.splice(
								pointer - n,
								n,
								[
									___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE,
									textDelete,
								],
							);
							pointer = pointer - n + 1;
						} else {
							diffs.splice(
								pointer - n,
								n,
								[
									___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_DELETE,
									textDelete,
								],
								[
									___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_INSERT,
									textInsert,
								],
							);
							pointer = pointer - n + 2;
						}
					}
					if (
						pointer !== 0 &&
						diffs[pointer - 1][0] ===
						___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL
					) {
						// Merge this equality with the previous one.
						diffs[pointer - 1][1] += diffs[pointer][1];
						diffs.splice(pointer, 1);
					} else {
						pointer++;
					}
					countInsert = 0;
					countDelete = 0;
					textDelete = "";
					textInsert = "";
					break;
				}
			}
		}
		if (diffs[diffs.length - 1][1] === "") {
			// Remove the dummy entry at the end.
			diffs.pop();
		}

		// Second pass: look for single edits surrounded on both sides by equalities
		// which can be shifted sideways to eliminate an equality.
		// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
		let changes = false;
		pointer = 1;

		// Intentionally ignore the first and last element (don't need checking).
		while (pointer < diffs.length - 1) {
			if (
				diffs[pointer - 1][0] ===
				___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL &&
				diffs[pointer + 1][0] ===
				___R$$priv$project$rome$$romejs$string$diff$index_ts$DIFF_EQUAL
			) {
				// This is a single edit surrounded by equalities.
				if (
					diffs[pointer][1].substring(
						diffs[pointer][1].length - diffs[pointer - 1][1].length,
					) ===
					diffs[pointer - 1][1]
				) {
					// Shift the edit over the previous equality.
					diffs[pointer][1] =
						diffs[pointer - 1][1] +
						diffs[pointer][1].substring(
							0,
							diffs[pointer][1].length - diffs[pointer - 1][1].length,
						);
					diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
					diffs.splice(pointer - 1, 1);
					changes = true;
				} else if (
					diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ===
					diffs[pointer + 1][1]
				) {
					// Shift the edit over the next equality.
					diffs[pointer - 1][1] += diffs[pointer + 1][1];
					diffs[pointer][1] =
						diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
						diffs[pointer + 1][1];
					diffs.splice(pointer + 1, 1);
					changes = true;
				}
			}
			pointer++;
		}

		// If shifts were made, the diff needs reordering and another shift sweep.
		if (changes) {
			___R$$priv$project$rome$$romejs$string$diff$index_ts$cleanupMerge(
				diffs,
				fixUnicode,
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$isSurrogatePairStart(
		charCode,
	) {
		return charCode >= 55296 && charCode <= 56319;
	}

	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$isSurrogatePairEnd(
		charCode,
	) {
		return charCode >= 56320 && charCode <= 57343;
	}

	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$startsWithPairEnd(
		str,
	) {
		return ___R$$priv$project$rome$$romejs$string$diff$index_ts$isSurrogatePairEnd(
			str.charCodeAt(0),
		);
	}

	function ___R$$priv$project$rome$$romejs$string$diff$index_ts$endsWithPairStart(
		str,
	) {
		return ___R$$priv$project$rome$$romejs$string$diff$index_ts$isSurrogatePairStart(
			str.charCodeAt(str.length - 1),
		);
	}


  // project-rome/@romejs/cli-diagnostics/buildPatchCodeFrame.ts
function ___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$formatDiffLine(
		diffs,
	) {
		return diffs.map(([type, text]) => {
			if (
				type ===
				___R$project$rome$$romejs$string$diff$index_ts$diffConstants.DELETE
			) {
				return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
					"error",
					___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
						___R$project$rome$$romejs$cli$diagnostics$utils_ts$showInvisibles(
							text,
						),
					),
				);
			} else if (
				type ===
				___R$project$rome$$romejs$string$diff$index_ts$diffConstants.ADD
			) {
				return ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
					"success",
					___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
						___R$project$rome$$romejs$cli$diagnostics$utils_ts$showInvisibles(
							text,
						),
					),
				);
			} else {
				// type === diffConstants.EQUAL
				return ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
					___R$project$rome$$romejs$cli$diagnostics$utils_ts$normalizeTabs(text),
				);
			}
		}).join("");
	}

	const ___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$DELETE_MARKER = ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
		"error",
		"-",
	);
	const ___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$ADD_MARKER = ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
		"success",
		"+",
	);

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$formatSingleLineMarker(
		text,
	) {
		return ___R$project$rome$$romejs$string$markup$escape_ts$markup`<emphasis>${text}</emphasis>:`;
	}

	function ___R$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$default(
		item,
		verbose,
	) {
		const diffsByLine = ___R$project$rome$$romejs$string$diff$index_ts$groupDiffByLines(
			item.diff,
		);
		let lastVisibleLine = -1;

		// Calculate the parts of the diff we should show
		const shownLines = new Set();
		for (let i = 0; i < diffsByLine.length; i++) {
			const diffs = diffsByLine[i];

			let hasChange = false;
			for (const [type] of diffs) {
				if (
					type ===
					___R$project$rome$$romejs$string$diff$index_ts$diffConstants.DELETE ||
					type ===
					___R$project$rome$$romejs$string$diff$index_ts$diffConstants.ADD
				) {
					hasChange = true;
					break;
				}
			}

			if (hasChange) {
				for (
					let start =
						i -
						___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_CONTEXT_LINES;
					start <
					i +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_CONTEXT_LINES;
					start++
				) {
					shownLines.add(start);

					if (start > lastVisibleLine) {
						lastVisibleLine = start;
					}
				}
			}
		}

		const lineLength = String(lastVisibleLine).length;

		// Don't output a gutter if there's only a single line
		const singleLine = diffsByLine.length === 1;

		const {legend} = item;
		const frame = [];
		let displayedLines = 0;
		let truncated = false;
		let lastDisplayedLine = -1;

		const skippedLine =
			"<emphasis>" +
			___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT +
			".".repeat(lineLength) +
			___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER +
			"</emphasis>";

		// Build the actual frame
		for (let i = 0; i < diffsByLine.length; i++) {
			if (shownLines.has(i) === false) {
				continue;
			}

			displayedLines++;

			if (
				!verbose &&
				displayedLines >
				___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_PATCH_LINES
			) {
				truncated = true;
				continue;
			}

			const diffs = diffsByLine[i];
			const lineNo = i + 1;

			const deletions = [];
			const addition = [];

			let hasDeletions = false;
			let hasAddition = false;

			for (const tuple of diffs) {
				let [type] = tuple;

				if (
					type ===
					___R$project$rome$$romejs$string$diff$index_ts$diffConstants.DELETE
				) {
					hasDeletions = true;
					deletions.push(tuple);
				}

				if (
					type ===
					___R$project$rome$$romejs$string$diff$index_ts$diffConstants.ADD
				) {
					hasAddition = true;
					addition.push(tuple);
				}

				if (
					type ===
					___R$project$rome$$romejs$string$diff$index_ts$diffConstants.EQUAL
				) {
					addition.push(tuple);
					deletions.push(tuple);
				}
			}

			if (lastDisplayedLine !== lineNo - 1 && lastDisplayedLine !== -1) {
				frame.push(skippedLine);
			}

			let gutterWithLine = "";
			let gutterNoLine = "";
			let deleteMarker = ___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$DELETE_MARKER;
			let addMarker = ___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$ADD_MARKER;

			if (!singleLine) {
				gutterWithLine =
					"<emphasis>" +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT +
					'<pad align="right" width="' +
					lineLength +
					'">' +
					lineNo +
					"</pad>" +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER +
					"</emphasis>";
				gutterNoLine =
					"<emphasis>" +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT +
					" ".repeat(lineLength) +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER +
					"</emphasis>";
			}

			if (singleLine && legend !== undefined) {
				addMarker = ___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$formatSingleLineMarker(
					legend.add,
				);
				deleteMarker = ___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$formatSingleLineMarker(
					legend.delete,
				);
			}

			if (hasDeletions) {
				const gutter = hasAddition ? gutterNoLine : gutterWithLine;
				frame.push(
					"" +
					gutter +
					deleteMarker +
					" " +
					___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$formatDiffLine(
						deletions,
					),
				);
			}

			if (hasAddition) {
				frame.push(
					"" +
					gutterWithLine +
					addMarker +
					" " +
					___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$formatDiffLine(
						addition,
					),
				);
			}

			if (!hasAddition && !hasDeletions) {
				// Output one of the lines, they're the same
				frame.push(
					gutterWithLine +
					"  " +
					___R$$priv$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$formatDiffLine(
						addition,
					),
				);
			}

			lastDisplayedLine = lineNo;
		}

		if (truncated) {
			frame.push(
				skippedLine +
				" <dim><number>" +
				(displayedLines -
				___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_PATCH_LINES) +
				"</number> more lines truncated</dim>",
			);
		}

		if (legend !== undefined && !singleLine) {
			frame.push("");
			frame.push(
				"<error>- " +
				___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
					legend.delete,
				) +
				"</error>",
			);
			frame.push(
				"<success>+ " +
				___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
					legend.add,
				) +
				"</success>",
			);
			frame.push("");
		}

		return {
			truncated,
			frame: ___R$project$rome$$romejs$cli$diagnostics$utils_ts$joinNoBreak(
				frame,
			),
		};
	}


  // project-rome/@romejs/cli-diagnostics/buildMessageCodeFrame.ts
function ___R$$priv$project$rome$$romejs$cli$diagnostics$buildMessageCodeFrame_ts$createPointer(
		markerMessage,
		line,
		markerStart,
		markerEnd,
	) {
		let result = "";

		let markerSize = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
			___R$project$rome$$romejs$ob1$index_ts$ob1Sub(markerEnd, markerStart),
		);

		// If the range contains tabs then increase the marker size
		for (
			let i = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(markerStart);
			i < ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(markerEnd);
			i++
		) {
			const char = line[i];
			if (char === "\t") {
				markerSize++;
			}
		}

		const pointerLength = Math.max(markerSize, 1);

		// Skip the pointer if it's pointing at the last character
		let skipPointer =
			pointerLength === 1 &&
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(markerEnd) >= line.length;

		if (!skipPointer) {
			// Add indentation, handling hard tabs as two soft spaces
			for (
				let i = 0;
				i < ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(markerStart);
				i++
			) {
				const char = line[i];
				if (char === "\t") {
					// normalizeTabs will be called on this line and this replacement made
					result += "  ";
				} else {
					result += " ";
				}
			}

			// Add pointer
			result +=
				"<error><emphasis>" + "^".repeat(pointerLength) + "</emphasis></error>";
		}

		// Add marker
		if (markerMessage !== "") {
			result += " " + markerMessage;
		}

		if (result === "") {
			return undefined;
		} else {
			return result;
		}
	}

	function ___R$project$rome$$romejs$cli$diagnostics$buildMessageCodeFrame_ts$default(
		sourceText,
		allLines,
		start,
		end,
		markerMessage,
	) {
		if (allLines.length === 0 || start === undefined || end === undefined) {
			if (markerMessage === "") {
				return "";
			} else {
				return "<nobr>" + markerMessage + "</nobr>";
			}
		}

		const startLineIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1To0(
			start.line,
		);
		let endLineIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce1To0(
			end.line,
		);

		// Increase the amount of lines we should show for "context"
		let contextStartIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
			Math.max(
				0,
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(startLineIndex) -
				___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_CONTEXT_LINES,
			),
		);
		let contextEndIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
			Math.min(
				allLines.length - 1,
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(endLineIndex) +
				___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_CONTEXT_LINES,
			),
		);

		let maxVisibleLineNo = 0;

		let formattedLines = [];
		for (
			let i = contextStartIndex;
			i <= contextEndIndex;
			i = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(i)
		) {
			let rawLine = allLines.raw[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				i,
			)];
			let highlightLine = allLines.highlighted[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
				i,
			)];
			if (highlightLine === undefined || rawLine === undefined) {
				continue;
			}

			// Ensure that the frame doesn't start with whitespace
			if (
				rawLine.trim() === "" &&
				formattedLines.length === 0 &&
				i !== startLineIndex
			) {
				continue;
			}

			let pointer;

			// If this is within the highlighted line range
			const shouldHighlight = i >= startLineIndex && i <= endLineIndex;

			if (shouldHighlight) {
				if (i === startLineIndex && i === endLineIndex) {
					// Only line in the selection
					pointer = ___R$$priv$project$rome$$romejs$cli$diagnostics$buildMessageCodeFrame_ts$createPointer(
						markerMessage,
						rawLine,
						start.column,
						end.column,
					);
				} else if (i === startLineIndex) {
					// First line in selection
					pointer = ___R$$priv$project$rome$$romejs$cli$diagnostics$buildMessageCodeFrame_ts$createPointer(
						"",
						rawLine,
						start.column,
						// line could be highlighted
						___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(rawLine.length),
					);
				} else if (i === endLineIndex) {
					// Last line in selection
					pointer = ___R$$priv$project$rome$$romejs$cli$diagnostics$buildMessageCodeFrame_ts$createPointer(
						markerMessage,
						rawLine,
						___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
						end.column,
					);
				}
			}

			// Replace hard tabs with two spaces
			highlightLine = ___R$project$rome$$romejs$cli$diagnostics$utils_ts$normalizeTabs(
				highlightLine,
			);

			const lineNo = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0To1(i);
			let gutter =
				"" +
				String(lineNo) +
				___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER;

			if (shouldHighlight) {
				gutter =
					"" +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_SELECTED_INDENT +
					gutter;
			} else {
				gutter =
					"" +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT +
					gutter;
			}

			formattedLines.push({
				pointer,
				gutter,
				line: highlightLine,
			});

			maxVisibleLineNo = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(i) + 1;
		}

		// If we have too many lines in our selection, then collapse them to an ellipsis
		const pruned =
			formattedLines.length >
			___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_FRAME_LINES +
			2;
		if (pruned) {
			const start = formattedLines.slice(
				0,
				___R$project$rome$$romejs$cli$diagnostics$constants_ts$HALF_MAX_CODE_FRAME_LINES,
			);
			const end = formattedLines.slice(
				-___R$project$rome$$romejs$cli$diagnostics$constants_ts$HALF_MAX_CODE_FRAME_LINES,
			);
			formattedLines = start.concat([undefined], end);
		}

		// Remove trailing blank lines
		for (let i = formattedLines.length - 1; i >= 0; i--) {
			const info = formattedLines[i];
			if (info !== undefined && info.line === "") {
				formattedLines.pop();
			} else {
				break;
			}
		}

		// If there's no lines to target then return the normal marker
		if (
			formattedLines.length === 0 ||
			end.line === ___R$project$rome$$romejs$ob1$index_ts$ob1Number1Neg1 ||
			start.line === ___R$project$rome$$romejs$ob1$index_ts$ob1Number1Neg1
		) {
			if (markerMessage === "") {
				return "";
			} else {
				return "<nobr>" + markerMessage + "</nobr>";
			}
		}

		// Calculate max size of gutter, this is the maximum visible line plus the futter length plus the frame indent
		const lastLine = formattedLines[formattedLines.length - 1];
		if (lastLine === undefined) {
			throw new Error("Expected there to be a last line");
		}

		const maxGutterLength =
			String(maxVisibleLineNo).length +
			___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER.length +
			___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT.length;

		// If what the marker is highlighting equals the marker message then it's redundant so don't show the message
		if (markerMessage !== "") {
			const text = sourceText.slice(
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(start.index),
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(end.index),
			);
			if (
				___R$project$rome$$romejs$cli$diagnostics$utils_ts$cleanEquivalentString(
					text,
				) ===
				___R$project$rome$$romejs$cli$diagnostics$utils_ts$cleanEquivalentString(
					___R$project$rome$$romejs$string$markup$format_ts$markupToPlainTextString(
						markerMessage,
					),
				)
			) {
				markerMessage = "";
			}
		}

		// Output no gutter with a soft indent if this is true
		if (formattedLines.length === 1) {
			const selection = formattedLines[0];
			if (selection === undefined) {
				throw new Error(
					"Expected a selection? undefined is only valid here as an omitted line signifier",
				);
			}

			const result = [
				"" +
				___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT +
				selection.line,
			];
			if (selection.pointer !== undefined) {
				result.push(
					"" +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$CODE_FRAME_INDENT +
					selection.pointer,
				);
			}

			return ___R$project$rome$$romejs$cli$diagnostics$utils_ts$joinNoBreak(
				result,
			);
		}

		// Build up the line we display when source lines are omitted
		const omittedLine =
			'<emphasis><pad align="right" width="' +
			maxGutterLength +
			'">...</pad></emphasis>' +
			___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER;

		// Build the frame
		const result = [];
		for (const selection of formattedLines) {
			if (!selection) {
				result.push(omittedLine);
				continue;
			}

			const {pointer, gutter, line} = selection;

			result.push(
				'<pad align="right" width="' +
				maxGutterLength +
				'"><emphasis>' +
				gutter +
				"</emphasis></pad>" +
				line,
			);

			if (pointer !== undefined) {
				result.push(
					'<pad align="right" width="' +
					maxGutterLength +
					'"><emphasis>' +
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$GUTTER +
					"</emphasis></pad>" +
					pointer,
				);
			}
		}

		return ___R$project$rome$$romejs$cli$diagnostics$utils_ts$joinNoBreak(
			result,
		);
	}


  // project-rome/@romejs/cli-flags/serializeCLIFlags.ts
const ___R$project$rome$$romejs$cli$flags$serializeCLIFlags_ts = {
		serializeCLIFlags: ___R$project$rome$$romejs$cli$flags$serializeCLIFlags_ts$serializeCLIFlags,
	};




	function ___R$project$rome$$romejs$cli$flags$serializeCLIFlags_ts$serializeCLIFlags(
		{
			args = [],
			flags = {},
			programName,
			commandName,
			defaultFlags = {},
			shorthandFlags = new Set(),
			incorrectCaseFlags = new Set(),
			prefix = "$ ",
		},
		target,
	) {
		let startColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1;
		let endColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1;
		let code = prefix;

		function setStartColumn() {
			startColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
				code.length,
			);
		}

		function setEndColumn() {
			// Never point to a space
			if (code[code.length - 1] === " ") {
				endColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
					code.length - 1,
				);
			} else {
				endColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
					code.length,
				);
			}
		}

		if (programName !== undefined) {
			if (target.type === "program") {
				setStartColumn();
			}

			code += programName + " ";

			if (target.type === "program") {
				setEndColumn();
			}
		}

		if (commandName !== undefined) {
			if (target.type === "command") {
				setStartColumn();
			}

			code += commandName + " ";

			if (target.type === "command") {
				setEndColumn();
			}
		}

		// Add args
		for (let i = 0; i < args.length; i++) {
			const arg = args[i];

			let isTarget = false;
			if (target.type === "arg" && i === target.key) {
				isTarget = true;
			}
			if (target.type === "arg-range" && target.from === i) {
				isTarget = true;
			}

			if (isTarget) {
				setStartColumn();
			}

			code += arg + " ";

			let isEndTarget = isTarget;

			// We are the end target if we're within the from-to range or we're greater than from with no to
			if (
				target.type === "arg-range" &&
				i > target.from &&
				(target.to === undefined || target.to <= i)
			) {
				isEndTarget = true;
			}

			if (isEndTarget) {
				setEndColumn();
			}
		}

		// Add flags
		for (const key in flags) {
			const val = flags[key];

			// Ignore pointless default values
			if (val === defaultFlags[key]) {
				continue;
			}

			const values = Array.isArray(val) ? val : [val];

			const isTarget = target.type === "flag" && key === target.key;

			if (isTarget) {
				setStartColumn();
			}

			for (const val of values) {
				const flagPrefix = shorthandFlags.has(key) ? "-" : "--";
				const kebabKey = incorrectCaseFlags.has(key)
					? key
					: ___R$project$rome$$romejs$string$utils$toKebabCase_ts$toKebabCase(
							key,
						);
				if (val === false) {
					code += flagPrefix + "no-" + kebabKey + " ";
				} else {
					code += "" + flagPrefix + kebabKey + " ";
				}

				// Booleans are always indicated with just their flag
				if (typeof val !== "boolean") {
					// Only point to the value for flags that specify it
					if (
						isTarget &&
						target.type === "flag" &&
						(target.target === "value" || target.target === "inner-value")
					) {
						startColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
							code.length,
						);
					}

					// Number or string
					code += String(val) + " ";
				}
			}

			if (isTarget) {
				setEndColumn();
			}
		}

		if (
			startColumn === ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1 ||
			endColumn === ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1
		) {
			startColumn = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
				code.length - 1,
			);
			endColumn = startColumn;
		}

		return {
			language: "shell",
			mtime: undefined,
			sourceText: code,
			filename: "argv",
			start: {
				line: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
				column: startColumn,
				index: startColumn,
			},
			end: {
				line: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
				column: endColumn,
				index: endColumn,
			},
		};
	}


  // project-rome/@romejs/cli-flags/Parser.ts












	function ___R$$priv$project$rome$$romejs$cli$flags$Parser_ts$splitCommandName(
		cmd,
	) {
		return cmd.split(" ");
	}

	// Whether we can display this value in help
	function ___R$$priv$project$rome$$romejs$cli$flags$Parser_ts$isDisplayableHelpValue(
		value,
	) {
		return typeof value === "string" || typeof value === "number";
	}







	class ___R$project$rome$$romejs$cli$flags$Parser_ts$default {
		constructor(reporter, opts, rawArgs) {
			this.reporter = reporter;
			this.opts = opts;

			this.shorthandFlags = new Set();
			this.incorrectCaseFlags = new Set();
			this.declaredFlags = new Map();
			this.defaultFlags = new Map();
			this.flags = new Map();
			this.args = [];

			// These are used to track where we should insert an argument for a boolean flag value
			this.flagToArgIndex = new Map();
			this.flagToArgOffset = 0;

			this.consumeRawArgs(rawArgs);

			this.commands = new Map();
			this.ranCommand = undefined;
			this.currentCommand = undefined;
		}

		looksLikeFlag(flag) {
			return (flag == null ? undefined : flag[0]) === "-";
		}

		toCamelCase(name) {
			const camelName = ___R$project$rome$$romejs$string$utils$toCamelCase_ts$toCamelCase(
				name,
			);

			// Don't allow passing in straight camelcased names
			if (
				___R$project$rome$$romejs$string$utils$toKebabCase_ts$toKebabCase(name) !==
				name
			) {
				this.incorrectCaseFlags.add(name);
			}

			return camelName;
		}

		setFlag(key, value) {
			let newValue = value;
			const existing = this.flags.get(key);
			if (existing !== undefined) {
				if (Array.isArray(existing)) {
					newValue = [...existing, value];
				} else {
					newValue = [existing, value];
				}
			}
			this.flags.set(key, newValue);
		}

		consumeRawArgs(rawArgs) {
			while (rawArgs.length > 0) {
				const arg = String(rawArgs.shift());

				if (arg === "--") {
					// We consider a -- by itself to halt parsing of args, the rest of the remaining args are added to _
					this.args = this.args.concat(rawArgs);
					break;
				} else if (arg[0] === "-") {
					// Clean the argument by stripping off the dashes
					const name = arg[1] === "-" ? arg.slice(2) : arg.slice(1);

					// Flags beginning with no- are always false
					if (name.startsWith("no-")) {
						const camelName = this.toCamelCase(name.slice(3));
						this.setFlag(camelName, false);
						continue;
					}

					// Allow for arguments to be passed as --foo=bar
					const equalsIndex = name.indexOf("=");
					if (equalsIndex !== -1) {
						const cleanName = this.toCamelCase(name.slice(0, equalsIndex));
						const value = name.slice(equalsIndex + 1);
						this.setFlag(cleanName, value);
						continue;
					}

					const camelName = this.toCamelCase(name);

					// If the next argument is a flag or we're at the end of the args then just set it to `true`
					if (rawArgs.length === 0 || this.looksLikeFlag(rawArgs[0])) {
						this.setFlag(camelName, true);
					} else {
						// Otherwise, take that value
						this.setFlag(camelName, String(rawArgs.shift()));
					}

					this.flagToArgIndex.set(camelName, this.args.length);

					if (arg[0] === "-" && arg[1] !== "-") {
						this.shorthandFlags.add(camelName);
					}
				} else {
					// Not a flag and hasn't been consumed already by a previous arg so it must be a file
					this.args.push(arg);
				}
			}
		}

		getFlagsConsumer() {
			const defaultFlags = {};

			const flags = {};
			for (const [key, value] of this.flags) {
				flags[___R$project$rome$$romejs$string$utils$toCamelCase_ts$toCamelCase(
					key,
				)] = value;
			}

			return ___R$project$rome$$romejs$consume$index_ts$consume({
				filePath: ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
					"argv",
				),
				value: flags,
				onDefinition: (def, valueConsumer) => {
					const key = def.objectPath.join(".");

					// Detect root object
					if (key === "") {
						return;
					}

					const value = flags[key];

					// Allow omitting a string flag value
					if (def.type === "string" && value === true) {
						valueConsumer.setValue("");
					}

					this.declareArgument({
						name: key,
						command: this.currentCommand,
						definition: def,
					});
					defaultFlags[key] = (def.default);

					// We've parsed arguments like `--foo bar` as `{foo: 'bar}`
					// However, --foo may be a boolean flag, so `bar` needs to be correctly added to args
					if (
						def.type === "boolean" &&
						value !== true &&
						value !== false &&
						value !== undefined
					) {
						const argIndex = this.flagToArgIndex.get(key);
						if (argIndex === undefined) {
							throw new Error("No arg index. Should always exist.");
						}

						// Insert the argument at the correct place
						this.args.splice(argIndex + this.flagToArgOffset, 0, String(value));

						// Increase offset to correct subsequent insertions
						this.flagToArgOffset++;

						//
						valueConsumer.setValue(true);
					}
				},
				context: {
					category: "flags/invalid",
					normalizeKey: (key) => {
						return this.incorrectCaseFlags.has(key)
							? key
							: ___R$project$rome$$romejs$string$utils$toKebabCase_ts$toKebabCase(
									key,
								);
					},
					getOriginalValue: (keys) => {
						return flags[keys[0]];
					},
					getDiagnosticPointer: (keys, target) => {
						const {programName} = this.opts;

						return ___R$project$rome$$romejs$cli$flags$serializeCLIFlags_ts$serializeCLIFlags(
							{
								programName,
								commandName: this.currentCommand,
								args: this.args,
								defaultFlags,
								flags,
								incorrectCaseFlags: this.incorrectCaseFlags,
								shorthandFlags: this.shorthandFlags,
							},
							{
								type: "flag",
								key: String(keys[0]),
								target,
							},
						);
					},
				},
			});
		}

		hasArg(name) {
			return this.flags.has(name) && this.flags.get(name) !== undefined;
		}

		declareArgument(decl) {
			// Commands may have colliding flags, this is only a problem in help mode, so make it unique
			const key =
				decl.command === undefined ? decl.name : decl.command + "." + decl.name;

			// Ensure it hasn't been declared more than once
			if (this.declaredFlags.has(key)) {
				throw new Error("Already declared argument " + key);
			}

			// Declare argument
			this.declaredFlags.set(key, decl);
			this.defaultFlags.set(key, decl.definition.default);
		}

		getInterface() {
			return new ___R$project$rome$$romejs$cli$flags$Parser_ts$ParserInterface(
				this,
			);
		}

		async maybeDefineCommandFlags(command, consumer) {
			// A command name could be made of multiple strings
			const commandParts = ___R$$priv$project$rome$$romejs$cli$flags$Parser_ts$splitCommandName(
				command.name,
			);
			for (let i = 0; i < commandParts.length; i++) {
				if (commandParts[i] !== this.args[i]) {
					return;
				}
			}

			// Remove command name from arguments
			this.args = this.args.slice(commandParts.length);
			return await this.defineCommandFlags(command, consumer);
		}

		checkBadFlags(consumer, definedCommand) {
			// Ignore flags from command and root parser options
			const ignoreFlags = [
				...((definedCommand !== undefined && definedCommand.command.ignoreFlags) || []),
				...(this.opts.ignoreFlags || []),
			];
			for (const key of ignoreFlags) {
				this.shorthandFlags.delete(key);
				this.incorrectCaseFlags.delete(key);
				consumer.markUsedProperty(key);
			}

			for (const shorthandName of this.shorthandFlags) {
				consumer.get(shorthandName).unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.FLAGS.UNSUPPORTED_SHORTHANDS,
				);
			}

			for (const incorrectName of this.incorrectCaseFlags) {
				consumer.get(incorrectName).unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.FLAGS.INCORRECT_CASED_FLAG(
						incorrectName,
					),
				);
			}

			consumer.enforceUsedProperties("flag", false);
		}

		async init() {
			const consumer = this.getFlagsConsumer();

			// Show help for --version
			const version = this.opts.version;
			if (version !== undefined) {
				const shouldDisplayVersion = consumer.get(
					"version",
					{
						description: "Show the version",
					},
				).asBoolean(false);
				if (shouldDisplayVersion) {
					this.reporter.logAll(version);
					process.exit(0);
				}
			}

			// i could add a flag for dev-rome itself
			// i could take the input command name from the flag
			const generateAutocomplete = consumer.get(
				"generateAutocomplete",
				{
					description: "Generate a shell autocomplete",
					inputName: "shell",
				},
			).asStringSetOrVoid(["fish", "bash"]);
			if (generateAutocomplete !== undefined) {
				await this.generateAutocomplete(generateAutocomplete);
				process.exit(0);
			}

			// Show help for --help
			const shouldShowHelp = consumer.get(
				"help",
				{
					description: "Show this help screen",
				},
			).asBoolean(false);

			let definedCommand;

			const rootFlags = await consumer.bufferDiagnostics(async (consumer) => {
				const rootFlags = this.opts.defineFlags(consumer);

				for (const [key, command] of this.commands) {
					const definedFlags = await this.maybeDefineCommandFlags(
						command,
						consumer,
					);
					if (definedFlags !== undefined) {
						this.currentCommand = key;
						definedCommand = {flags: definedFlags, command};
						break;
					}
				}

				if (!shouldShowHelp) {
					this.checkBadFlags(consumer, definedCommand);
				}

				this.currentCommand = undefined;

				return rootFlags;
			});

			// Show help for --help
			if (shouldShowHelp) {
				await this.showHelp(
					definedCommand === undefined ? undefined : definedCommand.command,
				);
				process.exit(1);
			}

			if (definedCommand !== undefined) {
				this.ranCommand = definedCommand.command;
				await definedCommand.command.callback(definedCommand.flags);
			}

			return rootFlags;
		}

		buildOptionsHelp(keys) {
			const optionOutput = [];
			let argColumnLength = 0;

			// Build up options, we need to do this to line up the columns correctly
			for (const key of keys) {
				const decl = this.declaredFlags.get(key);

				const {definition: def} = decl;
				const {metadata} = def;
				let argName = decl.name;
				let argCol = ___R$project$rome$$romejs$string$utils$toKebabCase_ts$toKebabCase(
					decl.name,
				);

				// For booleans that default to `true`, show the --no- version as that'll be what users should use
				if (def.type === "boolean" && def.default === true) {
					argCol = "--no-" + argCol;
					argName = "no-" + argName;
				} else {
					argCol = "--" + argCol;
				}

				// Add input specifier unless a boolean
				if (def.type !== "boolean") {
					let {inputName} = metadata;

					if (inputName === undefined) {
						if (def.type === "number") {
							inputName = "num";
						} else {
							inputName = "input";
						}
					}

					argCol += " <" + inputName + ">";
				}

				// Set arg col length if we'll be longer
				if (argColumnLength < argCol.length) {
					argColumnLength = argCol.length;
				}

				let descCol =
					metadata.description === undefined
						? "no description found"
						: metadata.description;

				const {default: defaultValue} = def;
				if (
					defaultValue !== undefined &&
					___R$$priv$project$rome$$romejs$cli$flags$Parser_ts$isDisplayableHelpValue(
						defaultValue,
					)
				) {
					descCol += " (default: " + JSON.stringify(defaultValue) + ")";
				}

				if (def.type === "string" && def.allowedValues !== undefined) {
					const displayAllowedValues = def.allowedValues.filter((item) =>
						___R$$priv$project$rome$$romejs$cli$flags$Parser_ts$isDisplayableHelpValue(
							item,
						)
					);
					if (displayAllowedValues !== undefined) {
						descCol += " (values: " + displayAllowedValues.join("|") + ")";
					}
				}

				optionOutput.push({
					argName,
					arg: ___R$project$rome$$romejs$string$markup$escape_ts$markup`<color fg="brightBlack">${argCol}</color>`,
					description: descCol,
				});
			}

			// Sort options by argument name
			optionOutput.sort((a, b) =>
				___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare(
					a.argName,
					b.argName,
				)
			);

			// Build table rows
			return optionOutput.map((opt) => [
				{align: "right", value: opt.arg},
				opt.description,
			]);
		}

		showUsageHelp(description, usage = "[flags]", prefix) {
			const {reporter} = this;
			const {programName} = this.opts;

			reporter.section(
				"Usage",
				() => {
					if (description !== undefined) {
						reporter.logAll(description);
						reporter.br(true);
					}

					const commandParts = [programName];
					if (prefix !== undefined) {
						commandParts.push(prefix);
					}
					commandParts.push(usage);

					const command = commandParts.join(" ");
					reporter.command(command);
				},
			);
		}

		showFocusedCommandHelp(command) {
			const {reporter} = this;
			const {name, usage, description, examples} = command;

			reporter.br(true);
			this.showUsageHelp(description, usage, name);
			this.showHelpExamples(examples, name);

			// Find arguments that belong to this command
			const argKeys = [];
			for (const [key, decl] of this.declaredFlags) {
				if (decl.command === name) {
					argKeys.push(key);
				}
			}

			const optRows = this.buildOptionsHelp(argKeys);
			if (optRows.length > 0) {
				reporter.section(
					"Command Flags",
					() => {
						reporter.table([], optRows);
					},
				);
			}

			reporter.section(
				"Global Flags",
				() => {
					reporter.info("To view global flags run");
					reporter.command("rome --help");
				},
			);
		}

		showGlobalFlags() {
			const {reporter} = this;
			reporter.section(
				"Global Flags",
				() => {
					// Show options not attached to any commands
					const lonerArgKeys = [];
					for (const [key, decl] of this.declaredFlags) {
						if (decl.command === undefined) {
							lonerArgKeys.push(key);
						}
					}

					reporter.table([], this.buildOptionsHelp(lonerArgKeys));
				},
			);
		}

		async generateAutocomplete(shell) {
			const {reporter} = this;

			// Execute all command defineFlags. Only one is usually ran when the arguments match the command name.
			// But to generate autocomplete we want all the flags to be declared for all commands.

			const flags = this.getFlagsConsumer();
			for (const command of this.commands.values()) {
				// capture() will cause diagnostics to be suppressed
				const {consumer} = flags.capture();
				await this.defineCommandFlags(command, consumer);
			}

			const {programName} = this.opts;

			switch (shell) {
				case "bash": {
					reporter.logAllNoMarkup(this.genBashCompletions(programName));
					break;
				}
				case "fish": {
					reporter.logAllNoMarkup(this.genFishCompletions(programName));
					break;
				}
			}
		}

		genFishCompletions(prg) {
			let script = "";
			const scriptPre = "complete -c " + prg;

			// add rome
			script += scriptPre + " -f\n";

			// add command completions
			for (let [subcmd, meta] of this.commands.entries()) {
				script +=
					scriptPre +
					" -n '__fish_use_subcommand' -a '" +
					subcmd +
					"' -d '" +
					meta.description +
					"'\n";
			}

			// add flag completions
			for (let meta of this.declaredFlags.values()) {
				const subcmdCond =
					meta.command === undefined
						? ""
						: "-n '__fish_seen_subcommand_from " + meta.command + "'";
				script += scriptPre + " " + subcmdCond + " -l '" + meta.name + "'\n";
			}

			return script;
		}

		genBashCompletions(prg) {
			let romeCmds = "";
			let commandFuncs = "";
			let globalFlags = "";
			let cmdFlagMap = new Map();

			for (let subcmd of this.commands.keys()) {
				romeCmds += subcmd + " ";
			}

			for (let meta of this.declaredFlags.values()) {
				if (meta.command === undefined) {
					globalFlags += "--" + meta.name + " ";
				} else {
					if (cmdFlagMap.has(meta.command)) {
						cmdFlagMap.set(
							meta.command,
							cmdFlagMap.get(meta.command) + " --" + meta.name,
						);
					} else {
						cmdFlagMap.set(meta.command, "--" + meta.name);
					}
				}
			}

			for (let [cmd, flags] of cmdFlagMap.entries()) {
				commandFuncs +=
					"\n      __" +
					prg +
					"_" +
					cmd +
					'()\n      {\n        cmds="";\n        local_flags="' +
					flags +
					'"\n      }\n      ';
			}

			let romeFunc =
				"\n      __" +
				prg +
				'()\n      {\n          cmds="' +
				romeCmds +
				'"\n          local_flags="";\n      }\n    ';

			let mainScript =
				'\n      #!/usr/bin/env bash\n      global_flags="' +
				globalFlags +
				'"\n\n      # initial state\n      cmds=""\n      local_flags=""\n      \n      __is_flag()\n      {\n        case $1 in\n          -*) echo "true"\n        esac\n      }\n      \n      __' +
				prg +
				'_gen_completions()\n      {\n        local suggestions func flags index\n         \n        index="$((${#COMP_WORDS[@]} - 1))"\n      \n        flags="$global_flags $local_flags"\n      \n        func="_"\n      \n        for ((i=0; i < index; i++))\n        do\n          leaf=$(echo ${COMP_WORDS[$i]} | grep -o \'[^/]*$\')\n          if [[ ! $(__is_flag $leaf) ]]; then\n            func="${func}_${leaf}"\n          fi\n        done\n          \n        $func 2> /dev/null\n      \n        if [[ $(__is_flag ${COMP_WORDS[$index]}) ]]; then\n          suggestions=$flags \n        else\n          suggestions=$cmds\n        fi\n\n        COMPREPLY=($(compgen -W "$suggestions" -- "${COMP_WORDS[$index]}"))\n      }\n    ';

			return ___R$project$rome$$romejs$string$utils$dedent_ts$dedent`
      ${mainScript}
      ${commandFuncs}
      ${romeFunc}
      complete -F __${prg}_gen_completions ${prg}
    `;
		}

		async showHelp(command = this.ranCommand) {
			if (command !== undefined) {
				this.showFocusedCommandHelp(command);
				return;
			}

			const {reporter} = this;
			const {description, usage, examples, programName} = this.opts;

			this.showUsageHelp(description, usage);
			this.showGlobalFlags();

			// Sort commands into their appropriate categories for output
			const commandsByCategory = new Map();
			const categoryNames = new Set();
			for (const [name, command] of this.commands) {
				if (name[0] === "_") {
					continue;
				}

				const {category} = command;
				let commandsForCategory = commandsByCategory.get(category);
				if (commandsForCategory === undefined) {
					commandsForCategory = [];
					commandsByCategory.set(category, commandsForCategory);
				}
				commandsForCategory.push(command);
				categoryNames.add(category);
			}

			reporter.section(
				"Commands",
				() => {
					const sortedCategoryNames = Array.from(categoryNames).sort();

					// Always make sure categoryless commands are displayed first
					if (sortedCategoryNames.includes(undefined)) {
						sortedCategoryNames.splice(
							sortedCategoryNames.indexOf(undefined),
							1,
						);
						sortedCategoryNames.unshift(undefined);
					}

					for (const category of sortedCategoryNames) {
						const commands = commandsByCategory.get(category);

						if (category !== undefined) {
							reporter.logAll("<emphasis>" + category + " Commands</emphasis>");
						}

						// Sort by name
						commands.sort((a, b) => a.name.localeCompare(b.name));

						reporter.list(
							commands.map((cmd) => {
								return (
									"<emphasis>" +
									cmd.name +
									"</emphasis> " +
									(cmd.description === undefined ? "" : cmd.description)
								);
							}),
						);
						reporter.br();
					}

					reporter.info("To view help for a specific command run");
					reporter.command(programName + " command_name --help");
				},
			);

			this.showHelpExamples(examples);
		}

		showHelpExamples(examples, prefix) {
			const {programName} = this.opts;
			const {reporter} = this;

			if (examples === undefined || examples.length === 0) {
				return;
			}

			reporter.section(
				"Examples",
				() => {
					for (const {description, command} of examples) {
						const commandParts = [];
						if (programName !== undefined) {
							commandParts.push(programName);
						}
						if (prefix !== undefined) {
							commandParts.push(prefix);
						}
						commandParts.push(command);

						const builtCommand = commandParts.join(" ");

						reporter.br();
						if (description !== undefined) {
							reporter.logAll(description);
						}
						reporter.command(builtCommand);
					}
				},
			);
		}

		commandRequired() {
			if (this.ranCommand) {
				return;
			}

			if (this.args.length === 0) {
				this.reporter.error(
					"No command specified. Run --help to see available commands.",
				);
			} else {
				// TODO command name is not sanitized for markup
				// TODO produce a diagnostic instead
				this.reporter.error(
					"Unknown command <emphasis>" +
					this.args.join(" ") +
					"</emphasis>. Run --help to see available commands.",
				);
			}

			process.exit(1);
		}

		addCommand(opts) {
			if (this.currentCommand !== undefined) {
				throw new Error("Nested commands aren't allowed");
			}

			this.commands.set(opts.name, opts);
		}

		async defineCommandFlags(command, consumer) {
			this.currentCommand = command.name;

			let flags = {};
			if (command.defineFlags !== undefined) {
				flags = command.defineFlags(consumer);
			}

			this.currentCommand = undefined;

			return flags;
		}
	}

	class ___R$project$rome$$romejs$cli$flags$Parser_ts$ParserInterface {
		constructor(parser) {
			this.parser = parser;
		}

		init() {
			return this.parser.init();
		}

		showHelp() {
			return this.parser.showHelp();
		}

		getArgs() {
			return this.parser.args;
		}

		commandRequired() {
			this.parser.commandRequired();
		}

		command(opts) {
			this.parser.addCommand(opts);
		}
	}


  // project-rome/@romejs/cli-flags/index.ts
function ___R$project$rome$$romejs$cli$flags$index_ts$parseCLIFlags(
		reporter,
		args,
		opts,
	) {
		const parser = new ___R$project$rome$$romejs$cli$flags$Parser_ts$default(
			reporter,
			opts,
			args,
		);
		return parser.getInterface();
	}

	function ___R$project$rome$$romejs$cli$flags$index_ts$parseCLIFlagsFromProcess(
		opts,
	) {
		return ___R$project$rome$$romejs$cli$flags$index_ts$parseCLIFlags(
			___R$project$rome$$romejs$cli$reporter$Reporter_ts$default.fromProcess(),
			process.argv.slice(2),
			Object.assign(
				{},
				opts,
				{
					programName: opts.programName === undefined
						? process.argv[1]
						: opts.programName,
				},
			),
		);
	}


  // project-rome/@romejs/cli-diagnostics/printAdvice.ts




	const ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_PRINT = {
		printed: true,
		truncated: false,
	};

	const ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_NOT_PRINT = {
		printed: false,
		truncated: false,
	};

	function ___R$project$rome$$romejs$cli$diagnostics$printAdvice_ts$default(
		item,
		opts,
	) {
		switch (item.type) {
			case "log":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printLog(
					item,
					opts,
				);

			case "action":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printAction(
					item,
					opts,
				);

			case "list":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printList(
					item,
					opts,
				);

			case "diff":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printDiff(
					item,
					opts,
				);

			case "code":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printCode(
					item,
					opts,
				);

			case "command":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printCommand(
					item,
					opts,
				);

			case "frame":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printFrame(
					item,
					opts,
				);

			case "stacktrace":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printStacktrace(
					item,
					opts,
				);

			case "inspect":
				return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printInspect(
					item,
					opts,
				);
		}
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printAction(
		item,
		opts,
	) {
		if (item.hidden && !opts.printer.flags.verboseDiagnostics) {
			return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_NOT_PRINT;
		}

		opts.reporter.info(item.instruction);

		const command = ___R$project$rome$$romejs$cli$flags$serializeCLIFlags_ts$serializeCLIFlags(
			{
				prefix: "",
				programName: "rome",
				commandName: item.command,
				args: item.args,
				flags: Object.assign({}, item.commandFlags, item.requestFlags),
			},
			{type: "none"},
		).sourceText;
		opts.reporter.command(command);
		return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_PRINT;
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printCommand(
		item,
		opts,
	) {
		opts.reporter.command(item.command);
		return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_PRINT;
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printInspect(
		item,
		opts,
	) {
		const {reporter} = opts;
		reporter.indent(() => {
			reporter.inspect(item.data);
		});
		return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_PRINT;
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$generateDiffHint(
		diffs,
	) {
		let expected = "";
		let received = "";

		for (const [type, text] of diffs) {
			switch (type) {
				case ___R$project$rome$$romejs$string$diff$index_ts$diffConstants.ADD: {
					received += text;
					break;
				}

				case ___R$project$rome$$romejs$string$diff$index_ts$diffConstants.DELETE: {
					expected += text;
					break;
				}

				case ___R$project$rome$$romejs$string$diff$index_ts$diffConstants.EQUAL: {
					expected += text;
					received += text;
					break;
				}
			}
		}

		if (expected.trim() === received.trim()) {
			return {
				type: "log",
				category: "info",
				text: "Only difference is leading and trailing whitespace",
			};
		}

		const receivedNoCRLF = ___R$project$rome$$romejs$string$utils$removeCarriageReturn_ts$removeCarriageReturn(
			received,
		);
		if (expected === receivedNoCRLF) {
			return {
				type: "log",
				category: "info",
				text: "Identical except the received uses CRLF newlines, while the expected does not",
			};
		}

		const expectedNoCRLF = ___R$project$rome$$romejs$string$utils$removeCarriageReturn_ts$removeCarriageReturn(
			expected,
		);
		if (received === expectedNoCRLF) {
			return {
				type: "log",
				category: "info",
				text: "Identical except the expected uses CRLF newlines, while the received does not",
			};
		}

		return undefined;
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printDiff(
		item,
		opts,
	) {
		const {frame, truncated} = ___R$project$rome$$romejs$cli$diagnostics$buildPatchCodeFrame_ts$default(
			item,
			opts.flags.verboseDiagnostics,
		);
		if (frame === "") {
			return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_NOT_PRINT;
		}

		opts.reporter.logAll(frame);

		const hint = ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$generateDiffHint(
			item.diff,
		);
		if (hint !== undefined) {
			opts.reporter.br();
			___R$project$rome$$romejs$cli$diagnostics$printAdvice_ts$default(
				hint,
				opts,
			);
			opts.reporter.br();
		}

		return {
			printed: true,
			truncated,
		};
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printList(
		item,
		opts,
	) {
		if (item.list.length === 0) {
			return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_NOT_PRINT;
		} else {
			const {truncated} = opts.reporter.list(
				item.list,
				{
					truncate: opts.flags.verboseDiagnostics ? undefined : 10,
					reverse: item.reverse,
					ordered: item.ordered,
				},
			);
			return {
				printed: true,
				truncated,
			};
		}
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printTruncated(
		reporter,
		chars,
	) {
		reporter.logAll(
			"<dim><number>" + chars + "</number> more characters truncated</dim>",
		);
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printCode(
		item,
		opts,
	) {
		const {reporter} = opts;

		const truncated =
			!opts.flags.verboseDiagnostics &&
			item.code.length >
			___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_LENGTH;
		let code = truncated
			? item.code.slice(
					0,
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_LENGTH,
				)
			: item.code;

		reporter.indent(() => {
			if (code === "") {
				reporter.logAll("<dim>empty input</dim>");
			} else {
				// If it's a string with only whitespace then make it obvious
				if (code.trim() === "") {
					code = ___R$project$rome$$romejs$cli$diagnostics$utils_ts$showInvisibles(
						code,
					);
				}

				reporter.logAll(
					"<nobr>" +
					___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(code) +
					"</nobr>",
				);
			}

			if (truncated) {
				___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printTruncated(
					reporter,
					item.code.length -
					___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_CODE_LENGTH,
				);
			}
		});

		return {
			printed: true,
			truncated,
		};
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printFrame(
		item,
		opts,
	) {
		const {reporter} = opts;
		const {marker, start, end, filename} = item.location;
		let {sourceText} = item.location;
		const path = opts.printer.createFilePath(filename);

		let cleanMarker = "";
		if (marker !== undefined) {
			cleanMarker = ___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
				"emphasis",
				___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$cleanMessage(
					marker,
				),
			);
		}

		let lines = {
			length: 0,
			raw: [],
			highlighted: [],
		};
		if (sourceText !== undefined) {
			lines = ___R$project$rome$$romejs$cli$diagnostics$utils_ts$toLines({
				path,
				input: sourceText,
				sourceType: item.location.sourceType,
				language: item.location.language,
			});
		} else if (filename !== undefined) {
			const source = opts.fileSources.get(path);
			if (source !== undefined) {
				lines = source.lines;
				sourceText = source.sourceText;
			}
		} else if (
			path.isAbsolute() &&
			opts.missingFileSources.has(path.assertAbsolute())
		) {
			lines = {
				length: 1,
				raw: ["File does not exist"],
				highlighted: ["<dim>File does not exist</dim>"],
			};
		}

		if (sourceText === undefined) {
			sourceText = "";
		}

		const frame = ___R$project$rome$$romejs$cli$diagnostics$buildMessageCodeFrame_ts$default(
			sourceText,
			lines,
			start,
			end,
			cleanMarker,
		);
		if (frame.trim() === "") {
			return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_NOT_PRINT;
		}

		reporter.logAll(frame);
		return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_PRINT;
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printStacktrace(
		item,
		opts,
	) {
		const {diagnostic} = opts;
		const {frames} = item;

		let shownCodeFrames = 0;

		const isFirstPart = diagnostic.description.advice[0] === item;
		if (!isFirstPart) {
			const {title} = item;
			if (title !== undefined) {
				opts.reporter.info(
					___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(title),
				);
				opts.reporter.br(true);
			}
		}

		opts.reporter.processedList(
			frames,
			(reporter, frame) => {
				const {
					filename,
					object,
					suffix,
					property,
					prefix,
					line,
					column,
					language,
					sourceText: code,
				} = frame;

				const logParts = [];

				// Add prefix
				if (prefix !== undefined) {
					logParts.push(
						___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"dim",
							___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
								prefix,
							),
						),
					);
				}

				// Build path
				const objParts = [];
				if (object !== undefined) {
					objParts.push(
						___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"highlight",
							___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
								object,
							),
							{i: 0},
						),
					);
				}
				if (property !== undefined) {
					objParts.push(
						___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"highlight",
							___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
								property,
							),
							{i: 1},
						),
					);
				}
				if (objParts.length > 0) {
					logParts.push(objParts.join("."));
				}

				// Add suffix
				if (suffix !== undefined) {
					logParts.push(
						___R$project$rome$$romejs$string$markup$escape_ts$markupTag(
							"success",
							___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
								suffix,
							),
						),
					);
				}

				// Add source
				if (filename !== undefined && line !== undefined && column !== undefined) {
					const header = ___R$project$rome$$romejs$diagnostics$helpers_ts$diagnosticLocationToMarkupFilelink({
						filename,
						start: {
							index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1,
							line,
							column,
						},
					});

					if (logParts.length === 0) {
						logParts.push(header);
					} else {
						logParts.push("(<dim>" + header + "</dim>)");
					}
				}

				reporter.logAll(logParts.join(" "));

				if (
					shownCodeFrames < 2 &&
					filename !== undefined &&
					line !== undefined &&
					column !== undefined
				) {
					const pos = {
						index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0Neg1,
						line,
						column,
					};

					const skipped = ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printFrame(
						{
							type: "frame",
							location: {
								language,
								filename,
								sourceType: "module",
								start: pos,
								end: pos,
								sourceText: code,
							},
						},
						Object.assign({}, opts, {reporter}),
					);
					if (!skipped) {
						reporter.br(true);
						shownCodeFrames++;
					}
				}
			},
			{
				ordered: true,
				truncate: opts.flags.verboseDiagnostics ? undefined : 20,
			},
		);

		return ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$DID_PRINT;
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printLog(
		item,
		opts,
	) {
		const {reporter} = opts;
		const {category} = item;
		let {text} = item;

		let truncated = false;
		let truncatedLength = 0;
		if (
			text.length >
			___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_LOG_LENGTH
		) {
			({truncated, text, truncatedLength} = ___R$project$rome$$romejs$string$markup$format_ts$normalizeMarkup(
				text,
				{},
				___R$project$rome$$romejs$cli$diagnostics$constants_ts$MAX_LOG_LENGTH,
			));
		}

		if (text !== undefined) {
			switch (category) {
				case "none": {
					reporter.logAll(text);
					break;
				}

				case "warn": {
					reporter.warn(text);
					break;
				}

				case "info": {
					reporter.info(text);
					break;
				}

				case "error": {
					reporter.error(text);
					break;
				}

				default:
					throw new Error("Unknown message item log category " + category);
			}
		}

		if (truncated) {
			___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$printTruncated(
				reporter,
				truncatedLength,
			);
		}

		return {
			printed: !item.compact,
			truncated,
		};
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$printAdvice_ts$cleanMessage(
		msg,
	) {
		msg = msg.trim();
		if (msg.endsWith(".")) {
			msg = msg.slice(0, -1);
		}
		return msg;
	}


  // project-rome/@romejs/cli-diagnostics/banners/success.json
const ___R$project$rome$$romejs$cli$diagnostics$banners$success_json$default = {
		"palettes": [
			[240, 240, 240],
			[240, 240, 225],
			[225, 225, 210],
			[225, 210, 210],
			[240, 225, 225],
			[210, 210, 195],
			[210, 195, 180],
			[195, 195, 165],
			[195, 180, 165],
			[225, 210, 195],
			[195, 195, 180],
			[225, 225, 225],
			[180, 180, 150],
			[180, 165, 150],
			[195, 180, 150],
			[195, 165, 150],
			[180, 165, 135],
			[180, 150, 135],
			[195, 165, 135],
			[225, 225, 195],
			[210, 210, 180],
			[210, 180, 150],
			[210, 180, 165],
			[225, 180, 180],
			[240, 180, 165],
			[240, 195, 195],
			[225, 195, 180],
			[165, 135, 120],
			[165, 150, 120],
			[195, 135, 120],
			[225, 150, 135],
			[240, 165, 165],
			[225, 180, 165],
			[225, 195, 165],
			[150, 120, 105],
			[150, 135, 105],
			[180, 150, 120],
			[195, 120, 105],
			[210, 135, 105],
			[210, 150, 120],
			[195, 150, 135],
			[210, 195, 165],
			[180, 105, 75],
			[195, 105, 90],
			[180, 90, 75],
			[240, 180, 180],
			[240, 225, 210],
			[240, 240, 210],
			[150, 120, 90],
			[180, 135, 120],
			[210, 150, 135],
			[210, 165, 150],
			[195, 150, 120],
			[225, 180, 150],
			[195, 120, 90],
			[180, 105, 90],
			[225, 165, 135],
			[225, 210, 180],
			[240, 210, 195],
			[225, 195, 195],
			[180, 135, 105],
			[225, 180, 135],
			[210, 135, 120],
			[225, 165, 150],
			[240, 180, 150],
			[210, 180, 180],
			[165, 135, 90],
			[180, 120, 90],
			[195, 135, 105],
			[225, 150, 120],
			[180, 135, 135],
			[210, 150, 150],
			[210, 195, 195],
			[210, 195, 210],
			[150, 135, 135],
			[195, 195, 195],
			[225, 210, 225],
			[180, 180, 135],
			[165, 120, 90],
			[240, 150, 135],
			[240, 165, 135],
			[240, 165, 150],
			[180, 90, 60],
			[180, 165, 165],
			[165, 135, 135],
			[180, 180, 180],
			[165, 150, 135],
			[150, 90, 45],
			[150, 75, 45],
			[210, 165, 135],
			[165, 165, 165],
			[165, 120, 75],
			[180, 135, 90],
			[150, 60, 45],
			[165, 105, 60],
			[165, 90, 60],
			[150, 105, 105],
			[210, 210, 210],
			[165, 105, 75],
			[225, 165, 165],
			[180, 120, 75],
			[165, 90, 75],
			[135, 90, 75],
			[195, 180, 180],
			[240, 195, 180],
			[135, 120, 120],
			[165, 135, 105],
			[150, 105, 75],
			[225, 150, 150],
			[240, 210, 180],
			[165, 150, 150],
			[165, 150, 105],
			[225, 135, 120],
			[210, 120, 105],
			[150, 90, 75],
			[180, 120, 105],
			[180, 150, 105],
			[240, 195, 165],
			[180, 165, 120],
			[225, 135, 135],
			[180, 105, 105],
			[195, 120, 120],
			[150, 75, 60],
			[105, 15, 15],
			[105, 15, 0],
			[120, 30, 30],
			[120, 30, 15],
			[105, 45, 30],
			[150, 90, 60],
			[210, 120, 120],
			[165, 75, 75],
			[90, 30, 30],
			[90, 15, 15],
			[120, 15, 30],
			[120, 15, 15],
			[90, 0, 0],
			[135, 45, 45],
			[165, 105, 90],
			[210, 105, 90],
			[135, 75, 45],
			[240, 210, 210],
			[225, 240, 225],
			[60, 30, 15],
			[45, 0, 0],
			[60, 15, 15],
			[75, 30, 15],
			[120, 60, 60],
			[195, 90, 75],
			[150, 45, 45],
			[75, 0, 15],
			[60, 0, 0],
			[75, 0, 0],
			[150, 105, 60],
			[135, 90, 45],
			[60, 45, 30],
			[105, 30, 30],
			[120, 15, 0],
			[150, 75, 75],
			[120, 105, 90],
			[105, 60, 45],
			[120, 75, 45],
			[60, 15, 0],
			[75, 15, 15],
			[105, 30, 15],
			[195, 105, 105],
			[165, 60, 60],
			[135, 15, 15],
			[180, 180, 165],
			[105, 90, 90],
			[30, 15, 15],
			[60, 30, 30],
			[135, 60, 60],
			[150, 45, 30],
			[150, 75, 30],
			[240, 225, 195],
			[75, 15, 0],
			[90, 15, 0],
			[120, 45, 30],
			[240, 150, 150],
			[105, 90, 75],
			[105, 75, 60],
			[105, 105, 105],
			[45, 45, 45],
			[30, 30, 15],
			[180, 60, 45],
			[165, 60, 30],
			[180, 90, 45],
			[135, 75, 30],
			[195, 135, 90],
			[135, 60, 45],
			[135, 75, 60],
			[90, 60, 30],
			[90, 60, 45],
			[30, 15, 0],
			[15, 15, 15],
			[45, 30, 15],
			[195, 90, 60],
			[180, 105, 60],
			[120, 75, 30],
			[105, 60, 30],
			[120, 60, 30],
			[15, 0, 0],
			[75, 45, 45],
			[180, 75, 30],
			[180, 120, 60],
			[90, 45, 30],
			[60, 45, 45],
			[60, 45, 60],
			[45, 30, 30],
			[75, 45, 30],
			[75, 45, 15],
			[195, 105, 75],
			[165, 45, 30],
			[165, 45, 15],
			[30, 0, 15],
			[45, 15, 15],
			[135, 60, 30],
			[210, 105, 60],
			[195, 120, 75],
			[75, 60, 30],
			[120, 120, 105],
			[165, 75, 60],
			[135, 45, 15],
			[195, 60, 45],
			[90, 30, 45],
			[165, 75, 30],
			[135, 90, 60],
			[135, 105, 60],
			[165, 90, 90],
			[120, 45, 45],
			[165, 75, 45],
			[210, 135, 60],
			[135, 90, 30],
			[165, 60, 45],
			[105, 75, 45],
			[195, 135, 45],
			[135, 105, 75],
			[75, 30, 30],
			[135, 105, 90],
			[195, 120, 45],
			[180, 105, 30],
			[135, 120, 90],
			[150, 60, 60],
			[180, 75, 75],
			[150, 60, 15],
			[150, 75, 15],
			[165, 120, 105],
			[180, 90, 90],
			[195, 90, 105],
			[210, 105, 105],
			[0, 0, 0],
			[15, 0, 15],
			[180, 105, 45],
			[120, 60, 45],
			[120, 60, 15],
			[90, 30, 15],
			[30, 0, 0],
			[15, 15, 0],
			[165, 90, 45],
			[180, 90, 30],
			[105, 30, 0],
			[180, 75, 45],
			[135, 45, 0],
			[120, 45, 15],
			[105, 45, 15],
			[45, 15, 0],
			[195, 90, 90],
			[90, 60, 60],
			[120, 75, 60],
			[135, 45, 30],
			[90, 45, 15],
			[225, 240, 240],
			[105, 75, 75],
			[150, 60, 30],
			[165, 180, 180],
			[180, 45, 60],
			[150, 45, 15],
			[135, 135, 135],
			[180, 60, 30],
			[90, 105, 105],
			[150, 135, 120],
			[105, 60, 60],
			[105, 45, 45],
			[225, 150, 105],
			[120, 120, 120],
			[105, 30, 45],
			[210, 150, 105],
			[90, 90, 90],
			[15, 30, 15],
			[45, 0, 15],
			[135, 30, 30],
			[180, 45, 30],
			[135, 30, 15],
			[75, 75, 75],
			[15, 15, 30],
			[0, 0, 15],
			[195, 60, 30],
			[210, 60, 45],
			[195, 90, 45],
			[210, 105, 75],
			[120, 90, 90],
			[45, 30, 45],
			[90, 45, 45],
			[0, 15, 0],
			[195, 75, 45],
			[195, 75, 60],
			[30, 30, 0],
			[135, 120, 105],
			[225, 195, 210],
			[60, 60, 60],
			[0, 15, 15],
			[15, 30, 45],
			[45, 45, 60],
			[30, 15, 30],
			[150, 30, 15],
			[30, 30, 30],
			[90, 75, 90],
			[90, 15, 30],
			[165, 165, 150],
			[120, 105, 60],
			[120, 120, 60],
			[60, 60, 45],
			[30, 45, 30],
			[60, 15, 30],
			[120, 30, 45],
			[60, 30, 45],
			[90, 90, 75],
			[135, 150, 60],
			[90, 90, 30],
			[30, 45, 45],
			[90, 75, 75],
			[120, 105, 105],
			[75, 30, 45],
			[60, 75, 60],
			[75, 15, 30],
			[45, 15, 30],
			[45, 60, 45],
			[120, 120, 90],
			[90, 15, 45],
			[75, 75, 60],
			[150, 150, 135],
			[75, 75, 45],
			[225, 120, 120],
			[75, 60, 60],
			[105, 105, 75],
			[120, 135, 90],
			[90, 90, 60],
			[135, 45, 60],
			[135, 30, 45],
			[75, 90, 75],
			[60, 75, 45],
			[210, 90, 60],
			[120, 45, 60],
			[150, 150, 150],
			[105, 120, 60],
			[105, 105, 60],
			[30, 30, 45],
			[135, 75, 75],
			[150, 45, 60],
			[225, 135, 90],
			[195, 105, 60],
			[195, 210, 195],
			[120, 75, 75],
			[90, 60, 75],
			[195, 135, 75],
			[210, 120, 75],
			[210, 225, 225],
			[150, 75, 90],
			[225, 135, 75],
			[210, 90, 75],
			[165, 120, 120],
			[210, 135, 75],
			[225, 105, 75],
			[180, 75, 60],
			[105, 45, 60],
			[225, 120, 75],
			[150, 90, 30],
			[165, 60, 75],
			[75, 45, 60],
			[225, 105, 60],
			[225, 90, 45],
			[225, 60, 30],
			[150, 30, 30],
			[150, 90, 90],
			[210, 135, 90],
			[150, 135, 90],
			[240, 75, 45],
			[135, 60, 75],
			[150, 105, 90],
			[240, 90, 60],
			[240, 105, 75],
			[210, 105, 45],
			[195, 150, 105],
			[240, 90, 45],
			[210, 120, 90],
			[45, 45, 30],
			[240, 105, 45],
			[210, 120, 45],
			[240, 90, 30],
			[210, 90, 45],
			[225, 120, 90],
			[195, 240, 195],
			[135, 240, 135],
			[75, 255, 60],
			[45, 255, 30],
			[45, 240, 30],
			[90, 225, 60],
			[105, 210, 75],
			[120, 135, 75],
			[195, 165, 165],
			[120, 150, 60],
			[30, 255, 0],
			[180, 180, 105],
			[165, 105, 105],
			[45, 240, 0],
			[45, 210, 0],
			[75, 105, 30],
			[30, 195, 0],
			[30, 225, 0],
			[30, 240, 0],
			[60, 240, 15],
			[90, 225, 30],
			[60, 195, 15],
			[30, 120, 15],
			[45, 105, 30],
			[105, 195, 30],
			[90, 225, 15],
			[75, 240, 30],
			[120, 195, 45],
			[105, 135, 30],
			[150, 165, 75],
			[180, 195, 30],
			[240, 75, 30],
			[165, 165, 45],
			[90, 225, 45],
			[105, 210, 45],
			[195, 165, 90],
			[135, 255, 135],
			[75, 255, 75],
			[90, 255, 90],
			[135, 240, 120],
			[165, 240, 150],
			[225, 240, 210],
			[90, 180, 75],
			[30, 135, 0],
			[135, 165, 45],
			[75, 210, 60],
			[90, 180, 30],
			[45, 210, 15],
			[150, 150, 60],
			[165, 195, 30],
			[225, 135, 60],
			[150, 210, 15],
			[135, 180, 45],
			[135, 225, 60],
			[210, 240, 210],
			[210, 240, 195],
			[195, 225, 195],
			[45, 165, 30],
			[30, 210, 15],
			[30, 150, 15],
			[15, 135, 0],
			[120, 165, 45],
			[45, 195, 15],
			[105, 90, 30],
			[105, 135, 45],
			[120, 180, 45],
			[105, 210, 30],
			[105, 195, 60],
			[120, 210, 45],
			[90, 120, 30],
			[210, 180, 105],
			[180, 180, 90],
			[135, 195, 60],
			[120, 210, 60],
			[135, 165, 60],
			[240, 135, 45],
			[180, 165, 75],
			[120, 165, 75],
			[195, 150, 75],
			[165, 180, 45],
			[120, 225, 30],
			[105, 165, 15],
			[75, 255, 45],
			[165, 240, 165],
			[150, 240, 150],
			[45, 135, 45],
			[30, 210, 0],
			[45, 120, 15],
			[150, 165, 60],
			[135, 195, 30],
			[90, 210, 30],
			[210, 120, 60],
			[135, 225, 105],
			[90, 255, 75],
			[120, 150, 45],
			[150, 240, 135],
			[90, 210, 75],
			[105, 90, 45],
			[60, 210, 15],
			[195, 180, 105],
			[195, 165, 105],
			[150, 165, 45],
			[195, 75, 15],
			[195, 60, 0],
			[135, 210, 15],
			[60, 240, 0],
			[150, 120, 15],
			[60, 195, 0],
			[75, 240, 15],
			[180, 240, 180],
			[105, 255, 90],
			[105, 150, 45],
			[105, 150, 30],
			[60, 240, 30],
			[75, 240, 60],
			[45, 225, 0],
			[150, 120, 75],
			[195, 180, 120],
			[210, 165, 120],
			[180, 165, 105],
			[210, 180, 120],
			[240, 105, 15],
			[165, 180, 30],
			[105, 240, 0],
			[135, 210, 30],
			[150, 165, 15],
			[120, 180, 30],
			[105, 240, 90],
			[60, 255, 45],
			[45, 255, 15],
			[90, 150, 30],
			[90, 240, 75],
			[90, 210, 15],
			[120, 90, 45],
			[105, 225, 60],
			[225, 195, 135],
			[165, 150, 90],
			[150, 165, 90],
			[225, 105, 30],
			[225, 120, 15],
			[120, 210, 15],
			[195, 120, 30],
			[150, 255, 150],
			[75, 135, 15],
			[105, 165, 75],
			[105, 210, 15],
			[180, 150, 90],
			[225, 165, 120],
			[210, 195, 135],
			[165, 135, 75],
			[210, 165, 105],
			[195, 165, 30],
			[75, 240, 0],
			[135, 210, 0],
			[165, 165, 30],
			[120, 165, 105],
			[75, 225, 0],
			[150, 180, 90],
			[180, 195, 105],
			[165, 180, 75],
			[150, 210, 30],
			[90, 240, 0],
			[210, 90, 30],
			[165, 90, 30],
			[195, 150, 90],
			[75, 210, 30],
			[225, 180, 120],
			[180, 135, 75],
			[225, 165, 90],
			[150, 180, 75],
			[225, 90, 30],
			[195, 120, 60],
			[210, 120, 30],
			[210, 180, 30],
			[135, 225, 0],
			[195, 150, 15],
			[225, 75, 30],
			[210, 75, 30],
			[195, 195, 150],
			[60, 255, 30],
			[195, 240, 180],
			[195, 30, 0],
			[165, 30, 15],
			[120, 150, 75],
			[210, 165, 75],
			[225, 165, 60],
			[195, 195, 45],
			[150, 165, 30],
			[195, 135, 60],
			[210, 195, 120],
			[240, 75, 15],
			[225, 150, 15],
			[240, 180, 15],
			[210, 165, 15],
			[210, 165, 45],
			[225, 90, 15],
			[210, 90, 15],
			[240, 120, 30],
			[210, 225, 180],
			[150, 120, 30],
			[45, 75, 0],
			[75, 120, 15],
			[75, 180, 30],
			[75, 195, 15],
			[195, 150, 60],
			[90, 195, 15],
			[120, 210, 30],
			[180, 165, 60],
			[195, 195, 105],
			[150, 225, 90],
			[135, 225, 75],
			[210, 150, 90],
			[195, 180, 30],
			[180, 180, 45],
			[225, 120, 30],
			[165, 195, 0],
			[165, 180, 15],
			[195, 165, 15],
			[225, 180, 30],
			[240, 180, 30],
			[225, 195, 15],
			[150, 225, 15],
			[135, 75, 15],
			[180, 180, 15],
			[195, 135, 30],
			[135, 225, 90],
			[180, 240, 165],
			[105, 255, 105],
			[150, 225, 135],
			[75, 225, 15],
			[195, 150, 45],
			[210, 165, 60],
			[120, 195, 30],
			[120, 225, 60],
			[195, 195, 75],
			[225, 180, 105],
			[225, 180, 45],
			[180, 225, 15],
			[180, 195, 90],
			[195, 210, 180],
			[90, 195, 30],
			[60, 225, 0],
			[105, 195, 45],
			[135, 150, 75],
			[165, 105, 45],
			[150, 135, 30],
			[105, 240, 15],
			[90, 240, 45],
			[195, 210, 105],
			[195, 195, 90],
			[210, 180, 90],
			[210, 195, 45],
			[150, 240, 0],
			[210, 180, 45],
			[225, 150, 90],
			[225, 150, 75],
			[60, 180, 0],
			[75, 210, 15],
			[90, 240, 15],
			[90, 240, 60],
			[210, 135, 45],
			[210, 150, 15],
			[225, 165, 30],
			[120, 90, 75],
			[225, 195, 120],
			[225, 165, 105],
			[240, 195, 30],
			[240, 195, 15],
			[210, 135, 30],
			[240, 165, 60],
			[210, 150, 30],
			[240, 195, 45],
			[240, 210, 30],
			[240, 180, 45],
			[225, 165, 45],
			[225, 150, 45],
			[225, 90, 60],
			[240, 150, 45],
			[150, 105, 45],
			[165, 105, 30],
			[210, 180, 135],
			[225, 195, 45],
			[225, 120, 45],
			[225, 180, 75],
			[225, 135, 30],
			[210, 165, 90],
			[240, 165, 45],
			[210, 105, 30],
			[225, 105, 45],
			[225, 75, 45],
			[225, 135, 45],
			[240, 150, 30],
			[150, 120, 60],
			[165, 120, 60],
			[180, 135, 15],
			[210, 150, 45],
			[225, 165, 75],
			[225, 150, 30],
			[240, 210, 15],
			[195, 90, 30],
			[240, 210, 150],
		],
		"rows": [
			[[0, 95]],
			[[0, 95]],
			[[0, 95]],
			[[0, 25], 1, 1, 2, 1, 1, 3, 4, 1, 1, 5, 5, 2, 0, [1, 3], [0, 54]],
			[[0, 24], 2, 2, 5, 6, 7, 7, 8, 7, 9, 9, 7, 7, 10, 1, 5, 5, 1, [0, 54]],
			[
				[0, 22],
				11,
				1,
				2,
				12,
				6,
				13,
				14,
				15,
				14,
				14,
				13,
				[14, 3],
				8,
				10,
				7,
				10,
				11,
				[0, 54],
			],
			[
				[0, 21],
				11,
				3,
				6,
				7,
				12,
				15,
				[16, 3],
				14,
				14,
				16,
				16,
				[14, 4],
				8,
				8,
				2,
				1,
				1,
				[0, 52],
			],
			[
				[0, 20],
				11,
				2,
				8,
				[14, 3],
				15,
				15,
				16,
				16,
				17,
				18,
				15,
				17,
				[15, 4],
				14,
				8,
				19,
				20,
				20,
				1,
				[0, 18],
				1,
				3,
				3,
				1,
				[0, 29],
			],
			[
				[0, 19],
				11,
				5,
				8,
				14,
				14,
				21,
				22,
				16,
				21,
				14,
				15,
				15,
				17,
				17,
				15,
				17,
				15,
				18,
				15,
				16,
				14,
				8,
				12,
				5,
				1,
				[0, 18],
				23,
				24,
				25,
				26,
				1,
				[0, 28],
			],
			[
				[0, 17],
				1,
				1,
				10,
				12,
				13,
				15,
				14,
				[21, 4],
				18,
				15,
				17,
				15,
				27,
				17,
				28,
				16,
				16,
				15,
				28,
				13,
				16,
				13,
				6,
				5,
				11,
				[0, 16],
				4,
				29,
				30,
				31,
				32,
				4,
				[0, 28],
			],
			[
				[0, 17],
				2,
				10,
				8,
				14,
				16,
				15,
				15,
				21,
				22,
				18,
				22,
				33,
				21,
				14,
				17,
				17,
				34,
				35,
				16,
				15,
				17,
				36,
				17,
				16,
				16,
				13,
				8,
				5,
				[0, 16],
				6,
				37,
				38,
				39,
				30,
				2,
				[0, 28],
			],
			[
				[0, 17],
				11,
				6,
				14,
				16,
				16,
				18,
				40,
				17,
				41,
				17,
				17,
				[22, 3],
				17,
				22,
				21,
				15,
				21,
				15,
				17,
				16,
				36,
				17,
				27,
				16,
				14,
				9,
				1,
				[0, 15],
				6,
				42,
				43,
				37,
				39,
				2,
				[0, 4],
				1,
				1,
				[0, 22],
			],
			[
				[0, 17],
				1,
				10,
				16,
				18,
				15,
				22,
				27,
				27,
				18,
				17,
				17,
				15,
				22,
				22,
				16,
				21,
				15,
				22,
				22,
				21,
				18,
				36,
				36,
				27,
				27,
				16,
				13,
				8,
				5,
				[0, 15],
				8,
				42,
				44,
				43,
				39,
				9,
				0,
				0,
				1,
				26,
				45,
				26,
				46,
				[0, 21],
			],
			[
				[0, 17],
				2,
				47,
				41,
				18,
				15,
				21,
				15,
				48,
				49,
				50,
				51,
				40,
				51,
				40,
				40,
				52,
				40,
				51,
				53,
				51,
				27,
				18,
				18,
				17,
				28,
				16,
				13,
				16,
				10,
				[0, 15],
				15,
				54,
				42,
				55,
				56,
				57,
				1,
				0,
				6,
				56,
				24,
				58,
				59,
				4,
				[0, 20],
			],
			[
				[0, 17],
				11,
				8,
				14,
				[36, 3],
				52,
				60,
				29,
				[50, 5],
				[39, 4],
				52,
				18,
				15,
				21,
				21,
				27,
				27,
				28,
				15,
				16,
				8,
				1,
				[0, 14],
				17,
				54,
				54,
				38,
				61,
				33,
				0,
				1,
				29,
				62,
				63,
				64,
				24,
				65,
				3,
				2,
				1,
				[0, 17],
			],
			[
				[0, 17],
				11,
				8,
				18,
				66,
				67,
				67,
				68,
				39,
				[30, 7],
				62,
				[69, 3],
				40,
				15,
				22,
				18,
				36,
				18,
				15,
				14,
				14,
				8,
				1,
				[0, 14],
				70,
				67,
				67,
				37,
				56,
				53,
				1,
				9,
				55,
				37,
				38,
				38,
				71,
				72,
				73,
				74,
				75,
				3,
				76,
				[0, 15],
			],
			[
				[0, 15],
				1,
				5,
				7,
				77,
				18,
				78,
				54,
				37,
				38,
				69,
				30,
				79,
				80,
				80,
				30,
				80,
				81,
				30,
				69,
				38,
				38,
				52,
				15,
				22,
				22,
				21,
				16,
				16,
				15,
				14,
				14,
				2,
				[0, 14],
				15,
				54,
				42,
				55,
				38,
				30,
				26,
				40,
				42,
				82,
				82,
				54,
				22,
				0,
				83,
				84,
				3,
				76,
				85,
				85,
				2,
				[0, 13],
			],
			[
				[0, 15],
				1,
				19,
				86,
				16,
				18,
				78,
				54,
				38,
				62,
				30,
				81,
				64,
				[81, 3],
				24,
				24,
				63,
				30,
				69,
				38,
				52,
				15,
				14,
				22,
				21,
				14,
				15,
				14,
				15,
				8,
				2,
				[0, 14],
				65,
				38,
				68,
				68,
				39,
				54,
				42,
				67,
				42,
				87,
				88,
				42,
				89,
				26,
				27,
				8,
				4,
				72,
				72,
				90,
				90,
				[0, 13],
			],
			[
				[0, 16],
				1,
				5,
				14,
				36,
				91,
				67,
				38,
				39,
				81,
				[24, 6],
				45,
				24,
				63,
				69,
				38,
				52,
				51,
				21,
				21,
				14,
				[15, 3],
				16,
				14,
				32,
				26,
				46,
				1,
				[0, 11],
				22,
				67,
				67,
				92,
				92,
				42,
				93,
				42,
				94,
				95,
				95,
				54,
				69,
				39,
				39,
				40,
				18,
				96,
				15,
				11,
				97,
				[0, 13],
			],
			[
				[0, 17],
				2,
				7,
				36,
				98,
				54,
				68,
				69,
				81,
				[24, 8],
				81,
				30,
				62,
				29,
				18,
				21,
				51,
				[16, 4],
				18,
				52,
				63,
				31,
				99,
				22,
				46,
				[0, 9],
				9,
				60,
				42,
				98,
				42,
				100,
				42,
				101,
				67,
				98,
				88,
				88,
				67,
				63,
				64,
				81,
				56,
				39,
				67,
				102,
				103,
				11,
				11,
				[0, 12],
			],
			[
				[0, 17],
				2,
				13,
				36,
				98,
				54,
				38,
				39,
				81,
				31,
				31,
				[24, 6],
				64,
				79,
				62,
				62,
				40,
				40,
				51,
				18,
				40,
				36,
				18,
				36,
				52,
				30,
				81,
				31,
				31,
				99,
				23,
				58,
				46,
				4,
				1,
				0,
				1,
				2,
				15,
				60,
				68,
				68,
				42,
				98,
				67,
				37,
				39,
				68,
				98,
				98,
				42,
				39,
				33,
				104,
				64,
				56,
				56,
				39,
				50,
				27,
				105,
				103,
				[0, 12],
			],
			[
				[0, 17],
				2,
				8,
				106,
				107,
				54,
				38,
				39,
				63,
				[31, 3],
				[24, 5],
				81,
				30,
				[62, 3],
				40,
				40,
				18,
				[36, 4],
				60,
				39,
				30,
				81,
				31,
				31,
				24,
				81,
				108,
				50,
				51,
				22,
				51,
				50,
				68,
				68,
				29,
				68,
				37,
				68,
				68,
				29,
				39,
				50,
				78,
				95,
				82,
				39,
				[109, 2],
				63,
				39,
				69,
				56,
				56,
				39,
				96,
				110,
				[0, 12],
			],
			[
				[0, 17],
				1,
				12,
				111,
				98,
				54,
				68,
				39,
				81,
				63,
				[81, 4],
				31,
				24,
				63,
				56,
				112,
				113,
				37,
				37,
				67,
				114,
				78,
				52,
				29,
				[115, 2],
				116,
				52,
				62,
				81,
				81,
				31,
				24,
				64,
				56,
				50,
				39,
				39,
				30,
				56,
				50,
				50,
				29,
				115,
				[67, 4],
				37,
				68,
				68,
				67,
				100,
				89,
				109,
				117,
				39,
				39,
				56,
				63,
				64,
				56,
				49,
				83,
				[0, 12],
			],
			[
				[0, 17],
				1,
				2,
				118,
				98,
				37,
				38,
				62,
				69,
				56,
				81,
				63,
				30,
				119,
				62,
				50,
				120,
				121,
				122,
				123,
				124,
				[125, 2],
				126,
				127,
				78,
				52,
				37,
				44,
				49,
				47,
				22,
				39,
				30,
				81,
				63,
				56,
				50,
				50,
				62,
				68,
				39,
				89,
				56,
				56,
				39,
				67,
				98,
				95,
				[128, 2],
				95,
				94,
				42,
				67,
				68,
				39,
				53,
				64,
				56,
				81,
				[24, 4],
				51,
				5,
				[0, 12],
			],
			[
				[0, 18],
				5,
				118,
				128,
				98,
				101,
				37,
				37,
				62,
				30,
				30,
				129,
				130,
				[131, 2],
				132,
				133,
				134,
				[135, 2],
				123,
				[136, 2],
				137,
				52,
				52,
				38,
				138,
				37,
				3,
				1,
				72,
				49,
				39,
				38,
				39,
				62,
				38,
				38,
				68,
				89,
				89,
				50,
				69,
				62,
				54,
				98,
				94,
				[87, 3],
				[139, 3],
				128,
				92,
				68,
				56,
				30,
				63,
				64,
				24,
				63,
				24,
				24,
				140,
				[0, 12],
			],
			[
				[0, 18],
				141,
				12,
				142,
				143,
				144,
				145,
				146,
				122,
				147,
				44,
				148,
				123,
				149,
				[150, 3],
				[151, 2],
				124,
				136,
				43,
				38,
				37,
				67,
				68,
				37,
				138,
				68,
				13,
				97,
				0,
				4,
				6,
				18,
				60,
				[67, 4],
				68,
				52,
				68,
				68,
				54,
				98,
				128,
				[87, 3],
				128,
				152,
				[128, 2],
				139,
				153,
				98,
				68,
				39,
				30,
				81,
				64,
				64,
				24,
				24,
				32,
				4,
				[0, 11],
			],
			[
				[0, 19],
				5,
				154,
				[143, 4],
				155,
				44,
				112,
				130,
				156,
				124,
				[123, 3],
				[134, 2],
				157,
				62,
				69,
				38,
				54,
				54,
				[38, 3],
				37,
				36,
				5,
				[0, 4],
				1,
				9,
				158,
				159,
				160,
				114,
				[98, 5],
				94,
				[128, 2],
				87,
				[153, 2],
				87,
				139,
				87,
				128,
				139,
				101,
				68,
				62,
				39,
				81,
				64,
				81,
				69,
				98,
				18,
				1,
				[0, 10],
			],
			[
				[0, 19],
				1,
				105,
				[143, 2],
				161,
				162,
				163,
				164,
				81,
				30,
				165,
				156,
				166,
				156,
				166,
				148,
				164,
				30,
				69,
				62,
				37,
				54,
				54,
				62,
				69,
				113,
				68,
				16,
				167,
				2,
				1,
				0,
				0,
				11,
				168,
				169,
				170,
				171,
				172,
				173,
				88,
				128,
				95,
				94,
				98,
				[100, 3],
				[98, 3],
				128,
				[87, 4],
				128,
				68,
				38,
				80,
				63,
				80,
				62,
				78,
				21,
				174,
				[0, 10],
			],
			[
				[0, 19],
				1,
				167,
				161,
				151,
				175,
				176,
				177,
				62,
				178,
				81,
				30,
				[129, 2],
				113,
				62,
				[81, 3],
				30,
				62,
				38,
				37,
				37,
				54,
				62,
				38,
				67,
				48,
				179,
				180,
				16,
				10,
				181,
				182,
				183,
				170,
				136,
				184,
				185,
				186,
				42,
				42,
				[88, 3],
				128,
				95,
				94,
				94,
				[98, 3],
				128,
				[87, 3],
				187,
				128,
				188,
				62,
				81,
				24,
				50,
				107,
				36,
				57,
				1,
				[0, 9],
			],
			[
				[0, 20],
				2,
				114,
				189,
				190,
				101,
				55,
				30,
				81,
				81,
				63,
				30,
				81,
				31,
				24,
				24,
				81,
				81,
				30,
				62,
				38,
				38,
				113,
				54,
				38,
				37,
				43,
				191,
				160,
				145,
				192,
				193,
				194,
				169,
				195,
				145,
				184,
				185,
				196,
				54,
				54,
				42,
				95,
				197,
				94,
				94,
				87,
				87,
				153,
				187,
				198,
				199,
				198,
				160,
				187,
				87,
				187,
				200,
				101,
				37,
				63,
				25,
				104,
				64,
				68,
				16,
				5,
				[0, 9],
			],
			[
				[0, 20],
				1,
				67,
				113,
				30,
				119,
				55,
				112,
				[30, 3],
				62,
				29,
				63,
				24,
				24,
				63,
				30,
				69,
				[38, 3],
				37,
				54,
				37,
				43,
				67,
				127,
				185,
				144,
				194,
				201,
				[169, 2],
				202,
				95,
				203,
				82,
				54,
				68,
				68,
				67,
				94,
				[197, 2],
				204,
				[94, 3],
				128,
				205,
				[206, 2],
				207,
				208,
				154,
				209,
				210,
				205,
				60,
				62,
				63,
				32,
				117,
				89,
				8,
				11,
				[0, 9],
			],
			[
				[0, 20],
				1,
				60,
				211,
				62,
				113,
				44,
				112,
				79,
				30,
				119,
				62,
				62,
				68,
				30,
				80,
				30,
				69,
				69,
				[38, 3],
				37,
				54,
				42,
				82,
				94,
				212,
				213,
				214,
				201,
				[169, 2],
				215,
				131,
				216,
				217,
				218,
				68,
				62,
				68,
				42,
				197,
				42,
				[100, 3],
				98,
				98,
				94,
				128,
				200,
				205,
				[209, 2],
				[205, 2],
				219,
				220,
				1,
				51,
				62,
				32,
				109,
				22,
				1,
				[0, 10],
			],
			[
				[0, 21],
				18,
				100,
				38,
				42,
				122,
				37,
				62,
				37,
				164,
				62,
				30,
				37,
				38,
				69,
				39,
				39,
				38,
				38,
				37,
				37,
				54,
				54,
				42,
				221,
				222,
				223,
				126,
				169,
				194,
				[169, 2],
				224,
				155,
				225,
				186,
				54,
				68,
				29,
				68,
				[42, 3],
				[100, 4],
				98,
				98,
				152,
				87,
				87,
				139,
				187,
				153,
				226,
				227,
				167,
				0,
				3,
				53,
				104,
				58,
				32,
				1,
				[0, 10],
			],
			[
				[0, 21],
				14,
				197,
				54,
				95,
				88,
				[122, 2],
				228,
				55,
				55,
				37,
				37,
				54,
				[38, 4],
				37,
				[54, 4],
				55,
				229,
				212,
				230,
				143,
				[169, 3],
				215,
				180,
				189,
				230,
				231,
				60,
				[68, 3],
				42,
				94,
				42,
				[100, 4],
				91,
				98,
				94,
				87,
				[187, 2],
				232,
				153,
				227,
				48,
				46,
				1,
				4,
				63,
				117,
				104,
				23,
				1,
				[0, 10],
			],
			[
				[0, 21],
				9,
				98,
				42,
				94,
				216,
				95,
				101,
				115,
				55,
				37,
				55,
				55,
				95,
				[38, 3],
				37,
				37,
				54,
				55,
				67,
				54,
				55,
				177,
				233,
				144,
				[169, 2],
				194,
				169,
				215,
				234,
				199,
				216,
				235,
				67,
				[68, 3],
				100,
				94,
				98,
				100,
				67,
				100,
				91,
				91,
				98,
				128,
				87,
				187,
				198,
				232,
				226,
				236,
				5,
				0,
				0,
				1,
				51,
				117,
				104,
				24,
				1,
				[0, 10],
			],
			[
				[0, 21],
				1,
				106,
				98,
				218,
				139,
				95,
				54,
				68,
				37,
				54,
				55,
				55,
				101,
				54,
				38,
				37,
				54,
				54,
				55,
				42,
				42,
				100,
				101,
				127,
				131,
				214,
				169,
				[194, 2],
				169,
				237,
				221,
				82,
				173,
				235,
				128,
				[68, 3],
				100,
				94,
				94,
				98,
				[100, 2],
				91,
				98,
				152,
				87,
				87,
				139,
				232,
				153,
				238,
				20,
				1,
				[0, 3],
				22,
				24,
				24,
				53,
				46,
				[0, 10],
			],
			[
				[0, 22],
				6,
				98,
				218,
				87,
				216,
				177,
				101,
				55,
				228,
				177,
				189,
				190,
				98,
				38,
				54,
				54,
				42,
				98,
				98,
				42,
				42,
				160,
				193,
				201,
				[169, 2],
				[194, 3],
				144,
				95,
				225,
				239,
				240,
				187,
				67,
				68,
				68,
				67,
				[94, 5],
				[128, 2],
				87,
				[187, 3],
				198,
				241,
				2,
				[0, 5],
				72,
				24,
				117,
				32,
				2,
				[0, 10],
			],
			[
				[0, 23],
				17,
				42,
				67,
				128,
				189,
				125,
				242,
				[243, 2],
				130,
				189,
				101,
				54,
				54,
				42,
				98,
				101,
				98,
				42,
				114,
				144,
				[201, 2],
				[169, 2],
				[194, 3],
				170,
				101,
				244,
				245,
				94,
				232,
				160,
				100,
				92,
				67,
				42,
				95,
				87,
				88,
				[139, 2],
				187,
				216,
				[200, 3],
				160,
				9,
				[0, 6],
				2,
				63,
				45,
				58,
				46,
				[0, 10],
			],
			[
				[0, 23],
				4,
				246,
				54,
				67,
				29,
				101,
				247,
				248,
				249,
				130,
				37,
				98,
				188,
				100,
				42,
				95,
				98,
				42,
				98,
				237,
				169,
				250,
				251,
				169,
				[194, 3],
				201,
				193,
				170,
				127,
				252,
				173,
				199,
				253,
				226,
				78,
				137,
				98,
				94,
				128,
				187,
				200,
				254,
				200,
				[254, 2],
				199,
				160,
				255,
				140,
				[0, 7],
				22,
				32,
				26,
				4,
				[0, 10],
			],
			[
				[0, 24],
				2,
				48,
				98,
				37,
				62,
				130,
				129,
				71,
				115,
				62,
				54,
				95,
				42,
				94,
				95,
				42,
				42,
				159,
				256,
				194,
				250,
				194,
				169,
				194,
				[169, 2],
				194,
				257,
				102,
				258,
				203,
				259,
				258,
				216,
				127,
				159,
				128,
				94,
				94,
				[87, 3],
				187,
				216,
				[200, 2],
				159,
				145,
				124,
				6,
				[0, 7],
				1,
				3,
				2,
				1,
				[0, 10],
			],
			[
				[0, 25],
				6,
				226,
				67,
				37,
				37,
				129,
				71,
				121,
				37,
				54,
				101,
				122,
				95,
				95,
				42,
				128,
				215,
				169,
				251,
				256,
				169,
				[194, 6],
				142,
				144,
				260,
				261,
				262,
				263,
				[205, 2],
				264,
				200,
				139,
				187,
				216,
				[200, 2],
				[139, 2],
				199,
				265,
				144,
				124,
				17,
				[0, 21],
			],
			[
				[0, 25],
				1,
				17,
				98,
				42,
				43,
				266,
				[249, 2],
				42,
				54,
				55,
				127,
				122,
				95,
				94,
				205,
				169,
				257,
				251,
				237,
				170,
				[194, 6],
				257,
				267,
				268,
				177,
				93,
				189,
				131,
				162,
				127,
				264,
				260,
				264,
				[263, 2],
				216,
				88,
				253,
				265,
				201,
				144,
				163,
				114,
				1,
				[0, 20],
			],
			[
				[0, 25],
				1,
				2,
				102,
				98,
				101,
				247,
				44,
				221,
				44,
				55,
				98,
				205,
				253,
				122,
				253,
				215,
				194,
				257,
				215,
				268,
				237,
				[194, 6],
				[257, 2],
				209,
				145,
				139,
				264,
				269,
				255,
				162,
				127,
				270,
				264,
				163,
				260,
				263,
				93,
				155,
				215,
				201,
				143,
				134,
				189,
				5,
				[0, 20],
			],
			[
				[0, 26],
				271,
				272,
				98,
				98,
				87,
				226,
				98,
				42,
				42,
				137,
				[131, 2],
				205,
				195,
				169,
				194,
				169,
				202,
				148,
				144,
				194,
				[251, 2],
				[194, 4],
				251,
				201,
				159,
				263,
				177,
				222,
				172,
				124,
				175,
				145,
				163,
				216,
				273,
				230,
				216,
				145,
				195,
				193,
				201,
				123,
				93,
				274,
				[0, 20],
			],
			[
				[0, 26],
				1,
				267,
				190,
				68,
				100,
				67,
				67,
				54,
				67,
				190,
				144,
				142,
				265,
				[169, 2],
				201,
				215,
				267,
				275,
				144,
				[194, 8],
				193,
				144,
				255,
				264,
				263,
				276,
				185,
				172,
				263,
				126,
				173,
				258,
				88,
				255,
				145,
				142,
				215,
				257,
				161,
				269,
				277,
				[0, 20],
			],
			[
				[0, 25],
				1,
				15,
				125,
				142,
				246,
				98,
				42,
				95,
				55,
				98,
				205,
				215,
				237,
				142,
				169,
				194,
				169,
				170,
				272,
				134,
				215,
				[194, 8],
				214,
				237,
				256,
				131,
				126,
				269,
				273,
				278,
				217,
				258,
				216,
				200,
				163,
				264,
				270,
				145,
				144,
				257,
				256,
				216,
				279,
				[0, 20],
			],
			[
				[0, 24],
				1,
				280,
				148,
				162,
				169,
				237,
				190,
				94,
				88,
				139,
				205,
				144,
				237,
				255,
				161,
				[194, 2],
				215,
				237,
				281,
				127,
				215,
				[194, 2],
				251,
				[194, 5],
				256,
				282,
				170,
				[256, 2],
				265,
				175,
				230,
				203,
				283,
				101,
				270,
				177,
				[264, 2],
				255,
				142,
				194,
				145,
				233,
				182,
				11,
				[0, 19],
			],
			[
				[0, 23],
				11,
				284,
				282,
				132,
				169,
				194,
				169,
				205,
				87,
				139,
				199,
				255,
				177,
				155,
				145,
				193,
				194,
				[215, 2],
				155,
				285,
				237,
				169,
				[194, 6],
				251,
				194,
				214,
				282,
				205,
				[201, 2],
				256,
				215,
				155,
				185,
				211,
				286,
				98,
				127,
				[264, 2],
				270,
				142,
				251,
				177,
				222,
				169,
				97,
				[0, 19],
			],
			[
				[0, 22],
				11,
				287,
				144,
				215,
				257,
				[194, 2],
				169,
				145,
				198,
				187,
				200,
				216,
				222,
				163,
				162,
				169,
				250,
				288,
				145,
				229,
				155,
				170,
				[194, 9],
				251,
				255,
				253,
				144,
				[250, 2],
				251,
				289,
				290,
				291,
				196,
				69,
				226,
				[127, 2],
				270,
				142,
				256,
				292,
				216,
				183,
				75,
				[0, 19],
			],
			[
				[0, 21],
				97,
				293,
				[169, 2],
				201,
				194,
				257,
				194,
				294,
				169,
				205,
				200,
				216,
				95,
				216,
				163,
				205,
				214,
				250,
				215,
				134,
				292,
				255,
				215,
				[194, 5],
				251,
				[194, 4],
				265,
				253,
				127,
				193,
				250,
				295,
				201,
				143,
				233,
				296,
				69,
				37,
				255,
				205,
				270,
				142,
				162,
				172,
				264,
				257,
				75,
				[0, 19],
			],
			[
				[0, 20],
				11,
				293,
				194,
				169,
				250,
				[194, 4],
				294,
				194,
				193,
				215,
				131,
				221,
				93,
				190,
				192,
				201,
				250,
				289,
				123,
				273,
				255,
				208,
				169,
				[194, 5],
				251,
				[194, 3],
				193,
				127,
				177,
				145,
				201,
				[250, 2],
				201,
				131,
				297,
				298,
				299,
				253,
				142,
				205,
				215,
				126,
				225,
				199,
				288,
				85,
				[0, 19],
			],
			[
				[0, 20],
				284,
				[194, 2],
				169,
				201,
				[194, 2],
				251,
				[194, 2],
				[169, 2],
				194,
				144,
				177,
				101,
				22,
				300,
				[250, 2],
				251,
				301,
				302,
				145,
				169,
				[194, 6],
				[251, 2],
				[194, 2],
				257,
				144,
				189,
				253,
				215,
				201,
				303,
				250,
				251,
				290,
				304,
				305,
				255,
				265,
				151,
				163,
				263,
				255,
				306,
				257,
				75,
				[0, 19],
			],
			[
				[0, 19],
				85,
				169,
				[194, 5],
				251,
				201,
				251,
				[194, 2],
				[169, 3],
				307,
				59,
				308,
				309,
				[201, 2],
				310,
				311,
				312,
				313,
				[169, 3],
				[194, 3],
				257,
				[194, 5],
				214,
				302,
				253,
				155,
				256,
				201,
				250,
				295,
				214,
				82,
				223,
				[134, 2],
				314,
				123,
				169,
				194,
				169,
				315,
				85,
				[0, 19],
			],
			[
				[0, 18],
				97,
				315,
				[194, 3],
				182,
				181,
				168,
				206,
				[194, 7],
				316,
				73,
				103,
				194,
				[201, 2],
				[194, 2],
				294,
				194,
				[169, 4],
				215,
				162,
				317,
				162,
				215,
				256,
				[194, 3],
				215,
				[253, 2],
				145,
				256,
				169,
				265,
				256,
				145,
				296,
				213,
				184,
				177,
				169,
				313,
				315,
				313,
				301,
				318,
				[0, 19],
			],
			[
				[0, 17],
				97,
				287,
				[194, 2],
				169,
				315,
				287,
				319,
				320,
				321,
				322,
				[194, 3],
				251,
				[194, 3],
				83,
				110,
				257,
				201,
				250,
				194,
				[169, 7],
				323,
				155,
				324,
				136,
				253,
				285,
				289,
				256,
				[194, 2],
				209,
				253,
				229,
				144,
				194,
				215,
				162,
				144,
				273,
				298,
				263,
				[169, 2],
				[194, 2],
				315,
				325,
				277,
				[0, 19],
			],
			[
				[0, 16],
				2,
				309,
				[194, 3],
				313,
				309,
				326,
				327,
				328,
				321,
				329,
				[194, 7],
				330,
				331,
				201,
				[250, 2],
				[194, 2],
				[169, 10],
				215,
				302,
				229,
				162,
				169,
				194,
				214,
				229,
				160,
				159,
				289,
				251,
				143,
				155,
				317,
				142,
				169,
				208,
				332,
				[194, 2],
				215,
				170,
				277,
				[0, 19],
			],
			[
				[0, 15],
				141,
				287,
				[194, 2],
				294,
				194,
				315,
				[333, 3],
				309,
				333,
				182,
				315,
				194,
				169,
				[194, 4],
				251,
				169,
				295,
				250,
				[194, 2],
				[169, 8],
				[313, 3],
				[169, 2],
				145,
				229,
				255,
				214,
				194,
				144,
				160,
				139,
				200,
				144,
				313,
				334,
				189,
				162,
				215,
				335,
				146,
				215,
				194,
				224,
				317,
				287,
				[0, 19],
			],
			[
				[0, 15],
				85,
				169,
				170,
				[169, 3],
				315,
				207,
				309,
				336,
				326,
				337,
				326,
				182,
				[194, 6],
				201,
				144,
				256,
				303,
				194,
				[169, 10],
				[313, 3],
				183,
				313,
				144,
				253,
				131,
				214,
				194,
				205,
				[128, 2],
				253,
				335,
				313,
				159,
				242,
				144,
				294,
				302,
				170,
				169,
				282,
				338,
				309,
				141,
				[0, 18],
			],
			[
				[0, 15],
				168,
				96,
				121,
				180,
				[169, 2],
				315,
				309,
				339,
				337,
				340,
				220,
				341,
				182,
				[194, 7],
				144,
				237,
				144,
				193,
				194,
				[169, 10],
				[313, 2],
				169,
				[313, 2],
				144,
				253,
				127,
				169,
				144,
				190,
				[107, 2],
				136,
				334,
				170,
				242,
				177,
				[215, 2],
				267,
				215,
				229,
				131,
				206,
				3,
				[0, 18],
			],
			[
				[0, 14],
				11,
				208,
				120,
				342,
				228,
				215,
				169,
				194,
				343,
				344,
				345,
				346,
				287,
				293,
				321,
				[194, 5],
				251,
				194,
				257,
				162,
				347,
				237,
				[169, 9],
				[313, 6],
				315,
				313,
				237,
				189,
				255,
				215,
				237,
				98,
				91,
				196,
				348,
				335,
				302,
				122,
				132,
				183,
				302,
				237,
				347,
				317,
				170,
				103,
				[0, 18],
			],
			[
				[0, 14],
				97,
				251,
				120,
				112,
				55,
				142,
				294,
				194,
				315,
				309,
				333,
				349,
				[350, 2],
				182,
				315,
				[194, 6],
				257,
				256,
				127,
				282,
				169,
				313,
				[169, 2],
				313,
				[169, 2],
				[313, 3],
				[169, 2],
				[313, 5],
				315,
				127,
				171,
				144,
				208,
				159,
				196,
				351,
				101,
				282,
				144,
				171,
				136,
				169,
				131,
				224,
				352,
				237,
				208,
				105,
				[0, 18],
			],
			[
				[0, 14],
				353,
				169,
				115,
				62,
				43,
				145,
				294,
				169,
				315,
				301,
				329,
				350,
				354,
				355,
				287,
				356,
				201,
				[194, 7],
				215,
				229,
				[169, 2],
				215,
				237,
				335,
				169,
				183,
				315,
				313,
				[183, 2],
				315,
				[313, 2],
				169,
				313,
				335,
				313,
				208,
				357,
				146,
				183,
				144,
				351,
				196,
				78,
				101,
				317,
				170,
				358,
				144,
				237,
				334,
				144,
				224,
				208,
				343,
				2,
				[0, 17],
			],
			[
				[0, 13],
				11,
				182,
				209,
				62,
				62,
				44,
				142,
				294,
				[169, 2],
				183,
				315,
				309,
				326,
				168,
				287,
				194,
				201,
				[194, 5],
				169,
				194,
				169,
				282,
				142,
				169,
				215,
				224,
				335,
				208,
				323,
				335,
				215,
				313,
				[335, 2],
				313,
				169,
				[313, 2],
				[335, 2],
				315,
				170,
				228,
				131,
				170,
				359,
				360,
				78,
				91,
				122,
				162,
				131,
				237,
				335,
				208,
				170,
				157,
				209,
				170,
				10,
				[0, 17],
			],
			[
				[0, 13],
				361,
				194,
				362,
				62,
				38,
				114,
				193,
				[169, 2],
				[194, 3],
				182,
				363,
				330,
				315,
				194,
				251,
				[194, 6],
				[169, 2],
				282,
				177,
				169,
				215,
				282,
				323,
				332,
				352,
				171,
				229,
				131,
				215,
				[313, 5],
				[335, 2],
				313,
				315,
				302,
				228,
				145,
				364,
				365,
				101,
				78,
				91,
				165,
				162,
				142,
				[215, 2],
				170,
				165,
				282,
				208,
				74,
				[0, 17],
			],
			[
				[0, 13],
				366,
				154,
				37,
				62,
				37,
				146,
				194,
				[169, 3],
				[194, 2],
				201,
				[169, 4],
				[194, 4],
				[251, 2],
				[194, 3],
				237,
				122,
				145,
				215,
				352,
				131,
				215,
				313,
				144,
				282,
				189,
				282,
				145,
				169,
				[313, 2],
				335,
				313,
				[335, 2],
				208,
				195,
				[367, 2],
				94,
				368,
				172,
				55,
				211,
				351,
				369,
				299,
				94,
				195,
				215,
				242,
				131,
				208,
				168,
				1,
				[0, 16],
			],
			[
				[0, 12],
				1,
				2,
				49,
				30,
				39,
				78,
				237,
				251,
				[169, 3],
				194,
				257,
				250,
				289,
				[169, 2],
				194,
				169,
				251,
				[194, 3],
				251,
				194,
				169,
				313,
				215,
				[171, 2],
				142,
				334,
				171,
				144,
				313,
				315,
				215,
				335,
				237,
				[282, 2],
				144,
				313,
				335,
				315,
				215,
				323,
				[208, 2],
				202,
				370,
				102,
				371,
				196,
				148,
				196,
				360,
				196,
				299,
				364,
				101,
				215,
				282,
				352,
				169,
				206,
				2,
				[0, 16],
			],
			[
				[0, 11],
				1,
				20,
				246,
				98,
				54,
				68,
				114,
				215,
				251,
				[169, 3],
				194,
				[201, 2],
				323,
				169,
				313,
				[169, 2],
				251,
				169,
				[194, 3],
				[169, 2],
				313,
				169,
				237,
				157,
				171,
				144,
				347,
				171,
				[335, 2],
				[313, 2],
				169,
				215,
				282,
				189,
				237,
				313,
				169,
				334,
				224,
				[335, 2],
				195,
				96,
				78,
				82,
				372,
				172,
				102,
				106,
				55,
				157,
				145,
				190,
				281,
				215,
				146,
				323,
				315,
				5,
				[0, 16],
			],
			[
				[0, 11],
				72,
				107,
				42,
				95,
				128,
				55,
				190,
				256,
				310,
				251,
				169,
				194,
				251,
				201,
				256,
				317,
				[169, 4],
				[194, 2],
				[169, 2],
				[194, 2],
				313,
				169,
				313,
				335,
				159,
				130,
				229,
				237,
				101,
				131,
				313,
				315,
				169,
				335,
				195,
				215,
				[189, 2],
				162,
				169,
				282,
				131,
				215,
				323,
				162,
				122,
				42,
				101,
				[360, 2],
				163,
				246,
				67,
				228,
				324,
				335,
				170,
				208,
				237,
				224,
				335,
				340,
				[0, 16],
			],
			[
				[0, 10],
				46,
				137,
				82,
				211,
				43,
				122,
				128,
				226,
				193,
				310,
				201,
				257,
				[251, 3],
				144,
				285,
				256,
				169,
				313,
				169,
				313,
				194,
				313,
				169,
				[194, 2],
				315,
				183,
				315,
				335,
				302,
				247,
				171,
				162,
				44,
				347,
				[313, 3],
				[208, 3],
				282,
				44,
				189,
				215,
				155,
				131,
				237,
				229,
				44,
				147,
				[351, 2],
				261,
				365,
				373,
				253,
				78,
				137,
				130,
				323,
				313,
				285,
				144,
				374,
				206,
				321,
				11,
				[0, 15],
			],
			[
				[0, 9],
				1,
				28,
				258,
				95,
				95,
				112,
				42,
				128,
				268,
				[201, 4],
				[251, 2],
				194,
				334,
				324,
				256,
				194,
				[169, 2],
				313,
				194,
				[169, 3],
				214,
				[194, 3],
				214,
				302,
				171,
				145,
				144,
				242,
				136,
				215,
				315,
				[208, 4],
				237,
				228,
				221,
				317,
				155,
				189,
				[195, 2],
				215,
				144,
				157,
				43,
				211,
				138,
				375,
				273,
				228,
				48,
				44,
				285,
				208,
				229,
				282,
				352,
				282,
				136,
				103,
				[0, 15],
			],
			[
				[0, 9],
				14,
				376,
				42,
				67,
				95,
				43,
				42,
				101,
				237,
				257,
				201,
				142,
				169,
				201,
				251,
				194,
				237,
				324,
				193,
				[194, 2],
				[169, 2],
				313,
				[169, 2],
				335,
				323,
				[169, 2],
				335,
				237,
				137,
				228,
				170,
				208,
				114,
				101,
				155,
				301,
				335,
				[313, 2],
				169,
				144,
				190,
				221,
				324,
				302,
				130,
				334,
				[335, 3],
				202,
				115,
				67,
				43,
				365,
				217,
				93,
				107,
				98,
				347,
				215,
				242,
				155,
				377,
				157,
				184,
				370,
				[0, 15],
			],
			[
				[0, 8],
				9,
				88,
				261,
				43,
				54,
				68,
				37,
				54,
				98,
				268,
				209,
				265,
				205,
				170,
				201,
				[295, 2],
				237,
				324,
				193,
				251,
				194,
				[169, 2],
				313,
				[169, 2],
				215,
				237,
				313,
				315,
				215,
				142,
				98,
				101,
				142,
				208,
				146,
				55,
				242,
				[208, 2],
				335,
				315,
				183,
				215,
				242,
				95,
				136,
				205,
				130,
				155,
				208,
				315,
				335,
				195,
				102,
				106,
				78,
				95,
				299,
				351,
				197,
				98,
				130,
				162,
				130,
				131,
				253,
				44,
				82,
				127,
				4,
				[0, 14],
			],
			[
				[0, 7],
				2,
				236,
				230,
				95,
				43,
				54,
				67,
				54,
				38,
				38,
				68,
				68,
				67,
				114,
				159,
				142,
				201,
				250,
				265,
				155,
				215,
				251,
				[194, 2],
				[169, 2],
				315,
				169,
				144,
				131,
				294,
				313,
				378,
				363,
				98,
				211,
				229,
				145,
				323,
				101,
				44,
				125,
				208,
				301,
				170,
				[208, 2],
				157,
				55,
				221,
				145,
				228,
				148,
				144,
				[315, 2],
				335,
				170,
				48,
				78,
				78,
				82,
				379,
				304,
				373,
				130,
				131,
				130,
				125,
				317,
				373,
				304,
				165,
				5,
				[0, 14],
			],
			[
				[0, 7],
				6,
				87,
				173,
				95,
				54,
				37,
				55,
				54,
				38,
				38,
				62,
				39,
				30,
				69,
				38,
				29,
				246,
				281,
				201,
				237,
				144,
				[251, 2],
				194,
				[169, 2],
				208,
				315,
				131,
				253,
				214,
				313,
				325,
				343,
				128,
				95,
				130,
				228,
				282,
				229,
				101,
				122,
				131,
				325,
				285,
				[170, 2],
				101,
				67,
				247,
				131,
				357,
				266,
				131,
				170,
				[315, 2],
				335,
				159,
				66,
				246,
				98,
				217,
				379,
				297,
				373,
				125,
				101,
				290,
				317,
				290,
				304,
				351,
				103,
				[0, 14],
			],
			[
				[0, 6],
				4,
				280,
				88,
				173,
				95,
				113,
				38,
				38,
				42,
				101,
				42,
				54,
				68,
				62,
				62,
				38,
				39,
				108,
				30,
				202,
				256,
				170,
				169,
				[194, 3],
				294,
				313,
				315,
				229,
				130,
				289,
				[313, 2],
				208,
				102,
				101,
				155,
				268,
				55,
				253,
				190,
				137,
				157,
				133,
				229,
				323,
				155,
				44,
				67,
				247,
				131,
				237,
				[247, 2],
				131,
				208,
				[301, 2],
				170,
				236,
				106,
				66,
				211,
				379,
				380,
				381,
				382,
				101,
				136,
				[215, 2],
				216,
				304,
				83,
				[0, 14],
			],
			[
				[0, 6],
				3,
				236,
				173,
				87,
				94,
				54,
				37,
				38,
				38,
				62,
				38,
				55,
				122,
				189,
				122,
				114,
				55,
				50,
				62,
				202,
				201,
				[215, 2],
				257,
				[194, 2],
				[169, 3],
				282,
				130,
				215,
				313,
				315,
				335,
				357,
				247,
				285,
				144,
				226,
				42,
				177,
				383,
				98,
				305,
				136,
				323,
				155,
				147,
				188,
				384,
				93,
				237,
				282,
				43,
				157,
				170,
				[208, 3],
				209,
				106,
				385,
				211,
				380,
				372,
				386,
				223,
				130,
				387,
				215,
				313,
				215,
				185,
				89,
				[0, 14],
			],
			[
				[0, 6],
				5,
				36,
				88,
				87,
				98,
				54,
				42,
				42,
				54,
				38,
				39,
				30,
				56,
				39,
				115,
				388,
				268,
				159,
				237,
				215,
				[201, 2],
				215,
				169,
				201,
				194,
				[169, 3],
				282,
				242,
				323,
				[313, 2],
				215,
				281,
				44,
				189,
				215,
				142,
				98,
				221,
				177,
				98,
				188,
				95,
				170,
				215,
				157,
				94,
				54,
				54,
				101,
				155,
				268,
				55,
				189,
				142,
				[208, 2],
				237,
				102,
				60,
				211,
				389,
				390,
				379,
				391,
				197,
				221,
				162,
				335,
				313,
				162,
				373,
				9,
				[0, 13],
			],
			[
				[0, 6],
				83,
				48,
				88,
				88,
				95,
				54,
				54,
				42,
				44,
				54,
				54,
				68,
				[39, 4],
				50,
				63,
				246,
				265,
				169,
				201,
				169,
				215,
				144,
				193,
				[215, 2],
				169,
				237,
				228,
				237,
				313,
				169,
				215,
				237,
				114,
				122,
				170,
				313,
				253,
				211,
				155,
				190,
				392,
				42,
				136,
				334,
				190,
				91,
				101,
				122,
				42,
				44,
				125,
				107,
				91,
				200,
				334,
				155,
				224,
				255,
				44,
				82,
				[393, 2],
				365,
				394,
				371,
				373,
				127,
				[144, 2],
				170,
				131,
				37,
				47,
				[0, 12],
			],
			[
				[0, 6],
				72,
				281,
				[216, 2],
				88,
				98,
				113,
				68,
				78,
				42,
				221,
				128,
				98,
				67,
				43,
				37,
				62,
				63,
				115,
				161,
				145,
				331,
				395,
				143,
				145,
				162,
				237,
				282,
				334,
				215,
				[114, 2],
				323,
				313,
				335,
				215,
				190,
				101,
				131,
				335,
				237,
				82,
				93,
				237,
				38,
				100,
				373,
				131,
				159,
				66,
				137,
				165,
				190,
				78,
				101,
				229,
				137,
				42,
				253,
				242,
				334,
				173,
				196,
				211,
				396,
				393,
				217,
				37,
				371,
				211,
				233,
				101,
				233,
				125,
				144,
				136,
				89,
				[0, 12],
			],
			[
				[0, 6],
				11,
				202,
				253,
				88,
				139,
				216,
				114,
				33,
				51,
				30,
				108,
				39,
				54,
				137,
				146,
				132,
				127,
				146,
				255,
				175,
				161,
				5,
				181,
				289,
				[255, 2],
				215,
				323,
				282,
				237,
				159,
				247,
				136,
				208,
				335,
				208,
				205,
				98,
				189,
				215,
				208,
				95,
				221,
				144,
				98,
				188,
				95,
				357,
				131,
				246,
				78,
				101,
				317,
				101,
				91,
				189,
				146,
				67,
				365,
				221,
				132,
				397,
				244,
				373,
				393,
				398,
				399,
				115,
				188,
				359,
				261,
				189,
				298,
				400,
				139,
				162,
				230,
				59,
				[0, 11],
			],
			[
				0,
				0,
				401,
				402,
				403,
				404,
				403,
				405,
				406,
				407,
				408,
				357,
				409,
				13,
				410,
				[411, 3],
				412,
				30,
				30,
				413,
				151,
				414,
				[411, 2],
				415,
				11,
				284,
				256,
				255,
				127,
				416,
				417,
				418,
				414,
				419,
				420,
				421,
				422,
				423,
				335,
				208,
				137,
				101,
				334,
				424,
				425,
				426,
				[414, 2],
				427,
				426,
				428,
				429,
				98,
				78,
				430,
				[411, 9],
				431,
				259,
				292,
				380,
				432,
				433,
				434,
				420,
				414,
				[420, 2],
				426,
				435,
				436,
				177,
				282,
				42,
				174,
				401,
				437,
				438,
				404,
				403,
				439,
				440,
				441,
				442,
				0,
			],
			[
				0,
				441,
				[411, 8],
				443,
				272,
				300,
				202,
				444,
				[411, 3],
				445,
				101,
				62,
				120,
				151,
				414,
				[411, 2],
				446,
				0,
				90,
				201,
				205,
				447,
				419,
				[411, 7],
				448,
				323,
				208,
				357,
				37,
				447,
				419,
				[411, 7],
				421,
				122,
				78,
				449,
				[411, 9],
				450,
				451,
				126,
				217,
				452,
				[411, 8],
				453,
				360,
				162,
				173,
				454,
				[411, 8],
				401,
				0,
			],
			[
				455,
				[411, 2],
				403,
				456,
				1,
				1,
				457,
				458,
				459,
				460,
				208,
				[201, 2],
				461,
				[411, 3],
				462,
				200,
				255,
				162,
				175,
				414,
				[411, 2],
				440,
				0,
				75,
				201,
				463,
				[411, 3],
				459,
				423,
				191,
				464,
				465,
				466,
				467,
				334,
				208,
				237,
				468,
				[411, 3],
				469,
				470,
				199,
				471,
				472,
				473,
				474,
				136,
				60,
				475,
				[411, 3],
				475,
				221,
				190,
				115,
				128,
				114,
				100,
				476,
				203,
				477,
				[411, 2],
				420,
				478,
				78,
				226,
				479,
				480,
				481,
				482,
				211,
				200,
				429,
				[411, 2],
				483,
				455,
				1,
				1,
				442,
				401,
				402,
				401,
				0,
			],
			[
				484,
				[411, 2],
				485,
				[0, 3],
				1,
				340,
				193,
				[251, 2],
				295,
				310,
				461,
				[411, 3],
				462,
				253,
				145,
				144,
				161,
				414,
				[411, 2],
				402,
				0,
				0,
				486,
				[411, 3],
				487,
				313,
				169,
				162,
				136,
				162,
				190,
				55,
				229,
				144,
				488,
				[411, 3],
				454,
				100,
				253,
				130,
				68,
				61,
				188,
				92,
				221,
				98,
				430,
				[411, 3],
				489,
				44,
				163,
				388,
				137,
				132,
				128,
				391,
				399,
				490,
				[411, 2],
				491,
				128,
				114,
				139,
				365,
				492,
				[298, 2],
				189,
				42,
				422,
				[411, 2],
				493,
				[0, 8],
			],
			[
				441,
				[411, 2],
				494,
				442,
				[0, 3],
				11,
				179,
				195,
				[201, 3],
				444,
				[411, 3],
				495,
				253,
				142,
				215,
				161,
				419,
				[411, 2],
				496,
				0,
				0,
				497,
				[411, 2],
				419,
				498,
				[169, 2],
				317,
				377,
				131,
				268,
				107,
				98,
				177,
				499,
				[411, 2],
				414,
				500,
				392,
				101,
				[114, 2],
				152,
				91,
				501,
				286,
				101,
				327,
				[411, 3],
				502,
				373,
				172,
				189,
				197,
				131,
				127,
				503,
				504,
				505,
				[411, 2],
				506,
				507,
				185,
				82,
				492,
				196,
				503,
				298,
				189,
				211,
				508,
				[411, 2],
				509,
				456,
				[0, 7],
			],
			[
				510,
				[411, 4],
				511,
				441,
				401,
				141,
				10,
				234,
				191,
				[205, 2],
				512,
				[411, 3],
				513,
				199,
				142,
				161,
				144,
				514,
				[411, 2],
				496,
				0,
				0,
				515,
				[411, 2],
				516,
				228,
				202,
				169,
				285,
				243,
				282,
				302,
				517,
				92,
				216,
				420,
				[411, 2],
				421,
				518,
				519,
				[60, 3],
				106,
				66,
				520,
				521,
				92,
				327,
				[411, 3],
				489,
				373,
				189,
				42,
				239,
				273,
				127,
				298,
				522,
				523,
				[411, 4],
				524,
				525,
				526,
				376,
				391,
				186,
				122,
				365,
				527,
				[411, 4],
				528,
				441,
				401,
				141,
				[0, 3],
			],
			[
				141,
				529,
				[411, 6],
				530,
				485,
				12,
				199,
				127,
				177,
				429,
				[411, 3],
				531,
				179,
				340,
				83,
				103,
				532,
				[411, 2],
				496,
				0,
				0,
				[411, 3],
				533,
				216,
				268,
				170,
				229,
				130,
				282,
				237,
				78,
				116,
				534,
				[411, 3],
				535,
				521,
				536,
				392,
				60,
				60,
				78,
				78,
				66,
				521,
				537,
				538,
				[411, 9],
				163,
				221,
				539,
				540,
				506,
				[411, 6],
				419,
				541,
				542,
				186,
				211,
				239,
				506,
				[411, 6],
				530,
				543,
				0,
				0,
			],
			[
				0,
				455,
				494,
				[411, 7],
				402,
				6,
				180,
				270,
				544,
				[411, 3],
				545,
				3,
				[0, 3],
				494,
				[411, 2],
				496,
				0,
				0,
				[411, 3],
				546,
				273,
				192,
				323,
				131,
				242,
				155,
				208,
				92,
				547,
				227,
				[411, 3],
				491,
				548,
				549,
				392,
				92,
				[78, 3],
				550,
				551,
				537,
				538,
				[411, 9],
				225,
				122,
				298,
				398,
				552,
				553,
				[411, 7],
				554,
				380,
				351,
				196,
				555,
				553,
				[411, 7],
				496,
				0,
			],
			[
				[0, 3],
				401,
				485,
				494,
				[411, 5],
				141,
				3,
				220,
				556,
				[411, 3],
				401,
				[0, 4],
				494,
				[411, 2],
				496,
				0,
				0,
				532,
				[411, 2],
				557,
				82,
				127,
				317,
				215,
				189,
				155,
				335,
				67,
				392,
				78,
				414,
				[411, 2],
				421,
				68,
				549,
				519,
				91,
				66,
				78,
				66,
				66,
				501,
				66,
				558,
				[411, 3],
				559,
				269,
				142,
				209,
				139,
				451,
				298,
				304,
				360,
				365,
				364,
				92,
				560,
				561,
				562,
				[411, 5],
				540,
				380,
				[196, 2],
				563,
				480,
				525,
				427,
				[411, 5],
				141,
			],
			[
				[0, 6],
				141,
				402,
				[411, 3],
				455,
				0,
				0,
				442,
				[411, 3],
				401,
				[0, 4],
				403,
				[411, 2],
				441,
				0,
				0,
				485,
				[411, 2],
				414,
				564,
				291,
				172,
				155,
				93,
				269,
				162,
				107,
				565,
				66,
				566,
				[411, 2],
				414,
				94,
				567,
				364,
				286,
				66,
				91,
				568,
				479,
				569,
				568,
				570,
				[411, 3],
				560,
				231,
				519,
				518,
				501,
				568,
				399,
				432,
				571,
				360,
				66,
				[106, 2],
				572,
				573,
				574,
				575,
				[411, 3],
				576,
				577,
				571,
				563,
				578,
				[571, 2],
				380,
				579,
				402,
				[411, 3],
				455,
			],
			[
				[0, 7],
				442,
				[411, 3],
				442,
				[0, 3],
				580,
				[411, 2],
				484,
				[0, 3],
				141,
				[411, 3],
				581,
				0,
				0,
				455,
				[411, 3],
				541,
				582,
				583,
				290,
				101,
				190,
				132,
				242,
				572,
				568,
				584,
				[411, 3],
				467,
				360,
				371,
				567,
				392,
				188,
				568,
				565,
				585,
				586,
				587,
				[411, 3],
				588,
				589,
				519,
				[590, 2],
				436,
				360,
				577,
				591,
				577,
				197,
				218,
				100,
				572,
				592,
				593,
				594,
				[411, 3],
				595,
				596,
				577,
				571,
				597,
				598,
				[577, 2],
				360,
				599,
				[411, 3],
				442,
			],
			[
				510,
				496,
				401,
				442,
				1,
				0,
				141,
				485,
				[411, 2],
				494,
				[0, 4],
				485,
				[411, 2],
				403,
				456,
				0,
				141,
				440,
				[411, 2],
				529,
				141,
				[0, 3],
				484,
				[411, 3],
				541,
				600,
				199,
				601,
				602,
				603,
				604,
				94,
				589,
				605,
				606,
				[411, 3],
				607,
				608,
				521,
				471,
				609,
				610,
				611,
				521,
				612,
				613,
				[411, 3],
				614,
				564,
				67,
				501,
				590,
				521,
				548,
				492,
				615,
				616,
				554,
				617,
				618,
				619,
				620,
				621,
				622,
				[411, 2],
				414,
				623,
				397,
				450,
				505,
				624,
				619,
				573,
				571,
				625,
				626,
				[411, 2],
				494,
				0,
			],
			[
				627,
				[411, 8],
				530,
				456,
				[0, 4],
				1,
				628,
				[411, 7],
				404,
				401,
				[0, 5],
				629,
				419,
				[411, 7],
				630,
				258,
				173,
				631,
				632,
				633,
				419,
				[411, 7],
				634,
				521,
				590,
				635,
				[411, 9],
				611,
				636,
				637,
				638,
				[411, 8],
				414,
				639,
				197,
				187,
				447,
				[411, 8],
				530,
				456,
				0,
			],
			[
				141,
				510,
				496,
				628,
				494,
				404,
				529,
				511,
				441,
				442,
				[0, 7],
				581,
				440,
				403,
				404,
				529,
				628,
				441,
				141,
				[0, 6],
				271,
				640,
				641,
				630,
				506,
				[414, 2],
				642,
				643,
				644,
				60,
				189,
				175,
				645,
				239,
				646,
				633,
				647,
				506,
				414,
				420,
				648,
				610,
				649,
				536,
				590,
				650,
				[411, 9],
				474,
				636,
				651,
				652,
				638,
				653,
				524,
				562,
				414,
				506,
				562,
				622,
				654,
				655,
				656,
				631,
				470,
				657,
				658,
				659,
				553,
				[414, 2],
				660,
				441,
				442,
				0,
				0,
			],
			[
				[0, 29],
				4,
				9,
				33,
				53,
				365,
				351,
				54,
				98,
				252,
				269,
				122,
				94,
				551,
				364,
				226,
				128,
				661,
				595,
				589,
				662,
				663,
				254,
				302,
				664,
				[549, 2],
				536,
				665,
				666,
				667,
				668,
				589,
				67,
				669,
				670,
				185,
				88,
				67,
				92,
				60,
				519,
				548,
				671,
				672,
				673,
				668,
				[667, 3],
				663,
				674,
				586,
				359,
				231,
				586,
				589,
				258,
				397,
				661,
				675,
				676,
				53,
				[0, 4],
			],
			[
				[0, 27],
				1,
				57,
				364,
				[676, 2],
				391,
				677,
				360,
				128,
				244,
				678,
				[186, 2],
				669,
				542,
				98,
				153,
				679,
				235,
				631,
				204,
				680,
				671,
				637,
				680,
				190,
				392,
				519,
				681,
				590,
				636,
				682,
				667,
				671,
				92,
				93,
				564,
				397,
				683,
				231,
				371,
				218,
				384,
				[371, 2],
				612,
				684,
				637,
				[667, 2],
				620,
				586,
				675,
				620,
				675,
				669,
				397,
				676,
				[685, 2],
				573,
				542,
				573,
				53,
				[0, 4],
			],
			[
				[0, 27],
				1,
				686,
				670,
				687,
				688,
				689,
				690,
				223,
				244,
				691,
				692,
				88,
				211,
				615,
				685,
				94,
				693,
				694,
				572,
				645,
				534,
				160,
				679,
				695,
				672,
				696,
				204,
				218,
				188,
				392,
				521,
				697,
				672,
				619,
				605,
				67,
				268,
				255,
				263,
				254,
				564,
				674,
				235,
				263,
				127,
				177,
				492,
				698,
				682,
				699,
				673,
				632,
				569,
				673,
				699,
				687,
				700,
				259,
				685,
				[573, 3],
				698,
				701,
				[0, 4],
			],
		],
	};


  // project-rome/@romejs/cli-diagnostics/banners/error.json
const ___R$project$rome$$romejs$cli$diagnostics$banners$error_json$default = {
		"palettes": [
			[0, 0, 0],
			[15, 0, 0],
			[30, 15, 15],
			[30, 15, 30],
			[15, 15, 15],
			[75, 60, 60],
			[45, 30, 30],
			[30, 30, 30],
			[90, 75, 75],
			[120, 90, 90],
			[105, 75, 75],
			[60, 45, 45],
			[90, 75, 60],
			[90, 60, 60],
			[105, 90, 90],
			[180, 135, 135],
			[150, 120, 120],
			[165, 135, 120],
			[120, 105, 90],
			[150, 120, 105],
			[105, 75, 90],
			[45, 45, 45],
			[30, 30, 15],
			[195, 165, 165],
			[195, 165, 150],
			[165, 120, 120],
			[180, 150, 150],
			[165, 135, 135],
			[15, 0, 15],
			[75, 60, 45],
			[165, 150, 135],
			[210, 165, 165],
			[210, 180, 180],
			[225, 180, 180],
			[135, 105, 105],
			[60, 30, 30],
			[60, 60, 45],
			[210, 180, 165],
			[225, 195, 180],
			[225, 195, 195],
			[75, 45, 45],
			[45, 15, 15],
			[135, 120, 105],
			[180, 150, 135],
			[195, 150, 150],
			[135, 105, 90],
			[240, 210, 195],
			[240, 195, 195],
			[30, 15, 0],
			[150, 135, 120],
			[180, 165, 150],
			[240, 210, 210],
			[240, 195, 180],
			[105, 90, 75],
			[135, 120, 120],
			[225, 180, 165],
			[210, 165, 150],
			[240, 210, 180],
			[60, 45, 30],
			[120, 105, 105],
			[240, 225, 210],
			[225, 210, 195],
			[195, 150, 135],
			[75, 75, 60],
			[180, 165, 165],
			[240, 225, 225],
			[225, 195, 165],
			[195, 165, 135],
			[210, 150, 135],
			[210, 180, 150],
			[180, 135, 105],
			[195, 180, 165],
			[165, 120, 90],
			[165, 105, 75],
			[180, 120, 105],
			[210, 165, 135],
			[195, 135, 120],
			[225, 165, 150],
			[195, 150, 120],
			[210, 195, 180],
			[150, 90, 75],
			[225, 180, 150],
			[180, 120, 90],
			[195, 135, 105],
			[150, 75, 45],
			[180, 135, 120],
			[45, 15, 30],
			[210, 150, 120],
			[165, 105, 90],
			[165, 120, 105],
			[135, 90, 75],
			[135, 90, 90],
			[180, 120, 75],
			[165, 90, 60],
			[150, 90, 45],
			[135, 60, 30],
			[135, 75, 60],
			[150, 105, 75],
			[180, 150, 120],
			[15, 15, 0],
			[165, 135, 105],
			[240, 195, 165],
			[180, 105, 75],
			[165, 90, 45],
			[195, 135, 90],
			[150, 90, 60],
			[135, 90, 60],
			[150, 105, 90],
			[150, 135, 105],
			[45, 45, 30],
			[210, 135, 120],
			[195, 120, 90],
			[180, 105, 60],
			[165, 75, 45],
			[105, 75, 60],
			[210, 135, 105],
			[225, 150, 105],
			[225, 135, 105],
			[210, 120, 90],
			[195, 105, 75],
			[195, 120, 75],
			[195, 90, 60],
			[180, 90, 45],
			[150, 75, 30],
			[135, 75, 45],
			[240, 150, 105],
			[240, 135, 105],
			[210, 105, 75],
			[180, 90, 60],
			[195, 105, 60],
			[150, 75, 60],
			[135, 90, 45],
			[255, 150, 105],
			[240, 150, 120],
			[240, 165, 120],
			[240, 165, 135],
			[225, 120, 90],
			[180, 75, 45],
			[180, 75, 30],
			[165, 75, 30],
			[225, 150, 135],
			[255, 165, 120],
			[240, 180, 150],
			[255, 195, 165],
			[240, 150, 135],
			[210, 105, 60],
			[195, 90, 45],
			[150, 60, 15],
			[150, 60, 30],
			[45, 30, 45],
			[225, 165, 135],
			[255, 150, 120],
			[255, 210, 180],
			[225, 120, 75],
			[165, 90, 75],
			[195, 120, 105],
			[255, 210, 195],
			[255, 195, 180],
			[255, 180, 165],
			[240, 120, 90],
			[180, 105, 105],
			[120, 90, 75],
			[240, 135, 90],
			[255, 135, 105],
			[255, 180, 150],
			[195, 120, 120],
			[135, 120, 90],
			[255, 165, 135],
			[240, 180, 165],
			[165, 60, 30],
			[150, 60, 45],
			[180, 105, 90],
			[240, 165, 150],
			[255, 165, 150],
			[165, 75, 60],
			[165, 105, 60],
			[120, 105, 75],
			[240, 135, 120],
			[240, 120, 105],
			[195, 90, 75],
			[135, 45, 30],
			[255, 135, 90],
			[210, 120, 75],
			[225, 150, 120],
			[225, 135, 90],
			[240, 120, 75],
			[135, 45, 15],
			[75, 45, 30],
			[150, 120, 90],
			[240, 135, 75],
			[180, 75, 60],
			[150, 105, 105],
			[210, 105, 90],
			[135, 75, 30],
			[120, 90, 60],
			[255, 150, 135],
			[225, 120, 105],
			[120, 45, 15],
			[120, 60, 15],
			[210, 135, 90],
			[165, 60, 45],
			[105, 45, 0],
			[135, 105, 75],
			[180, 90, 75],
			[105, 60, 15],
			[225, 105, 75],
			[210, 90, 75],
			[210, 90, 60],
			[195, 75, 45],
			[105, 30, 0],
			[120, 75, 45],
			[120, 60, 30],
			[120, 30, 15],
			[120, 30, 0],
			[135, 30, 0],
			[150, 45, 15],
			[165, 45, 15],
			[165, 60, 15],
			[105, 30, 15],
			[105, 45, 15],
			[75, 60, 30],
			[105, 15, 0],
			[105, 0, 0],
			[120, 0, 0],
			[120, 15, 0],
			[135, 15, 0],
			[150, 30, 0],
			[90, 0, 0],
			[75, 0, 0],
			[75, 15, 0],
			[90, 15, 0],
			[90, 30, 0],
			[120, 60, 45],
			[45, 30, 15],
			[150, 45, 0],
			[165, 30, 0],
			[165, 45, 0],
			[180, 60, 30],
			[135, 45, 0],
			[120, 45, 0],
			[225, 165, 165],
			[105, 75, 45],
			[90, 30, 15],
			[120, 45, 30],
			[60, 30, 15],
			[180, 45, 0],
			[45, 0, 0],
			[90, 30, 30],
			[150, 45, 30],
			[120, 45, 45],
			[105, 60, 45],
			[30, 0, 0],
			[180, 60, 45],
			[195, 15, 0],
			[225, 135, 75],
			[105, 30, 30],
			[105, 15, 15],
			[60, 0, 0],
			[135, 30, 30],
			[180, 0, 0],
			[210, 0, 0],
			[195, 105, 90],
			[120, 30, 30],
			[165, 0, 0],
			[120, 75, 60],
			[210, 150, 105],
			[240, 150, 90],
			[135, 60, 45],
			[135, 60, 15],
			[165, 15, 0],
			[195, 0, 0],
			[195, 75, 30],
			[195, 60, 30],
			[180, 15, 0],
			[255, 150, 90],
			[165, 30, 15],
			[165, 45, 30],
			[105, 45, 30],
			[195, 75, 60],
			[90, 45, 15],
			[150, 30, 15],
			[180, 45, 30],
			[225, 105, 60],
			[225, 105, 90],
			[150, 15, 0],
			[210, 90, 45],
			[210, 120, 105],
			[90, 60, 45],
			[225, 135, 120],
			[225, 120, 60],
			[90, 45, 30],
			[135, 30, 15],
			[195, 105, 45],
			[75, 30, 15],
			[45, 15, 0],
			[180, 60, 15],
			[60, 15, 15],
			[195, 90, 30],
			[180, 75, 15],
			[165, 60, 0],
			[150, 75, 15],
			[105, 60, 60],
			[150, 60, 0],
			[180, 90, 30],
			[165, 75, 15],
			[180, 105, 45],
			[165, 90, 30],
			[180, 120, 60],
			[165, 105, 45],
			[150, 90, 30],
			[135, 60, 0],
			[120, 90, 105],
			[165, 150, 150],
			[75, 30, 0],
			[75, 30, 30],
			[135, 105, 120],
			[60, 15, 0],
			[135, 120, 135],
			[165, 135, 150],
			[90, 60, 75],
			[60, 60, 60],
			[75, 60, 75],
			[150, 135, 135],
			[255, 0, 0],
			[240, 0, 0],
			[225, 45, 15],
			[135, 75, 15],
			[105, 90, 105],
			[60, 45, 60],
			[195, 60, 15],
			[60, 30, 0],
			[75, 15, 15],
			[225, 30, 0],
			[120, 60, 0],
			[45, 30, 0],
			[225, 0, 0],
			[225, 15, 0],
			[195, 165, 180],
			[90, 75, 90],
			[150, 0, 0],
			[195, 30, 0],
			[210, 15, 15],
			[180, 150, 165],
			[150, 120, 135],
			[75, 75, 75],
			[75, 45, 15],
			[195, 45, 0],
			[210, 30, 30],
			[225, 60, 30],
			[210, 75, 30],
			[240, 45, 15],
			[210, 30, 15],
			[225, 75, 30],
			[180, 30, 0],
			[210, 15, 0],
			[105, 90, 60],
			[240, 210, 165],
			[225, 105, 45],
			[75, 45, 60],
			[60, 60, 30],
			[165, 120, 75],
			[60, 45, 15],
			[210, 105, 45],
			[225, 90, 45],
			[210, 30, 0],
			[240, 60, 30],
			[240, 45, 30],
			[210, 45, 15],
			[195, 150, 105],
			[105, 45, 45],
			[240, 15, 0],
			[240, 75, 45],
			[150, 45, 45],
			[150, 105, 60],
			[255, 75, 60],
			[45, 45, 15],
			[90, 90, 75],
			[180, 60, 0],
		],
		"rows": [
			[[0, 52], 1, [0, 47]],
			[[0, 51], 2, [0, 4], 1, [0, 43]],
			[[0, 46], 3, 0, 0, 4, 1, 5, 6, 6, 1, 7, 2, 2, 4, 4, [0, 40]],
			[[0, 46], 5, 1, 0, 4, 8, 9, 10, 10, 8, 11, 12, 13, 11, 5, [0, 40]],
			[
				[0, 42],
				4,
				[0, 3],
				14,
				6,
				2,
				5,
				9,
				15,
				16,
				17,
				16,
				18,
				16,
				19,
				14,
				20,
				0,
				1,
				1,
				[0, 37],
			],
			[
				[0, 40],
				11,
				6,
				21,
				2,
				3,
				22,
				16,
				9,
				8,
				16,
				17,
				23,
				23,
				24,
				25,
				26,
				23,
				27,
				27,
				9,
				0,
				28,
				14,
				[0, 37],
			],
			[
				[0, 37],
				7,
				0,
				0,
				6,
				19,
				5,
				11,
				29,
				9,
				30,
				27,
				15,
				24,
				23,
				31,
				23,
				24,
				32,
				31,
				32,
				33,
				24,
				27,
				11,
				5,
				34,
				9,
				35,
				6,
				[0, 4],
				11,
				28,
				[0, 28],
			],
			[
				[0, 31],
				4,
				[0, 3],
				2,
				36,
				12,
				6,
				13,
				18,
				18,
				27,
				13,
				19,
				16,
				24,
				31,
				33,
				32,
				32,
				37,
				31,
				24,
				32,
				38,
				38,
				39,
				32,
				26,
				34,
				10,
				34,
				23,
				13,
				40,
				28,
				41,
				2,
				10,
				42,
				2,
				[0, 28],
			],
			[
				[0, 31],
				7,
				0,
				0,
				1,
				12,
				9,
				19,
				19,
				10,
				24,
				17,
				43,
				24,
				31,
				44,
				31,
				38,
				[33, 4],
				37,
				37,
				33,
				[39, 4],
				33,
				44,
				19,
				16,
				31,
				23,
				27,
				45,
				17,
				16,
				14,
				9,
				6,
				[0, 28],
			],
			[
				[0, 27],
				4,
				0,
				7,
				0,
				11,
				21,
				11,
				11,
				14,
				43,
				26,
				17,
				43,
				38,
				31,
				31,
				33,
				46,
				[38, 7],
				33,
				38,
				[39, 3],
				38,
				39,
				38,
				47,
				37,
				17,
				23,
				31,
				44,
				27,
				27,
				9,
				16,
				15,
				48,
				0,
				1,
				1,
				[0, 25],
			],
			[
				[0, 27],
				4,
				11,
				13,
				8,
				16,
				9,
				16,
				18,
				49,
				26,
				39,
				16,
				50,
				46,
				39,
				38,
				39,
				51,
				46,
				52,
				38,
				52,
				38,
				38,
				52,
				38,
				38,
				39,
				39,
				46,
				38,
				47,
				46,
				47,
				47,
				33,
				32,
				37,
				31,
				17,
				27,
				23,
				31,
				31,
				16,
				53,
				8,
				1,
				[0, 25],
			],
			[
				[0, 25],
				21,
				11,
				5,
				8,
				54,
				27,
				37,
				27,
				26,
				31,
				33,
				49,
				32,
				55,
				24,
				38,
				46,
				47,
				47,
				51,
				46,
				38,
				[55, 3],
				52,
				52,
				33,
				56,
				47,
				39,
				[47, 3],
				46,
				47,
				46,
				47,
				38,
				33,
				37,
				31,
				31,
				32,
				31,
				26,
				16,
				16,
				10,
				[0, 26],
			],
			[
				[0, 26],
				14,
				18,
				14,
				16,
				37,
				33,
				38,
				38,
				24,
				38,
				24,
				37,
				38,
				56,
				52,
				46,
				57,
				38,
				46,
				47,
				31,
				56,
				37,
				37,
				55,
				52,
				55,
				37,
				52,
				[33, 3],
				38,
				39,
				39,
				46,
				47,
				46,
				38,
				55,
				33,
				32,
				33,
				24,
				16,
				32,
				27,
				34,
				12,
				5,
				6,
				[0, 23],
			],
			[
				[0, 25],
				28,
				58,
				26,
				59,
				43,
				38,
				33,
				39,
				60,
				61,
				38,
				57,
				24,
				38,
				55,
				46,
				55,
				56,
				37,
				46,
				33,
				24,
				56,
				24,
				38,
				31,
				37,
				62,
				55,
				33,
				55,
				37,
				31,
				33,
				47,
				39,
				33,
				52,
				46,
				38,
				55,
				38,
				33,
				33,
				31,
				17,
				23,
				27,
				27,
				63,
				14,
				1,
				0,
				7,
				[0, 21],
			],
			[
				[0, 25],
				1,
				0,
				64,
				5,
				49,
				39,
				38,
				47,
				65,
				60,
				38,
				46,
				66,
				57,
				52,
				52,
				67,
				68,
				69,
				46,
				55,
				38,
				56,
				70,
				62,
				55,
				56,
				56,
				31,
				31,
				37,
				55,
				55,
				37,
				39,
				38,
				38,
				33,
				52,
				47,
				38,
				38,
				[33, 3],
				44,
				31,
				26,
				27,
				8,
				6,
				13,
				20,
				13,
				[0, 21],
			],
			[
				[0, 23],
				4,
				6,
				8,
				1,
				71,
				34,
				34,
				[46, 3],
				60,
				51,
				46,
				57,
				66,
				66,
				55,
				52,
				62,
				72,
				66,
				55,
				55,
				31,
				55,
				73,
				74,
				68,
				68,
				62,
				62,
				56,
				37,
				56,
				33,
				55,
				37,
				33,
				52,
				38,
				33,
				46,
				38,
				33,
				37,
				33,
				33,
				37,
				37,
				23,
				44,
				17,
				27,
				42,
				34,
				13,
				1,
				[0, 20],
			],
			[
				[0, 24],
				14,
				5,
				59,
				23,
				44,
				19,
				38,
				[46, 4],
				52,
				55,
				55,
				75,
				55,
				69,
				76,
				73,
				56,
				62,
				77,
				55,
				55,
				68,
				74,
				62,
				76,
				78,
				74,
				62,
				[56, 3],
				55,
				37,
				31,
				33,
				55,
				33,
				47,
				33,
				33,
				37,
				39,
				38,
				37,
				37,
				32,
				26,
				34,
				53,
				27,
				9,
				7,
				[0, 21],
			],
			[
				[0, 21],
				1,
				2,
				2,
				8,
				16,
				42,
				79,
				37,
				19,
				17,
				46,
				57,
				52,
				52,
				55,
				56,
				55,
				75,
				69,
				75,
				70,
				76,
				76,
				62,
				56,
				38,
				56,
				56,
				55,
				56,
				74,
				80,
				76,
				70,
				75,
				[62, 4],
				24,
				55,
				56,
				37,
				31,
				33,
				55,
				33,
				33,
				38,
				[37, 3],
				19,
				53,
				43,
				27,
				63,
				0,
				4,
				[0, 20],
			],
			[
				[0, 22],
				2,
				13,
				45,
				43,
				43,
				37,
				52,
				31,
				67,
				81,
				[52, 3],
				69,
				69,
				55,
				81,
				56,
				56,
				76,
				68,
				82,
				83,
				75,
				55,
				62,
				56,
				56,
				75,
				80,
				84,
				72,
				83,
				85,
				78,
				78,
				72,
				78,
				24,
				69,
				78,
				56,
				62,
				31,
				24,
				[37, 5],
				31,
				17,
				30,
				62,
				34,
				0,
				11,
				4,
				2,
				[0, 19],
			],
			[
				[0, 22],
				86,
				11,
				42,
				17,
				37,
				62,
				55,
				38,
				56,
				75,
				[55, 4],
				67,
				75,
				81,
				56,
				75,
				75,
				87,
				73,
				73,
				88,
				69,
				78,
				70,
				70,
				62,
				72,
				84,
				80,
				75,
				74,
				85,
				89,
				90,
				72,
				85,
				75,
				85,
				[62, 3],
				56,
				37,
				56,
				37,
				55,
				37,
				31,
				17,
				24,
				44,
				35,
				5,
				5,
				36,
				11,
				[0, 19],
			],
			[
				[0, 21],
				4,
				4,
				91,
				53,
				17,
				37,
				55,
				69,
				52,
				66,
				75,
				62,
				81,
				56,
				81,
				75,
				68,
				81,
				69,
				70,
				78,
				87,
				92,
				93,
				94,
				78,
				83,
				82,
				82,
				88,
				82,
				95,
				96,
				78,
				82,
				74,
				97,
				72,
				97,
				74,
				89,
				85,
				85,
				98,
				62,
				56,
				62,
				56,
				56,
				62,
				56,
				31,
				44,
				43,
				44,
				9,
				16,
				12,
				8,
				11,
				21,
				99,
				[0, 17],
			],
			[
				[0, 20],
				7,
				2,
				40,
				19,
				37,
				43,
				100,
				38,
				66,
				66,
				101,
				75,
				78,
				62,
				68,
				68,
				87,
				75,
				78,
				77,
				74,
				83,
				76,
				83,
				102,
				103,
				102,
				104,
				102,
				105,
				95,
				82,
				95,
				105,
				100,
				76,
				106,
				107,
				96,
				72,
				80,
				90,
				72,
				89,
				85,
				56,
				43,
				43,
				62,
				67,
				62,
				24,
				37,
				56,
				24,
				43,
				108,
				43,
				26,
				34,
				8,
				109,
				1,
				[0, 17],
			],
			[
				[0, 20],
				11,
				11,
				9,
				45,
				17,
				69,
				55,
				85,
				55,
				55,
				66,
				75,
				70,
				83,
				83,
				110,
				87,
				87,
				111,
				87,
				83,
				82,
				82,
				111,
				112,
				113,
				103,
				[102, 2],
				84,
				84,
				73,
				95,
				88,
				97,
				88,
				106,
				96,
				106,
				88,
				97,
				97,
				72,
				72,
				85,
				62,
				85,
				85,
				98,
				98,
				62,
				[24, 3],
				56,
				62,
				62,
				17,
				18,
				63,
				4,
				21,
				6,
				[0, 17],
			],
			[
				[0, 21],
				12,
				53,
				114,
				107,
				43,
				66,
				66,
				52,
				55,
				81,
				87,
				83,
				115,
				116,
				[117, 3],
				[115, 2],
				118,
				119,
				102,
				120,
				119,
				121,
				122,
				113,
				93,
				123,
				93,
				84,
				105,
				73,
				[124, 4],
				97,
				106,
				[105, 2],
				97,
				80,
				70,
				76,
				85,
				85,
				98,
				17,
				62,
				62,
				56,
				44,
				24,
				56,
				43,
				19,
				12,
				22,
				29,
				8,
				1,
				[0, 17],
			],
			[
				[0, 20],
				58,
				58,
				34,
				43,
				56,
				24,
				56,
				55,
				81,
				81,
				75,
				68,
				110,
				117,
				[125, 2],
				[126, 2],
				117,
				[115, 2],
				118,
				115,
				117,
				118,
				127,
				121,
				128,
				[122, 2],
				129,
				128,
				94,
				94,
				105,
				130,
				84,
				[124, 3],
				[105, 2],
				131,
				73,
				83,
				72,
				74,
				70,
				[62, 3],
				98,
				24,
				43,
				43,
				56,
				62,
				45,
				19,
				18,
				5,
				99,
				[0, 18],
			],
			[
				[0, 20],
				8,
				114,
				40,
				34,
				[55, 3],
				66,
				66,
				56,
				78,
				76,
				110,
				126,
				125,
				[132, 2],
				133,
				134,
				[135, 5],
				133,
				136,
				127,
				121,
				137,
				122,
				138,
				122,
				103,
				139,
				[123, 3],
				95,
				95,
				84,
				84,
				124,
				105,
				[82, 4],
				72,
				89,
				62,
				67,
				[62, 3],
				43,
				24,
				62,
				17,
				19,
				13,
				1,
				[0, 19],
			],
			[
				[0, 20],
				5,
				50,
				19,
				43,
				56,
				55,
				[66, 3],
				81,
				75,
				140,
				133,
				[125, 2],
				[132, 2],
				141,
				142,
				143,
				[101, 3],
				142,
				144,
				126,
				136,
				145,
				121,
				146,
				122,
				138,
				[139, 3],
				147,
				[148, 2],
				123,
				84,
				84,
				105,
				88,
				[82, 3],
				73,
				88,
				89,
				85,
				67,
				56,
				[62, 3],
				24,
				24,
				43,
				17,
				44,
				40,
				[0, 19],
			],
			[
				[0, 20],
				149,
				42,
				37,
				[107, 2],
				85,
				69,
				66,
				55,
				56,
				77,
				150,
				133,
				125,
				126,
				132,
				151,
				135,
				143,
				152,
				[52, 3],
				101,
				144,
				126,
				136,
				153,
				127,
				145,
				121,
				122,
				137,
				138,
				[139, 2],
				[123, 2],
				84,
				84,
				130,
				154,
				74,
				74,
				155,
				82,
				73,
				154,
				89,
				76,
				[85, 3],
				62,
				43,
				24,
				37,
				56,
				43,
				45,
				1,
				[0, 19],
			],
			[
				[0, 21],
				109,
				18,
				69,
				55,
				[66, 3],
				69,
				56,
				81,
				135,
				125,
				[126, 3],
				151,
				142,
				143,
				156,
				152,
				101,
				157,
				158,
				133,
				126,
				159,
				[153, 3],
				145,
				121,
				146,
				122,
				[137, 2],
				113,
				139,
				113,
				130,
				154,
				160,
				74,
				76,
				83,
				82,
				73,
				154,
				82,
				68,
				56,
				85,
				43,
				62,
				44,
				44,
				56,
				62,
				114,
				161,
				2,
				5,
				6,
				[0, 17],
			],
			[
				[0, 20],
				4,
				29,
				45,
				90,
				98,
				69,
				66,
				55,
				75,
				56,
				55,
				135,
				126,
				[162, 2],
				163,
				151,
				164,
				157,
				152,
				52,
				[157, 2],
				164,
				133,
				126,
				136,
				[153, 3],
				127,
				[121, 2],
				122,
				137,
				113,
				139,
				[148, 2],
				84,
				154,
				160,
				165,
				83,
				[155, 2],
				73,
				73,
				72,
				62,
				33,
				55,
				31,
				56,
				37,
				55,
				55,
				56,
				43,
				25,
				27,
				19,
				11,
				[0, 17],
			],
			[
				[0, 19],
				6,
				58,
				10,
				166,
				75,
				81,
				69,
				69,
				75,
				77,
				75,
				142,
				144,
				[162, 3],
				163,
				132,
				167,
				164,
				158,
				168,
				143,
				142,
				144,
				126,
				[136, 2],
				[153, 2],
				[127, 2],
				[121, 2],
				128,
				137,
				113,
				169,
				[148, 2],
				170,
				130,
				154,
				171,
				82,
				76,
				155,
				73,
				73,
				74,
				85,
				31,
				33,
				52,
				38,
				38,
				46,
				38,
				38,
				33,
				24,
				15,
				10,
				5,
				6,
				[0, 16],
			],
			[
				[0, 19],
				6,
				10,
				5,
				42,
				98,
				81,
				55,
				55,
				81,
				75,
				150,
				172,
				133,
				[162, 4],
				163,
				133,
				135,
				167,
				164,
				173,
				144,
				133,
				126,
				[136, 2],
				153,
				[127, 3],
				121,
				[128, 3],
				113,
				[148, 4],
				170,
				174,
				154,
				155,
				76,
				155,
				93,
				175,
				74,
				62,
				62,
				24,
				55,
				[46, 3],
				47,
				39,
				38,
				37,
				24,
				27,
				9,
				6,
				1,
				[0, 15],
			],
			[
				[0, 19],
				6,
				176,
				17,
				43,
				67,
				75,
				75,
				55,
				81,
				75,
				77,
				150,
				125,
				[162, 4],
				126,
				125,
				133,
				[135, 3],
				133,
				177,
				178,
				[136, 2],
				153,
				[127, 2],
				119,
				179,
				[128, 2],
				93,
				174,
				84,
				[148, 2],
				180,
				95,
				84,
				93,
				171,
				155,
				171,
				[105, 2],
				88,
				76,
				62,
				62,
				24,
				37,
				55,
				38,
				33,
				47,
				33,
				23,
				17,
				27,
				34,
				9,
				6,
				[0, 15],
			],
			[
				[0, 19],
				4,
				6,
				161,
				43,
				24,
				75,
				81,
				52,
				81,
				77,
				81,
				150,
				117,
				[162, 2],
				181,
				162,
				126,
				163,
				151,
				133,
				[144, 2],
				133,
				126,
				[136, 2],
				118,
				182,
				127,
				[119, 3],
				128,
				93,
				93,
				174,
				170,
				148,
				95,
				180,
				95,
				95,
				130,
				154,
				[171, 2],
				94,
				105,
				88,
				76,
				[85, 3],
				[62, 3],
				56,
				31,
				24,
				37,
				24,
				62,
				34,
				6,
				[0, 16],
			],
			[
				[0, 18],
				4,
				6,
				29,
				40,
				161,
				98,
				56,
				66,
				55,
				55,
				77,
				150,
				183,
				184,
				185,
				162,
				181,
				[163, 2],
				126,
				133,
				[135, 2],
				144,
				133,
				177,
				117,
				[136, 2],
				118,
				182,
				[119, 3],
				128,
				93,
				174,
				113,
				170,
				95,
				180,
				[186, 2],
				95,
				84,
				154,
				73,
				93,
				93,
				154,
				74,
				85,
				[62, 4],
				98,
				62,
				24,
				56,
				56,
				31,
				43,
				17,
				9,
				6,
				[0, 16],
			],
			[
				[0, 18],
				99,
				187,
				114,
				188,
				45,
				89,
				69,
				66,
				55,
				81,
				87,
				87,
				183,
				184,
				159,
				162,
				163,
				[126, 2],
				151,
				[135, 4],
				133,
				177,
				[136, 3],
				[118, 2],
				127,
				[119, 2],
				[128, 2],
				174,
				113,
				148,
				95,
				95,
				[186, 2],
				95,
				95,
				130,
				171,
				103,
				[105, 2],
				74,
				56,
				62,
				17,
				85,
				85,
				43,
				62,
				62,
				24,
				56,
				37,
				37,
				43,
				34,
				161,
				11,
				[0, 15],
			],
			[
				[0, 18],
				1,
				22,
				35,
				107,
				43,
				56,
				37,
				69,
				69,
				75,
				87,
				150,
				183,
				153,
				189,
				[162, 2],
				163,
				132,
				151,
				[167, 2],
				[135, 2],
				[133, 2],
				117,
				[136, 2],
				[118, 2],
				[127, 2],
				119,
				179,
				190,
				113,
				[170, 2],
				148,
				[95, 4],
				84,
				95,
				95,
				123,
				84,
				80,
				89,
				191,
				43,
				85,
				89,
				[85, 3],
				62,
				24,
				56,
				37,
				55,
				24,
				16,
				59,
				5,
				2,
				[0, 14],
			],
			[
				[0, 20],
				6,
				161,
				17,
				43,
				24,
				56,
				75,
				87,
				[150, 2],
				117,
				184,
				189,
				[162, 2],
				[163, 2],
				151,
				[135, 3],
				[133, 2],
				126,
				117,
				136,
				[118, 2],
				136,
				192,
				127,
				119,
				179,
				128,
				113,
				170,
				[148, 3],
				[95, 6],
				193,
				84,
				80,
				88,
				89,
				107,
				89,
				85,
				17,
				85,
				[62, 3],
				55,
				55,
				56,
				19,
				9,
				10,
				11,
				[0, 15],
			],
			[
				[0, 21],
				29,
				194,
				45,
				67,
				67,
				68,
				87,
				83,
				115,
				184,
				[162, 4],
				[163, 2],
				151,
				195,
				[167, 2],
				133,
				126,
				196,
				136,
				118,
				127,
				[136, 2],
				118,
				127,
				119,
				179,
				128,
				113,
				169,
				[148, 4],
				[95, 5],
				197,
				198,
				124,
				97,
				[107, 4],
				19,
				89,
				85,
				62,
				56,
				[55, 3],
				24,
				42,
				29,
				4,
				[0, 15],
			],
			[
				[0, 20],
				6,
				40,
				45,
				[98, 3],
				78,
				78,
				83,
				199,
				153,
				[162, 3],
				181,
				[163, 4],
				151,
				133,
				[126, 2],
				117,
				136,
				[127, 2],
				118,
				136,
				118,
				127,
				119,
				179,
				128,
				174,
				200,
				[148, 5],
				[95, 4],
				[201, 2],
				198,
				106,
				107,
				188,
				107,
				202,
				89,
				85,
				98,
				56,
				55,
				52,
				38,
				24,
				19,
				29,
				2,
				1,
				[0, 15],
			],
			[
				[0, 21],
				4,
				29,
				187,
				58,
				70,
				70,
				73,
				92,
				182,
				[162, 4],
				181,
				[162, 4],
				[126, 2],
				196,
				[136, 2],
				[127, 4],
				136,
				127,
				119,
				[179, 2],
				203,
				174,
				170,
				148,
				[95, 7],
				198,
				[201, 3],
				204,
				106,
				107,
				[89, 3],
				85,
				85,
				56,
				37,
				55,
				55,
				44,
				45,
				5,
				6,
				[0, 16],
			],
			[
				[0, 23],
				29,
				161,
				70,
				70,
				72,
				102,
				153,
				[162, 5],
				126,
				162,
				[159, 3],
				[136, 2],
				205,
				[127, 2],
				121,
				[179, 2],
				127,
				206,
				179,
				121,
				[128, 2],
				84,
				84,
				170,
				[95, 4],
				84,
				84,
				95,
				197,
				[201, 5],
				96,
				97,
				107,
				19,
				85,
				85,
				62,
				56,
				56,
				24,
				62,
				16,
				10,
				6,
				[0, 16],
			],
			[
				[0, 23],
				36,
				42,
				100,
				78,
				82,
				118,
				162,
				189,
				162,
				153,
				159,
				162,
				[126, 2],
				159,
				[136, 2],
				127,
				[207, 2],
				121,
				208,
				121,
				[128, 2],
				127,
				207,
				128,
				190,
				[174, 2],
				130,
				174,
				84,
				170,
				[84, 4],
				130,
				84,
				197,
				201,
				[209, 2],
				[201, 3],
				210,
				72,
				107,
				89,
				85,
				98,
				56,
				56,
				24,
				62,
				19,
				53,
				11,
				2,
				[0, 15],
			],
			[
				[0, 22],
				1,
				187,
				12,
				85,
				78,
				83,
				184,
				189,
				[153, 3],
				146,
				122,
				119,
				179,
				[128, 2],
				[113, 3],
				[137, 2],
				138,
				[137, 3],
				121,
				208,
				139,
				[148, 2],
				170,
				84,
				84,
				[124, 2],
				84,
				84,
				93,
				93,
				73,
				93,
				211,
				201,
				[209, 3],
				[201, 2],
				204,
				106,
				188,
				107,
				89,
				98,
				62,
				24,
				56,
				24,
				43,
				9,
				5,
				7,
				[0, 15],
			],
			[
				[0, 22],
				1,
				161,
				100,
				78,
				78,
				82,
				184,
				136,
				[153, 2],
				121,
				137,
				148,
				186,
				180,
				197,
				212,
				[213, 2],
				214,
				[215, 2],
				216,
				[137, 2],
				113,
				137,
				138,
				217,
				[186, 2],
				212,
				[218, 2],
				219,
				197,
				211,
				[198, 2],
				124,
				105,
				93,
				124,
				201,
				[209, 3],
				[201, 2],
				204,
				106,
				89,
				202,
				107,
				89,
				43,
				62,
				89,
				161,
				13,
				11,
				2,
				2,
				[0, 15],
			],
			[
				[0, 22],
				99,
				220,
				89,
				75,
				83,
				111,
				184,
				[153, 2],
				145,
				146,
				139,
				148,
				186,
				213,
				221,
				222,
				223,
				224,
				225,
				[226, 2],
				216,
				138,
				137,
				113,
				137,
				169,
				215,
				214,
				213,
				221,
				227,
				[228, 2],
				[229, 2],
				230,
				[231, 2],
				219,
				84,
				130,
				197,
				[209, 4],
				201,
				198,
				232,
				188,
				90,
				89,
				43,
				56,
				56,
				15,
				45,
				19,
				18,
				53,
				5,
				2,
				[0, 14],
			],
			[
				[0, 23],
				233,
				90,
				150,
				83,
				118,
				162,
				189,
				153,
				129,
				[122, 2],
				113,
				[169, 3],
				216,
				[234, 2],
				235,
				[226, 2],
				236,
				237,
				[137, 2],
				139,
				215,
				238,
				213,
				209,
				[213, 2],
				[209, 2],
				212,
				[197, 2],
				219,
				[209, 2],
				219,
				95,
				198,
				[201, 2],
				239,
				[197, 3],
				106,
				89,
				89,
				85,
				85,
				77,
				240,
				55,
				62,
				45,
				29,
				109,
				11,
				[0, 15],
			],
			[
				[0, 23],
				109,
				241,
				83,
				111,
				199,
				[162, 2],
				153,
				145,
				146,
				208,
				237,
				215,
				186,
				218,
				230,
				228,
				221,
				214,
				234,
				[226, 2],
				138,
				129,
				121,
				113,
				186,
				239,
				213,
				[209, 2],
				221,
				227,
				229,
				[242, 2],
				219,
				243,
				218,
				[209, 2],
				197,
				201,
				209,
				201,
				197,
				198,
				95,
				95,
				105,
				70,
				62,
				85,
				62,
				155,
				179,
				78,
				62,
				17,
				6,
				0,
				4,
				[0, 15],
			],
			[
				[0, 23],
				4,
				244,
				83,
				111,
				184,
				[162, 2],
				153,
				145,
				146,
				245,
				225,
				223,
				218,
				246,
				2,
				40,
				247,
				180,
				215,
				248,
				234,
				146,
				184,
				127,
				113,
				238,
				239,
				[197, 2],
				213,
				224,
				249,
				250,
				35,
				21,
				251,
				246,
				229,
				[209, 3],
				[201, 2],
				239,
				198,
				95,
				[193, 2],
				105,
				72,
				98,
				62,
				74,
				252,
				253,
				111,
				85,
				27,
				49,
				13,
				28,
				[0, 15],
			],
			[
				[0, 24],
				58,
				87,
				111,
				254,
				[189, 2],
				162,
				185,
				145,
				208,
				121,
				252,
				170,
				255,
				227,
				256,
				180,
				248,
				169,
				200,
				217,
				136,
				133,
				118,
				137,
				238,
				239,
				[197, 3],
				248,
				170,
				96,
				228,
				[257, 2],
				247,
				230,
				227,
				230,
				209,
				[201, 2],
				239,
				198,
				95,
				193,
				84,
				175,
				72,
				70,
				85,
				258,
				259,
				260,
				102,
				17,
				16,
				34,
				12,
				[0, 16],
			],
			[
				[0, 22],
				1,
				6,
				90,
				87,
				119,
				153,
				[189, 2],
				162,
				126,
				162,
				125,
				133,
				117,
				261,
				203,
				[200, 4],
				113,
				200,
				121,
				125,
				133,
				118,
				137,
				186,
				[239, 2],
				197,
				95,
				[170, 2],
				248,
				180,
				[262, 2],
				197,
				212,
				[209, 2],
				201,
				[239, 3],
				95,
				124,
				95,
				193,
				73,
				82,
				70,
				171,
				223,
				263,
				260,
				190,
				58,
				2,
				2,
				5,
				11,
				[0, 15],
			],
			[
				[0, 22],
				2,
				1,
				264,
				265,
				112,
				153,
				[189, 2],
				266,
				151,
				134,
				162,
				[136, 2],
				127,
				121,
				252,
				[237, 2],
				169,
				137,
				121,
				126,
				167,
				133,
				127,
				169,
				215,
				[239, 2],
				197,
				186,
				[148, 3],
				[170, 2],
				[267, 2],
				95,
				197,
				209,
				201,
				[239, 2],
				197,
				[95, 3],
				268,
				105,
				82,
				72,
				130,
				223,
				269,
				270,
				171,
				13,
				6,
				[0, 18],
			],
			[
				[0, 24],
				244,
				92,
				122,
				153,
				185,
				162,
				132,
				[125, 2],
				126,
				205,
				271,
				272,
				[237, 3],
				137,
				121,
				127,
				162,
				133,
				135,
				117,
				121,
				169,
				215,
				238,
				[239, 2],
				186,
				[170, 2],
				148,
				215,
				180,
				148,
				95,
				186,
				[239, 2],
				197,
				95,
				95,
				148,
				170,
				95,
				95,
				268,
				84,
				175,
				82,
				148,
				214,
				235,
				273,
				155,
				19,
				11,
				[0, 18],
			],
			[
				[0, 23],
				1,
				251,
				124,
				122,
				153,
				185,
				162,
				274,
				132,
				125,
				126,
				159,
				205,
				127,
				[207, 2],
				127,
				118,
				136,
				[126, 2],
				151,
				135,
				136,
				121,
				148,
				215,
				186,
				[239, 2],
				238,
				[148, 2],
				170,
				[148, 3],
				[186, 3],
				95,
				84,
				93,
				[174, 2],
				84,
				95,
				[268, 2],
				95,
				84,
				93,
				214,
				226,
				275,
				276,
				85,
				12,
				48,
				[0, 18],
			],
			[
				[0, 25],
				277,
				145,
				153,
				185,
				162,
				181,
				132,
				133,
				167,
				151,
				[133, 4],
				[144, 2],
				133,
				[163, 2],
				195,
				135,
				136,
				121,
				215,
				[186, 2],
				239,
				213,
				238,
				215,
				[148, 3],
				169,
				[148, 2],
				169,
				[148, 4],
				113,
				93,
				93,
				84,
				268,
				239,
				268,
				130,
				174,
				[226, 2],
				216,
				154,
				19,
				114,
				6,
				[0, 18],
			],
			[
				[0, 25],
				277,
				205,
				153,
				185,
				189,
				181,
				163,
				132,
				[167, 6],
				173,
				167,
				151,
				[126, 2],
				167,
				173,
				196,
				278,
				215,
				213,
				186,
				[239, 2],
				238,
				148,
				[169, 7],
				148,
				[215, 2],
				[148, 2],
				113,
				93,
				84,
				268,
				197,
				84,
				[203, 2],
				226,
				235,
				216,
				171,
				34,
				19,
				233,
				[0, 18],
			],
			[
				[0, 25],
				279,
				[153, 2],
				[185, 2],
				[181, 2],
				132,
				167,
				[173, 3],
				[167, 3],
				151,
				126,
				[162, 2],
				151,
				144,
				136,
				278,
				186,
				213,
				[239, 2],
				238,
				186,
				[200, 2],
				[137, 2],
				[169, 5],
				148,
				147,
				268,
				95,
				84,
				93,
				93,
				123,
				84,
				93,
				111,
				261,
				280,
				275,
				281,
				78,
				62,
				89,
				11,
				1,
				[0, 17],
			],
			[
				[0, 25],
				277,
				205,
				153,
				[185, 2],
				181,
				[163, 2],
				133,
				167,
				164,
				173,
				195,
				177,
				126,
				205,
				282,
				162,
				125,
				167,
				144,
				283,
				137,
				186,
				209,
				201,
				[239, 2],
				148,
				113,
				[137, 4],
				138,
				237,
				137,
				[113, 2],
				148,
				[268, 2],
				148,
				113,
				93,
				84,
				84,
				128,
				102,
				179,
				284,
				216,
				237,
				70,
				45,
				233,
				11,
				22,
				[0, 17],
			],
			[
				[0, 25],
				211,
				127,
				153,
				[185, 2],
				181,
				[163, 2],
				126,
				144,
				135,
				[178, 2],
				159,
				205,
				285,
				153,
				[125, 2],
				173,
				133,
				127,
				252,
				186,
				213,
				[209, 2],
				239,
				95,
				113,
				137,
				[128, 2],
				[137, 4],
				113,
				93,
				174,
				148,
				268,
				84,
				113,
				93,
				84,
				84,
				93,
				102,
				119,
				286,
				128,
				190,
				89,
				45,
				287,
				2,
				[0, 18],
			],
			[
				[0, 25],
				211,
				127,
				153,
				[185, 2],
				[181, 3],
				126,
				151,
				126,
				283,
				205,
				127,
				207,
				271,
				[126, 3],
				177,
				118,
				179,
				113,
				186,
				213,
				209,
				239,
				201,
				197,
				169,
				137,
				[128, 3],
				[137, 2],
				[113, 2],
				[93, 3],
				84,
				123,
				93,
				128,
				84,
				84,
				103,
				128,
				261,
				288,
				118,
				286,
				75,
				98,
				13,
				[0, 19],
			],
			[
				[0, 25],
				124,
				127,
				289,
				[185, 2],
				[159, 3],
				[126, 3],
				136,
				207,
				146,
				271,
				208,
				[153, 3],
				145,
				208,
				137,
				148,
				186,
				[213, 5],
				215,
				[137, 2],
				[128, 3],
				137,
				169,
				148,
				113,
				[93, 3],
				84,
				103,
				93,
				103,
				123,
				84,
				93,
				203,
				261,
				[140, 2],
				89,
				6,
				11,
				2,
				[0, 18],
			],
			[
				[0, 25],
				211,
				145,
				289,
				[185, 5],
				[159, 2],
				136,
				127,
				207,
				[208, 3],
				272,
				216,
				146,
				138,
				217,
				234,
				238,
				213,
				[209, 2],
				[213, 3],
				214,
				113,
				137,
				[128, 3],
				113,
				148,
				215,
				148,
				84,
				84,
				[103, 3],
				93,
				103,
				[84, 3],
				102,
				288,
				286,
				155,
				264,
				22,
				[0, 20],
			],
			[
				[0, 25],
				290,
				145,
				289,
				[185, 6],
				[205, 2],
				127,
				121,
				137,
				127,
				177,
				283,
				275,
				[226, 2],
				214,
				213,
				209,
				221,
				218,
				[221, 3],
				213,
				186,
				148,
				[137, 3],
				190,
				113,
				148,
				248,
				186,
				268,
				[123, 2],
				84,
				113,
				93,
				103,
				123,
				84,
				84,
				93,
				192,
				133,
				111,
				287,
				[0, 21],
			],
			[
				[0, 25],
				241,
				[145, 2],
				[153, 4],
				[205, 3],
				145,
				121,
				137,
				127,
				177,
				133,
				144,
				127,
				137,
				291,
				224,
				[221, 2],
				[230, 2],
				[221, 3],
				212,
				180,
				148,
				113,
				[137, 2],
				113,
				200,
				[148, 2],
				186,
				197,
				95,
				95,
				148,
				123,
				93,
				103,
				[123, 2],
				84,
				103,
				252,
				208,
				119,
				175,
				48,
				[0, 20],
			],
			[
				[0, 25],
				73,
				[145, 2],
				[153, 2],
				[282, 4],
				207,
				121,
				208,
				121,
				136,
				[126, 2],
				177,
				127,
				128,
				148,
				213,
				212,
				221,
				230,
				[221, 4],
				212,
				243,
				170,
				113,
				[169, 3],
				148,
				147,
				268,
				[239, 3],
				197,
				186,
				148,
				113,
				103,
				123,
				148,
				123,
				113,
				248,
				280,
				80,
				[277, 2],
				[0, 20],
			],
			[
				[0, 25],
				219,
				292,
				[145, 2],
				[282, 3],
				207,
				285,
				[208, 2],
				137,
				[121, 2],
				[127, 3],
				128,
				169,
				215,
				213,
				243,
				212,
				209,
				221,
				209,
				230,
				[221, 2],
				243,
				180,
				[148, 2],
				169,
				[147, 2],
				186,
				238,
				239,
				213,
				[209, 2],
				239,
				[268, 2],
				103,
				123,
				84,
				148,
				139,
				102,
				130,
				293,
				294,
				279,
				[0, 20],
			],
			[
				[0, 25],
				209,
				93,
				[145, 3],
				[285, 3],
				271,
				[138, 3],
				137,
				139,
				[137, 2],
				139,
				[147, 2],
				238,
				213,
				197,
				239,
				209,
				221,
				[230, 4],
				221,
				209,
				213,
				238,
				[215, 2],
				[238, 3],
				239,
				213,
				[209, 2],
				239,
				[268, 2],
				84,
				123,
				[148, 2],
				123,
				261,
				210,
				294,
				187,
				244,
				[0, 20],
			],
			[
				[0, 25],
				246,
				139,
				[145, 2],
				[285, 2],
				146,
				271,
				295,
				236,
				[147, 3],
				238,
				[123, 2],
				139,
				147,
				238,
				186,
				[209, 2],
				239,
				213,
				209,
				[230, 2],
				[229, 3],
				[230, 2],
				209,
				213,
				[238, 3],
				[213, 3],
				[209, 3],
				186,
				268,
				123,
				268,
				[148, 2],
				123,
				119,
				105,
				210,
				296,
				[0, 21],
			],
			[
				[0, 26],
				277,
				129,
				121,
				146,
				297,
				271,
				298,
				299,
				234,
				[238, 2],
				[239, 2],
				268,
				147,
				300,
				147,
				[238, 2],
				[214, 2],
				186,
				[213, 2],
				221,
				[230, 2],
				257,
				228,
				257,
				228,
				230,
				221,
				213,
				[238, 2],
				[213, 2],
				[209, 4],
				239,
				[268, 5],
				148,
				113,
				123,
				277,
				1,
				[0, 21],
			],
			[
				[0, 26],
				294,
				122,
				[146, 2],
				[138, 2],
				295,
				299,
				217,
				147,
				239,
				230,
				221,
				213,
				224,
				214,
				[225, 2],
				284,
				[226, 3],
				225,
				224,
				222,
				[227, 2],
				228,
				229,
				[257, 3],
				229,
				213,
				238,
				239,
				213,
				[209, 4],
				231,
				209,
				[239, 4],
				186,
				148,
				107,
				301,
				[0, 23],
			],
			[
				[0, 27],
				84,
				[146, 2],
				138,
				[298, 2],
				[138, 2],
				302,
				239,
				230,
				224,
				214,
				226,
				169,
				137,
				200,
				169,
				248,
				215,
				[291, 2],
				186,
				291,
				212,
				213,
				221,
				230,
				228,
				[246, 2],
				228,
				213,
				238,
				239,
				[209, 3],
				[231, 3],
				209,
				201,
				239,
				[201, 2],
				239,
				95,
				25,
				8,
				3,
				[0, 22],
			],
			[
				[0, 27],
				277,
				146,
				208,
				138,
				298,
				[138, 3],
				234,
				209,
				221,
				215,
				137,
				[121, 2],
				129,
				138,
				139,
				[169, 2],
				[215, 2],
				248,
				95,
				186,
				213,
				209,
				213,
				209,
				229,
				246,
				257,
				209,
				213,
				209,
				[231, 3],
				[209, 2],
				231,
				[209, 5],
				239,
				267,
				16,
				13,
				11,
				[0, 22],
			],
			[
				[0, 27],
				294,
				137,
				[138, 5],
				217,
				238,
				221,
				214,
				137,
				145,
				[127, 2],
				122,
				303,
				139,
				103,
				147,
				[186, 2],
				268,
				[239, 2],
				[213, 4],
				209,
				228,
				257,
				221,
				[209, 2],
				[231, 2],
				[209, 4],
				230,
				[231, 3],
				209,
				239,
				107,
				59,
				11,
				59,
				11,
				[0, 21],
			],
			[
				[0, 28],
				95,
				[138, 4],
				304,
				302,
				213,
				230,
				239,
				139,
				121,
				127,
				145,
				292,
				[305, 2],
				306,
				268,
				193,
				[268, 2],
				239,
				268,
				238,
				[213, 2],
				209,
				230,
				228,
				257,
				230,
				209,
				221,
				[231, 2],
				[209, 4],
				[230, 4],
				209,
				201,
				27,
				35,
				21,
				14,
				20,
				[0, 21],
			],
			[
				[0, 28],
				244,
				139,
				138,
				[298, 2],
				217,
				234,
				213,
				219,
				239,
				147,
				121,
				127,
				145,
				119,
				182,
				307,
				308,
				103,
				308,
				309,
				123,
				[300, 2],
				310,
				238,
				213,
				209,
				229,
				257,
				246,
				229,
				230,
				221,
				[209, 6],
				[230, 2],
				229,
				[231, 2],
				250,
				14,
				2,
				8,
				311,
				14,
				[0, 21],
			],
			[
				[0, 29],
				95,
				217,
				295,
				[217, 2],
				234,
				238,
				209,
				239,
				148,
				121,
				127,
				118,
				[184, 2],
				199,
				[112, 2],
				120,
				112,
				103,
				139,
				300,
				268,
				239,
				209,
				230,
				257,
				[246, 2],
				229,
				230,
				[209, 2],
				201,
				[239, 2],
				[209, 2],
				230,
				[229, 2],
				230,
				231,
				9,
				6,
				6,
				8,
				312,
				6,
				[0, 21],
			],
			[
				[0, 29],
				293,
				[217, 3],
				299,
				[302, 2],
				[239, 2],
				148,
				121,
				127,
				126,
				117,
				118,
				119,
				129,
				122,
				129,
				92,
				175,
				148,
				147,
				268,
				197,
				209,
				228,
				246,
				[251, 2],
				229,
				231,
				[209, 2],
				[239, 3],
				209,
				[230, 2],
				229,
				230,
				229,
				13,
				5,
				2,
				11,
				312,
				8,
				8,
				1,
				[0, 20],
			],
			[
				[0, 30],
				186,
				[217, 4],
				302,
				209,
				239,
				123,
				129,
				127,
				136,
				118,
				127,
				[129, 2],
				112,
				[139, 2],
				103,
				148,
				[239, 3],
				231,
				257,
				246,
				251,
				246,
				313,
				[209, 3],
				[239, 2],
				[209, 2],
				230,
				[229, 3],
				314,
				8,
				2,
				7,
				54,
				54,
				8,
				315,
				11,
				2,
				22,
				[0, 18],
			],
			[
				[0, 30],
				293,
				[234, 2],
				[299, 2],
				302,
				209,
				239,
				123,
				122,
				207,
				127,
				128,
				112,
				137,
				[122, 2],
				139,
				234,
				186,
				95,
				239,
				197,
				230,
				229,
				257,
				[251, 2],
				294,
				[231, 2],
				209,
				201,
				239,
				[209, 2],
				230,
				[229, 3],
				316,
				13,
				86,
				4,
				14,
				311,
				5,
				317,
				318,
				319,
				1,
				6,
				5,
				6,
				[0, 16],
			],
			[
				[0, 30],
				1,
				95,
				[234, 2],
				302,
				234,
				230,
				231,
				239,
				139,
				146,
				121,
				139,
				122,
				103,
				175,
				123,
				139,
				147,
				238,
				197,
				213,
				209,
				229,
				316,
				246,
				[251, 2],
				246,
				231,
				[209, 5],
				[230, 2],
				229,
				313,
				229,
				5,
				11,
				1,
				320,
				14,
				5,
				8,
				23,
				16,
				5,
				1,
				1,
				6,
				5,
				5,
				4,
				[0, 14],
			],
			[
				[0, 30],
				11,
				290,
				234,
				238,
				234,
				238,
				213,
				228,
				231,
				197,
				148,
				139,
				147,
				103,
				[175, 2],
				123,
				103,
				268,
				[209, 2],
				230,
				229,
				257,
				[246, 2],
				[251, 2],
				246,
				231,
				[209, 4],
				[230, 3],
				229,
				316,
				6,
				11,
				1,
				6,
				321,
				5,
				320,
				322,
				54,
				311,
				319,
				6,
				2,
				6,
				11,
				5,
				8,
				21,
				[0, 13],
			],
			[
				[0, 22],
				260,
				[323, 11],
				324,
				213,
				209,
				[229, 2],
				230,
				275,
				[323, 5],
				325,
				123,
				326,
				209,
				229,
				257,
				[246, 2],
				251,
				260,
				[323, 4],
				[231, 4],
				260,
				[323, 4],
				8,
				1,
				4,
				[11, 3],
				14,
				311,
				8,
				5,
				8,
				11,
				4,
				0,
				1,
				6,
				8,
				327,
				8,
				6,
				[0, 11],
			],
			[
				[0, 22],
				260,
				[323, 11],
				324,
				[209, 2],
				231,
				[229, 2],
				260,
				[323, 5],
				324,
				268,
				198,
				231,
				257,
				246,
				[251, 3],
				260,
				[323, 4],
				[230, 4],
				260,
				[323, 4],
				2,
				1,
				21,
				109,
				7,
				321,
				8,
				328,
				14,
				10,
				2,
				22,
				1,
				0,
				2,
				14,
				5,
				5,
				8,
				327,
				8,
				2,
				[0, 9],
			],
			[
				[0, 22],
				260,
				[323, 11],
				324,
				201,
				230,
				229,
				230,
				221,
				324,
				[323, 6],
				329,
				198,
				231,
				246,
				251,
				1,
				[251, 2],
				260,
				[323, 4],
				[230, 4],
				260,
				[323, 4],
				0,
				7,
				2,
				2,
				11,
				5,
				11,
				11,
				54,
				8,
				2,
				29,
				6,
				1,
				6,
				5,
				59,
				322,
				315,
				8,
				322,
				54,
				8,
				4,
				[0, 7],
			],
			[
				[0, 22],
				260,
				[323, 4],
				220,
				330,
				[244, 2],
				294,
				331,
				123,
				231,
				[209, 2],
				230,
				228,
				259,
				[323, 7],
				332,
				333,
				231,
				[251, 5],
				260,
				[323, 4],
				229,
				[230, 2],
				229,
				260,
				[323, 4],
				4,
				2,
				28,
				6,
				11,
				11,
				7,
				322,
				9,
				5,
				2,
				14,
				40,
				1,
				22,
				8,
				64,
				26,
				16,
				315,
				14,
				26,
				318,
				322,
				59,
				11,
				[0, 5],
			],
			[
				[0, 22],
				260,
				[323, 4],
				244,
				334,
				244,
				294,
				246,
				229,
				122,
				239,
				[221, 2],
				[227, 2],
				335,
				[323, 3],
				336,
				[323, 4],
				302,
				230,
				246,
				251,
				[246, 3],
				260,
				[323, 4],
				228,
				229,
				257,
				246,
				260,
				[323, 4],
				0,
				1,
				7,
				6,
				6,
				2,
				8,
				27,
				10,
				35,
				5,
				59,
				40,
				1,
				6,
				322,
				337,
				26,
				59,
				20,
				14,
				338,
				14,
				311,
				59,
				59,
				14,
				6,
				[0, 3],
			],
			[
				[0, 22],
				260,
				[323, 4],
				334,
				187,
				41,
				316,
				246,
				257,
				122,
				137,
				213,
				[221, 2],
				339,
				[323, 4],
				236,
				336,
				[323, 3],
				340,
				229,
				[257, 2],
				[229, 2],
				257,
				260,
				[323, 4],
				246,
				[251, 2],
				6,
				341,
				[323, 4],
				0,
				4,
				7,
				[2, 3],
				54,
				9,
				14,
				58,
				14,
				9,
				35,
				1,
				8,
				312,
				342,
				343,
				13,
				58,
				5,
				8,
				[14, 3],
				8,
				321,
				5,
				344,
				5,
				2,
			],
			[
				[0, 22],
				260,
				[323, 4],
				[244, 2],
				316,
				257,
				246,
				345,
				[292, 2],
				146,
				238,
				224,
				260,
				[323, 3],
				335,
				238,
				346,
				[323, 3],
				324,
				230,
				228,
				[230, 3],
				229,
				260,
				[323, 4],
				1,
				1,
				11,
				11,
				347,
				[323, 4],
				1,
				4,
				4,
				[2, 3],
				317,
				311,
				8,
				13,
				59,
				10,
				41,
				2,
				59,
				322,
				16,
				10,
				58,
				58,
				35,
				35,
				8,
				[311, 3],
				59,
				311,
				14,
				8,
				14,
			],
			[
				[0, 22],
				260,
				[323, 11],
				348,
				292,
				146,
				234,
				324,
				[323, 3],
				253,
				238,
				122,
				324,
				[323, 3],
				263,
				[221, 2],
				230,
				231,
				230,
				260,
				[323, 4],
				1,
				6,
				8,
				14,
				260,
				[323, 4],
				1,
				1,
				2,
				6,
				1,
				6,
				54,
				54,
				13,
				10,
				311,
				13,
				251,
				6,
				343,
				59,
				13,
				11,
				58,
				58,
				[233, 2],
				5,
				54,
				322,
				16,
				311,
				14,
				315,
				54,
				59,
			],
			[
				[0, 22],
				260,
				[323, 11],
				348,
				146,
				292,
				349,
				[323, 3],
				324,
				284,
				225,
				147,
				350,
				[323, 3],
				260,
				[221, 2],
				[209, 3],
				260,
				[323, 4],
				109,
				8,
				34,
				5,
				260,
				[323, 4],
				1,
				1,
				6,
				2,
				0,
				320,
				54,
				54,
				5,
				319,
				8,
				11,
				1,
				5,
				315,
				13,
				11,
				40,
				6,
				[233, 2],
				6,
				14,
				343,
				311,
				20,
				20,
				54,
				[322, 2],
				318,
			],
			[
				[0, 20],
				1,
				2,
				351,
				[323, 11],
				352,
				297,
				146,
				325,
				[323, 3],
				335,
				[214, 3],
				353,
				[323, 3],
				324,
				214,
				[213, 2],
				221,
				230,
				260,
				[323, 4],
				8,
				5,
				5,
				1,
				260,
				[323, 4],
				1,
				7,
				22,
				1,
				1,
				8,
				[315, 2],
				20,
				319,
				29,
				6,
				2,
				8,
				10,
				35,
				5,
				40,
				6,
				[233, 2],
				29,
				[8, 3],
				311,
				343,
				318,
				322,
				16,
				343,
			],
			[
				[0, 15],
				99,
				2,
				2,
				22,
				233,
				109,
				58,
				341,
				[323, 4],
				330,
				313,
				294,
				175,
				306,
				122,
				[282, 2],
				285,
				271,
				324,
				[323, 3],
				340,
				[226, 4],
				324,
				[323, 3],
				273,
				224,
				221,
				227,
				228,
				260,
				[323, 4],
				14,
				0,
				1,
				0,
				260,
				[323, 4],
				2,
				7,
				4,
				0,
				4,
				14,
				54,
				54,
				14,
				13,
				35,
				251,
				2,
				11,
				58,
				11,
				5,
				40,
				[233, 2],
				58,
				29,
				5,
				5,
				14,
				315,
				54,
				59,
				59,
				34,
				315,
			],
			[
				[0, 12],
				99,
				22,
				22,
				6,
				[109, 3],
				[58, 3],
				354,
				[323, 4],
				293,
				294,
				355,
				356,
				210,
				128,
				357,
				[282, 2],
				352,
				[323, 13],
				335,
				[213, 3],
				221,
				260,
				[323, 4],
				6,
				[0, 3],
				260,
				[323, 4],
				22,
				2,
				1,
				0,
				4,
				327,
				54,
				54,
				14,
				358,
				6,
				1,
				233,
				58,
				58,
				5,
				5,
				58,
				[233, 2],
				58,
				58,
				29,
				8,
				14,
				14,
				8,
				20,
				59,
				311,
				322,
			],
			[
				[0, 9],
				99,
				7,
				11,
				5,
				11,
				[109, 3],
				[58, 3],
				359,
				233,
				260,
				[323, 4],
				316,
				294,
				287,
				360,
				112,
				145,
				[282, 3],
				350,
				[323, 14],
				236,
				234,
				214,
				224,
				260,
				[323, 4],
				[0, 4],
				260,
				[323, 4],
				22,
				1,
				0,
				0,
				7,
				14,
				59,
				9,
				8,
				11,
				2,
				48,
				6,
				11,
				11,
				40,
				13,
				6,
				233,
				361,
				58,
				58,
				5,
				13,
				8,
				13,
				13,
				5,
				5,
				8,
				322,
			],
			[
				[0, 7],
				4,
				6,
				36,
				5,
				5,
				11,
				58,
				[109, 2],
				58,
				11,
				11,
				29,
				58,
				251,
				260,
				[323, 4],
				251,
				233,
				114,
				89,
				112,
				153,
				289,
				362,
				363,
				[323, 15],
				364,
				234,
				214,
				224,
				260,
				[323, 4],
				[0, 4],
				260,
				[323, 4],
				2,
				[0, 3],
				21,
				338,
				8,
				319,
				5,
				35,
				48,
				22,
				11,
				5,
				11,
				40,
				40,
				[233, 2],
				361,
				58,
				40,
				[5, 3],
				29,
				6,
				6,
				11,
				14,
				59,
			],
			[
				[0, 6],
				21,
				[5, 4],
				36,
				11,
				58,
				58,
				11,
				29,
				[58, 3],
				48,
				2,
				260,
				[323, 4],
				1,
				279,
				193,
				105,
				113,
				162,
				153,
				145,
				365,
				[323, 3],
				366,
				185,
				153,
				205,
				145,
				[146, 2],
				138,
				367,
				[323, 3],
				324,
				234,
				214,
				221,
				260,
				[323, 4],
				[0, 4],
				260,
				[323, 4],
				1,
				0,
				0,
				1,
				5,
				8,
				8,
				5,
				358,
				6,
				99,
				6,
				5,
				319,
				8,
				5,
				[233, 2],
				361,
				58,
				58,
				29,
				29,
				11,
				6,
				233,
				6,
				11,
				5,
				20,
				14,
			],
			[
				[0, 4],
				4,
				11,
				5,
				8,
				8,
				5,
				36,
				5,
				36,
				11,
				36,
				29,
				58,
				58,
				109,
				48,
				41,
				41,
				260,
				[323, 4],
				233,
				219,
				368,
				369,
				137,
				[162, 2],
				282,
				370,
				[323, 3],
				371,
				[153, 3],
				145,
				285,
				146,
				138,
				329,
				[323, 4],
				353,
				213,
				229,
				354,
				[323, 4],
				[0, 4],
				260,
				[323, 12],
				372,
				2,
				48,
				58,
				13,
				13,
				319,
				5,
				[233, 2],
				58,
				58,
				29,
				29,
				11,
				58,
				22,
				22,
				11,
				36,
				5,
				20,
				14,
			],
			[
				[0, 3],
				2,
				5,
				63,
				344,
				5,
				5,
				36,
				29,
				63,
				63,
				29,
				29,
				[58, 3],
				233,
				2,
				48,
				251,
				260,
				[323, 4],
				244,
				290,
				373,
				124,
				121,
				162,
				181,
				185,
				[323, 4],
				363,
				[282, 2],
				145,
				285,
				146,
				297,
				271,
				138,
				370,
				[323, 3],
				336,
				230,
				40,
				351,
				[323, 4],
				[0, 4],
				260,
				[323, 12],
				258,
				2,
				233,
				36,
				8,
				5,
				5,
				40,
				233,
				361,
				58,
				29,
				29,
				58,
				11,
				109,
				22,
				6,
				36,
				29,
				8,
				14,
				8,
			],
			[
				0,
				0,
				2,
				29,
				63,
				344,
				5,
				5,
				36,
				36,
				[12, 3],
				5,
				[58, 3],
				6,
				[233, 2],
				48,
				251,
				260,
				[323, 4],
				187,
				244,
				72,
				93,
				207,
				[162, 2],
				374,
				[323, 3],
				370,
				[282, 2],
				[145, 3],
				[362, 2],
				146,
				271,
				325,
				[323, 3],
				324,
				232,
				58,
				260,
				[323, 4],
				[0, 4],
				260,
				[323, 12],
				291,
				1,
				109,
				5,
				8,
				13,
				29,
				58,
				375,
				[58, 3],
				[22, 3],
				2,
				22,
				11,
				11,
				36,
				8,
				8,
				319,
			],
			[
				0,
				4,
				[5, 5],
				29,
				29,
				12,
				376,
				12,
				12,
				11,
				359,
				36,
				6,
				109,
				22,
				233,
				48,
				[251, 2],
				233,
				48,
				1,
				48,
				293,
				290,
				106,
				113,
				153,
				132,
				[181, 2],
				163,
				126,
				153,
				362,
				[282, 6],
				145,
				285,
				146,
				271,
				377,
				235,
				284,
				242,
				58,
				1,
				[0, 10],
				[1, 3],
				[0, 3],
				22,
				5,
				5,
				58,
				5,
				11,
				2,
				2,
				58,
				8,
				8,
				13,
				29,
				58,
				58,
				220,
				35,
				99,
				4,
				109,
				6,
				4,
				6,
				29,
				29,
				11,
				[5, 3],
			],
		],
	};


  // project-rome/@romejs/cli-diagnostics/DiagnosticsPrinter.ts




	function ___R$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$readDiagnosticsFileLocal(
		path,
	) {
		if (!___R$project$rome$$romejs$fs$index_ts$existsSync(path)) {
			return;
		}

		const src = ___R$project$rome$$romejs$fs$index_ts$readFileTextSync(path);
		const mtime = ___R$project$rome$$romejs$fs$index_ts$lstatSync(path).mtimeMs;
		return {content: src, mtime};
	}

	function ___R$$priv$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$equalPosition(
		a,
		b,
	) {
		if (a === undefined || b === undefined) {
			return false;
		}

		if (a.line !== b.line || a.column !== b.column) {
			return false;
		}

		return true;
	}



	const ___R$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$DEFAULT_PRINTER_FLAGS = {
		grep: "",
		inverseGrep: false,
		showAllDiagnostics: true,
		fieri: false,
		verboseDiagnostics: false,
		maxDiagnostics: 100,
	};










	class ___R$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$default
		extends Error {
		constructor(opts) {
			super(
				"Diagnostics printer. If you're seeing this then it wasn't caught and printed correctly.",
			);
			const {
				cwd,
				reporter,
				flags = ___R$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$DEFAULT_PRINTER_FLAGS,
			} = opts;

			this.reporter = reporter;
			this.flags = flags;
			this.readFile =
				opts.readFile === undefined
					? ___R$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$readDiagnosticsFileLocal
					: opts.readFile;
			this.cwd =
				cwd === undefined
					? ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
							process.cwd(),
						)
					: cwd;
			this.processor =
				opts.processor === undefined
					? new ___R$project$rome$$romejs$diagnostics$DiagnosticsProcessor_ts$default()
					: opts.processor;

			this.displayedCount = 0;
			this.problemCount = 0;
			this.filteredCount = 0;
			this.truncatedCount = 0;

			this.hasTruncatedDiagnostics = false;
			this.missingFileSources = new ___R$project$rome$$romejs$path$collections_ts$AbsoluteFilePathSet();
			this.fileSources = new ___R$project$rome$$romejs$path$collections_ts$UnknownFilePathMap();
			this.fileMtimes = new ___R$project$rome$$romejs$path$collections_ts$UnknownFilePathMap();
			this.onFooterPrintCallbacks = [];
		}

		createFilePath(filename) {
			if (filename === undefined) {
				filename = "unknown";
			}

			const {normalizeFilename} = this.reporter.markupOptions;

			if (normalizeFilename === undefined) {
				return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
					filename,
				);
			} else {
				return ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
					normalizeFilename(filename),
				);
			}
		}

		throwIfAny() {
			if (this.hasDiagnostics()) {
				throw this;
			}
		}

		hasDiagnostics() {
			return this.processor.hasDiagnostics();
		}

		getDisplayedProblemsCount() {
			return this.problemCount - this.filteredCount;
		}

		shouldTruncate() {
			if (
				!this.flags.showAllDiagnostics &&
				this.displayedCount > this.flags.maxDiagnostics
			) {
				return true;
			} else {
				return false;
			}
		}

		getDiagnostics() {
			return this.processor.getSortedDiagnostics();
		}

		shouldIgnore(diag) {
			const {grep, inverseGrep} = this.flags;

			// An empty grep pattern means show everything
			if (grep === undefined || grep === "") {
				return false;
			}

			// Match against the supplied grep pattern
			let ignored =
				___R$project$rome$$romejs$string$markup$format_ts$markupToPlainTextString(
					diag.description.message.value,
				).toLowerCase().includes(grep) === false;
			if (inverseGrep) {
				ignored = !ignored;
			}
			return ignored;
		}

		addFileSource(info, stats) {
			this.fileMtimes.set(info.path, stats.mtime);

			if (info.type === "reference") {
				this.fileSources.set(
					info.path,
					{
						sourceText: stats.content,
						lines: ___R$project$rome$$romejs$cli$diagnostics$utils_ts$toLines({
							path: info.path,
							input: stats.content,
							sourceType: info.sourceType,
							language: info.language,
						}),
					},
				);
			}
		}

		getDependenciesFromDiagnostics(diagnostics) {
			const deps = [];

			for (const {
				dependencies,
				description: {advice},
				location: {language, sourceType, mtime, filename},
			} of diagnostics) {
				if (filename !== undefined) {
					deps.push({
						type: "reference",
						path: this.createFilePath(filename),
						mtime,
						language,
						sourceType,
					});
				}

				if (dependencies !== undefined) {
					for (const {filename, mtime} of dependencies) {
						deps.push({
							type: "change",
							path: this.createFilePath(filename),
							mtime,
						});
					}
				}

				for (const item of advice) {
					if (item.type === "frame") {
						const {location} = item;
						if (
							location.filename !== undefined &&
							location.sourceText === undefined
						) {
							deps.push({
								type: "reference",
								path: this.createFilePath(location.filename),
								language: location.language,
								sourceType: location.sourceType,
								mtime: location.mtime,
							});
						}
					}
				}
			}

			const depsMap = new ___R$project$rome$$romejs$path$collections_ts$UnknownFilePathMap();

			// Remove non-absolute filenames and normalize sourceType and language for conflicts
			for (const dep of deps) {
				const path = dep.path;
				if (!path.isAbsolute()) {
					continue;
				}

				const existing = depsMap.get(path);

				// reference dependency can override change since it has more metadata that needs conflict resolution
				if (existing === undefined || existing.type === "change") {
					depsMap.set(dep.path, dep);
					continue;
				}

				if (dep.type === "reference") {
					if (existing.sourceType !== dep.sourceType) {
						existing.sourceType = "unknown";
					}

					if (existing.language !== dep.language) {
						existing.language = "unknown";
					}
				}
			}

			return Array.from(depsMap.values());
		}

		fetchFileSources(diagnostics) {
			for (const dep of this.getDependenciesFromDiagnostics(diagnostics)) {
				const {path} = dep;
				if (!path.isAbsolute()) {
					continue;
				}

				const abs = path.assertAbsolute();
				const stats = this.readFile(abs);
				if (stats === undefined) {
					this.missingFileSources.add(abs);
				} else {
					this.addFileSource(dep, stats);
				}
			}
		}

		print() {
			const filteredDiagnostics = this.filterDiagnostics();
			this.fetchFileSources(filteredDiagnostics);
			this.displayDiagnostics(filteredDiagnostics);
		}

		displayDiagnostics(diagnostics) {
			const restoreRedirect = this.reporter.redirectOutToErr(true);
			for (const diag of diagnostics) {
				this.displayDiagnostic(diag);
			}
			this.reporter.redirectOutToErr(restoreRedirect);
		}

		getOutdatedFiles(diag) {
			let outdatedFiles = new ___R$project$rome$$romejs$path$collections_ts$UnknownFilePathSet();
			for (const {
				path,
				mtime: expectedMtime,
			} of this.getDependenciesFromDiagnostics([diag])) {
				const mtime = this.fileMtimes.get(path);
				if (
					mtime !== undefined &&
					expectedMtime !== undefined &&
					mtime > expectedMtime
				) {
					outdatedFiles.add(path);
				}
			}
			return outdatedFiles;
		}

		displayDiagnostic(diag) {
			const {reporter} = this;
			const {start, end, filename} = diag.location;
			let advice = [...diag.description.advice];

			// Remove stacktrace from beginning if it contains only one frame that matches the root diagnostic location
			const firstAdvice = advice[0];
			if (
				firstAdvice !== undefined &&
				firstAdvice.type === "stacktrace" &&
				firstAdvice.frames.length === 1
			) {
				const frame = firstAdvice.frames[0];
				if (
					frame.filename === filename &&
					___R$$priv$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$equalPosition(
						frame,
						start,
					)
				) {
					advice.shift();
				}
			}

			// Determine if we should skip showing the frame at the top of the diagnostic output
			// We check if there are any frame advice entries that match us exactly, this is
			// useful for stuff like reporting call stacks
			let skipFrame = false;
			if (start !== undefined && end !== undefined) {
				adviceLoop: for (const item of advice) {
					if (
						item.type === "frame" &&
						item.location.filename === filename &&
						___R$$priv$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$equalPosition(
							item.location.start,
							start,
						) &&
						___R$$priv$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$equalPosition(
							item.location.end,
							end,
						)
					) {
						skipFrame = true;
						break;
					}

					if (item.type === "stacktrace") {
						for (const frame of item.frames) {
							if (
								frame.filename === filename &&
								___R$$priv$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$equalPosition(
									frame,
									start,
								)
							) {
								skipFrame = true;
								break adviceLoop;
							}
						}
					}
				}
			}

			const outdatedAdvice = [];
			const outdatedFiles = this.getOutdatedFiles(diag);
			const isOutdated = outdatedFiles.size > 0;
			if (isOutdated) {
				const outdatedFilesArr = Array.from(
					outdatedFiles,
					(path) => path.join(),
				);

				if (outdatedFilesArr.length === 1 && outdatedFilesArr[0] === filename) {
					outdatedAdvice.push({
						type: "log",
						category: "warn",
						text: "This file has been changed since the diagnostic was produced and may be out of date",
					});
				} else {
					outdatedAdvice.push({
						type: "log",
						category: "warn",
						text: "This diagnostic may be out of date as it relies on the following files that have been changed since the diagnostic was generated",
					});

					outdatedAdvice.push({
						type: "list",
						list: outdatedFilesArr.map((filename) =>
							___R$project$rome$$romejs$string$markup$escape_ts$markup`<filelink target="${filename}" />`
						),
					});
				}
			}

			const derived = ___R$project$rome$$romejs$diagnostics$derive_ts$deriveRootAdviceFromDiagnostic(
				diag,
				{
					skipFrame,
					includeHeaderInAdvice: false,
					outdated: isOutdated,
				},
			);

			reporter.hr(derived.header);

			reporter.indent(() => {
				// Concat all the advice together
				const allAdvice = [...derived.advice, ...outdatedAdvice, ...advice];

				// Print advice
				for (const item of allAdvice) {
					const res = ___R$project$rome$$romejs$cli$diagnostics$printAdvice_ts$default(
						item,
						{
							printer: this,
							flags: this.flags,
							missingFileSources: this.missingFileSources,
							fileSources: this.fileSources,
							diagnostic: diag,
							reporter,
						},
					);
					if (res.printed) {
						reporter.br();
					}
					if (res.truncated) {
						this.hasTruncatedDiagnostics = true;
					}
				}

				// Print verbose information
				if (this.flags.verboseDiagnostics) {
					const {origins} = diag;

					if (origins !== undefined && origins.length > 0) {
						reporter.br();
						reporter.info("Why are you seeing this diagnostic?");
						reporter.br();
						reporter.list(
							origins.map((origin) => {
								let res = "<emphasis>" + origin.category + "</emphasis>";
								if (origin.message !== undefined) {
									res += ": " + origin.message;
								}
								return res;
							}),
							{ordered: true},
						);
					}
				}
			});
		}

		filterDiagnostics() {
			const diagnostics = this.getDiagnostics();
			const filteredDiagnostics = [];

			for (const diag of diagnostics) {
				this.problemCount++;

				if (this.shouldIgnore(diag)) {
					this.filteredCount++;
				} else if (this.shouldTruncate()) {
					this.truncatedCount++;
				} else {
					this.displayedCount++;
					filteredDiagnostics.push(diag);
				}
			}

			return filteredDiagnostics;
		}

		onFooterPrint(fn) {
			this.onFooterPrintCallbacks.push(fn);
		}

		footer() {
			const {reporter, problemCount} = this;

			const isError = problemCount > 0;

			if (isError) {
				const restoreRedirect = reporter.redirectOutToErr(true);
				reporter.hr();
				reporter.redirectOutToErr(restoreRedirect);
			}

			if (this.hasTruncatedDiagnostics) {
				reporter.warn(
					"Some diagnostics have been truncated. Use the --verbose-diagnostics flag to disable truncation.",
				);
			}

			if (isError) {
				if (this.flags.fieri) {
					this.showBanner(
						___R$project$rome$$romejs$cli$diagnostics$banners$error_json$default,
					);
				}
			} else {
				if (this.flags.fieri) {
					this.showBanner(
						___R$project$rome$$romejs$cli$diagnostics$banners$success_json$default,
					);
				}
			}

			for (const handler of this.onFooterPrintCallbacks) {
				const stop = handler(reporter, isError);
				if (stop) {
					return;
				}
			}

			if (isError) {
				this.footerError();
			} else {
				reporter.success("No known problems!");
			}
		}

		showBanner(banner) {
			for (const stream of this.reporter.getStreams(false)) {
				for (const row of banner.rows) {
					for (const field of row) {
						let palleteIndex;
						let times = 1;
						if (Array.isArray(field)) {
							[palleteIndex, times] = field;
						} else {
							palleteIndex = field;
						}

						const pallete = banner.palettes[palleteIndex];
						stream.write(
							___R$project$rome$$romejs$string$markup$ansi_ts$formatAnsi.bgRgb(
								" ",
								{
									r: pallete[0],
									g: pallete[1],
									b: pallete[2],
								},
							).repeat(times),
						);
					}
					stream.write("\n");
				}
			}
		}

		footerError() {
			const {reporter, filteredCount} = this;

			const displayableProblems = this.getDisplayedProblemsCount();
			let str =
				"Found <number emphasis>" +
				displayableProblems +
				'</number> <grammarNumber plural="problems" singular="problem">' +
				displayableProblems +
				"</grammarNumber>";

			if (filteredCount > 0) {
				str += "<dim> (" + filteredCount + " filtered)</dim>";
			}

			reporter.error(str);

			if (this.truncatedCount > 0) {
				const {maxDiagnostics} = this.flags;
				reporter.warn(
					"Only <number>" +
					maxDiagnostics +
					"</number> errors shown, add the <emphasis>--show-all-diagnostics</emphasis> flag to view the remaining <number>" +
					(displayableProblems - maxDiagnostics) +
					"</number> errors",
				);
			}
		}
	}


  // project-rome/@romejs/cli-diagnostics/index.ts
function ___R$project$rome$$romejs$cli$diagnostics$index_ts$printDiagnostics(
		{
			diagnostics,
			suppressions,
			printerOptions,
			excludeFooter,
		},
	) {
		const printer = new ___R$project$rome$$romejs$cli$diagnostics$DiagnosticsPrinter_ts$default(
			printerOptions,
		);
		printer.processor.addDiagnostics(diagnostics);
		printer.processor.addSuppressions(suppressions);
		printer.print();
		if (!excludeFooter) {
			printer.footer();
		}
		return printer;
	}

	function ___R$project$rome$$romejs$cli$diagnostics$index_ts$printDiagnosticsToString(
		opts,
	) {
		const reporter = new ___R$project$rome$$romejs$cli$reporter$Reporter_ts$default();
		const stream = reporter.attachCaptureStream(opts.format);
		___R$project$rome$$romejs$cli$diagnostics$index_ts$printDiagnostics(
			Object.assign(
				{},
				opts,
				{printerOptions: Object.assign({reporter}, opts.printerOptions)},
			),
		);
		return stream.read();
	}


  // project-rome/@romejs/diagnostics/errors.ts
const ___R$project$rome$$romejs$diagnostics$errors_ts = {
		get DiagnosticsError() {
			return ___R$project$rome$$romejs$diagnostics$errors_ts$DiagnosticsError;
		},
		createSingleDiagnosticError: ___R$project$rome$$romejs$diagnostics$errors_ts$createSingleDiagnosticError,
		getDiagnosticsFromError: ___R$project$rome$$romejs$diagnostics$errors_ts$getDiagnosticsFromError,
	};
	class ___R$project$rome$$romejs$diagnostics$errors_ts$DiagnosticsError
		extends Error {
		constructor(message, diagnostics, suppressions = []) {
			if (diagnostics.length === 0) {
				throw new Error("No diagnostics");
			}

			message += "\n";
			message += ___R$project$rome$$romejs$cli$diagnostics$index_ts$printDiagnosticsToString({
				diagnostics,
				suppressions,
			});

			super(message);
			this.diagnostics = diagnostics;
			this.suppressions = suppressions;
			this.name = "DiagnosticsError";
		}
	}

	function ___R$project$rome$$romejs$diagnostics$errors_ts$createSingleDiagnosticError(
		diag,
		suppressions,
	) {
		return new ___R$project$rome$$romejs$diagnostics$errors_ts$DiagnosticsError(
			diag.description.message.value,
			[diag],
			suppressions,
		);
	}

	function ___R$project$rome$$romejs$diagnostics$errors_ts$getDiagnosticsFromError(
		err,
	) {
		if (
			err instanceof
			___R$project$rome$$romejs$diagnostics$errors_ts$DiagnosticsError
		) {
			const processor = new ___R$project$rome$$romejs$diagnostics$DiagnosticsProcessor_ts$default({

			});
			processor.addSuppressions(err.suppressions);
			processor.addDiagnostics(err.diagnostics);
			return processor.getDiagnostics();
		}

		return undefined;
	}


  // project-rome/@romejs/diagnostics/types.ts
const ___R$project$rome$$romejs$diagnostics$types_ts = {};

























































  // project-rome/@romejs/diagnostics/descriptions/flags.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$flags_ts$flags = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		UNSUPPORTED_SHORTHANDS: "Shorthand flags are not supported",
		INCORRECT_CASED_FLAG: (flag) => ({
			message: "Incorrect cased flag name",
			advice: [
				{
					type: "log",
					category: "info",
					text: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Use <emphasis>${___R$project$rome$$romejs$string$utils$toKebabCase_ts$toKebabCase(
						flag,
					)}</emphasis> instead`,
				},
			],
		}),
		INCORRECT_ARG_COUNT: (excessive, message) => ({
			message: excessive ? "Too many arguments" : "Missing arguments",
			advice: [
				{
					type: "log",
					category: "info",
					text: message,
				},
			],
		}),
		DISALLOWED_REVIEW_FLAG: (key) => ({
			message: "Flag <emphasis>" +
			key +
			"</emphasis> is not allowed with <emphasis>review</emphasis>",
		}),
		DISALLOWED_REQUEST_FLAG: (key) => ({
			message: "This command does not support the <emphasis>" +
			key +
			"</emphasis> flag",
		}),
		UNKNOWN_ACTION: (action) => ({
			message: "Unknown action " + action,
		}),
		NO_FILES_FOUND: (noun) => ({
			message: noun === undefined
				? "No files found"
				: "No files to " + noun + " found",
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/parserCore.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$parserCore_ts$parserCore = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		EXPECTED_SPACE: "Expected no space between",
		EXPECTED_EOF: "Expected end of file",
		UNEXPECTED_EOF: "Unexpected end of file",
		UNEXPECTED: (type) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unexpected ${type}`,
		}),
		UNEXPECTED_CHARACTER: (char) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unexpected character <emphasis>${char}</emphasis>`,
		}),
		EXPECTED_TOKEN: (got, expected) => {
			return {
				message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Expected token ${expected} but got ${got}`,
			};
		},
	});


  // project-rome/@romejs/diagnostics/descriptions/regexp.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$regexp_ts$regexp = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		INVALID_CAPTURE_GROUP_MODIFIER: "Invalid capture group modifier",
		UNCLOSED_GROUP: "Unclosed group",
		UNOPENED_GROUP: "Unopened group",
		INVALID_QUANTIFIER_TARGET: "Invalid target for quantifier",
		UNKNOWN_REGEX_PART: "Unknown regex part",
		REVERSED_CHAR_SET_RANGE: "Range values reversed. Start char code is greater than end char code",
		UNCLOSED_CHAR_SET: "Unclosed character set",
		DUPLICATE_FLAG: "Duplicate regular expression flag",
		INVALID_FLAG: "Invalid regular expression flag",
		REVERSED_QUANTIFIER_RANGE: "Quantifier minimum is greater than maximum",
		NO_TARGET_QUANTIFIER: "Nothing to repeat",
		INVALID_NAMED_CAPTURE: "Invalid named capture referenced",
		UNCLOSED_NAMED_CAPTURE: "Unclosed named capture",
	});


  // project-rome/@romejs/diagnostics/descriptions/json.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$json_ts$json = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		SINGLE_QUOTE_USAGE: "You can only use double quoted strings",
		TRAILING_COMMA_VALUE: "Trailing comma is only allowed after a value",
		UNCLOSED_STRING: "Unclosed string",
		UNCLOSED_BLOCK_COMMENT: "Unclosed block comment",
		MISTAKEN_ARRAY_IDENTITY: "Trying to use an array element as an object property. Did you mean to make an object?",
		REDUNDANT_COMMA: "Redundant comma",
		EMPTY_INPUT_IN_JSON: "Empty input",
		PROPERTY_KEY_UNQUOTED_IN_JSON: "Property keys must be quoted in JSON",
		IMPLICIT_OBJECT_IN_JSON: "Objects must be wrapped in curly braces in JSON",
		COMMENTS_IN_JSON: "Comments aren't allowed in JSON",
		TRAILING_COMMA_IN_JSON: "Trailing commas aren't allowed in JSON",
		REGEX_IN_JSON: "Regular expressions aren't allowed in JSON",
		UNKNOWN_WORD_IN_JSON: (word) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`${word} isn't a valid JSON word`,
		}),
		STRING_NEWLINES_IN_JSON: 'Newlines aren\'t allowed in JSON, you insert a newline by escaping it like this "\\n"',
		UNDEFINED_IN_JSON: "undefined isn't allowed in JSON, you could use null instead",
		BIGINT_IN_JSON: "Bigints aren't allowed in JSON",
		NUMERIC_SEPARATORS_IN_JSON: "Numeric separators are not allowed in JSON",
	});


  // project-rome/@romejs/diagnostics/descriptions/semver.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$semver_ts$semver = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		MISSING_MINOR_VERSION: "A minor number is required for a version",
		MISSING_PATCH_VERSION: "A patch number is required for a version",
		EXCESSIVE_VERSION_PARTS: "Too many parts for version",
		INVALID_QUANTIFIER_PART: "Invalid version qualifier part",
		WILDCARD_IN_VERSION: "Wildcard aren't allowed in a hard version",
		INVALID_VERSION_NUMBER: "This isn't a valid version part, expected a number",
		INVALID_RANGE: "A semver range can only be defined with versions",
		BARE_PIPE_WITHOUT_LOOSE: "Bare pipes are only allowed in loose mode",
		UNEXPECTED_WORD: (word) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unexpected word <emphasis>${word}</emphasis>`,
		}),
		UNKNOWN_START: "Unknown start of atom",
		EXPECTED_VERSION: "Unexpected value for version",
	});


  // project-rome/@romejs/diagnostics/descriptions/v8.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$v8_ts$v8 = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		SYNTAX_ERROR: (message) => ({message, category: "v8/syntaxError"}),
	});


  // project-rome/@romejs/diagnostics/descriptions/lintCommand.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$lintCommand_ts$lintCommand = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		INVALID_DECISION_ACTION: (action) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`<emphasis>${action}</emphasis> is not a valid decision action`,
		}),
		INVALID_DECISION_PART_COUNT: (i) => ({
			message: "Segment " + i + " contains an invalid number of decision parts",
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/projectManager.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$projectManager_ts$projectManager = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		NO_VCS: (rootConfigLocation) => ({
			category: "projectManager/vscMissing",
			message: "Can't find any version control for this project",
			advice: rootConfigLocation === undefined
				? [
						{
							type: "log",
							category: "info",
							text: "Version control root was set to the project root as it was not configured. To configure a different folder run",
						},
						{
							type: "command",
							command: "rome config set-directory vcs.root DIRECTORY_HERE",
						},
					]
				: [
						{
							type: "log",
							category: "info",
							text: "Version control root was set here",
						},
						{
							type: "frame",
							location: rootConfigLocation,
						},
					],
		}),
		DUPLICATE_PACKAGE: (packageName, existing) => ({
			category: "projectManager/nameCollision",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Duplicate package name <emphasis>${packageName}</emphasis>`,
			advice: [
				{
					type: "log",
					category: "info",
					text: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Defined already by <filelink target="${existing}" />`,
				},
			],
		}),
		NOT_FOUND: {
			category: "projectManager/missing",
			message: "Couldn't find a project",
			advice: [
				{
					type: "log",
					category: "info",
					text: "Run <command>rome init</command> in this folder to initialize a project",
				},
			],
		},
		INCORRECT_CONFIG_FILENAME: (validFilenames) => ({
			category: "projectManager/incorrectConfigFilename",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Invalid rome config filename, <emphasis>${validFilenames.join(
				" or ",
			)}</emphasis> are the only valid filename`,
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/compiler.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$compiler_ts$compiler = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		CLASSES_UNSUPPORTED: {
			category: "compile/classes",
			message: "The classes transform doesn't know how to transform this",
		},
		JSX_NOT_XML: {
			category: "compile/jsx",
			message: "JSX is not XML",
		},
	});


  // project-rome/@romejs/diagnostics/descriptions/stringEscape.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$stringEscape_ts$stringEscape = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		NOT_ENOUGH_CODE_POINTS: "Not enough code point digits",
		INVALID_STRING_CHARACTER: "Invalid string character (U+0000 to U+001F)",
		INVALID_HEX_DIGIT_FOR_ESCAPE: "Invalid hex digit for unicode escape",
	});


  // project-rome/@romejs/diagnostics/descriptions/analyzeDependencies.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$analyzeDependencies_ts$analyzeDependencies = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		CJS_EXPORT_IN_ES: {
			category: "analyzeDependencies/cjsExportInES",
			message: "You cannot use CommonJS exports in an ES module",
		},
	});


  // project-rome/@romejs/diagnostics/helpers.ts
const ___R$project$rome$$romejs$diagnostics$helpers_ts = {
		buildSuggestionAdvice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice,
		truncateSourceText: ___R$project$rome$$romejs$diagnostics$helpers_ts$truncateSourceText,
		buildDuplicateLocationAdvice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildDuplicateLocationAdvice,
		diagnosticLocationToMarkupFilelink: ___R$project$rome$$romejs$diagnostics$helpers_ts$diagnosticLocationToMarkupFilelink,
	};


	function ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
		value,
		items,
		{minRating = 0.5, ignoreCase, formatItem} = {},
	) {
		const advice = [];

		const ratings = ___R$project$rome$$romejs$string$utils$orderBySimilarity_ts$orderBySimilarity(
			value,
			items,
			{
				minRating,
				formatItem,
				ignoreCase,
			},
		);

		const strings = ratings.map((item) => {
			const {target} = item;
			if (formatItem === undefined) {
				return target;
			} else {
				return formatItem(target);
			}
		});

		const topRatingFormatted = strings.shift();
		if (topRatingFormatted === undefined) {
			return advice;
		}

		// Raw rating that hasn't been formatted
		const topRatingRaw = ratings[0].target;

		if (topRatingRaw === value) {
			// TODO produce a better example
		}

		// If there's only 2 suggestions then just say "Did you mean A or B?" rather than printing the list
		if (strings.length === 1) {
			advice.push({
				type: "log",
				category: "info",
				text: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Did you mean <emphasis>${topRatingFormatted}</emphasis> or <emphasis>${strings[0]}</emphasis>?`,
			});
		} else {
			advice.push({
				type: "log",
				category: "info",
				text: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Did you mean <emphasis>${topRatingFormatted}</emphasis>?`,
			});

			advice.push({
				type: "diff",
				diff: ___R$project$rome$$romejs$string$diff$index_ts$default(
					value,
					topRatingRaw,
				),
			});

			if (strings.length > 0) {
				advice.push({
					type: "log",
					category: "info",
					text: "Or one of these?",
				});

				advice.push({
					type: "list",
					list: strings.map((str) =>
						___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(str)
					),
					truncate: true,
				});
			}
		}

		// TODO check if ANY of the suggestions match
		if (
			topRatingRaw !== value &&
			topRatingRaw.toLowerCase() === value.toLowerCase()
		) {
			advice.push({
				type: "log",
				category: "warn",
				text: "This operation is case sensitive",
			});
		}

		return advice;
	}

	function ___R$project$rome$$romejs$diagnostics$helpers_ts$truncateSourceText(
		code,
		start,
		end,
	) {
		const lines = code.split(
			___R$project$rome$$romejs$js$parser$utils$whitespace_ts$NEWLINE,
		);

		// Pad the starting and ending lines by 10
		const fromLine = Math.max(
			___R$project$rome$$romejs$ob1$index_ts$ob1Get1(start.line) - 10,
			0,
		);
		const toLine = Math.max(
			___R$project$rome$$romejs$ob1$index_ts$ob1Get1(end.line) + 10,
			lines.length,
		);

		const capturedLines = lines.slice(fromLine, toLine);
		return "\n".repeat(fromLine) + capturedLines.join("\n");
	}

	function ___R$project$rome$$romejs$diagnostics$helpers_ts$buildDuplicateLocationAdvice(
		locations,
	) {
		const locationAdvice = locations.map((location) => {
			if (location === undefined) {
				return {
					type: "log",
					category: "warn",
					text: "Unable to find location",
				};
			} else {
				return {
					type: "frame",
					location,
				};
			}
		});

		return [
			{
				type: "log",
				category: "info",
				text: "Defined already here",
			},
			...locationAdvice,
		];
	}

	function ___R$project$rome$$romejs$diagnostics$helpers_ts$diagnosticLocationToMarkupFilelink(
		loc,
	) {
		const {start, filename} = loc;

		if (filename === undefined) {
			return "unknown";
		}

		if (start === undefined) {
			return ___R$project$rome$$romejs$string$markup$escape_ts$markup`<filelink target="${filename}" />`;
		}

		return ___R$project$rome$$romejs$string$markup$escape_ts$markup`<filelink target="${filename}" line="${start.line}" column="${start.column}" />`;
	}


  // project-rome/@romejs/diagnostics/descriptions/stringMarkup.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$stringMarkup_ts$stringMarkup = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		UNCLOSED_STRING: "Unclosed string",
		EXPECTED_CLOSING_TAG_NAME: "Expected closing tag name",
		UNKNOWN_START: "Unknown child start",
		EXPECTED_ATTRIBUTE_NAME: "Expected attribute name",
		INCORRECT_CLOSING_TAG_NAME: (expected, got) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Expected to close ${expected} but found ${got}`,
		}),
		UNCLOSED_TAG: (tagName, openLocation) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unclosed ${tagName} tag`,
			advice: [
				{type: "log", category: "info", text: "Tag started here"},
				{
					type: "frame",
					location: openLocation,
				},
			],
		}),
		INVALID_ATTRIBUTE_NAME_FOR_TAG: (tagName, attributeName, validAttributes) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`<emphasis>${attributeName}</emphasis> is not a valid attribute name for <emphasis>${tagName}</emphasis>`,
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
				attributeName,
				validAttributes,
			),
		}),
		UNKNOWN_TAG_NAME: (tagName) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unknown tag name <emphasis>${tagName}</emphasis>`,
		}),
		RESTRICTED_CHILD: (tagName, allowedParents, gotParentName = "none") => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`The tag <emphasis>${tagName}</emphasis> should only appear as a child of ${___R$project$rome$$romejs$diagnostics$descriptions$index_ts$orJoin(
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$addEmphasis(
					allowedParents,
				),
			)} not <emphasis>${gotParentName}</emphasis>`,
		}),
		RESTRICTED_PARENT: (tagName, allowedChildren, gotChildName) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`The tag <emphasis>${tagName}</emphasis> should only contain the tags ${___R$project$rome$$romejs$diagnostics$descriptions$index_ts$orJoin(
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$addEmphasis(
					allowedChildren,
				),
			)} not <emphasis>${gotChildName}</emphasis>`,
		}),
		RESTRICTED_PARENT_TEXT: (tagName) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`The tag <emphasis>${tagName}</emphasis> should not contain any text`,
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/pathMatch.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$pathMatch_ts$pathMatch = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		INVALID_PATTERN_SEGMENT_PART: "Invalid pattern segment part",
		INVALID_PATH_SEGMENT: "Invalid path segment",
	});


  // project-rome/@romejs/diagnostics/descriptions/tests.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$tests_ts$tests = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		CANCELLED: {
			category: "tests/cancelled",
			message: "Test was cancelled",
		},
		UNDECLARED: {
			message: "No tests declared in this file",
			category: "tests/noneDeclared",
		},
		LOGS: (advice) => ({
			message: "Test file produced console logs",
			category: "tests/logs",
			advice: [
				...advice,
				{
					type: "log",
					category: "info",
					text: "Only visible when this test file contains failures",
				},
			],
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/suppressions.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$suppressions_ts$suppressions = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		UNUSED: (suppression) => {
			let description = "";
			if (suppression.startLine === suppression.endLine) {
				description = "line " + suppression.startLine;
			} else {
				description +=
					"lines " + suppression.startLine + " to " + suppression.endLine;
			}

			return {
				message: "Unused suppression. Did not hide any errors.",
				category: "suppressions/unused",
				advice: [
					{
						type: "log",
						category: "info",
						text: "This suppression should hide <emphasis>" +
						description +
						"</emphasis>",
					},
				],
			};
		},
		MISSING_SPACE: {
			category: "suppressions/missingSpace",
			message: "Missing space between prefix and suppression categories",
		},
		MISSING_TARGET: {
			category: "suppressions/missingTarget",
			message: "We could not find a target for this suppression",
		},
		DUPLICATE: (category) => ({
			category: "suppressions/duplicate",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Duplicate suppression category <emphasis>${category}</emphasis>`,
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/snapshots.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$snapshots_ts$snapshots = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		MISSING_NEWLINE_AFTER_CODE_BLOCK: "Newline required after code block",
		MISSING_NEWLINE_BEFORE_CODE_BLOCK: "Newline required before code block end",
		UNCLOSED_CODE_BLOCK: "Unclosed code block",
		EXPECTED_CODE_BLOCK_AFTER_HEADING: "Expected a code block after this heading",
		REDUNDANT: {
			category: "tests/snapshots/redundant",
			message: "Snapshot should not exist",
		},
		MISSING: {
			category: "tests/snapshots/missing",
			message: "Snapshot does not exist",
		},
		INCORRECT: (expected, got) => ({
			category: "tests/snapshots/incorrect",
			message: "Snapshots do not match",
			advice: [
				{
					type: "diff",
					diff: ___R$project$rome$$romejs$string$diff$index_ts$default(
						expected,
						got,
					),
				},
			],
		}),
		INLINE_COLLISION: {
			category: "tests/snapshots/inlineCollision",
			message: "Trying to update this inline snapshot multiple times",
			advice: [
				{
					type: "log",
					category: "info",
					text: "<emphasis>t.inlineSnapshot</emphasis> can only be called once. Did you call it in a loop?",
				},
			],
		},
		INLINE_MISSING_RECEIVED: {
			category: "tests/snapshots/inlineMissingReceived",
			message: "This inline snapshot call does not have a received argument",
		},
		INLINE_FROZEN: {
			category: "tests/snapshots/frozen",
			message: "Inline snapshot cannot be updated as snapshots are frozen",
		},
		FROZEN: {
			category: "tests/snapshots/frozen",
			message: "Snapshot cannot be updated as snapshots are frozen",
		},
		INLINE_BAD_MATCH: {
			category: "tests/snapshots/incorrect",
			message: "Inline snapshots do not match",
		},
	});


  // project-rome/@romejs/diagnostics/descriptions/bundler.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$bundler_ts$bundler = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		TOP_LEVEL_AWAIT_IN_LEGACY: {
			category: "bundler/topLevelAwait",
			message: "This module contains a top level await which isn't supported in wrapper mode",
		},
		DETECTED_CYCLE: (localName, target, culprit, path) => {
			function formatPart(part, index) {
				const tagged = '<filelink target="' + part + '" />';
				if (part === culprit) {
					return '<highlight i="0" legend>' + tagged + "</highlight>";
				} else if (part === target) {
					return '<highlight i="1" legend>' + tagged + "</highlight>";
				} else if (index === 0) {
					return tagged + " <inverse>ENTRY</inverse>";
				} else {
					return tagged;
				}
			}

			return {
				category: "bundler/moduleCycle",
				message: "The variable <emphasis>" +
				localName +
				"</emphasis> won't be initialized yet",
				advice: [
					{
						type: "log",
						category: "info",
						text: "This is because the module it belongs to wont be executed yet. This is due to a circular dependency creating a module cycle.",
					},
					{
						type: "log",
						category: "info",
						text: "The likely cause is the file " +
						formatPart(culprit) +
						" that was required by " +
						formatPart(target) +
						" which created a circular dependency:",
					},
					{
						type: "list",
						reverse: true,
						ordered: true,
						list: path.map(formatPart),
					},
				],
			};
		},
	});


  // project-rome/@romejs/diagnostics/descriptions/resolver.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$resolver_ts$resolver = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		NOT_FOUND: (responseType, source, location) => {
			let messagePrefix = "";
			let category = "resolver/notFound";

			switch (responseType) {
				case "UNSUPPORTED": {
					messagePrefix = "Unsupported";
					category = "resolver/unsupported";
					break;
				}
				case "MISSING": {
					messagePrefix = "Cannot find";
					break;
				}
				case "FETCH_ERROR": {
					messagePrefix = "Failed to fetch";
					category = "resolver/fetchFailed";
					break;
				}
			}

			return {
				message: messagePrefix +
				___R$project$rome$$romejs$string$markup$escape_ts$markup` <emphasis>${source}</emphasis> from <filelink emphasis target="${location.filename}" />`,
				category,
			};
		},
		IMPORT_TYPE_MISMATCH: (
			exportName,
			source,
			importedAsKing,
			actualKind,
			exportLoc,
		) => ({
			category: "resolver/importTypeMismatch",
			message: "The export <emphasis>" +
			exportName +
			'</emphasis> in <filelink emphasis target="' +
			source +
			'" /> was incorrectly imported as a <emphasis>' +
			importedAsKing +
			"</emphasis> when it's actually a <emphasis>" +
			actualKind +
			"</emphasis>",
			advice: exportLoc && [
				{
					type: "log",
					category: "info",
					text: 'Export was defined here in <filelink emphasis target="' +
					exportLoc.filename +
					'" />',
				},
				{
					type: "frame",
					location: exportLoc,
				},
			],
		}),
		UNKNOWN_EXPORT: (name, source, exportedNames, formatExportedName) => ({
			message: "Couldn't find export <emphasis>" +
			name +
			'</emphasis> in <filelink emphasis target="' +
			source +
			'" />',
			category: "resolver/unknownExport",
			advice: exportedNames.length === 0
				? [
						{
							type: "log",
							category: "info",
							text: "This file doesn't have any exports",
						},
					]
				: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
						name,
						exportedNames,
						{
							formatItem: (name) => {
								const {location, source} = formatExportedName(name);

								if (location !== undefined) {
									if (location.start === undefined) {
										name = ___R$project$rome$$romejs$string$markup$escape_ts$markup`<filelink target="${location.filename}">${name}</filelink>`;
									} else {
										name = ___R$project$rome$$romejs$string$markup$escape_ts$markup`<filelink target="${location.filename}" line="${location.start.line}" column="${location.start.column}">${name}</filelink>`;
									}
								}

								if (source !== undefined) {
									name += ___R$project$rome$$romejs$string$markup$escape_ts$markup` <dim>(from <filelink target="${source}" />)</dim>`;
								}

								return name;
							},
						},
					),
		}),
		UNKNOWN_EXPORT_POSSIBLE_UNEXPORTED_LOCAL: (name, source, location) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Couldn't find export <emphasis>${name}</emphasis> in <filelink emphasis target="${source}" />`,
			category: "resolver/unknownExport",
			advice: [
				{
					type: "log",
					category: "info",
					text: ___R$project$rome$$romejs$string$markup$escape_ts$markup`However we found a matching local variable in <filelink emphasis target="${location.filename}" />. Did you forget to export it?`,
				},
				{
					type: "frame",
					location,
				},
			],
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/spdx.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$spdx_ts$spdx = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		UNKNOWN_LICENSE: (id, knownLicenses) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unknown SPDX license <emphasis>${id}</emphasis>`,
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
				id,
				knownLicenses,
			),
		}),
		VALID_LICENSE_WITH_MISSING_DASH: (possibleCorrectLicense) => ({
			message: "Missing dash between SPDX license name and version",
			advice: [
				{
					type: "log",
					category: "info",
					text: "Did you mean <emphasis>" +
					possibleCorrectLicense +
					"</emphasis>?",
				},
			],
		}),
		WITH_RIGHT_LICENSE_ONLY: "Only a license id can be on the right side of a WITH",
		OPERATOR_NOT_BETWEEN_EXPRESSION: "Can only use AND/OR in between an expression",
		PLUS_NOT_AFTER_LICENSE: "A plus can only come after a license id",
		UNOPENED_PAREN: "Nothing open to close",
	});


  // project-rome/@romejs/diagnostics/descriptions/jsParser.ts
function ___R$$priv$project$rome$$romejs$diagnostics$descriptions$jsParser_ts$buildJSXOpeningAdvice(
		name,
		openingLoc,
	) {
		return [
			{
				type: "log",
				category: "info",
				text: name === ""
					? "Originated from this opening tag"
					: "Originated from opening tag of <emphasis>" + name + "</emphasis>",
			},
			{
				type: "frame",
				location: openingLoc,
			},
		];
	}

	// @romejs/js-parser
	const ___R$project$rome$$romejs$diagnostics$descriptions$jsParser_ts$jsParser = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		UNTERMINATED_BLOCK_COMMENT: "Unterminated comment",
		UNTERMINATED_JSX_STRING: "Unterminated string constant",
		INVALID_UNICODE_ESCAPE: "Invalid Unicode escape",
		EXPECTED_UNICODE_ESCAPE: "Expecting Unicode escape sequence \\uXXXX",
		BAD_HEX_ESCAPE: "Bad character escape sequence",
		OCTAL_IN_STRICT_MODE: "Octal literal in strict mode",
		UNTERMINATED_TEMPLATE: "Unterminated template",
		UNTERMINATED_STRING: "Unterminated string constant",
		OUT_OF_BOUND_CODE_POINT: "Code point out of bounds",
		IDENTIFIER_AFTER_NUMBER: "Identifier directly after number",
		OCTAL_BIGINT: "A bigint can't be an octal",
		DECIMAL_BIGINT: "A bigint can't have a decimal",
		INVALID_NUMBER: "Invalid number",
		LEGACY_OCTAL_IN_STRICT_MODE: "Legacy octal literals are not allowed in strict mode",
		INVALID_INT_TOKEN: "Invalid or unexpected int token",
		UNICODE_ESCAPE_IN_REGEX_FLAGS: "Regular expression flags can't contain unicode escapes",
		UNTERMINATED_REGEX: "Unterminated regular expression",
		DANGLING_BACKSLASH_IN_REGEX: "Dangling backslash in a regular expression",
		EXPECTED_RELATIONAL_OPERATOR: "Expected relational operator",
		UNEXPECTED_SPACE: "Unexpected space",
		EXPECTED_SEMI_OR_LINE_TERMINATOR: "Expected a semicolon or a line terminator",
		GET_SET_CLASS_CONSTRUCTOR: "Constructor can't have get/set modifier",
		ASYNC_CLASS_CONSTRUCTOR: "Constructor cannot be async",
		GENERATOR_CLASS_CONSTRUCTOR: "Constructor cannot be a generator",
		DUPLICATE_CLASS_CONSTRUCTOR: "Duplicate constructor in the same class",
		UNKNOWN_CLASS_PROPERTY_START: "Unknown class property start",
		CLASS_STATIC_PROTOTYPE_PROPERTY: "Classes may not have static property named prototype",
		CLASS_PRIVATE_FIELD_NAMED_CONSTRUCTOR: "Classes may not have a private field named '#constructor'",
		CLASS_PROPERTY_NAME_CONSTRUCTOR: "Classes may not have a non-static field named 'constructor'",
		PROTO_PROP_REDEFINITION: "Redefinition of __proto__ property",
		MISSING_CONDITIONAL_SEPARATOR: "Missing conditional expression consequent separator",
		WRAP_EXPONENTIATION: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
		DELETE_LOCAL_VARIABLE_IN_STRICT: "Deleting local variable in strict mode",
		DELETE_PRIVATE_FIELD: "Deleting a private field is not allowed",
		TAGGED_TEMPLATE_IN_OPTIONAL_CHAIN: "Tagged Template Literals are not allowed in optionalChain",
		YIELD_NAME_IN_GENERATOR: "Can not use 'yield' as identifier inside a generator",
		AWAIT_NAME_IN_ASYNC: "Can not use 'await' as identifier inside an async function",
		EMPTY_PARENTHESIZED_EXPRESSION: "Parenthesized expression didnt contain anything",
		AWAIT_IN_ASYNC_PARAMS: "await is not allowed in async function parameters",
		YIELD_IN_GENERATOR_PARAMS: "yield is not allowed in generator parameters",
		FLOW_TYPE_CAST_IN_TS: "Flow type cast expressions aren't allowed in TypeScript",
		PARENTHESIZED_FUNCTION_PARAMS: "Function parameters can't be parenthesized",
		NEW_WITH_TYPESCRIPT_TYPE_ARGUMENTS_NO_PARENS: "In TypeScript, a new expression with type arguments must have parens",
		INVALID_TEMPLATE_ESCAPE: "Invalid escape sequence in template",
		EXPECTED_IDENTIFIER: "Expected an identifier",
		IMPORT_EXACT_ARGUMENTS: "import() requires exactly one argument",
		IMPORT_TRAILING_COMMA: "Trailing comma is disallowed inside import(...) arguments",
		IMPORT_SPREAD: "Spread is not allowed in import()",
		IMPORT_NEW_CALLEE: "Cannot use new with import(...)",
		SUPER_OUTSIDE_METHOD: "super is only allowed in object methods and classes",
		INVALID_SUPER_SUFFIX: "Invalid super suffix operator",
		AWAIT_OUTSIDE_ASYNC: "Can't use await outside of an async function",
		AWAIT_STAR: "await* has been removed from the async functions proposal. Use Promise.all() instead.",
		NEW_TARGET_OUTSIDE_CLASS: "new.target can only be used in functions or class properties",
		MULTIPLE_DESTRUCTURING_RESTS: "Cannot have multiple rest elements when destructuring",
		TRAILING_COMMA_AFTER_REST: "A trailing comma is not permitted after the rest element",
		GETTER_WITH_PARAMS: "getter should have no parameters",
		SETTER_WITH_REST: "setter function argument must not be a rest parameter",
		SETTER_NOT_ONE_PARAM: "setter should have exactly one param",
		ASYNC_GETTER_SETTER: "An object setter/getter can't be async",
		GENERATOR_GETTER_SETTER: "An object setter/getter can't be a generator",
		ARGUMENTS_IN_CLASS_FIELD: "'arguments' is not allowed in class field initializer",
		NON_SIMPLE_PARAM_IN_EXPLICIT_STRICT_FUNCTION: "Non-simple parameter in strict mode",
		STRICT_DIRECTIVE_IN_NON_SIMPLE_PARAMS: "Illegal 'use strict' directive in function with non-simple parameter list",
		OBJECT_PROPERTY_WITH_TYPE_PARAMETERS: "Object property cannot have type parameters",
		ILLEGAL_VARIANCE: "Variance is not allowed here",
		OBJECT_METHOD_IN_PATTERN: "Object methods aren't allowed in object patterns",
		IMPORT_META_OUTSIDE_MODULE: "import.meta may only appear in a module",
		EXPECTED_ARROW_AFTER_ASYNC_TYPE_PARAMS: "Expected arrow because we are a possible async arrow and type annotated parameters were present",
		INVALID_OBJECT_PATTERN_PROP: "Invalid property node for object pattern",
		ASYNC_OBJECT_METHOD_LINE_BREAK: "There shouldn't be any newlines between async and the rest of the function",
		SPACE_BETWEEN_PRIVATE_HASH: "Unexpected space between # and identifier",
		CONFUSING_CALL_ARGUMENT: "Function parameter type annotation? Possibly forgot curlies around an object. Possibly forgot async keyword.",
		EXPECTED_ARROW_AFTER_TYPE_PARAMS: "Expected an arrow function after this type parameter declaration",
		REQUIRED_CLASS_NAME: "Class name is required",
		JSX_ELEM_TYPE_ARGUMENTS_OUTSIDE_TS: "JSX element type arguments are only allowed in TS",
		UNWRAPPED_ADJACENT_JHX: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?",
		CONFUSED_OR: "Unexpected ||, did you mean just |?",
		INVALID_ASSIGNMENT_TARGET: "Not a valid assignment target",
		IMPORT_KIND_SPECIFIER_ON_IMPORT_DECLARATION_WITH_KIND: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements",
		DESTRUCTURING_IN_IMPORT: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
		IMPORT_TYPE_STAR: "import * is not allowed",
		IMPORT_MISSING_SOURCE: "import missing a source",
		EXPORT_TYPE_NAMESPACE: "Can't have a type export namespacer specifier",
		EXPORT_MISSING_FROM: "Expected `from` for an export node",
		EXPORT_FROM_NOT_STRING: "Export from only allows strings",
		BINDING_MEMBER_EXPRESSION: "Binding member expression",
		INVALID_OBJECT_PATTERN_PROPERTY: "Not a valid assignment object pattern property",
		OBJECT_PATTERN_CANNOT_CONTAIN_METHODS: "Object pattern cannot contains methods",
		INVALID_ASSIGNMENT_PATTERN_OPERATOR: "Only '=' operator can be used for specifying default value.",
		INVALID_OBJECT_REST_ARGUMENT: "Invalid rest operator's argument",
		INVALID_EXPORT_DEFAULT: "Only expressions, functions or classes are allowed as the `default` export.",
		INVALID_EXPORT_DECLARATION: "Invalid export declaration",
		DESTRUCTURING_REST_ELEMENT_NOT_LAST: "The rest element has to be the last element when destructuring",
		REST_INVALID_ARGUMENT: "Invalid rest operator's argument",
		EXPORT_ASYNC_NO_FUNCTION_KEYWORD: "Started with `export async` so we expected to receive an async function but no function keyword was found",
		TYPE_CAST_WITHOUT_ANNOTATION: "Type cast expression has no type annotation. Did you mean for this to be a function parameter?",
		TYPE_CAST_CANNOT_BE_OPTIONAL: "Type cast expressions cannot be optional. Did you mean for this to be a function parameter?",
		TYPE_CAST_EXPECTED_PARENS: "The type cast expression is expected to be wrapped with parentheses",
		INVALID_ASYNC_ARROW_WITH_TYPE_PARAMS: "Invalid async arrow with type parameters",
		TYPE_NUMERIC_LITERAL_PLUS: "Numeric literal type annotations cannot stand with a +, omit it instead",
		TYPE_NUMERIC_LITERAL_EXPECTED: 'Unexpected token, expected "number"',
		JSX_INVALID_ATTRIBUTE_VALUE: "JSX attribute value should be either an expression or a quoted JSX text",
		JSX_UNCLOSED_SELF_CLOSING_TAG: "Unclosed JSX element open",
		JSX_UNCLOSED_CLOSING_TAG: "Unclosed JSX element close",
		JSX_EMPTY_ATTRIBUTE_VALUE: "JSX attribute cannot be an empty expression",
		JSX_UNKNOWN_IDENTIFIER_TOKEN: "Unknown JSX identifier token",
		TS_IMPORT_ARG_NOT_STRING: "Argument in a type import must be a string literal",
		TS_CONSTANT_NOT_LITERAL: "Only literal values are allowed as a constant type",
		TS_INVALID_SIGNATURE_BINDING_NODE: "Invalid node in signature binding list",
		TS_REQUIRED_FOLLOWS_OPTIONAL: "A required element cannot follow an optional element.",
		TS_TEMPLATE_LITERAL_WITH_SUBSTITUION: "Template literal types cannot have any substitution",
		TS_UNKNOWN_NON_ARRAY_START: "Unknown TS non array type start",
		TS_INVALID_READONLY_MODIFIER: "'readonly' type modifier is only permitted on array and tuple literal types.",
		TS_EXTERNAL_MODULE_REFERENCE_ARG_NOT_STRING: "TypeScript require() must have a single string argument",
		TS_UNKNOWN_DECLARE_START: "Unknown TypeScript declare start",
		TS_UNEXPECTED_CAST_IN_PARAMETER_POSITION: "Unexpected type cast in parameter position",
		TS_DISABLED_BUT_ACCESSIBILITY_OR_READONLY: "Accessibility and readonly syntax found but TS is not enabled",
		TS_PARAMETER_PROPERTY_BINDING_PATTERN: "A parameter property may not be declared using a binding pattern.",
		TYPE_ANNOTATION_AFTER_ASSIGNMENT: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`",
		TYPE_BINDING_PARAMETER_OPTIONAL: "A binding pattern parameter cannot be optional in an implementation signature.",
		ILLEGAL_FUNCTION_IN_STRICT: "In strict mode code, functions can only be declared at top level or inside a block",
		ILLEGAL_FUNCTION_IN_NON_STRICT: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement",
		ILLEGAL_GENERATOR_DEFINITION: "Generators can only be declared at the top level or inside a block",
		ILLEGAL_ASYNC_DEFINITION: "Async functions can only be declared at the top level or inside a block",
		LEXICAL_DECLARATION_IN_SINGLE_STATEMENT_CONTEXT: "Lexical declaration cannot appear in a single-statement context",
		IMPORT_EXPORT_MUST_TOP_LEVEL: "'import' and 'export' may only appear at the top level",
		REGULAR_FOR_AWAIT: "Can't have an await on a regular for loop",
		RETURN_OUTSIDE_FUNCTION: "'return' outside of function",
		MULTIPLE_DEFAULT_CASE: "Multiple default clauses",
		SWITCH_STATEMENT_OUTSIDE_CASE: "Statement outside of a case or default block",
		NEWLINE_AFTER_THROW: "Illegal newline after throw",
		TRY_MISSING_FINALLY_OR_CATCH: "Missing catch or finally clause",
		INVALID_LABEL_DECLARATION: "Invalid labeled declaration",
		WITH_IN_STRICT: "'with' in strict mode",
		OCTAL_IN_STRICT: "Octal literal in strict mode",
		FOR_IN_OF_WITH_INITIALIZER: "Loop variable declaration may not have an initializer",
		CONST_WITHOUT_INITIALIZER: "A constant must have an initializer",
		COMPLEX_BINDING_WITHOUT_INITIALIZER: "Complex binding patterns require an initialization value",
		ACCESSOR_WITH_TYPE_PARAMS: "An accessor cannot have type parameters",
		UNEXPECTED_SPREAD: "Unexpected spread",
		DUPLICATE_LABEL: (label, loc) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Label <emphasis>${label}</emphasis> is already declared`,
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildDuplicateLocationAdvice([
				loc,
			]),
		}),
		UNKNOWN_LABEL: (label) => ({
			message: label === undefined
				? "No loop label found"
				: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unknown label <emphasis>${label}</emphasis>`,
		}),
		IMPORT_EXPORT_IN_SCRIPT: (manifestPath) => ({
			message: "<emphasis>import</emphasis> and <emphasis>export</emphasis> can only appear in a module",
			advice: [
				// TODO this advice is pointless if you have syntax extensions enabled
				{
					type: "log",
					category: "info",
					text: "Change the extension to <emphasis>.mjs</emphasis> to turn this file into a module",
				},
				{
					type: "log",
					category: "info",
					text: 'Add <emphasis>"type": "module"</emphasis> to your <filelink emphasis target="' +
					manifestPath +
					'" />',
				},
			],
		}),
		SUPER_CALL_OUTSIDE_CONSTRUCTOR: {
			message: "super() is only valid inside a class constructor of a subclass",
			advice: [
				{
					type: "log",
					category: "info",
					text: "Maybe a typo in the method name ('constructor') or not extending another class?",
				},
			],
		},
		JSX_DISABLED: {
			message: "JSX syntax isn't enabled",
			advice: [
				{
					type: "log",
					category: "info",
					text: "Are you using <emphasis>TypeScript</emphasis>? Change the file extension to <emphasis>.tsx</emphasis>",
				},
				{
					type: "log",
					category: "info",
					text: "Are you using <emphasis>Flow</emphasis>? Add a <emphasis>@flow</emphasis> comment annotation to the top of the file",
				},
				{
					type: "log",
					category: "info",
					text: "Not using either? Change the file extension to <emphasis>.jsx</emphasis>",
				},
				// TODO you can also add `@jsx whatever` at the top of a file
			],
		},
		JSX_IN_TS_EXTENSION: {
			message: "JSX isn't allowed in regular TypeScript files",
			advice: [
				{
					type: "log",
					category: "info",
					text: "Change the file extension to <emphasis>.tsx</emphasis> to enable JSX support",
				},
			],
		},
		INVALID_PARENTEHSIZED_LVAL: (patternType) => ({
			message: "Invalid parenthesized binding",
			advice: patternType === "object"
				? [
						{
							type: "log",
							category: "info",
							text: "Did you use `({a}) = 0` instead of `({a} = 0)`?",
						},
					]
				: patternType === "array"
					? [
							{
								type: "log",
								category: "info",
								text: "Did you use `([a]) = 0` instead of `([a] = 0)`?",
							},
						]
					: [],
		}),
		EXPECTED_COMMA_SEPARATOR: (context) => ({
			message: "Expected a comma to separate items in " + context,
		}),
		INVALID_LEFT_HAND_SIDE: (context) => ({
			message: "Invalid left-hand side in " + context,
		}),
		TS_EMPTY_LIST: (descriptor) => ({
			message: descriptor + " list cannot be empty",
		}),
		JSX_EXPECTED_CLOSING_TAG: (name, openingLoc) => ({
			message: "Expected a corresponding JSX closing tag for <emphasis>" +
			name +
			"</emphasis>",
			advice: ___R$$priv$project$rome$$romejs$diagnostics$descriptions$jsParser_ts$buildJSXOpeningAdvice(
				name,
				openingLoc,
			),
		}),
		JSX_EXPECTED_CLOSING_FRAGMENT_TAG: (name, openingLoc) => ({
			message: "Expected JSX closing fragment tag",
			advice: ___R$$priv$project$rome$$romejs$diagnostics$descriptions$jsParser_ts$buildJSXOpeningAdvice(
				name,
				openingLoc,
			),
		}),
		JSX_UNKNOWN_CHILD_START: (name, openingLoc) => ({
			message: "Unknown JSX children start",
			advice: ___R$$priv$project$rome$$romejs$diagnostics$descriptions$jsParser_ts$buildJSXOpeningAdvice(
				name,
				openingLoc,
			),
		}),
		JSX_UNCLOSED_ELEMENT: (name, openingLoc) => ({
			message: "Unclosed JSX element",
			advice: ___R$$priv$project$rome$$romejs$diagnostics$descriptions$jsParser_ts$buildJSXOpeningAdvice(
				name,
				openingLoc,
			),
		}),
		TS_REQUIRED: (label) => ({
			message: "A " + label + " is only valid inside of a TypeScript file",
			advice: [
				{
					type: "log",
					category: "info",
					text: "To enable <emphasis>TypeScript</emphasis> support, the file extension should end in <emphasis>.ts</emphasis> or <emphasis>.tsx</emphasis>",
				},
			],
		}),
		DUPLICATE_EXPORT: (name, existing) => ({
			message: name === "default"
				? "Only one default export allowed per module."
				: "`" +
					name +
					"` has already been exported. Exported identifiers must be unique.",
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildDuplicateLocationAdvice([
				existing,
			]),
		}),
		NEW_IN_OPTIONAL_CHAIN: (responsiblePointer) => ({
			message: "constructors in/after an Optional Chain are not allowed",
			advice: responsiblePointer && [
				{
					type: "log",
					category: "info",
					text: "Optional chain member responsible",
				},
				{
					type: "frame",
					location: responsiblePointer,
				},
			],
		}),
		UNKNOWN_EXPRESSION_ATOM_START: (context) => ({
			message: "Unknown start to an " + context,
		}),
		INVALID_META_PROPERTY: (metaName, propertyName) => ({
			message: "The only valid meta property for " +
			metaName +
			" is " +
			metaName +
			"." +
			propertyName,
		}),
		ARGUMENT_CLASH_IN_STRICT: (name, loc) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Argument <emphasis>${name}</emphasis> name clash in strict mode`,
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildDuplicateLocationAdvice([
				loc,
			]),
		}),
		RESERVED_WORD: (word) => ({
			message: word + " is a reserved word",
		}),
		UNEXPECTED_KEYWORD: (keyword) => ({
			message: "Unexpected keyword " + keyword,
		}),
		UNEXPECTED_TOKEN: (expected, possibleShiftMistake) => ({
			message: expected === undefined
				? "Unexpected token"
				: "Unexpected token, expected " + expected,
			advice: possibleShiftMistake
				? [
						{
							type: "log",
							category: "info",
							text: "Did you accidently hold shift?",
						},
					]
				: [],
		}),
		EXPECTED_CLOSING: (name, char, location) => ({
			message: "Unclosed " + name,
			advice: [
				{
					type: "log",
					category: "info",
					text: "We expected to find the closing character <emphasis>" +
					char +
					"</emphasis> here",
				},
				{
					type: "frame",
					location,
				},
			],
		}),
		EXPECTED_KEYWORD: (keyword) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Expected keyword ${keyword}`,
		}),
		ESCAPE_SEQUENCE_IN_WORD: (word) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`${word} can't contain a unicode escape`,
		}),
		EXPECTED_ENABLE_SYNTAX: (syntaxName) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Expected ${syntaxName} syntax to be enabled`,
		}),
		UNEXPECTED_HASH: (exclamationFollowed) => ({
			message: "Unexpected character #",
			advice: exclamationFollowed
				? [
						{
							type: "log",
							category: "info",
							text: "Did you want to write a hashbang? A hashbang can only be the first thing in a file.",
						},
					]
				: [],
		}),
		UNEXPECTED_UNICODE_CHARACTER: (
			char,
			unicodeName,
			equivalentChar,
			equivalentName,
		) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unexpected Unicode character '<emphasis>${char}</emphasis>' (<emphasis>${unicodeName}</emphasis>)`,
			advice: [
				{
					type: "log",
					category: "info",
					text: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Did you mean '<emphasis>${equivalentChar}</emphasis>' (<emphasis>${equivalentName}</emphasis>)? Both characters look the same, but are not.`,
				},
			],
		}),
		EXPECTED_NUMBER_IN_RADIX: (radix) => ({
			message: "Expected number in radix " + String(radix),
		}),
		INVALID_IDENTIFIER_NAME: (name) => ({
			message: "Invalid identifier " + name,
		}),
		ESCAPE_SEQUENCE_IN_KEYWORD: (keyword) => ({
			message: "Escape sequence in keyword " + keyword,
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/typeCheck.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$typeCheck_ts$typeCheck = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		NOT_CALLABLE: {
			category: "typeCheck/uncallable",
			message: "This type isn't callable",
		},
		INCOMPATIBILITY: (upper, originLoc) => ({
			category: "typeCheck/incompatible",
			message: "Type incompatibility found",
			advice: [
				{
					type: "log",
					category: "error",
					text: "This type is incompatible with expected type of",
				},
				originLoc === undefined
					? {
							type: "log",
							category: "info",
							text: upper,
						}
					: {
							type: "frame",
							location: Object.assign({}, originLoc, {marker: upper}),
						},
			],
		}),
		UNKNOWN_IMPORT: (importedName, source, possibleNames) => ({
			category: "typeCheck/unknownImport",
			message: "Unknown import '" + importedName + "' in '" + source + "'",
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
				importedName,
				possibleNames,
			),
		}),
		UNKNOWN_PROP: (key, possibleNames) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Property ${key} not found in`,
			category: "typeCheck/unknownProperty",
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
				key,
				possibleNames,
			),
		}),
		UNDECLARED_VARIABLE: (name, possibleNames) => ({
			category: "typeCheck/undeclaredVariable",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Undeclared variable ${name}`,
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
				name,
				possibleNames,
			),
		}),
		NOT_EXHAUSTIVE: (only, target) => ({
			category: "typeCheck/notExhaustive",
			//message += `but allows ${this.extraenous.map(type => this.utils.humanize(type)).join(' | ')}`;
			message: "Expected only a " + only + " but got " + target,
		}),
		MISSING_CONDITION: (missing) => ({
			category: "typeCheck/missingCondition",
			message: "Missing the conditions " + missing.join(", "),
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/consume.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$consume_ts$consume = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		SET_PROPERTY_NON_OBJECT: "Attempted to set a property on a non-object",
		EXPECTED_JSON_VALUE: "Expected a JSON value",
		EXPECTED_OBJECT: "Expected object",
		EXPECTED_ARRAY: "Expected array",
		EXPECTED_DATE: "Expected a date",
		EXPECTED_BOOLEAN: "Expected a boolean",
		EXPECTED_STRING: "Expected a string",
		EXPECTED_BIGINT: "Expected a bigint",
		EXPECTED_NUMBER: "Expected a number",
		EXPECTED_URL: "Expected a URL",
		EXPECTED_VALID_NUMBER: "Expected valid number",
		EXPECTED_ABSOLUTE_PATH: "Expected an absolute file path",
		EXPECTED_RELATIVE_PATH: "Expected a relative file path",
		EXPECTED_EXPLICIT_RELATIVE_PATH: "Expected an explicit relative file path. This is one that starts with <emphasis>./</emphasis> or <emphasis>../</emphasis>",
		INVALID: "Invalid value",
		EXPECTED_NUMBER_BETWEEN: (min, max) => ({
			message: "Expected number between " + min + " and " + max,
		}),
		EXPECTED_NUMBER_HIGHER: (num) => ({
			message: "Expected number higher than " + num,
		}),
		EXPECTED_NUMBER_LOWER: (num) => ({
			message: "Expected number lower than " + num,
		}),
		INVALID_STRING_SET_VALUE: (value, validValues) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Invalid value <emphasis>${value}</emphasis>`,
			advice: [
				{
					type: "log",
					category: "info",
					text: "Possible values are",
				},
				{
					type: "list",
					list: validValues.map((str) =>
						___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(str)
					),
				},
			],
		}),
		UNUSED_PROPERTY: (key, type, knownProperties) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unknown <emphasis>${key}</emphasis> ${type}`,
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
				key,
				knownProperties,
				{
					ignoreCase: true,
				},
			),
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/manifest.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$manifest_ts$manifest = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		TOO_MANY_HASH_PARTS: "Too many hashes",
		MISSING_HOSTED_GIT_USER: "Missing user",
		MISSING_HOSTED_GIT_REPO: "Missing repo",
		TOO_MANY_HOSTED_GIT_PARTS: "Expected only 2 parts",
		EMPTY_NPM_PATTERN: "Missing rest of npm dependency pattern",
		TOO_MANY_NPM_PARTS: "Too many @ signs",
		STRING_BIN_WITHOUT_NAME: "A string bin is only allowed if the manifest has a name property",
		MISSING_REPO_URL: "Missing repo URL",
		MIXED_EXPORTS_PATHS: "Cannot mix a root conditional export with relative paths",
		NAME_EXCEEDS: "cannot exceed 214 characters",
		INVALID_NAME_START: "cannot start with a dot or underscore",
		ORG_WITH_NO_PACKAGE_NAME: "contains an org but no package name",
		ORG_TOO_MANY_PARTS: "contains too many name separators",
		REDUNDANT_ORG_NAME_START: "Redundant <emphasis>@</emphasis> in org name",
		INVALID_NAME_CHAR: (char) => ({
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`The character <emphasis>${char}</emphasis> isn't allowed`,
		}),
		INCORRECT_CASING: (typoKey, correctKey) => ({
			message: typoKey + " has incorrect casing, should be " + correctKey,
		}),
		INCORRECT_CAMEL_CASING: (typoKey, correctKey) => ({
			message: typoKey +
			" isn't correctly camel cased when it should be " +
			correctKey,
		}),
		TYPO: (typoKey, correctKey) => ({
			message: typoKey + " is a typo of " + correctKey,
		}),
	});


  // project-rome/@romejs/diagnostics/descriptions/projectConfig.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$projectConfig_ts$projectConfig = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		BOOLEAN_CATEGORY: (enabled) => ({
			message: "Expected an object here but got a boolean",
			advice: [
				{
					type: "log",
					category: "info",
					text: 'You likely wanted `{"enabled": ' +
					String(enabled) +
					"}` instead",
				},
			],
		}),
		RECURSIVE_CONFIG: "Recursive config",
	});


  // project-rome/@romejs/diagnostics/descriptions/lint.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$lint_ts$lint = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory({
		REACT_NO_REDUNDANT_SHOULD_COMPONENT_UPDATE: {
			category: "lint/react/noRedundantShouldComponentUpdate",
			message: "Do not implement <emphasis>shouldComponentUpdate</emphasis> when extending <emphasis>React.PureComponent</emphasis>.",
		},
		REACT_NO_UNSAFE: (oldMethod, newMethod, details) => ({
			category: "lint/react/noUnsafe",
			message: "<emphasis>" +
			oldMethod +
			"</emphasis> is unsafe for use in async rendering. Update the component to use " +
			newMethod +
			" instead. " +
			details,
		}),
		REACT_NO_DID_MOUNT_SET_STATE: {
			category: "lint/react/noDidMountSetState",
			message: "Avoid <emphasis>this.setState</emphasis> in <emphasis>componentDidMount</emphasis>. This can cause an unexpected second render, which can cause visual layout thrashing.",
		},
		REACT_BUTTON_HAS_TYPE: {
			category: "lint/react/buttonHasType",
			message: "Use an explicit <emphasis>type</emphasis> prop on <emphasis>" +
			___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup("<button>") +
			"</emphasis> elements.",
		},
		JSX_A11Y_TABINDEX_NO_POSITIVE: {
			category: "lint/jsx-a11y/tabindexNoPositive",
			message: "Avoid positive integer values for <emphasis>tabIndex</emphasis>.",
		},
		JSX_A11Y_MOUSE_EVENTS_HAVE_KEY_EVENTS: (mouseEvent, keyboardEvent) => ({
			category: "lint/jsx-a11y/mouseEventsHaveKeyEvents",
			message: "The mouse event <emphasis>" +
			mouseEvent +
			"</emphasis> should be paired with the event <emphasis>" +
			keyboardEvent +
			"</emphasis>",
		}),
		JSX_A11Y_MEDIA_HAS_CAPTION: {
			category: "lint/jsx-a11y/mediaHasCaption",
			message: "<emphasis>audio</emphasis> and <emphasis>video</emphasis> elements should have <emphasis>track</emphasis> for captions",
		},
		REACT_NO_WILL_UPDATE_SET_STATE: {
			category: "lint/react/noWillUpdateSetState",
			message: "Avoid <emphasis>this.setState</emphasis> in <emphasis>componentWillUpdate</emphasis>",
		},
		JSX_A11Y_ARIA_UNSUPPORTED_ELEMENTS: {
			category: "lint/jsx-a11y/ariaUnsupportedElements",
			message: "Avoid <emphasis>role</emphasis> and <emphasis>aria-* props</emphasis> on <emphasis>meta</emphasis>, <emphasis>html</emphasis>, <emphasis>script</emphasis>, and <emphasis>style</emphasis> elements.",
		},
		JSX_A11Y_ANCHOR_HAS_CONTENT: {
			category: "lint/jsx-a11y/anchorHasContent",
			message: "Anchor must have content and the content must be accessible by a screen reader.",
		},
		JSX_A11Y_LANG: (value, suggestions) => ({
			category: "lint/jsx-a11y/lang",
			message: "The <emphasis>lang</emphasis> attribute must have a valid value.",
			advice: ___R$project$rome$$romejs$diagnostics$helpers_ts$buildSuggestionAdvice(
				value,
				suggestions,
			),
		}),
		JSX_A11Y_ALT_TEXT: {
			category: "lint/jsx-a11y/altText",
			message: "<emphasis>img</emphasis>, <emphasis>area</emphasis>, <emphasis>input type='image'</emphasis>, <emphasis>object</emphasis> must have alt text",
		},
		JSX_A11Y_HEADING_HAS_CONTENT: {
			category: "lint/jsx-a11y/headingHasContent",
			message: "Headings must have content and the content must be accessible by a screen reader.",
		},
		JSX_A11Y_HTML_HAS_LANG: {
			category: "lint/jsx-a11y/htmlHasLang",
			message: "<emphasis>html</emphasis> elements must have a <emphasis>lang prop</emphasis>.",
		},
		JSX_A11Y_IFRAME_HAS_TITLE: {
			category: "lint/jsx-a11y/iframeHasTitle",
			message: "<emphasis>iframe</emphasis> elements should have a <emphasis>title prop</emphasis>.",
		},
		JSX_A11Y_IMG_REDUNDANT_ALT: {
			category: "lint/jsx-a11y/imgRedundantAlt",
			message: '<emphasis>img</emphasis> element alt descriptions must not contain "image", "picture", or "photo"',
		},
		JSX_A11Y_NO_ACCESS_KEY: {
			category: "lint/jsx-a11y/noAccessKey",
			message: "The <emphasis>accessKey</emphasis> prop is not allowed. Inconsistencies between keyboard shortcuts and keyboard comments used by screenreader and keyboard only users create a11y complications.",
		},
		JSX_A11Y_NO_AUTOFOCUS: {
			category: "lint/jsx-a11y/noAutofocus",
			message: "The <emphasis>autoFocus</emphasis> prop should not be used, as it can reduce usability and accessibility for users.",
		},
		JSX_A11Y_NO_DISTRACTING_ELEMENTS: (element) => ({
			category: "lint/jsx-a11y/noDistractingElements",
			message: "Do not use " +
			element +
			" elements as they can create visual accessibility issues and are deprecated.",
		}),
		JSX_A11Y_NO_ON_CHANGE: {
			category: "lint/jsx-a11y/noOnChange",
			message: "<emphasis>onBlur</emphasis> should be used in favor of <emphasis>onChange</emphasis>. Only use <emphasis>onChange</emphasis> if absolutely necessary without negatively affecting keyboard only or screen reader users.",
		},
		JSX_A11Y_NO_TARGET_BLANK: {
			category: "lint/jsx-a11y/noTargetBlank",
			message: 'Using <emphasis>target="_blank"</emphasis> without <emphasis>rel="noreferrer"</emphasis> is a security risk.',
		},
		JSX_A11Y_NO_SCOPE: {
			category: "lint/jsx-a11y/scope",
			message: "The <emphasis>scope</emphasis> prop can only be used on <emphasis>th</emphasis> elements.",
		},
		REACT_JSX_KEY: (origin) => ({
			category: "lint/react/jsxKey",
			message: 'Missing the "key" prop for element in ' + origin,
		}),
		REACT_JSX_NO_COMMENT_TEXT: {
			category: "lint/react/jsxNoCommentText",
			message: "Comments inside children should be placed in braces",
		},
		REACT_NO_CHILDREN_PROP: {
			category: "lint/react/noChildrenProp",
			message: "children should not be passed as a prop",
		},
		REACT_NO_DANGER: {
			category: "lint/react/noDanger",
			message: "dangerouslySetInnerHTML should be avoided",
		},
		REACT_NO_DANGER_WITH_CHILDREN: {
			category: "lint/react/noDangerWithChildren",
			message: "Only set one of <emphasis>children</emphasis> or <emphasis>props.dangerouslySetInnerHTML</emphasis>.",
		},
		REACT_NO_DID_UPDATE_SET_STATE: {
			category: "lint/react/noDidUpdateSetState",
			message: "Avoid this.setState in componentDidUpdate",
		},
		REACT_NO_FIND_DOM_NODE: {
			category: "lint/react/noFindDOMNode",
			message: "Do not use findDOMNode",
		},
		REACT_REACT_IN_JSX_SCOPE: {
			category: "lint/react/reactInJsxScope",
			message: "<emphasis>React</emphasis> must be in scope when using JSX",
		},
		REACT_STYLE_PROP_OBJECT: {
			category: "lint/react/stylePropObject",
			message: "<emphasis>style</emphasis> property value must be an object.",
		},
		REACT_VOID_DOM_ELEMENTS_NO_CHILDREN: (element, properties) => ({
			category: "lint/react/voidDomElementsNoChildren",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`<emphasis>${element}</emphasis> is a void element tag and must not have <emphasis>${___R$project$rome$$romejs$diagnostics$descriptions$index_ts$orJoin(
				properties,
			)}</emphasis>.`,
		}),
		JS_IMPORT_DEFAULT_BASENAME: (prev, basename) => ({
			category: "lint/js/importDefaultBasename",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`When importing the default, use the basename <emphasis>${basename}</emphasis>`,
			advice: [
				{
					type: "log",
					category: "info",
					text: "If you really meant this then use this instead",
				},
				{
					type: "code",
					code: ___R$project$rome$$romejs$string$markup$escape_ts$markup`import {default as ${prev}}`,
				},
			],
		}),
		JS_NO_COMMA_OPERATOR: {
			category: "lint/js/noCommaOperator",
			message: "Avoid usage of the comma operator. It can lead to easy mistakes and ambiguous code.",
			advice: [
				{
					type: "log",
					category: "info",
					text: "If you want multiple expressions then break it up.",
				},
			],
		},
		JS_NEGATION_ELSE: {
			category: "lint/js/negationElse",
			message: "Invert the blocks when you have a negation test",
		},
		JS_DUPLICATE_IMPORT_SOURCE: (seenLocation) => ({
			category: "lint/js/duplicateImportSource",
			message: "This module has already been imported",
			advice: [
				{
					type: "log",
					category: "info",
					text: "Previously imported here",
				},
				{
					type: "frame",
					location: seenLocation,
				},
			],
		}),
		JS_PREFER_BLOCK_STATEMENT: {
			category: "lint/js/preferBlockStatements",
			message: "Block statements are preferred in this position",
		},
		JS_PREFER_TEMPLATE: {
			category: "lint/js/preferTemplate",
			message: "Template literals are preferred over string concatenation",
		},
		JS_PREFER_WHILE: {
			category: "lint/js/preferWhile",
			message: "A while loop should be used over a for loop",
		},

		JS_UNSAFE_NEGATION: {
			category: "lint/js/unsafeNegation",
			message: "Unsafe usage of negation operator in left side of binary expression",
		},
		JS_UNUSED_VARIABLES: (kind, name) => ({
			category: "lint/js/unusedVariables",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unused ${kind} <emphasis>${name}</emphasis>`,
		}),
		JS_UNDECLARED_VARIABLES: (name) => ({
			category: "lint/js/undeclaredVariables",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Undeclared variable <emphasis>${name}</emphasis>`,
		}),
		JS_VARIABLE_CAMEL_CASE: (name, camelCaseName) => ({
			category: "lint/js/camelCase",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Variable <emphasis>${name}</emphasis> should be camel cased as <emphasis>${camelCaseName}</emphasis>`,
		}),
		JS_IDENTIFIER_CAMEL_CASE: (name, camelCaseName) => ({
			category: "lint/js/camelCase",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Identifier <emphasis>${name}</emphasis> should be camel cased as <emphasis>${camelCaseName}</emphasis>`,
		}),
		JS_CASE_SINGLE_STATEMENT: {
			category: "lint/js/caseSingleStatement",
			message: "A switch case should only have a single statement. If you want more then wrap it in a block.",
		},
		JS_CONFUSING_LANGUAGE: (description, word, suggestion, advice) => ({
			category: "lint/js/confusingLanguage",
			message: description,
			advice: [
				...advice,
				{
					type: "log",
					category: "info",
					text: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Consider using <emphasis>${suggestion}</emphasis> instead`,
				},
			],
		}),
		JS_DOUBLE_EQUALS: {
			category: "lint/js/doubleEquals",
			message: "Use === instead of ==",
			advice: [
				{
					type: "log",
					category: "info",
					text: "== is only allowed when comparing against null",
				},
			],
		},
		JS_EMPTY_MATCHES: {
			category: "lint/js/emptyMatches",
			message: "The expression can return empty matches, and may match infinitely in some use cases",
		},
		JS_NEGATE_DOUBLE_EQUALS: {
			category: "lint/js/doubleEquals",
			message: "Use !== instead of !=",
			advice: [
				{
					type: "log",
					category: "info",
					text: "!= is only allowed when comparing against null",
				},
			],
		},
		JS_NO_CATCH_ASSIGN: {
			category: "lint/js/noCatchAssign",
			message: "Don't reassign catch parameters",
		},
		JS_SPARSE_ARRAY: {
			category: "lint/js/sparseArray",
			message: "Your array contains an empty slot",
		},
		JS_SINGLE_VAR_DECLARATOR: {
			category: "lint/js/singleVarDeclarator",
			message: "Declare each variable separately",
		},
		JS_PREFER_FUNCTION_DECLARATIONS: {
			category: "lint/js/preferFunctionDeclarations",
			message: "Use a function declaration instead of a const function",
		},
		JS_NO_VAR: {
			category: "lint/js/noVar",
			message: "Variable declarations using `var` are disallowed, use `let` or `const` instead.",
		},
		JS_NO_SHORTHAND_ARRAY_TYPE: {
			category: "lint/js/noShorthandArrayType",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
				"Use Array<T> instead of shorthand T[]",
			),
		},
		JS_NO_UNSAFE_FINALLY: (type) => ({
			category: "lint/js/noUnsafeFinally",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Unsafe usage of ${type}.`,
		}),
		JS_NO_TEMPLATE_CURLY_IN_STRING: {
			category: "lint/js/noTemplateCurlyInString",
			message: "Unexpected template string expression.",
		},
		JS_NO_SHADOW_RESTRICTED_NAMES: (name) => ({
			category: "lint/js/noShadowRestrictedNames",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Shadowing of global property <emphasis>${name}</emphasis>`,
			advice: [
				{
					type: "log",
					category: "info",
					text: "Consider renaming this variable. It's easy to confuse the origin of variables when they're named after a known global.",
				},
			],
		}),
		JS_NO_MULTIPLE_SPACES_IN_REGEX_LITERAL: (count) => ({
			category: "lint/js/noMultipleSpacesInRegularExpressionLiterals",
			message: "Unclear multiple spaces in regular expression",
			advice: [
				{
					type: "log",
					category: "info",
					text: "It's hard to visually count the amount of spaces, it's clearer if you use a quantifier instead. eg / {" +
					String(count) +
					"}/",
				},
			],
		}),
		JS_NO_LABEL_VAR: {
			category: "lint/js/noLabelVar",
			message: "Labels should not be variable names",
		},
		JS_NO_IMPORT_ASSIGN: (name) => ({
			category: "lint/js/noImportAssign",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`<emphasis>${name}</emphasis> is read-only`,
		}),
		JS_NO_EXTRA_BOOLEAN_CAST: {
			category: "lint/js/noExtraBooleanCast",
			message: "Redundant double negation.",
		},
		JS_NO_FUNCTION_ASSIGN: {
			category: "lint/js/noFunctionAssign",
			message: "Reassignment of function declaration",
		},
		JS_NO_EMPTY_CHAR_SET: {
			category: "lint/js/noEmptyCharacterClass",
			message: "Empty character classes in regular expressions are not allowed",
		},
		JS_NO_DUPLICATE_KEYS: (key) => ({
			category: "lint/js/noDuplicateKeys",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Duplicate key <emphasis>${key}</emphasis>`,
		}),
		JS_NO_POSIX_IN_REGULAR_EXPRESSION: {
			category: "lint/js/noPosixInRegularExpression",
			message: "POSIX Character Classes and Collating Sequences are not supported in ECMAscript Regular Expressions",
		},
		JS_NO_DUPLICATE_CASE: (value) => ({
			category: "lint/js/noDuplicateCase",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Duplicate case <emphasis>${value}</emphasis> not allowed.`,
		}),
		JS_NO_DUPE_ARGS: (name) => ({
			category: "lint/js/noDupeArgs",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Duplicate argument <emphasis>${name}</emphasis> in function definition`,
		}),
		JS_NO_DELETE: {
			category: "lint/js/noDelete",
			message: "Unexpected 'delete' operator.",
		},
		JS_NO_DELETE_VARS: {
			category: "lint/js/noDeleteVars",
			message: "Variables should not be deleted.",
		},
		JS_NO_DEBUGGER: {
			category: "lint/js/noDebugger",
			message: "Unexpected 'debugger' statement",
		},
		JS_NO_COND_ASSIGN: {
			category: "lint/js/noCondAssign",
			message: "Cannot assign variable in loop condition",
		},
		JS_NO_COMPARE_NEG_ZERO: (op) => ({
			category: "lint/js/noCompareNegZero",
			message: "Do not use the '" + op + "' operator to compare against -0",
			fixable: op === "===",
		}),
		JS_NO_ASYNC_PROMISE_EXECUTOR: {
			category: "lint/js/noAsyncPromiseExecutor",
			message: "Promise executor functions should not be async.",
		},
		JS_GETTER_RETURN: (got) => ({
			category: "lint/js/getterReturn",
			message: "Expected a 'return' at end of a getter method but got " + got,
		}),
		JS_NO_SETTER_RETURN: {
			category: "lint/js/noSetterReturn",
			message: "Setter cannot return a value",
		},
		JS_EMPTY_BLOCKS: {
			category: "lint/js/emptyBlocks",
			message: "Empty block",
		},
		JS_NO_ARGUMENTS: {
			category: "lint/js/noArguments",
			message: "Use the rest parameters instead of 'arguments'",
		},
		JS_DUPLICATE_REGEX_GROUP_NAME: (name) => ({
			category: "lint/js/noDuplicateGroupNamesInRegularExpressions",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Duplicate group name <emphasis>${name}</emphasis> in regular expression`,
		}),
		JS_NO_REFERENCE_TO_NON_EXISTING_GROUP: (name) => ({
			category: "lint/js/noReferenceToNonExistingGroup",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`Reference to non-existent group <emphasis>"${name}"</emphasis>`,
		}),
		JS_DEFAULT_EXPORT_SAME_BASENAME: (
			{
				defaultName,
				defaultType,
				actualFilename,
				correctFilename,
			},
		) => {
			let adviceMessage = "";

			if (defaultName === "*default*") {
				adviceMessage += "The";
			} else {
				adviceMessage +=
					"Filename should be <emphasis>" +
					correctFilename +
					"</emphasis> or the";
			}

			adviceMessage +=
				" " +
				defaultType +
				" name should be <emphasis>" +
				actualFilename +
				"</emphasis>";

			return {
				category: "lint/js/defaultExportSameBasename",
				message: "Filename and the name of a default " +
				defaultType +
				" should match",
				advice: [
					{
						type: "log",
						category: "info",
						text: adviceMessage,
					},
				],
			};
		},
		JS_RESTRICTED_GLOBALS: (globalName) => ({
			category: "lint/js/restrictedGlobals",
			message: ___R$project$rome$$romejs$string$markup$escape_ts$markup`The use of the existing global variable <emphasis>${globalName}</emphasis> is not allowed. Use local variable instead.`,
		}),
		JS_SORT_EXPORT_SPECIFIERS: {
			category: "lint/js/sortImportExportSpecifiers",
			message: "Specifiers of the export declaration should be sorted alphabetically.",
		},
		JS_SORT_IMPORT_SPECIFIERS: {
			category: "lint/js/sortImportExportSpecifiers",
			message: "Specifiers of the import declaration should be sorted alphabetically.",
		},
		PENDING_FIXES: (relativeFilename, original, formatted) => ({
			category: "lint/pendingFixes",
			message: "Pending formatting and recommended autofixes",
			advice: [
				{
					type: "diff",
					diff: ___R$project$rome$$romejs$string$diff$index_ts$default(
						original,
						formatted,
					),
				},
				({
					type: "action",
					command: "lint",
					shortcut: "f",
					instruction: "To apply fixes and formatting run",
					noun: "Apply fixes and format",
					args: [relativeFilename],
					commandFlags: {
						save: true,
					},
				}),
				({
					type: "action",
					hidden: true,
					command: "lint",
					shortcut: "o",
					instruction: "To format this file without any fixes run",
					noun: "Only format",
					args: [relativeFilename],
					commandFlags: {
						format: true,
					},
				}),
			],
		}),
		TS_NO_EXPLICIT_ANY: {
			category: "lint/ts/noExplicitAny",
			message: "Unexpected any. Specify a different type.",
		},
	});


  // project-rome/@romejs/diagnostics/descriptions/index.ts
const ___R$project$rome$$romejs$diagnostics$descriptions$index_ts = {
		createBlessedDiagnosticMessage: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createBlessedDiagnosticMessage,
		join: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$join,
		andJoin: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$andJoin,
		orJoin: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$orJoin,
		addEmphasis: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$addEmphasis,
		createDiagnosticsCategory: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory,
		get descriptions() {
			return ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions;
		},
	};

	function ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createBlessedDiagnosticMessage(
		value,
	) {
		return {
			type: "PARTIAL_BLESSED_DIAGNOSTIC_MESSAGE",
			value,
		};
	}

	function ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$join(
		conjunction,
		items,
	) {
		if (items.length === 0) {
			return "";
		} else if (items.length === 1) {
			return items[0];
		} else {
			const popped = items.pop();
			return [...items, conjunction + " " + popped].join(", ");
		}
	}

	function ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$andJoin(
		items,
	) {
		return ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$join(
			"and",
			items,
		);
	}

	function ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$orJoin(
		items,
	) {
		return ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$join(
			"or",
			items,
		);
	}

	function ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$addEmphasis(
		items,
	) {
		return items.map((item) => "<emphasis>" + item + "</emphasis>");
	}













	function ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createDiagnosticsCategory(
		input,
	) {
		// rome-ignore lint/js/noExplicitAny
		const category = {};

		for (const key in input) {
			const value = input[key];

			if (typeof value === "string") {
				category[key] = {
					advice: [],
					message: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createBlessedDiagnosticMessage(
						value,
					),
				};
			} else if (typeof value === "function") {
				// rome-ignore lint/js/noExplicitAny
				const callback = (value);

				category[key] = function(...params) {
					const ___R$ = callback.apply(null, [...params]);
					const ret = Object.assign({}, ___R$);
					delete ret.message;
					const {message} = ___R$;
					return Object.assign(
						{advice: []},
						ret,
						{
							message: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createBlessedDiagnosticMessage(
								message,
							),
						},
					);
				};
			} else {
				const ___R$1 = (value);
				const obj = Object.assign({}, ___R$1);
				delete obj.message;
				const {message} = ___R$1;
				category[key] = Object.assign(
					{advice: []},
					obj,
					{
						message: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createBlessedDiagnosticMessage(
							message,
						),
					},
				);
			}
		}

		return category;
	}

	const ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions = {
		FLAGS: ___R$project$rome$$romejs$diagnostics$descriptions$flags_ts$flags,
		PARSER_CORE: ___R$project$rome$$romejs$diagnostics$descriptions$parserCore_ts$parserCore,
		REGEX_PARSER: ___R$project$rome$$romejs$diagnostics$descriptions$regexp_ts$regexp,
		JSON: ___R$project$rome$$romejs$diagnostics$descriptions$json_ts$json,
		SEMVER: ___R$project$rome$$romejs$diagnostics$descriptions$semver_ts$semver,
		V8: ___R$project$rome$$romejs$diagnostics$descriptions$v8_ts$v8,
		LINT_COMMAND: ___R$project$rome$$romejs$diagnostics$descriptions$lintCommand_ts$lintCommand,
		LINT: ___R$project$rome$$romejs$diagnostics$descriptions$lint_ts$lint,
		PROJECT_MANAGER: ___R$project$rome$$romejs$diagnostics$descriptions$projectManager_ts$projectManager,
		COMPILER: ___R$project$rome$$romejs$diagnostics$descriptions$compiler_ts$compiler,
		STRING_ESCAPE: ___R$project$rome$$romejs$diagnostics$descriptions$stringEscape_ts$stringEscape,
		ANALYZE_DEPENDENCIES: ___R$project$rome$$romejs$diagnostics$descriptions$analyzeDependencies_ts$analyzeDependencies,
		STRING_MARKUP: ___R$project$rome$$romejs$diagnostics$descriptions$stringMarkup_ts$stringMarkup,
		PATH_MATCH: ___R$project$rome$$romejs$diagnostics$descriptions$pathMatch_ts$pathMatch,
		TESTS: ___R$project$rome$$romejs$diagnostics$descriptions$tests_ts$tests,
		SUPPRESSIONS: ___R$project$rome$$romejs$diagnostics$descriptions$suppressions_ts$suppressions,
		SNAPSHOTS: ___R$project$rome$$romejs$diagnostics$descriptions$snapshots_ts$snapshots,
		BUNDLER: ___R$project$rome$$romejs$diagnostics$descriptions$bundler_ts$bundler,
		RESOLVER: ___R$project$rome$$romejs$diagnostics$descriptions$resolver_ts$resolver,
		SPDX: ___R$project$rome$$romejs$diagnostics$descriptions$spdx_ts$spdx,
		JS_PARSER: ___R$project$rome$$romejs$diagnostics$descriptions$jsParser_ts$jsParser,
		TYPE_CHECK: ___R$project$rome$$romejs$diagnostics$descriptions$typeCheck_ts$typeCheck,
		CONSUME: ___R$project$rome$$romejs$diagnostics$descriptions$consume_ts$consume,
		MANIFEST: ___R$project$rome$$romejs$diagnostics$descriptions$manifest_ts$manifest,
		PROJECT_CONFIG: ___R$project$rome$$romejs$diagnostics$descriptions$projectConfig_ts$projectConfig,
	};


  // project-rome/@romejs/diagnostics/DiagnosticsNormalizer.ts
class ___R$project$rome$$romejs$diagnostics$DiagnosticsNormalizer_ts$default {
		constructor(markupOptions, sourceMaps) {
			this.sourceMaps = sourceMaps;
			this.markupOptions = markupOptions || {};
			this.hasMarkupOptions = markupOptions !== undefined;
		}

		normalizeFilename(filename) {
			const {markupOptions} = this;
			if (markupOptions === undefined || filename === undefined) {
				return filename;
			}
			const {normalizeFilename} = markupOptions;
			if (normalizeFilename === undefined) {
				return filename;
			}

			return normalizeFilename(filename);
		}

		normalizePositionValue(value) {
			if (this.markupOptions !== undefined && this.markupOptions.stripPositions) {
				return undefined;
			} else {
				return value;
			}
		}

		normalizeLocation(location) {
			const {sourceMaps} = this;
			if (sourceMaps === undefined) {
				return location;
			}

			let {marker, filename, start, end} = location;

			if (filename !== undefined) {
				if (start !== undefined) {
					const resolved = sourceMaps.approxOriginalPositionFor(
						filename,
						start.line,
						start.column,
					);
					if (resolved !== undefined) {
						filename = resolved.source;
						start = Object.assign(
							{},
							start,
							{line: resolved.line, column: resolved.column},
						);
					}
				}

				if (end !== undefined) {
					const resolved = sourceMaps.approxOriginalPositionFor(
						filename,
						end.line,
						end.column,
					);
					if (resolved !== undefined) {
						// TODO confirm this is the same as `start` if it resolved
						filename = resolved.source;
						end = Object.assign(
							{},
							end,
							{line: resolved.line, column: resolved.column},
						);
					}
				}
			}

			return Object.assign(
				{},
				location,
				{
					filename: this.normalizeFilename(filename),
					marker: this.maybeNormalizeMarkup(marker),
					start: this.normalizePositionValue(start),
					end: this.normalizePositionValue(end),
				},
			);
		}

		normalizeMarkup(markup) {
			return ___R$project$rome$$romejs$string$markup$format_ts$normalizeMarkup(
				markup,
				this.markupOptions,
			).text;
		}

		maybeNormalizeMarkup(markup) {
			return markup === undefined ? undefined : this.normalizeMarkup(markup);
		}

		normalizeDiagnosticAdviceItem(item) {
			const {sourceMaps} = this;

			switch (item.type) {
				case "frame":
					return Object.assign(
						{},
						item,
						{location: this.normalizeLocation(item.location)},
					);

				case "list":
					return Object.assign(
						{},
						item,
						{list: item.list.map((markup) => this.normalizeMarkup(markup))},
					);

				case "log":
					return Object.assign(
						{},
						item,
						{text: this.normalizeMarkup(item.text)},
					);

				case "action":
					if (this.markupOptions.stripPositions) {
						return Object.assign(
							{},
							item,
							{
								// Command flags could have position information
								commandFlags: {},
							},
						);
					} else {
						return item;
					}

				case "stacktrace":
					return Object.assign(
						{},
						item,
						{
							frames: item.frames.map((frame) => {
								const {filename, line, column} = frame;

								if (
									filename === undefined ||
									line === undefined ||
									column === undefined ||
									(sourceMaps !== undefined && !sourceMaps.has(filename))
								) {
									return Object.assign(
										{},
										frame,
										{
											start: this.normalizePositionValue(line),
											column: this.normalizePositionValue(column),
											filename: this.normalizeFilename(filename),
										},
									);
								}

								if (sourceMaps !== undefined) {
									const resolved = sourceMaps.approxOriginalPositionFor(
										filename,
										line,
										column,
									);
									if (resolved !== undefined) {
										return Object.assign(
											{},
											frame,
											{
												filename: this.normalizeFilename(resolved.source),
												line: this.normalizePositionValue(resolved.line),
												column: this.normalizePositionValue(resolved.column),
											},
										);
									}
								}

								return frame;
							}),
						},
					);
			}

			return item;
		}

		normalizeDiagnostic(diag) {
			const {sourceMaps} = this;

			// Fast path for a common case
			if (
				!this.hasMarkupOptions &&
				(sourceMaps === undefined || !sourceMaps.hasAny())
			) {
				return diag;
			}

			const {description} = diag;

			const advice = description.advice.map((item) => {
				return this.normalizeDiagnosticAdviceItem(item);
			});

			diag = Object.assign(
				{},
				diag,
				{
					label: this.maybeNormalizeMarkup(diag.label),
					location: this.normalizeLocation(diag.location),
					description: Object.assign(
						{},
						description,
						{
							message: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createBlessedDiagnosticMessage(
								this.normalizeMarkup(description.message.value),
							),
							advice,
						},
					),
				},
			);

			return diag;
		}
	}


  // project-rome/@romejs/diagnostics/derive.ts
const ___R$project$rome$$romejs$diagnostics$derive_ts = {
		mergeDiagnostics: ___R$project$rome$$romejs$diagnostics$derive_ts$mergeDiagnostics,
		derivePositionlessKeyFromDiagnostic: ___R$project$rome$$romejs$diagnostics$derive_ts$derivePositionlessKeyFromDiagnostic,
		deriveRootAdviceFromDiagnostic: ___R$project$rome$$romejs$diagnostics$derive_ts$deriveRootAdviceFromDiagnostic,
		deriveDiagnosticFromErrorStructure: ___R$project$rome$$romejs$diagnostics$derive_ts$deriveDiagnosticFromErrorStructure,
		deriveDiagnosticFromError: ___R$project$rome$$romejs$diagnostics$derive_ts$deriveDiagnosticFromError,
		getErrorStackAdvice: ___R$project$rome$$romejs$diagnostics$derive_ts$getErrorStackAdvice,
		addOriginsToDiagnostics: ___R$project$rome$$romejs$diagnostics$derive_ts$addOriginsToDiagnostics,
		addOriginsToDiagnostic: ___R$project$rome$$romejs$diagnostics$derive_ts$addOriginsToDiagnostic,
	};
	function ___R$$priv$project$rome$$romejs$diagnostics$derive_ts$normalizeArray(
		val,
	) {
		if (Array.isArray(val)) {
			return val;
		} else {
			return [];
		}
	}

	function ___R$project$rome$$romejs$diagnostics$derive_ts$mergeDiagnostics(
		rootDiag,
		...diags
	) {
		let mergedAdvice = [
			...___R$$priv$project$rome$$romejs$diagnostics$derive_ts$normalizeArray(
				rootDiag.description.advice,
			),
		];

		for (const diag of diags) {
			mergedAdvice = [
				...mergedAdvice,
				...___R$project$rome$$romejs$diagnostics$derive_ts$deriveRootAdviceFromDiagnostic(
					diag,
				).advice,
				...___R$$priv$project$rome$$romejs$diagnostics$derive_ts$normalizeArray(
					diag.description.advice,
				),
			];
		}

		return Object.assign(
			{},
			rootDiag,
			{
				description: Object.assign(
					{},
					rootDiag.description,
					{advice: mergedAdvice},
				),
			},
		);
	}

	function ___R$project$rome$$romejs$diagnostics$derive_ts$derivePositionlessKeyFromDiagnostic(
		diag,
	) {
		const normalizer = new ___R$project$rome$$romejs$diagnostics$DiagnosticsNormalizer_ts$default({
			stripPositions: true,
		});

		return JSON.stringify(normalizer.normalizeDiagnostic(diag));
	}

	function ___R$project$rome$$romejs$diagnostics$derive_ts$deriveRootAdviceFromDiagnostic(
		diag,
		opts = {
			skipFrame: false,
			includeHeaderInAdvice: true,
			outdated: false,
		},
	) {
		const advice = [];
		const {description, fixable, location} = diag;

		let header = ___R$project$rome$$romejs$diagnostics$helpers_ts$diagnosticLocationToMarkupFilelink(
			location,
		);

		if (diag.label !== undefined) {
			header += " <emphasis>" + diag.label + "</emphasis>";

			if (description.category !== undefined) {
				header += " <dim>" + description.category + "</dim>";
			}
		} else {
			if (description.category !== undefined) {
				header += " <emphasis>" + description.category + "</emphasis>";
			}
		}

		if (fixable === true) {
			header += " <inverse>FIXABLE</inverse>";
		}

		if (opts.outdated === true) {
			header += " <inverse>OUTDATED</inverse>";
		}

		if (opts.includeHeaderInAdvice === true) {
			advice.push({
				type: "log",
				category: "none",
				text: header,
			});
		}

		advice.push({
			type: "log",
			category: "error",
			text: description.message.value,
		});

		if (opts.skipFrame === false) {
			if (location.start !== undefined && location.end !== undefined) {
				advice.push({
					type: "frame",
					location: diag.location,
				});
			} else if (location.marker !== undefined) {
				// If we have no start/end, but we do have a marker then output is a log error
				advice.push({
					type: "log",
					category: "error",
					text: location.marker,
				});
			}
		}

		return {header, advice};
	}



	function ___R$project$rome$$romejs$diagnostics$derive_ts$deriveDiagnosticFromErrorStructure(
		struct,
		opts,
	) {
		const {filename} = opts;

		let targetFilename = filename;
		let targetCode = undefined;
		let targetLoc = undefined;

		let {frames, message = "Unknown error"} = struct;

		const {cleanFrames} = opts;
		if (cleanFrames !== undefined) {
			frames = cleanFrames(frames);
		}

		// Point the target to the closest frame with a filename
		for (const frame of frames) {
			if (frame.filename === undefined) {
				continue;
			}

			targetFilename = frame.filename;
			targetLoc = ___R$project$rome$$romejs$v8$errors_ts$getSourceLocationFromErrorFrame(
				frame,
			);
			break;
		}

		const advice = ___R$project$rome$$romejs$diagnostics$derive_ts$getErrorStackAdvice(
			Object.assign({}, struct, {frames}),
		);

		return {
			description: Object.assign(
				{
					message: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$createBlessedDiagnosticMessage(
						___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
							message,
						),
					),
				},
				opts.description,
				{
					advice: [
						...advice,
						...((opts.description == null ? undefined : opts.description.advice) || []),
					],
				},
			),
			location: {
				filename: targetFilename,
				start: targetLoc === undefined ? undefined : targetLoc.start,
				end: targetLoc === undefined ? undefined : targetLoc.end,
				sourceText: targetCode,
			},
			label: opts.label,
		};
	}

	function ___R$project$rome$$romejs$diagnostics$derive_ts$deriveDiagnosticFromError(
		error,
		opts,
	) {
		return ___R$project$rome$$romejs$diagnostics$derive_ts$deriveDiagnosticFromErrorStructure(
			___R$project$rome$$romejs$v8$errors_ts$getErrorStructure(error),
			opts,
		);
	}

	function ___R$project$rome$$romejs$diagnostics$derive_ts$getErrorStackAdvice(
		error,
		title,
	) {
		const advice = [];
		const {frames, stack} = error;

		if (frames.length === 0 && stack !== undefined) {
			// Just in case we didn't get the frames for some reason
			if (title !== undefined) {
				advice.push({
					type: "log",
					category: "info",
					text: title,
				});
			}

			// Remove the `message` from the `stack`
			let cleanStack = stack;
			let removeMessage = error.name + ": " + error.message;
			if (cleanStack.startsWith(removeMessage)) {
				cleanStack = cleanStack.slice(removeMessage.length);
			}
			cleanStack = cleanStack.trim();

			advice.push({
				type: "log",
				category: "warn",
				text: "Raw stack trace is being displayed as we did not receive any frames",
			});

			advice.push({
				type: "list",
				list: cleanStack.split("\n").map((line) =>
					___R$project$rome$$romejs$string$markup$escape_ts$escapeMarkup(
						line.trim(),
					)
				),
			});
		} else {
			const adviceFrames = frames.map((frame) => {
				const {
					typeName,
					functionName,
					methodName,
					filename,
					lineNumber,
					columnNumber,
					isEval,
					isNative,
					isConstructor,
					isAsync,
				} = frame;

				const prefixes = [];
				if (isAsync) {
					prefixes.push("await");
				}
				if (isEval) {
					prefixes.push("eval");
				}
				if (isConstructor) {
					prefixes.push("new");
				}
				const prefix = prefixes.length === 0 ? undefined : prefixes.join(" ");

				let object = typeName;
				let property = "<anonymous>";
				if (functionName !== undefined) {
					property = functionName;
				}
				if (methodName !== undefined) {
					property = methodName;
				}

				let suffix;
				if (isNative) {
					suffix = "native";
				}

				return {
					suffix,
					prefix,
					object,
					property,
					filename,
					line: lineNumber,
					column: columnNumber,
				};
			});

			advice.push({
				type: "stacktrace",
				title,
				frames: adviceFrames,
			});
		}

		return advice;
	}

	function ___R$project$rome$$romejs$diagnostics$derive_ts$addOriginsToDiagnostics(
		origins,
		diagnostics,
	) {
		return diagnostics.map((diag) => {
			return ___R$project$rome$$romejs$diagnostics$derive_ts$addOriginsToDiagnostic(
				origins,
				diag,
			);
		});
	}

	function ___R$project$rome$$romejs$diagnostics$derive_ts$addOriginsToDiagnostic(
		origins,
		diag,
	) {
		const newOrigins =
			diag.origins === undefined ? origins : [...origins, ...diag.origins];
		return Object.assign({}, diag, {origins: newOrigins});
	}


  // project-rome/@romejs/diagnostics/wrap.ts
const ___R$project$rome$$romejs$diagnostics$wrap_ts = {
		catchDiagnostics: ___R$project$rome$$romejs$diagnostics$wrap_ts$catchDiagnostics,
		catchDiagnosticsSync: ___R$project$rome$$romejs$diagnostics$wrap_ts$catchDiagnosticsSync,
	};


	async function ___R$project$rome$$romejs$diagnostics$wrap_ts$catchDiagnostics(
		promise,
		origin,
	) {
		try {
			const value = await promise();

			return {value, diagnostics: undefined};
		} catch (err) {
			const diagnostics = ___R$project$rome$$romejs$diagnostics$errors_ts$getDiagnosticsFromError(
				err,
			);

			if (diagnostics) {
				return {
					value: undefined,
					diagnostics: origin === undefined
						? diagnostics
						: ___R$project$rome$$romejs$diagnostics$derive_ts$addOriginsToDiagnostics(
								[origin],
								diagnostics,
							),
				};
			} else {
				throw err;
			}
		}
	}

	function ___R$project$rome$$romejs$diagnostics$wrap_ts$catchDiagnosticsSync(
		callback,
		origin,
	) {
		try {
			const value = callback();

			return {value, diagnostics: undefined};
		} catch (err) {
			const diagnostics = ___R$project$rome$$romejs$diagnostics$errors_ts$getDiagnosticsFromError(
				err,
			);

			if (diagnostics) {
				return {
					value: undefined,
					diagnostics: origin === undefined
						? diagnostics
						: ___R$project$rome$$romejs$diagnostics$derive_ts$addOriginsToDiagnostics(
								[origin],
								diagnostics,
							),
				};
			} else {
				throw err;
			}
		}
	}


  // project-rome/@romejs/diagnostics/DiagnosticsProcessor.ts








	const ___R$$priv$project$rome$$romejs$diagnostics$DiagnosticsProcessor_ts$DEFAULT_UNIQUE = [
		["category", "filename", "message", "start.line", "start.column"],
	];



	class ___R$project$rome$$romejs$diagnostics$DiagnosticsProcessor_ts$default {
		constructor(options = {}) {
			this.filters = [];
			this.options = options;
			this.includedKeys = new Set();
			this.unique =
				options.unique === undefined
					? ___R$$priv$project$rome$$romejs$diagnostics$DiagnosticsProcessor_ts$DEFAULT_UNIQUE
					: options.unique;
			this.throwAfter = undefined;
			this.locked = false;
			this.origins = options.origins === undefined ? [] : [...options.origins];
			this.allowedUnusedSuppressionPrefixes = new Set();
			this.usedSuppressions = new Set();
			this.suppressions = new Set();
			this.sourceMaps = new ___R$project$rome$$romejs$codec$source$map$SourceMapConsumerCollection_ts$default();
			this.normalizer = new ___R$project$rome$$romejs$diagnostics$DiagnosticsNormalizer_ts$default(
				options.markupOptions,
				this.sourceMaps,
			);

			this.diagnostics = [];
			this.cachedDiagnostics = undefined;
		}

		static createImmediateThrower(origins) {
			const diagnostics = new ___R$project$rome$$romejs$diagnostics$DiagnosticsProcessor_ts$default({
				origins,
				onDiagnostics() {
					diagnostics.maybeThrowDiagnosticsError();
				},
			});
			return diagnostics;
		}

		lock() {
			this.locked = true;
		}

		unshiftOrigin(origin) {
			this.origins.unshift(origin);
		}

		setThrowAfter(num) {
			this.throwAfter = num;
		}

		maybeThrowDiagnosticsError() {
			if (this.hasDiagnostics()) {
				throw new ___R$project$rome$$romejs$diagnostics$errors_ts$DiagnosticsError(
					"Thrown by DiagnosticsProcessor",
					this.getDiagnostics(),
				);
			}
		}

		hasDiagnostics() {
			return this.getDiagnostics().length > 0;
		}

		assertEmpty() {
			if (this.hasDiagnostics()) {
				throw new Error("Expected no diagnostics for this operation");
			}
		}

		addAllowedUnusedSuppressionPrefix(prefix) {
			this.assertEmpty();
			this.allowedUnusedSuppressionPrefixes.add(prefix);
		}

		addSuppressions(suppressions) {
			this.cachedDiagnostics = undefined;
			for (const suppression of suppressions) {
				this.suppressions.add(suppression);
			}
		}

		addFilters(filters) {
			this.cachedDiagnostics = undefined;
			this.filters = this.filters.concat(filters);
		}

		addFilter(filter) {
			this.cachedDiagnostics = undefined;
			this.filters.push(filter);
		}

		doesMatchFilter(diag) {
			for (const suppression of this.suppressions) {
				if (
					___R$project$rome$$romejs$compiler$suppressions_ts$matchesSuppression(
						diag.location,
						suppression,
					)
				) {
					this.usedSuppressions.add(suppression);
					return true;
				}
			}

			for (const filter of this.filters) {
				if (
					filter.message !== undefined &&
					filter.message !== diag.description.message.value
				) {
					continue;
				}

				if (
					filter.filename !== undefined &&
					filter.filename !== diag.location.filename
				) {
					continue;
				}

				if (
					filter.category !== undefined &&
					filter.category !== diag.description.category
				) {
					continue;
				}

				if (filter.start !== undefined && diag.location.start !== undefined) {
					if (
						filter.start.line !== diag.location.start.line ||
						filter.start.column !== diag.location.start.column
					) {
						continue;
					}
				}

				if (
					filter.line !== undefined &&
					diag.location.start !== undefined &&
					diag.location.start.line !== filter.line
				) {
					continue;
				}

				if (filter.test !== undefined && filter.test(diag)) {
					continue;
				}

				return true;
			}

			return false;
		}

		buildDedupeKeys(diag) {
			if (diag.unique) {
				return [];
			}

			// We don't do anything with `end` in this method, it's fairly meaningless for deduping errors
			let {start} = diag.location;

			const keys = [];

			for (const rule of this.unique) {
				const parts = [];

				if (rule.includes("category")) {
					parts.push("category:" + diag.description.category);
				}

				if (rule.includes("filename")) {
					parts.push("filename:" + String(diag.location.filename));
				}

				if (rule.includes("message")) {
					parts.push("message:" + diag.description.message);
				}

				if (start !== undefined) {
					if (rule.includes("start.line")) {
						parts.push("start.line:" + start.line);
					}

					if (rule.includes("start.column")) {
						parts.push("start.column:" + start.column);
					}
				}

				const key = parts.join(",");
				keys.push(key);
			}

			return keys;
		}

		addDiagnosticAssert(diag, origin) {
			return this.addDiagnostics([diag], origin, true)[0];
		}

		addDiagnostic(diag, origin) {
			return this.addDiagnostics([diag], origin)[0];
		}

		addDiagnostics(diags, origin, force) {
			if (diags.length === 0) {
				return diags;
			}

			this.cachedDiagnostics = undefined;

			if (this.locked) {
				throw new Error(
					"DiagnosticsProcessor is locked and cannot accept anymore diagnostics",
				);
			}

			const {max} = this.options;
			const added = [];

			// Add origins to diagnostics
			const origins = [...this.origins];
			if (origin !== undefined) {
				origins.push(origin);
			}
			diags = ___R$project$rome$$romejs$diagnostics$derive_ts$addOriginsToDiagnostics(
				origins,
				diags,
			);

			// Filter diagnostics
			diagLoop: for (let diag of diags) {
				if (!force && max !== undefined && this.diagnostics.length > max) {
					break;
				}

				// Check before normalization
				if (!force && this.doesMatchFilter(diag)) {
					continue;
				}

				diag = this.normalizer.normalizeDiagnostic(diag);

				// Check after normalization
				if (!force && this.doesMatchFilter(diag)) {
					continue;
				}

				const keys = this.buildDedupeKeys(diag);

				if (!force) {
					for (const key of keys) {
						if (this.includedKeys.has(key)) {
							continue diagLoop;
						}
					}
				}

				this.diagnostics.push(diag);
				added.push(diag);

				for (const key of keys) {
					this.includedKeys.add(key);
				}
			}

			const {onDiagnostics} = this.options;
			if (onDiagnostics !== undefined && added.length > 0) {
				onDiagnostics(added);
			}

			const {throwAfter} = this;
			if (throwAfter !== undefined && this.diagnostics.length >= throwAfter) {
				this.maybeThrowDiagnosticsError();
			}

			return added;
		}

		getDiagnosticsByFilename() {
			const byFilename = new Map();

			for (const diag of this.getDiagnostics()) {
				const {filename} = diag.location;

				let filenameDiagnostics = byFilename.get(filename);
				if (filenameDiagnostics === undefined) {
					filenameDiagnostics = [];
					byFilename.set(filename, filenameDiagnostics);
				}
				filenameDiagnostics.push(diag);
			}

			return byFilename;
		}

		getDiagnostics() {
			const {cachedDiagnostics} = this;
			if (cachedDiagnostics !== undefined) {
				return cachedDiagnostics;
			}

			const diagnostics = [...this.diagnostics];

			// Add errors for remaining suppressions
			for (const suppression of this.suppressions) {
				if (this.usedSuppressions.has(suppression)) {
					continue;
				}

				const [categoryPrefix] = suppression.category.split("/");
				if (this.allowedUnusedSuppressionPrefixes.has(categoryPrefix)) {
					continue;
				}

				diagnostics.push({
					location: suppression.commentLocation,
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SUPPRESSIONS.UNUSED(
						suppression,
					),
				});
			}

			this.cachedDiagnostics = diagnostics;

			return diagnostics;
		}

		getSortedDiagnostics() {
			const diagnosticsByFilename = this.getDiagnosticsByFilename();

			// Get all filenames and sort them
			const filenames = Array.from(diagnosticsByFilename.keys()).sort((a, b) => {
				if (a === undefined || b === undefined) {
					return 0;
				} else {
					return ___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare(
						a,
						b,
					);
				}
			});

			let sortedDiagnostics = [];

			for (const filename of filenames) {
				const fileDiagnostics = diagnosticsByFilename.get(filename);
				if (fileDiagnostics === undefined) {
					throw new Error("We use keys() so should be present");
				}

				// Sort all file diagnostics by location start index
				const sortedFileDiagnostics = fileDiagnostics.sort((a, b) => {
					const aStart = a.location.start;
					const bStart = b.location.start;
					if (aStart === undefined || bStart === undefined) {
						return 0;
					} else {
						return (
							___R$project$rome$$romejs$ob1$index_ts$ob1Get0(aStart.index) -
							___R$project$rome$$romejs$ob1$index_ts$ob1Get0(bStart.index)
						);
					}
				});

				sortedDiagnostics = [...sortedDiagnostics, ...sortedFileDiagnostics];
			}

			return sortedDiagnostics;
		}
	}


  // project-rome/@romejs/diagnostics/constants.ts
const ___R$project$rome$$romejs$diagnostics$constants_ts = {
		get INTERNAL_ERROR_LOG_ADVICE() {
			return ___R$project$rome$$romejs$diagnostics$constants_ts$INTERNAL_ERROR_LOG_ADVICE;
		},
	};
	const ___R$project$rome$$romejs$diagnostics$constants_ts$INTERNAL_ERROR_LOG_ADVICE = {
		type: "log",
		category: "warn",
		text: "This diagnostic was derived from an internal Rome error. The problem likely isn't with your code. Please report this if necessary",
	};


  // project-rome/@romejs/diagnostics/categories.ts
const ___R$project$rome$$romejs$diagnostics$categories_ts = {};







  // project-rome/@romejs/diagnostics/index.ts



  // project-rome/@romejs/parser-core/index.ts








	function ___R$project$rome$$romejs$parser$core$index_ts$tryParseWithOptionalOffsetPosition(
		parserOpts,
		opts,
	) {
		const {value} = ___R$project$rome$$romejs$diagnostics$wrap_ts$catchDiagnosticsSync(() => {
			return opts.parse(parserOpts);
		});

		if (value === undefined) {
			// Diagnostics must be present
			opts.parse(
				Object.assign(
					{},
					parserOpts,
					{offsetPosition: opts.getOffsetPosition()},
				),
			);
			throw new Error("Expected error");
		} else {
			return value;
		}
	}

	const ___R$$priv$project$rome$$romejs$parser$core$index_ts$SOF_TOKEN = {
		type: "SOF",
		start: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
		end: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
	};



	function ___R$$priv$project$rome$$romejs$parser$core$index_ts$normalizeInput(
		opts,
	) {
		const {input} = opts;

		if (input === undefined) {
			return "";
		} else if (opts.retainCarriageReturn) {
			return input;
		} else {
			return ___R$project$rome$$romejs$string$utils$removeCarriageReturn_ts$removeCarriageReturn(
				input,
			);
		}
	}

	class ___R$project$rome$$romejs$parser$core$index_ts$ParserCore {
		constructor(opts, diagnosticCategory, initialState) {
			const {path, mtime, offsetPosition} = opts;

			// Input information
			this.path =
				path === undefined
					? undefined
					: ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(path);
			this.filename = this.path === undefined ? undefined : this.path.join();
			this.mtime = mtime;
			this.input = ___R$$priv$project$rome$$romejs$parser$core$index_ts$normalizeInput(
				opts,
			);
			this.length = ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
				this.input.length,
			);

			this.eofToken = {
				type: "EOF",
				start: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
					this.input.length,
				),
				end: ___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
					this.input.length,
				),
			};

			// Parser/tokenizer state
			this.offsetPosition = offsetPosition;
			this.diagnosticCategory = diagnosticCategory;
			this.tokenizing = false;
			this.currLine =
				offsetPosition === undefined
					? ___R$project$rome$$romejs$ob1$index_ts$ob1Number1
					: offsetPosition.line;
			this.currColumn =
				offsetPosition === undefined
					? ___R$project$rome$$romejs$ob1$index_ts$ob1Number0
					: offsetPosition.column;
			this.nextTokenIndex = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
			this.currentToken = ___R$$priv$project$rome$$romejs$parser$core$index_ts$SOF_TOKEN;
			this.prevToken = ___R$$priv$project$rome$$romejs$parser$core$index_ts$SOF_TOKEN;
			this.state = initialState;
			this.ignoreWhitespaceTokens = false;

			this.indexTracker = new ___R$project$rome$$romejs$parser$core$index_ts$PositionTracker(
				this.input,
				offsetPosition,
				this.getPosition.bind(this),
			);
		}

		getPathAssert() {
			const {path} = this;
			if (path === undefined) {
				throw new Error("Path expected but none was passed to this Parser");
			} else {
				return path;
			}
		}

		getFilenameAssert() {
			const {filename} = this;
			if (filename === undefined) {
				throw new Error("Filename expected but none was passed to this Parser");
			} else {
				return filename;
			}
		}

		// Run the tokenizer over all tokens
		tokenizeAll() {
			const tokens = [];

			const {diagnostics} = ___R$project$rome$$romejs$diagnostics$wrap_ts$catchDiagnosticsSync(() => {
				while (!this.matchToken("EOF")) {
					tokens.push(this.getToken());
					this.nextToken();
				}
			});

			if (diagnostics !== undefined) {
				tokens.push({
					type: "Invalid",
					start: this.nextTokenIndex,
					end: this.length,
				});
			}

			return tokens;
		}

		// Tokenize method that must be implemented by subclasses
		tokenize(index, input) {
			throw new Error("Unimplemented");
		}

		// Alternate tokenize method to allow that allows the use of state
		tokenizeWithState(index, input, state) {
			const token = this.tokenize(index, input);
			if (token !== undefined) {
				return {token, state};
			} else {
				return undefined;
			}
		}

		_tokenizeWithState(index, input, state) {
			if (this.ignoreWhitespaceTokens) {
				switch (input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index)]) {
					case " ":
					case "\t":
					case "\r":
					case "\n":
						return this.lookahead(
							___R$project$rome$$romejs$ob1$index_ts$ob1Inc(index),
						);
				}
			}

			return this.tokenizeWithState(index, input, state);
		}

		// Get the current token
		getToken() {
			const {currentToken} = this;
			if (
				currentToken ===
				___R$$priv$project$rome$$romejs$parser$core$index_ts$SOF_TOKEN
			) {
				return this.nextToken();
			} else {
				return currentToken;
			}
		}

		getPrevToken() {
			return this.prevToken;
		}

		save() {
			return {
				nextTokenIndex: this.nextTokenIndex,
				currentToken: this.currentToken,
				prevToken: this.prevToken,
				state: this.state,
			};
		}

		restore(snapshot) {
			this.nextTokenIndex = snapshot.nextTokenIndex;
			this.currentToken = snapshot.currentToken;
			this.prevToken = snapshot.prevToken;
			this.state = snapshot.state;
		}

		// Advance to the next token, returning the new one
		nextToken() {
			if (this.isEOF(this.nextTokenIndex)) {
				this.currentToken = this.eofToken;
				return this.eofToken;
			}

			if (this.tokenizing) {
				throw new Error("Can't call nextToken while tokenizing");
			}

			const prevToken = this.currentToken;
			const {token: nextToken, state} = this.lookahead();

			if (nextToken.end === prevToken.end) {
				throw new Error(
					"tokenize() returned a token with the same position as the last - Previous token: " +
					JSON.stringify(prevToken) +
					"; Next token: " +
					JSON.stringify(nextToken) +
					"; Input: " +
					this.input.slice(0, 100),
				);
			}

			const {line, column} = this.getPositionFromIndex(nextToken.start);
			this.currLine = line;
			this.currColumn = column;

			this.nextTokenIndex = nextToken.end;
			this.prevToken = prevToken;
			this.currentToken = nextToken;
			this.state = state;
			return nextToken;
		}

		// Get the position of the current token
		getPosition() {
			const index = this.currentToken.start;

			const cached = this.indexTracker.cachedPositions.get(index);
			if (cached !== undefined) {
				return cached;
			}

			const pos = {
				index: this.indexTracker.addOffset(index),
				line: this.currLine,
				column: this.currColumn,
			};
			this.indexTracker.cachedPositions.set(index, pos);
			return pos;
		}

		// Get the end position of the current token
		getLastEndPosition() {
			return this.getPositionFromIndex(this.prevToken.end);
		}

		// Return the token that's after this current token without advancing to it
		lookaheadToken(index) {
			return this.lookahead(index).token;
		}

		// Return the token and state that's after the current token without advancing to it
		lookahead(index = this.nextTokenIndex) {
			if (this.isEOF(index)) {
				return {token: this.eofToken, state: this.state};
			}

			// Set the next token index, in the case of a lookahead we'll set it back later
			const prevNextTokenIndex = this.nextTokenIndex;
			this.nextTokenIndex = index;

			// Indicate that we're currently tokenizing to catch some weird recursive tokenizing errors
			const wasTokenizing = this.tokenizing;
			this.tokenizing = true;

			// Tokenize and do some validation
			const nextToken = this._tokenizeWithState(index, this.input, this.state);
			if (nextToken === undefined) {
				throw this.unexpected({
					start: this.getPositionFromIndex(index),
				});
			}

			// Reset to old values
			this.tokenizing = wasTokenizing;
			this.nextTokenIndex = prevNextTokenIndex;

			return nextToken;
		}

		getPositionFromIndex(index) {
			return this.indexTracker.getPositionFromIndex(index);
		}

		createDiagnostic(opts = {}) {
			const {currentToken} = this;
			let {description: metadata, start, end, loc, token} = opts;

			// Allow passing in a TokenBase
			if (token !== undefined) {
				start = this.getPositionFromIndex(token.start);
				end = this.getPositionFromIndex(token.end);
			}

			// Allow passing in a SourceLocation as an easy way to point to a particular node
			if (loc !== undefined) {
				start = loc.start;
				end = loc.end;
			}

			// When both properties are omitted then we will default to the current token range
			if (start === undefined && end === undefined) {
				end = this.getLastEndPosition();
			}

			if (start === undefined) {
				start = this.getPosition();
			}

			if (end === undefined) {
				end = start;
			}

			// Sometimes the end position may be empty as it hasn't been filled yet
			if (end.index === ___R$project$rome$$romejs$ob1$index_ts$ob1Number0) {
				end = start;
			}

			// Normalize message, we need to be defensive here because it could have been called while tokenizing the first token
			if (metadata === undefined) {
				if (
					currentToken !== undefined &&
					start !== undefined &&
					start.index === currentToken.start
				) {
					metadata = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PARSER_CORE.UNEXPECTED(
						currentToken.type,
					);
				} else {
					if (this.isEOF(start.index)) {
						metadata = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PARSER_CORE.UNEXPECTED_EOF;
					} else {
						const char = this.input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
							start.index,
						)];
						metadata = ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PARSER_CORE.UNEXPECTED_CHARACTER(
							char,
						);
					}
				}
			}

			const metadataWithCategory = Object.assign(
				{},
				metadata,
				{
					category: metadata.category === undefined
						? this.diagnosticCategory
						: metadata.category,
				},
			);

			return {
				description: metadataWithCategory,
				location: {
					sourceText: this.path === undefined ? this.input : undefined,
					mtime: this.mtime,
					start,
					end,
					filename: this.filename,
				},
			};
		}

		// Return an error to indicate a parser error, this must be thrown at the callsite for refinement
		unexpected(opts = {}) {
			return ___R$project$rome$$romejs$diagnostics$errors_ts$createSingleDiagnosticError(
				this.createDiagnostic(opts),
			);
		}

		//# Token utility methods
		assertNoSpace() {
			if (this.currentToken.start !== this.prevToken.end) {
				throw this.unexpected({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PARSER_CORE.EXPECTED_SPACE,
				});
			}
		}

		// If the current token is the specified type then return the next token, otherwise return null
		eatToken(type) {
			if (this.matchToken(type)) {
				return this.nextToken();
			} else {
				return undefined;
			}
		}

		didEatToken(type) {
			return this.eatToken(type) !== undefined;
		}

		// Check if we're at the end of the input
		isEOF(index) {
			return (
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) >=
				this.input.length
			);
		}

		// Check if the current token matches the input type
		matchToken(type) {
			return this.getToken().type === type;
		}

		// Get the current token and assert that it's of the specified type, the token stream will also be advanced
		expectToken(type, _metadata) {
			const token = this.getToken();
			if (token.type === type) {
				this.nextToken();
				// @ts-ignore
				return token;
			} else {
				throw this.unexpected({
					description: _metadata === undefined
						? ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PARSER_CORE.EXPECTED_TOKEN(
								token.type,
								(type),
							)
						: _metadata,
				});
			}
		}

		// Read from the input starting at the specified index, until the callback returns false
		readInputFrom(index, callback) {
			const {input} = this;
			let value = "";

			while (true) {
				if (
					___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index) >=
					input.length
				) {
					return [value, index, true];
				}

				if (
					callback === undefined ||
					callback(
						input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index)],
						index,
						input,
					)
				) {
					value += input[___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index)];
					index = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(index);
				} else {
					break;
				}
			}

			return [value, index, false];
		}

		// Get the string between the specified range
		getRawInput(start, end) {
			return this.input.slice(
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(start),
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(end),
			);
		}

		//# Utility methods to make it easy to construct nodes or tokens
		getLoc(node) {
			if (node === undefined || node.loc === undefined) {
				throw new Error("Tried to fetch node loc start but none found");
			} else {
				return node.loc;
			}
		}

		finishToken(
			type,
			end = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(this.nextTokenIndex),
		) {
			return {
				type,
				start: this.nextTokenIndex,
				end,
			};
		}

		finishValueToken(
			type,
			value,
			end = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(this.nextTokenIndex),
		) {
			return {
				type,
				value,
				start: this.nextTokenIndex,
				end,
			};
		}

		finishComplexToken(
			type,
			data,
			end = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(this.nextTokenIndex),
		) {
			return Object.assign({type}, data, {start: this.nextTokenIndex, end});
		}

		finishLocFromToken(token) {
			return this.finishLocAt(
				this.getPositionFromIndex(token.start),
				this.getPositionFromIndex(token.end),
			);
		}

		finishLoc(start) {
			return this.finishLocAt(start, this.getLastEndPosition());
		}

		finishLocAt(start, end) {
			return {
				filename: this.filename,
				start,
				end,
			};
		}

		finalize() {
			if (!this.eatToken("EOF")) {
				throw this.unexpected({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.PARSER_CORE.EXPECTED_EOF,
				});
			}
		}
	}

	class ___R$project$rome$$romejs$parser$core$index_ts$ParserWithRequiredPath
		extends ___R$project$rome$$romejs$parser$core$index_ts$ParserCore {
		constructor(opts, diagnosticCategory, initialState) {
			super(opts, diagnosticCategory, initialState);
			this.filename = this.getFilenameAssert();
			this.path = this.getPathAssert();
		}
	}



	class ___R$project$rome$$romejs$parser$core$index_ts$PositionTracker {
		constructor(
			input,
			offsetPosition = {
				line: ___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
				column: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
				index: ___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			},
			getPosition,
		) {
			this.getPosition = getPosition;
			this.input = input;
			this.offsetPosition = offsetPosition;
			this.latestPosition = offsetPosition;
			this.cachedPositions = new Map();
		}

		addOffset(index) {
			return ___R$project$rome$$romejs$ob1$index_ts$ob1Add(
				index,
				this.offsetPosition.index,
			);
		}

		removeOffset(index) {
			return ___R$project$rome$$romejs$ob1$index_ts$ob1Sub(
				index,
				this.offsetPosition.index,
			);
		}

		getPositionFromIndex(index) {
			const cached = this.cachedPositions.get(index);
			if (cached !== undefined) {
				return cached;
			}

			let line = ___R$project$rome$$romejs$ob1$index_ts$ob1Number1;
			let column = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
			let indexSearchWithoutOffset = 0;

			const indexWithOffset = this.addOffset(index);

			// Reuse existing line information if possible
			const {latestPosition} = this;
			const currPosition =
				this.getPosition === undefined ? undefined : this.getPosition();
			if (
				currPosition !== undefined &&
				currPosition.index > latestPosition.index &&
				currPosition.index < indexWithOffset
			) {
				line = currPosition.line;
				column = currPosition.column;
				indexSearchWithoutOffset = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
					this.removeOffset(currPosition.index),
				);
			} else if (latestPosition.index < indexWithOffset) {
				line = latestPosition.line;
				column = latestPosition.column;
				indexSearchWithoutOffset = ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(
					this.removeOffset(latestPosition.index),
				);
			}

			// Read the rest of the input until we hit the index
			for (
				let i = indexSearchWithoutOffset;
				i < ___R$project$rome$$romejs$ob1$index_ts$ob1Get0(index);
				i++
			) {
				const char = this.input[i];

				if (char === "\n") {
					line = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(line);
					column = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
				} else {
					column = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(column);
				}
			}

			const pos = {
				index: indexWithOffset,
				line,
				column,
			};

			if (latestPosition === undefined || pos.index > latestPosition.index) {
				this.latestPosition = pos;
			}

			this.cachedPositions.set(index, pos);
			return pos;
		}
	}

	function ___R$project$rome$$romejs$parser$core$index_ts$isDigit(char) {
		return char !== undefined && /[0-9]/.test(char);
	}

	function ___R$project$rome$$romejs$parser$core$index_ts$isAlpha(char) {
		return char !== undefined && /[A-Za-z]/.test(char);
	}

	function ___R$project$rome$$romejs$parser$core$index_ts$isHexDigit(char) {
		return char !== undefined && /[0-9A-Fa-f]/.test(char);
	}

	function ___R$project$rome$$romejs$parser$core$index_ts$isESIdentifierChar(
		char,
	) {
		return char !== undefined && /[A-F0-9a-z_$]/.test(char);
	}

	function ___R$project$rome$$romejs$parser$core$index_ts$isESIdentifierStart(
		char,
	) {
		return char !== undefined && /[A-Fa-z_$]/.test(char);
	}

	function ___R$project$rome$$romejs$parser$core$index_ts$readUntilLineBreak(
		char,
	) {
		return char !== "\n";
	}

	function ___R$project$rome$$romejs$parser$core$index_ts$createParser(callback) {
		let klass;

		return (...args) => {
			if (klass === undefined) {
				klass = callback(
					___R$project$rome$$romejs$parser$core$index_ts$ParserCore,
					___R$project$rome$$romejs$parser$core$index_ts$ParserWithRequiredPath,
				);
			}

			return new klass(...args);
		};
	}

	function ___R$project$rome$$romejs$parser$core$index_ts$extractSourceLocationRangeFromNodes(
		nodes,
	) {
		if (nodes.length === 0) {
			return undefined;
		}

		let filename = undefined;
		let start = undefined;
		let end = undefined;

		for (const node of nodes) {
			const {loc} = node;
			if (loc === undefined) {
				continue;
			}

			if (start === undefined || loc.start.index < start.index) {
				start = loc.start;
			}

			if (end === undefined || loc.end.index > end.index) {
				end = loc.end;
			}

			if (filename === undefined) {
				filename = loc.filename;
			} else if (filename !== loc.filename) {
				throw new Error(
					"Mixed filenames in node, expected " +
					filename +
					" but got " +
					loc.filename,
				);
			}
		}

		if (start === undefined || end === undefined) {
			return undefined;
		}

		return {
			filename,
			start,
			end,
		};
	}


  // project-rome/@romejs/compiler/constants.ts
const ___R$project$rome$$romejs$compiler$constants_ts = {
		get SCOPE_PRIVATE_PREFIX() {
			return ___R$project$rome$$romejs$compiler$constants_ts$SCOPE_PRIVATE_PREFIX;
		},
		get REDUCE_SKIP_SUBTREE() {
			return ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_SKIP_SUBTREE;
		},
		get REDUCE_REMOVE() {
			return ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE;
		},
	};
	const ___R$project$rome$$romejs$compiler$constants_ts$SCOPE_PRIVATE_PREFIX = "___R$";
	const ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_SKIP_SUBTREE = Symbol();
	const ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE = Symbol();


  // project-rome/@romejs/compiler/scope/evaluators/JSClassExpression.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSClassExpression_ts$default = {
		creator: true,
		build(node, parent, scope) {
			const newScope = scope.fork("class", node);
			newScope.evaluate(node.meta.typeParameters);
			return newScope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSClassDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSClassDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			if (node.id !== undefined) {
				scope.addBinding(
					new ___R$project$rome$$romejs$compiler$scope$bindings_ts$ClassBinding({
						name: node.id.name,
						node: node.id,
						scope,
					}),
				);
			}
			return ___R$project$rome$$romejs$compiler$scope$evaluators$JSClassExpression_ts$default.build(
				node,
				parent,
				scope,
			);
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSFunctionDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSFunctionDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			if (node.id !== undefined) {
				scope.addBinding(
					new ___R$project$rome$$romejs$compiler$scope$bindings_ts$FunctionBinding({
						node: node.id,
						name: node.id.name,
						scope,
					}),
				);
			}
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSVariableDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSVariableDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			for (const decl of node.declarations) {
				for (const id of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
					decl,
				)) {
					if (node.kind === "let") {
						scope.addBinding(
							new ___R$project$rome$$romejs$compiler$scope$bindings_ts$LetBinding({
								node: id,
								name: id.name,
								scope,
							}),
						);
					}

					if (node.kind === "const") {
						// Only set the value for simple declarations
						let valueNode = id === decl.id ? decl.init : undefined;
						scope.addBinding(
							new ___R$project$rome$$romejs$compiler$scope$bindings_ts$ConstBinding(
								{
									node: id,
									name: id.name,
									scope,
								},
								valueNode,
							),
						);
					}

					if (
						node.kind === "var" &&
						(scope.kind === "program" || scope.kind === "function")
					) {
						if (!scope.hasHoistedVars) {
							throw new Error(
								"This scope does not allow `var`iables. This is probably because `var`iables were injected into a scope that did not contain `var` in the original source." +
								scope.kind,
							);
						}

						scope.addBinding(
							new ___R$project$rome$$romejs$compiler$scope$bindings_ts$VarBinding({
								node: id,
								name: id.name,
								scope,
							}),
						);
					}
				}
			}
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/TSTypeAliasTypeAnnotation.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$TSTypeAliasTypeAnnotation_ts$default = {
		creator: false,
		build(node, parent, scope) {
			scope.evaluate(node.typeParameters);
			scope.addBinding(
				new ___R$project$rome$$romejs$compiler$scope$bindings_ts$TypeBinding(
					{
						node: node.id,
						name: node.id.name,
						scope,
					},
					node,
					"typealias",
				),
			);
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSExportDefaultDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSExportDefaultDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			const {declaration} = node;
			const newScope = scope.evaluate(declaration, node);
			if (
				declaration.type === "JSClassDeclaration" ||
				declaration.type === "JSFunctionDeclaration"
			) {
				const id = declaration.id;
				if (id !== undefined) {
					newScope.getBindingAssert(id.name).setExported(true);
				}
			}
			return newScope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSExportLocalDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSExportLocalDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			const newScope = scope.evaluate(node.declaration, node);
			for (const id of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
				node,
			)) {
				const binding = newScope.getBinding(id.name);
				if (binding !== undefined) {
					binding.setExported(true);
				}
			}
			return newScope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSImportDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSImportDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			const source = node.source.value;

			for (const specifier of ___R$project$rome$$romejs$js$ast$utils$getImportSpecifiers_ts$default(
				node,
			)) {
				let kind = node.importKind || "value";
				let meta;

				if (specifier.type === "JSImportNamespaceSpecifier") {
					meta = {
						kind,
						type: "namespace",
						source,
					};
				} else if (specifier.type === "JSImportDefaultSpecifier") {
					meta = {
						kind,
						type: "name",
						imported: "default",
						source,
					};
				} else if (specifier.type === "JSImportSpecifier") {
					meta = {
						kind,
						type: "name",
						imported: specifier.imported.name,
						source,
					};
				}

				if (meta === undefined) {
					return;
				}

				scope.addBinding(
					new ___R$project$rome$$romejs$compiler$scope$bindings_ts$ImportBinding(
						{
							node: specifier.local.name,
							name: specifier.local.name.name,
							scope,
						},
						meta,
					),
				);
			}
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSSwitchCase.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSSwitchCase_ts$default = {
		creator: false,
		build(node, parent, scope) {
			for (const child of node.consequent) {
				scope.evaluate(child, node);
			}
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSSwitchStatement.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSSwitchStatement_ts$default = {
		creator: false,
		build(node, parent, scope) {
			for (const child of node.cases) {
				scope.evaluate(child, node);
			}
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/TSImportEqualsDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$TSImportEqualsDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			const {moduleReference, id} = node;

			if (moduleReference.type === "TSExternalModuleReference") {
				scope.addBinding(
					new ___R$project$rome$$romejs$compiler$scope$bindings_ts$ImportBinding(
						{
							node: id,
							name: id.name,
							scope,
						},
						{
							type: "namespace",
							kind: "value",
							source: moduleReference.expression.value,
						},
					),
				);
			} else {
				// TODO
			}
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSArrowFunctionExpression.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSArrowFunctionExpression_ts$default = {
		creator: true,
		build(node, parent, scope) {
			return scope.evaluate(node.head, node, true);
		},
	};


  // project-rome/@romejs/compiler/scope/utils.ts
function ___R$project$rome$$romejs$compiler$scope$utils_ts$addFunctionBindings(
		scope,
		node,
		hasArguments = true,
	) {
		const {head} = node;

		// Add type parameters
		scope.evaluate(head.typeParameters);

		const params =
			head.rest === undefined ? head.params : [...head.params, head.rest];

		// Add parameters
		for (const param of params) {
			for (const id of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
				param,
			)) {
				// TODO maybe add a `param` binding type?
				scope.addBinding(
					new ___R$project$rome$$romejs$compiler$scope$bindings_ts$LetBinding({
						node: id,
						name: id.name,
						scope,
						kind: "parameter",
					}),
				);
			}
		}

		// Add `arguments` binding
		if (hasArguments) {
			scope.addBinding(
				new ___R$project$rome$$romejs$compiler$scope$bindings_ts$ArgumentsBinding({
					name: "arguments",
					node,
					scope,
				}),
			);
		}

		if (head.hasHoistedVars) {
			___R$project$rome$$romejs$compiler$scope$utils_ts$addVarBindings(
				scope,
				node,
			);
		}
	}

	function ___R$project$rome$$romejs$compiler$scope$utils_ts$addVarBindings(
		scope,
		topNode,
	) {
		const {context} = scope.getRootScope();
		scope.setHoistedVars();

		context.reduce(
			topNode,
			[
				{
					name: "scopeVarFunc",
					enter: (path) => {
						const {node, parent} = path;

						if (
							___R$project$rome$$romejs$js$ast$utils$isFunctionNode_ts$default(
								node,
							) &&
							node !== topNode
						) {
							return ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_SKIP_SUBTREE;
						}

						if (node.type === "JSVariableDeclaration" && node.kind === "var") {
							scope.evaluate(node, parent);
						}

						return node;
					},
				},
			],
			{
				scope,
				noScopeCreation: true,
			},
		);
	}


  // project-rome/@romejs/compiler/scope/evaluators/JSBlockStatement.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSBlockStatement_ts$default = {
		creator: true,
		build(node, parent, scope) {
			if (
				___R$project$rome$$romejs$js$ast$utils$isFunctionNode_ts$default(parent) &&
				scope.node !== parent
			) {
				scope = scope.evaluate(parent.head, parent, true);
			}

			const newScope = scope.fork("block", node);

			if (
				___R$project$rome$$romejs$js$ast$utils$isFunctionNode_ts$default(parent) &&
				parent.head.hasHoistedVars
			) {
				___R$project$rome$$romejs$compiler$scope$utils_ts$addVarBindings(
					newScope,
					parent,
				);
			}

			for (const child of node.body) {
				newScope.evaluate(child, node);
			}

			return newScope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSCatchClause.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSCatchClause_ts$default = {
		creator: true,
		build(node, parent, scope) {
			const newScope = scope.fork("block", node);
			if (node.param !== undefined) {
				for (const id of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
					node.param,
				)) {
					newScope.addBinding(
						new ___R$project$rome$$romejs$compiler$scope$bindings_ts$LetBinding(
							{
								node: id,
								name: id.name,
								scope: newScope,
							},
							"catch",
						),
					);
				}
			}
			return newScope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSRoot.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSRoot_ts$default = {
		creator: true,
		build(node, parent, scope) {
			const newScope = scope.fork("program", node);
			if (node.hasHoistedVars) {
				___R$project$rome$$romejs$compiler$scope$utils_ts$addVarBindings(
					newScope,
					node,
				);
			}
			for (const child of node.body) {
				newScope.evaluate(child, node);
			}
			return newScope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSForStatement.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSForStatement_ts$default = {
		creator: true,
		build(node, parent, scope) {
			const newScope = scope.fork("loop", node);
			newScope.evaluate(node.init, node);
			return newScope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSForOfStatement.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSForOfStatement_ts$default = {
		creator: true,
		build(node, parent, scope) {
			const newScope = scope.fork("loop", node);
			newScope.evaluate(node.left, node);
			return newScope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/JSVariableDeclarationStatement.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSVariableDeclarationStatement_ts$default = {
		creator: false,
		build(node, parent, scope) {
			if (node.declare) {
				for (const {name} of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
					node,
				)) {
					scope.addGlobal(name);
				}
			} else {
				scope.evaluate(node.declaration, node);
			}
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/TSInterfaceDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$TSInterfaceDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			scope.addBinding(
				new ___R$project$rome$$romejs$compiler$scope$bindings_ts$TypeBinding(
					{
						node: node.id,
						name: node.id.name,
						scope,
					},
					node,
					"interface",
				),
			);
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/TSDeclareFunction.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$TSDeclareFunction_ts$default = {
		creator: false,
		build(node, parent, scope) {
			scope.addBinding(
				new ___R$project$rome$$romejs$compiler$scope$bindings_ts$FunctionBinding({
					node: node.id,
					name: node.id.name,
					scope,
				}),
			);
		},
	};


  // project-rome/@romejs/compiler/scope/bindings.ts
const ___R$project$rome$$romejs$compiler$scope$bindings_ts = {
		get Binding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding;
		},
		get ConstBinding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$ConstBinding;
		},
		get LetBinding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$LetBinding;
		},
		get VarBinding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$VarBinding;
		},
		get ImportBinding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$ImportBinding;
		},
		get ArgumentsBinding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$ArgumentsBinding;
		},
		get FunctionBinding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$FunctionBinding;
		},
		get TypeBinding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$TypeBinding;
		},
		get ClassBinding() {
			return ___R$project$rome$$romejs$compiler$scope$bindings_ts$ClassBinding;
		},
	};
	let ___R$$priv$project$rome$$romejs$compiler$scope$bindings_ts$id = 0;



	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding {
		constructor(opts, defaultKind = "variable") {
			this.isExported = false;
			this.scope = opts.scope;
			this.name = opts.name;
			this.node = opts.node;
			this.kind = opts.kind === undefined ? defaultKind : opts.kind;
			this.id = ___R$$priv$project$rome$$romejs$compiler$scope$bindings_ts$id++;
		}

		setExported(isExported) {
			this.isExported = isExported;
		}
	}



	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$ConstBinding
		extends ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding {
		constructor(opts, value, kind = "constant") {
			super(opts, kind);
			this.value = value;
		}
	}

	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$LetBinding
		extends ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding {}

	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$VarBinding
		extends ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding {}

	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$ImportBinding
		extends ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding {
		constructor(opts, meta) {
			super(opts, "import");
			this.meta = meta;
		}
	}

	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$ArgumentsBinding
		extends ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding {
		constructor(opts) {
			super(opts, "arguments");
		}
	}

	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$FunctionBinding
		extends ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding {
		constructor(opts) {
			super(opts, "function");
		}
	}



	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$TypeBinding
		extends ___R$project$rome$$romejs$compiler$scope$bindings_ts$ConstBinding {
		constructor(opts, valueNode, kind) {
			super(opts, valueNode, "type");
			this.typeKind = kind;
		}
	}

	class ___R$project$rome$$romejs$compiler$scope$bindings_ts$ClassBinding
		extends ___R$project$rome$$romejs$compiler$scope$bindings_ts$Binding {
		constructor(opts) {
			super(opts, "class");
		}
	}


  // project-rome/@romejs/compiler/scope/evaluators/JSFunctionHead.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$JSFunctionHead_ts$default = {
		creator: true,
		build(node, parent, parentScope) {
			// We already evaluated ourselves
			if (parentScope.node === node) {
				return parentScope;
			}

			const scope = parentScope.fork("function", parent);

			if (parent.type === "JSFunctionExpression") {
				const {id} = parent;
				if (id !== undefined) {
					scope.addBinding(
						new ___R$project$rome$$romejs$compiler$scope$bindings_ts$LetBinding({
							node: id,
							name: id.name,
							scope,
						}),
					);
				}
			}

			// Add type parameters
			scope.evaluate(node.typeParameters, node);

			const params =
				node.rest === undefined ? node.params : [...node.params, node.rest];

			// Add parameters
			for (const param of params) {
				for (const id of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
					param,
				)) {
					scope.addBinding(
						new ___R$project$rome$$romejs$compiler$scope$bindings_ts$LetBinding({
							node: id,
							name: id.name,
							scope,
							kind: "parameter",
						}),
					);
				}
			}

			// Add `arguments` binding
			if (parent.type !== "JSArrowFunctionExpression") {
				scope.addBinding(
					new ___R$project$rome$$romejs$compiler$scope$bindings_ts$ArgumentsBinding({
						name: "arguments",
						node,
						scope,
					}),
				);
			}

			return scope;
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/TSEnumDeclaration.ts
const ___R$project$rome$$romejs$compiler$scope$evaluators$TSEnumDeclaration_ts$default = {
		creator: false,
		build(node, parent, scope) {
			scope.addBinding(
				new ___R$project$rome$$romejs$compiler$scope$bindings_ts$TypeBinding(
					{
						node: node.id,
						name: node.id.name,
						scope,
					},
					node,
					"enum",
				),
			);
		},
	};


  // project-rome/@romejs/compiler/scope/evaluators/index.ts


	const ___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators = new Map();

	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSFunctionHead",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSFunctionHead_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"TSDeclareFunction",
		___R$project$rome$$romejs$compiler$scope$evaluators$TSDeclareFunction_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSClassDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSClassDeclaration_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSFunctionDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSFunctionDeclaration_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSVariableDeclarationStatement",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSVariableDeclarationStatement_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSVariableDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSVariableDeclaration_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSExportDefaultDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSExportDefaultDeclaration_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSExportLocalDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSExportLocalDeclaration_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSImportDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSImportDeclaration_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSSwitchCase",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSSwitchCase_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSSwitchStatement",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSSwitchStatement_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"TSTypeAliasTypeAnnotation",
		___R$project$rome$$romejs$compiler$scope$evaluators$TSTypeAliasTypeAnnotation_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"TSImportEqualsDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$TSImportEqualsDeclaration_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSArrowFunctionExpression",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSArrowFunctionExpression_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSBlockStatement",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSBlockStatement_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSClassExpression",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSClassExpression_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSCatchClause",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSCatchClause_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSRoot",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSRoot_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSForStatement",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSForStatement_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSForOfStatement",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSForOfStatement_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"JSForInStatement",
		___R$project$rome$$romejs$compiler$scope$evaluators$JSForOfStatement_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"TSInterfaceDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$TSInterfaceDeclaration_ts$default,
	);
	___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators.set(
		"TSEnumDeclaration",
		___R$project$rome$$romejs$compiler$scope$evaluators$TSEnumDeclaration_ts$default,
	);
	const ___R$project$rome$$romejs$compiler$scope$evaluators$index_ts$default = ___R$$priv$project$rome$$romejs$compiler$scope$evaluators$index_ts$evaluators;


  // project-rome/@romejs/compiler/scope/globals.ts
const ___R$project$rome$$romejs$compiler$scope$globals_ts = {
		get builtin() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$builtin;
		},
		get es5() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$es5;
		},
		get es2015() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$es2015;
		},
		get es2017() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$es2017;
		},
		get browser() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$browser;
		},
		get worker() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$worker;
		},
		get node() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$node;
		},
		get commonjs() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$commonjs;
		},
		get serviceworker() {
			return ___R$project$rome$$romejs$compiler$scope$globals_ts$serviceworker;
		},
	};
	const ___R$project$rome$$romejs$compiler$scope$globals_ts$builtin = [
		"Array",
		"ArrayBuffer",
		"Atomics",
		"BigInt",
		"BigInt64Array",
		"BigUint64Array",
		"Boolean",
		"constructor",
		"DataView",
		"Date",
		"decodeURI",
		"decodeURIComponent",
		"encodeURI",
		"encodeURIComponent",
		"Error",
		"escape",
		"eval",
		"EvalError",
		"Float32Array",
		"Float64Array",
		"Function",
		"globalThis",
		"hasOwnProperty",
		"Infinity",
		"Int16Array",
		"Int32Array",
		"Int8Array",
		"isFinite",
		"isNaN",
		"isPrototypeOf",
		"JSON",
		"Map",
		"Math",
		"NaN",
		"Number",
		"Object",
		"parseFloat",
		"parseInt",
		"Promise",
		"propertyIsEnumerable",
		"Proxy",
		"RangeError",
		"ReferenceError",
		"Reflect",
		"RegExp",
		"Set",
		"SharedArrayBuffer",
		"String",
		"Symbol",
		"SyntaxError",
		"toLocaleString",
		"toString",
		"TypeError",
		"Uint16Array",
		"Uint32Array",
		"Uint8Array",
		"Uint8ClampedArray",
		"undefined",
		"unescape",
		"URIError",
		"valueOf",
		"WeakMap",
		"WeakSet",
	];

	const ___R$project$rome$$romejs$compiler$scope$globals_ts$es5 = [
		"Array",
		"Boolean",
		"constructor",
		"Date",
		"decodeURI",
		"decodeURIComponent",
		"encodeURI",
		"encodeURIComponent",
		"Error",
		"escape",
		"eval",
		"EvalError",
		"Function",
		"hasOwnProperty",
		"Infinity",
		"isFinite",
		"isNaN",
		"isPrototypeOf",
		"JSON",
		"Math",
		"NaN",
		"Number",
		"Object",
		"parseFloat",
		"parseInt",
		"propertyIsEnumerable",
		"RangeError",
		"ReferenceError",
		"RegExp",
		"String",
		"SyntaxError",
		"toLocaleString",
		"toString",
		"TypeError",
		"undefined",
		"unescape",
		"URIError",
		"valueOf",
	];

	const ___R$project$rome$$romejs$compiler$scope$globals_ts$es2015 = [
		"Array",
		"ArrayBuffer",
		"Boolean",
		"constructor",
		"DataView",
		"Date",
		"decodeURI",
		"decodeURIComponent",
		"encodeURI",
		"encodeURIComponent",
		"Error",
		"escape",
		"eval",
		"EvalError",
		"Float32Array",
		"Float64Array",
		"Function",
		"hasOwnProperty",
		"Infinity",
		"Int16Array",
		"Int32Array",
		"Int8Array",
		"isFinite",
		"isNaN",
		"isPrototypeOf",
		"JSON",
		"Map",
		"Math",
		"NaN",
		"Number",
		"Object",
		"parseFloat",
		"parseInt",
		"Promise",
		"propertyIsEnumerable",
		"Proxy",
		"RangeError",
		"ReferenceError",
		"Reflect",
		"RegExp",
		"Set",
		"String",
		"Symbol",
		"SyntaxError",
		"toLocaleString",
		"toString",
		"TypeError",
		"Uint16Array",
		"Uint32Array",
		"Uint8Array",
		"Uint8ClampedArray",
		"undefined",
		"unescape",
		"URIError",
		"valueOf",
		"WeakMap",
		"WeakSet",
	];

	const ___R$project$rome$$romejs$compiler$scope$globals_ts$es2017 = [
		"Array",
		"ArrayBuffer",
		"Atomics",
		"Boolean",
		"constructor",
		"DataView",
		"Date",
		"decodeURI",
		"decodeURIComponent",
		"encodeURI",
		"encodeURIComponent",
		"Error",
		"escape",
		"eval",
		"EvalError",
		"Float32Array",
		"Float64Array",
		"Function",
		"hasOwnProperty",
		"Infinity",
		"Int16Array",
		"Int32Array",
		"Int8Array",
		"isFinite",
		"isNaN",
		"isPrototypeOf",
		"JSON",
		"Map",
		"Math",
		"NaN",
		"Number",
		"Object",
		"parseFloat",
		"parseInt",
		"Promise",
		"propertyIsEnumerable",
		"Proxy",
		"RangeError",
		"ReferenceError",
		"Reflect",
		"RegExp",
		"Set",
		"SharedArrayBuffer",
		"String",
		"Symbol",
		"SyntaxError",
		"toLocaleString",
		"toString",
		"TypeError",
		"Uint16Array",
		"Uint32Array",
		"Uint8Array",
		"Uint8ClampedArray",
		"undefined",
		"unescape",
		"URIError",
		"valueOf",
		"WeakMap",
		"WeakSet",
	];

	const ___R$project$rome$$romejs$compiler$scope$globals_ts$browser = [
		"AbortController",
		"AbortSignal",
		"addEventListener",
		"alert",
		"AnalyserNode",
		"Animation",
		"AnimationEffectReadOnly",
		"AnimationEffectTiming",
		"AnimationEffectTimingReadOnly",
		"AnimationEvent",
		"AnimationPlaybackEvent",
		"AnimationTimeline",
		"applicationCache",
		"ApplicationCache",
		"ApplicationCacheErrorEvent",
		"atob",
		"Attr",
		"Audio",
		"AudioBuffer",
		"AudioBufferSourceNode",
		"AudioContext",
		"AudioDestinationNode",
		"AudioListener",
		"AudioNode",
		"AudioParam",
		"AudioProcessingEvent",
		"AudioScheduledSourceNode",
		"AudioWorkletGlobalScope ",
		"AudioWorkletNode",
		"AudioWorkletProcessor",
		"BarProp",
		"BaseAudioContext",
		"BatteryManager",
		"BeforeUnloadEvent",
		"BiquadFilterNode",
		"Blob",
		"BlobEvent",
		"blur",
		"BroadcastChannel",
		"btoa",
		"BudgetService",
		"ByteLengthQueuingStrategy",
		"Cache",
		"caches",
		"CacheStorage",
		"cancelAnimationFrame",
		"cancelIdleCallback",
		"CanvasCaptureMediaStreamTrack",
		"CanvasGradient",
		"CanvasPattern",
		"CanvasRenderingContext2D",
		"ChannelMergerNode",
		"ChannelSplitterNode",
		"CharacterData",
		"clearInterval",
		"clearTimeout",
		"clientInformation",
		"ClipboardEvent",
		"close",
		"closed",
		"CloseEvent",
		"Comment",
		"CompositionEvent",
		"confirm",
		"console",
		"ConstantSourceNode",
		"ConvolverNode",
		"CountQueuingStrategy",
		"createImageBitmap",
		"Credential",
		"CredentialsContainer",
		"crypto",
		"Crypto",
		"CryptoKey",
		"CSS",
		"CSSConditionRule",
		"CSSFontFaceRule",
		"CSSGroupingRule",
		"CSSImportRule",
		"CSSKeyframeRule",
		"CSSKeyframesRule",
		"CSSMediaRule",
		"CSSNamespaceRule",
		"CSSPageRule",
		"CSSRule",
		"CSSRuleList",
		"CSSStyleDeclaration",
		"CSSStyleRule",
		"CSSStyleSheet",
		"CSSSupportsRule",
		"CustomElementRegistry",
		"customElements",
		"CustomEvent",
		"DataTransfer",
		"DataTransferItem",
		"DataTransferItemList",
		"defaultstatus",
		"defaultStatus",
		"DelayNode",
		"DeviceMotionEvent",
		"DeviceOrientationEvent",
		"devicePixelRatio",
		"dispatchEvent",
		"document",
		"Document",
		"DocumentFragment",
		"DocumentType",
		"DOMError",
		"DOMException",
		"DOMImplementation",
		"DOMMatrix",
		"DOMMatrixReadOnly",
		"DOMParser",
		"DOMPoint",
		"DOMPointReadOnly",
		"DOMQuad",
		"DOMRect",
		"DOMRectReadOnly",
		"DOMStringList",
		"DOMStringMap",
		"DOMTokenList",
		"DragEvent",
		"DynamicsCompressorNode",
		"Element",
		"ErrorEvent",
		"event",
		"Event",
		"EventSource",
		"EventTarget",
		"external",
		"fetch",
		"File",
		"FileList",
		"FileReader",
		"find",
		"focus",
		"FocusEvent",
		"FontFace",
		"FontFaceSetLoadEvent",
		"FormData",
		"frameElement",
		"frames",
		"GainNode",
		"Gamepad",
		"GamepadButton",
		"GamepadEvent",
		"getComputedStyle",
		"getSelection",
		"HashChangeEvent",
		"Headers",
		"history",
		"History",
		"HTMLAllCollection",
		"HTMLAnchorElement",
		"HTMLAreaElement",
		"HTMLAudioElement",
		"HTMLBaseElement",
		"HTMLBodyElement",
		"HTMLBRElement",
		"HTMLButtonElement",
		"HTMLCanvasElement",
		"HTMLCollection",
		"HTMLContentElement",
		"HTMLDataElement",
		"HTMLDataListElement",
		"HTMLDetailsElement",
		"HTMLDialogElement",
		"HTMLDirectoryElement",
		"HTMLDivElement",
		"HTMLDListElement",
		"HTMLDocument",
		"HTMLElement",
		"HTMLEmbedElement",
		"HTMLFieldSetElement",
		"HTMLFontElement",
		"HTMLFormControlsCollection",
		"HTMLFormElement",
		"HTMLFrameElement",
		"HTMLFrameSetElement",
		"HTMLHeadElement",
		"HTMLHeadingElement",
		"HTMLHRElement",
		"HTMLHtmlElement",
		"HTMLIFrameElement",
		"HTMLImageElement",
		"HTMLInputElement",
		"HTMLLabelElement",
		"HTMLLegendElement",
		"HTMLLIElement",
		"HTMLLinkElement",
		"HTMLMapElement",
		"HTMLMarqueeElement",
		"HTMLMediaElement",
		"HTMLMenuElement",
		"HTMLMetaElement",
		"HTMLMeterElement",
		"HTMLModElement",
		"HTMLObjectElement",
		"HTMLOListElement",
		"HTMLOptGroupElement",
		"HTMLOptionElement",
		"HTMLOptionsCollection",
		"HTMLOutputElement",
		"HTMLParagraphElement",
		"HTMLParamElement",
		"HTMLPictureElement",
		"HTMLPreElement",
		"HTMLProgressElement",
		"HTMLQuoteElement",
		"HTMLScriptElement",
		"HTMLSelectElement",
		"HTMLShadowElement",
		"HTMLSlotElement",
		"HTMLSourceElement",
		"HTMLSpanElement",
		"HTMLStyleElement",
		"HTMLTableCaptionElement",
		"HTMLTableCellElement",
		"HTMLTableColElement",
		"HTMLTableElement",
		"HTMLTableRowElement",
		"HTMLTableSectionElement",
		"HTMLTemplateElement",
		"HTMLTextAreaElement",
		"HTMLTimeElement",
		"HTMLTitleElement",
		"HTMLTrackElement",
		"HTMLUListElement",
		"HTMLUnknownElement",
		"HTMLVideoElement",
		"IDBCursor",
		"IDBCursorWithValue",
		"IDBDatabase",
		"IDBFactory",
		"IDBIndex",
		"IDBKeyRange",
		"IDBObjectStore",
		"IDBOpenDBRequest",
		"IDBRequest",
		"IDBTransaction",
		"IDBVersionChangeEvent",
		"IdleDeadline",
		"IIRFilterNode",
		"Image",
		"ImageBitmap",
		"ImageBitmapRenderingContext",
		"ImageCapture",
		"ImageData",
		"indexedDB",
		"innerHeight",
		"innerWidth",
		"InputEvent",
		"IntersectionObserver",
		"IntersectionObserverEntry",
		"Intl",
		"isSecureContext",
		"KeyboardEvent",
		"KeyframeEffect",
		"KeyframeEffectReadOnly",
		"length",
		"localStorage",
		"location",
		"Location",
		"locationbar",
		"matchMedia",
		"MediaDeviceInfo",
		"MediaDevices",
		"MediaElementAudioSourceNode",
		"MediaEncryptedEvent",
		"MediaError",
		"MediaKeyMessageEvent",
		"MediaKeySession",
		"MediaKeyStatusMap",
		"MediaKeySystemAccess",
		"MediaList",
		"MediaQueryList",
		"MediaQueryListEvent",
		"MediaRecorder",
		"MediaSettingsRange",
		"MediaSource",
		"MediaStream",
		"MediaStreamAudioDestinationNode",
		"MediaStreamAudioSourceNode",
		"MediaStreamEvent",
		"MediaStreamTrack",
		"MediaStreamTrackEvent",
		"menubar",
		"MessageChannel",
		"MessageEvent",
		"MessagePort",
		"MIDIAccess",
		"MIDIConnectionEvent",
		"MIDIInput",
		"MIDIInputMap",
		"MIDIMessageEvent",
		"MIDIOutput",
		"MIDIOutputMap",
		"MIDIPort",
		"MimeType",
		"MimeTypeArray",
		"MouseEvent",
		"moveBy",
		"moveTo",
		"MutationEvent",
		"MutationObserver",
		"MutationRecord",
		"name",
		"NamedNodeMap",
		"NavigationPreloadManager",
		"navigator",
		"Navigator",
		"NetworkInformation",
		"Node",
		"NodeFilter",
		"NodeIterator",
		"NodeList",
		"Notification",
		"OfflineAudioCompletionEvent",
		"OfflineAudioContext",
		"offscreenBuffering",
		"OffscreenCanvas",
		"onabort",
		"onafterprint",
		"onanimationend",
		"onanimationiteration",
		"onanimationstart",
		"onappinstalled",
		"onauxclick",
		"onbeforeinstallprompt",
		"onbeforeprint",
		"onbeforeunload",
		"onblur",
		"oncancel",
		"oncanplay",
		"oncanplaythrough",
		"onchange",
		"onclick",
		"onclose",
		"oncontextmenu",
		"oncuechange",
		"ondblclick",
		"ondevicemotion",
		"ondeviceorientation",
		"ondeviceorientationabsolute",
		"ondrag",
		"ondragend",
		"ondragenter",
		"ondragleave",
		"ondragover",
		"ondragstart",
		"ondrop",
		"ondurationchange",
		"onemptied",
		"onended",
		"onerror",
		"onfocus",
		"ongotpointercapture",
		"onhashchange",
		"oninput",
		"oninvalid",
		"onkeydown",
		"onkeypress",
		"onkeyup",
		"onlanguagechange",
		"onload",
		"onloadeddata",
		"onloadedmetadata",
		"onloadstart",
		"onlostpointercapture",
		"onmessage",
		"onmessageerror",
		"onmousedown",
		"onmouseenter",
		"onmouseleave",
		"onmousemove",
		"onmouseout",
		"onmouseover",
		"onmouseup",
		"onmousewheel",
		"onoffline",
		"ononline",
		"onpagehide",
		"onpageshow",
		"onpause",
		"onplay",
		"onplaying",
		"onpointercancel",
		"onpointerdown",
		"onpointerenter",
		"onpointerleave",
		"onpointermove",
		"onpointerout",
		"onpointerover",
		"onpointerup",
		"onpopstate",
		"onprogress",
		"onratechange",
		"onrejectionhandled",
		"onreset",
		"onresize",
		"onscroll",
		"onsearch",
		"onseeked",
		"onseeking",
		"onselect",
		"onstalled",
		"onstorage",
		"onsubmit",
		"onsuspend",
		"ontimeupdate",
		"ontoggle",
		"ontransitionend",
		"onunhandledrejection",
		"onunload",
		"onvolumechange",
		"onwaiting",
		"onwheel",
		"open",
		"openDatabase",
		"opener",
		"Option",
		"origin",
		"OscillatorNode",
		"outerHeight",
		"outerWidth",
		"PageTransitionEvent",
		"pageXOffset",
		"pageYOffset",
		"PannerNode",
		"parent",
		"Path2D",
		"PaymentAddress",
		"PaymentRequest",
		"PaymentRequestUpdateEvent",
		"PaymentResponse",
		"performance",
		"Performance",
		"PerformanceEntry",
		"PerformanceLongTaskTiming",
		"PerformanceMark",
		"PerformanceMeasure",
		"PerformanceNavigation",
		"PerformanceNavigationTiming",
		"PerformanceObserver",
		"PerformanceObserverEntryList",
		"PerformancePaintTiming",
		"PerformanceResourceTiming",
		"PerformanceTiming",
		"PeriodicWave",
		"Permissions",
		"PermissionStatus",
		"personalbar",
		"PhotoCapabilities",
		"Plugin",
		"PluginArray",
		"PointerEvent",
		"PopStateEvent",
		"postMessage",
		"Presentation",
		"PresentationAvailability",
		"PresentationConnection",
		"PresentationConnectionAvailableEvent",
		"PresentationConnectionCloseEvent",
		"PresentationConnectionList",
		"PresentationReceiver",
		"PresentationRequest",
		"print",
		"ProcessingInstruction",
		"ProgressEvent",
		"PromiseRejectionEvent",
		"prompt",
		"PushManager",
		"PushSubscription",
		"PushSubscriptionOptions",
		"queueMicrotask",
		"RadioNodeList",
		"Range",
		"ReadableStream",
		"registerProcessor",
		"RemotePlayback",
		"removeEventListener",
		"Request",
		"requestAnimationFrame",
		"requestIdleCallback",
		"resizeBy",
		"ResizeObserver",
		"ResizeObserverEntry",
		"resizeTo",
		"Response",
		"RTCCertificate",
		"RTCDataChannel",
		"RTCDataChannelEvent",
		"RTCDtlsTransport",
		"RTCIceCandidate",
		"RTCIceGatherer",
		"RTCIceTransport",
		"RTCPeerConnection",
		"RTCPeerConnectionIceEvent",
		"RTCRtpContributingSource",
		"RTCRtpReceiver",
		"RTCRtpSender",
		"RTCSctpTransport",
		"RTCSessionDescription",
		"RTCStatsReport",
		"RTCTrackEvent",
		"screen",
		"Screen",
		"screenLeft",
		"ScreenOrientation",
		"screenTop",
		"screenX",
		"screenY",
		"ScriptProcessorNode",
		"scroll",
		"scrollbars",
		"scrollBy",
		"scrollTo",
		"scrollX",
		"scrollY",
		"SecurityPolicyViolationEvent",
		"Selection",
		"self",
		"ServiceWorker",
		"ServiceWorkerContainer",
		"ServiceWorkerRegistration",
		"sessionStorage",
		"setInterval",
		"setTimeout",
		"ShadowRoot",
		"SharedWorker",
		"SourceBuffer",
		"SourceBufferList",
		"speechSynthesis",
		"SpeechSynthesisEvent",
		"SpeechSynthesisUtterance",
		"StaticRange",
		"status",
		"statusbar",
		"StereoPannerNode",
		"stop",
		"Storage",
		"StorageEvent",
		"StorageManager",
		"styleMedia",
		"StyleSheet",
		"StyleSheetList",
		"SubtleCrypto",
		"SVGAElement",
		"SVGAngle",
		"SVGAnimatedAngle",
		"SVGAnimatedBoolean",
		"SVGAnimatedEnumeration",
		"SVGAnimatedInteger",
		"SVGAnimatedLength",
		"SVGAnimatedLengthList",
		"SVGAnimatedNumber",
		"SVGAnimatedNumberList",
		"SVGAnimatedPreserveAspectRatio",
		"SVGAnimatedRect",
		"SVGAnimatedString",
		"SVGAnimatedTransformList",
		"SVGAnimateElement",
		"SVGAnimateMotionElement",
		"SVGAnimateTransformElement",
		"SVGAnimationElement",
		"SVGCircleElement",
		"SVGClipPathElement",
		"SVGComponentTransferFunctionElement",
		"SVGDefsElement",
		"SVGDescElement",
		"SVGDiscardElement",
		"SVGElement",
		"SVGEllipseElement",
		"SVGFEBlendElement",
		"SVGFEColorMatrixElement",
		"SVGFEComponentTransferElement",
		"SVGFECompositeElement",
		"SVGFEConvolveMatrixElement",
		"SVGFEDiffuseLightingElement",
		"SVGFEDisplacementMapElement",
		"SVGFEDistantLightElement",
		"SVGFEDropShadowElement",
		"SVGFEFloodElement",
		"SVGFEFuncAElement",
		"SVGFEFuncBElement",
		"SVGFEFuncGElement",
		"SVGFEFuncRElement",
		"SVGFEGaussianBlurElement",
		"SVGFEImageElement",
		"SVGFEMergeElement",
		"SVGFEMergeNodeElement",
		"SVGFEMorphologyElement",
		"SVGFEOffsetElement",
		"SVGFEPointLightElement",
		"SVGFESpecularLightingElement",
		"SVGFESpotLightElement",
		"SVGFETileElement",
		"SVGFETurbulenceElement",
		"SVGFilterElement",
		"SVGForeignObjectElement",
		"SVGGElement",
		"SVGGeometryElement",
		"SVGGradientElement",
		"SVGGraphicsElement",
		"SVGImageElement",
		"SVGLength",
		"SVGLengthList",
		"SVGLinearGradientElement",
		"SVGLineElement",
		"SVGMarkerElement",
		"SVGMaskElement",
		"SVGMatrix",
		"SVGMetadataElement",
		"SVGMPathElement",
		"SVGNumber",
		"SVGNumberList",
		"SVGPathElement",
		"SVGPatternElement",
		"SVGPoint",
		"SVGPointList",
		"SVGPolygonElement",
		"SVGPolylineElement",
		"SVGPreserveAspectRatio",
		"SVGRadialGradientElement",
		"SVGRect",
		"SVGRectElement",
		"SVGScriptElement",
		"SVGSetElement",
		"SVGStopElement",
		"SVGStringList",
		"SVGStyleElement",
		"SVGSVGElement",
		"SVGSwitchElement",
		"SVGSymbolElement",
		"SVGTextContentElement",
		"SVGTextElement",
		"SVGTextPathElement",
		"SVGTextPositioningElement",
		"SVGTitleElement",
		"SVGTransform",
		"SVGTransformList",
		"SVGTSpanElement",
		"SVGUnitTypes",
		"SVGUseElement",
		"SVGViewElement",
		"TaskAttributionTiming",
		"Text",
		"TextDecoder",
		"TextEncoder",
		"TextEvent",
		"TextMetrics",
		"TextTrack",
		"TextTrackCue",
		"TextTrackCueList",
		"TextTrackList",
		"TimeRanges",
		"toolbar",
		"top",
		"Touch",
		"TouchEvent",
		"TouchList",
		"TrackEvent",
		"TransitionEvent",
		"TreeWalker",
		"UIEvent",
		"URL",
		"URLSearchParams",
		"ValidityState",
		"visualViewport",
		"VisualViewport",
		"VTTCue",
		"WaveShaperNode",
		"WebAssembly",
		"WebGL2RenderingContext",
		"WebGLActiveInfo",
		"WebGLBuffer",
		"WebGLContextEvent",
		"WebGLFramebuffer",
		"WebGLProgram",
		"WebGLQuery",
		"WebGLRenderbuffer",
		"WebGLRenderingContext",
		"WebGLSampler",
		"WebGLShader",
		"WebGLShaderPrecisionFormat",
		"WebGLSync",
		"WebGLTexture",
		"WebGLTransformFeedback",
		"WebGLUniformLocation",
		"WebGLVertexArrayObject",
		"WebSocket",
		"WheelEvent",
		"window",
		"Window",
		"Worker",
		"WritableStream",
		"XMLDocument",
		"XMLHttpRequest",
		"XMLHttpRequestEventTarget",
		"XMLHttpRequestUpload",
		"XMLSerializer",
		"XPathEvaluator",
		"XPathExpression",
		"XPathResult",
		"XSLTProcessor",
	];

	const ___R$project$rome$$romejs$compiler$scope$globals_ts$worker = [
		"addEventListener",
		"applicationCache",
		"atob",
		"Blob",
		"BroadcastChannel",
		"btoa",
		"Cache",
		"caches",
		"clearInterval",
		"clearTimeout",
		"close",
		"console",
		"fetch",
		"FileReaderSync",
		"FormData",
		"Headers",
		"IDBCursor",
		"IDBCursorWithValue",
		"IDBDatabase",
		"IDBFactory",
		"IDBIndex",
		"IDBKeyRange",
		"IDBObjectStore",
		"IDBOpenDBRequest",
		"IDBRequest",
		"IDBTransaction",
		"IDBVersionChangeEvent",
		"ImageData",
		"importScripts",
		"indexedDB",
		"location",
		"MessageChannel",
		"MessagePort",
		"name",
		"navigator",
		"Notification",
		"onclose",
		"onconnect",
		"onerror",
		"onlanguagechange",
		"onmessage",
		"onoffline",
		"ononline",
		"onrejectionhandled",
		"onunhandledrejection",
		"performance",
		"Performance",
		"PerformanceEntry",
		"PerformanceMark",
		"PerformanceMeasure",
		"PerformanceNavigation",
		"PerformanceResourceTiming",
		"PerformanceTiming",
		"postMessage",
		"Promise",
		"queueMicrotask",
		"removeEventListener",
		"Request",
		"Response",
		"self",
		"ServiceWorkerRegistration",
		"setInterval",
		"setTimeout",
		"TextDecoder",
		"TextEncoder",
		"URL",
		"URLSearchParams",
		"WebSocket",
		"Worker",
		"WorkerGlobalScope",
		"XMLHttpRequest",
	];

	const ___R$project$rome$$romejs$compiler$scope$globals_ts$node = [
		"__dirname",
		"__filename",
		"Buffer",
		"clearImmediate",
		"clearInterval",
		"clearTimeout",
		"console",
		"exports",
		"global",
		"Intl",
		"module",
		"process",
		"queueMicrotask",
		"require",
		"setImmediate",
		"setInterval",
		"setTimeout",
		"TextDecoder",
		"TextEncoder",
		"URL",
		"URLSearchParams",
	];

	const ___R$project$rome$$romejs$compiler$scope$globals_ts$commonjs = [
		"exports",
		"global",
		"module",
		"require",
	];

	const ___R$project$rome$$romejs$compiler$scope$globals_ts$serviceworker = [
		"addEventListener",
		"applicationCache",
		"atob",
		"Blob",
		"BroadcastChannel",
		"btoa",
		"Cache",
		"caches",
		"CacheStorage",
		"clearInterval",
		"clearTimeout",
		"Client",
		"clients",
		"Clients",
		"close",
		"console",
		"ExtendableEvent",
		"ExtendableMessageEvent",
		"fetch",
		"FetchEvent",
		"FileReaderSync",
		"FormData",
		"Headers",
		"IDBCursor",
		"IDBCursorWithValue",
		"IDBDatabase",
		"IDBFactory",
		"IDBIndex",
		"IDBKeyRange",
		"IDBObjectStore",
		"IDBOpenDBRequest",
		"IDBRequest",
		"IDBTransaction",
		"IDBVersionChangeEvent",
		"ImageData",
		"importScripts",
		"indexedDB",
		"location",
		"MessageChannel",
		"MessagePort",
		"name",
		"navigator",
		"Notification",
		"onclose",
		"onconnect",
		"onerror",
		"onfetch",
		"oninstall",
		"onlanguagechange",
		"onmessage",
		"onmessageerror",
		"onnotificationclick",
		"onnotificationclose",
		"onoffline",
		"ononline",
		"onpush",
		"onpushsubscriptionchange",
		"onrejectionhandled",
		"onsync",
		"onunhandledrejection",
		"performance",
		"Performance",
		"PerformanceEntry",
		"PerformanceMark",
		"PerformanceMeasure",
		"PerformanceNavigation",
		"PerformanceResourceTiming",
		"PerformanceTiming",
		"postMessage",
		"Promise",
		"queueMicrotask",
		"registration",
		"removeEventListener",
		"Request",
		"Response",
		"self",
		"ServiceWorker",
		"ServiceWorkerContainer",
		"ServiceWorkerGlobalScope",
		"ServiceWorkerMessageEvent",
		"ServiceWorkerRegistration",
		"setInterval",
		"setTimeout",
		"skipWaiting",
		"TextDecoder",
		"TextEncoder",
		"URL",
		"URLSearchParams",
		"WebSocket",
		"WindowClient",
		"Worker",
		"WorkerGlobalScope",
		"XMLHttpRequest",
	];


  // project-rome/@romejs/compiler/scope/Scope.ts
let ___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$scopeCounter = 0;

	Error.stackTraceLimit = Infinity;





	class ___R$project$rome$$romejs$compiler$scope$Scope_ts$default {
		constructor(
			{
				kind,
				node,
				parentScope,
				rootScope,
			},
		) {
			this.parentScope = parentScope;
			this.rootScope = rootScope;
			this.node = node;
			this.kind = kind;
			this.bindings = new Map();
			this.id = ___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$scopeCounter++;
			this.hasHoistedVars = false;
			this.globals = new Set();

			this.childScopeCache = new WeakMap();
		}

		setHoistedVars() {
			this.hasHoistedVars = true;
		}

		hasBindings() {
			return this.bindings.size > 0;
		}

		getOwnBindings() {
			return this.bindings;
		}

		getOwnBindingNames() {
			return Array.from(this.bindings.keys());
		}

		findScope(kind) {
			let scope = this;
			while (scope !== undefined) {
				if (scope.kind === kind) {
					return scope;
				} else {
					scope = scope.parentScope;
				}
			}
			return undefined;
		}

		getRootScope() {
			const {rootScope} = this;
			if (rootScope === undefined) {
				throw new Error("Expected rootScope");
			}
			return rootScope;
		}

		evaluate(
			node,
			parent = ___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$MOCK_PARENT,
			creatorOnly = false,
			force = false,
		) {
			if (node === undefined) {
				return this;
			}

			if (!force && node === this.node) {
				return this;
			}
			const cached = this.childScopeCache.get(node);
			if (cached !== undefined) {
				return cached;
			}

			let evaluator = ___R$project$rome$$romejs$compiler$scope$evaluators$index_ts$default.get(
				node.type,
			);

			if (!creatorOnly && evaluator !== undefined && evaluator.creator) {
				evaluator = undefined;
			}

			if (evaluator === undefined) {
				return this;
			}

			let scope = evaluator.build(node, parent, this);

			if (scope === undefined) {
				scope = this;
			}

			this.childScopeCache.set(node, scope);
			return scope;
		}

		fork(kind, node) {
			const rootScope = this.getRootScope();
			return new ___R$project$rome$$romejs$compiler$scope$Scope_ts$default({
				kind,
				node,
				parentScope: this,
				rootScope,
			});
		}

		dump(root = true) {
			if (root) {
				console.log("START");
			}
			console.log("------", this.id, this.kind);
			for (const [name, binding] of this.bindings) {
				console.log(" ", binding.id, "-", binding.constructor.name, name);
			}
			if (this.parentScope !== undefined) {
				this.parentScope.dump(false);
			}
			if (root) {
				console.log("END");
			}
		}

		getOwnBinding(name) {
			return this.bindings.get(name);
		}

		getBindingFromPath(path) {
			const {node} = path;
			if (
				___R$project$rome$$romejs$js$ast$utils$isVariableIdentifier_ts$default(
					node,
				)
			) {
				// TODO we can do some isInTypeAnnotation magic to get the proper "type" binding
				return this.getBinding(node.name);
			} else {
				return undefined;
			}
		}

		getBinding(name) {
			const binding = this.bindings.get(name);
			if (binding !== undefined) {
				return binding;
			}

			const {parentScope} = this;
			if (parentScope !== undefined) {
				return parentScope.getBinding(name);
			}

			return undefined;
		}

		getBindingAssert(name) {
			const binding = this.getBinding(name);
			if (binding === undefined) {
				this.dump();
				throw new Error("Expected " + name + " binding");
			}
			return binding;
		}

		addBinding(binding) {
			this.bindings.set(binding.name, binding);
			return binding;
		}

		hasBinding(name) {
			return this.getBinding(name) !== undefined;
		}

		generateUid(name) {
			return this.getRootScope().generateUid(name);
		}

		addGlobal(name) {
			this.globals.add(name);
		}

		isGlobal(name) {
			if (this.globals.has(name)) {
				return true;
			}

			if (this.parentScope !== undefined) {
				return this.parentScope.isGlobal(name);
			}

			return false;
		}
	}

	const ___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$GLOBAL_COMMENT_START = /^([\s+]|)global /;
	const ___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$GLOBAL_COMMENT_COLON = /:(.*?)$/;

	class ___R$project$rome$$romejs$compiler$scope$Scope_ts$RootScope
		extends ___R$project$rome$$romejs$compiler$scope$Scope_ts$default {
		constructor(context, ast) {
			super({
				kind: "root",
				parentScope: undefined,
				rootScope: undefined,
				node: undefined,
			});
			this.uids = new Set();
			this.context = context;

			this.globals = new Set([
				...___R$project$rome$$romejs$compiler$scope$globals_ts.builtin,
				...___R$project$rome$$romejs$compiler$scope$globals_ts.es5,
				...___R$project$rome$$romejs$compiler$scope$globals_ts.es2015,
				...___R$project$rome$$romejs$compiler$scope$globals_ts.es2017,
				...___R$project$rome$$romejs$compiler$scope$globals_ts.browser,
				...___R$project$rome$$romejs$compiler$scope$globals_ts.worker,
				...___R$project$rome$$romejs$compiler$scope$globals_ts.node,
				...___R$project$rome$$romejs$compiler$scope$globals_ts.commonjs,
				...___R$project$rome$$romejs$compiler$scope$globals_ts.serviceworker,
				...context.project.config.lint.globals,
				...this.parseGlobalComments(ast),
			]);
		}

		parseGlobalComments(ast) {
			const globals = [];

			for (const {value} of ast.comments) {
				// Check if comment starts with "global ", ignoring any leading whitespace
				if (
					!___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$GLOBAL_COMMENT_START.test(
						value,
					)
				) {
					continue;
				}

				// Remove prefix
				const clean = value.replace(
					___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$GLOBAL_COMMENT_START,
					"",
				);

				// Split by commas, supports comments like "foo, bar"
				const parts = clean.split(",");

				for (const part of parts) {
					let name = part.trim();

					// Support comments like "foo: true" amd "bar: false"
					if (
						___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$GLOBAL_COMMENT_COLON.test(
							name,
						)
					) {
						const match = part.match(
							___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$GLOBAL_COMMENT_COLON,
						);
						if (match == null) {
							throw new Error(
								"Used RegExp.test already so know this will always match",
							);
						}

						// Remove everything after the colon
						name = name.replace(
							___R$$priv$project$rome$$romejs$compiler$scope$Scope_ts$GLOBAL_COMMENT_COLON,
							"",
						);

						const value = match[1].trim();

						// Other tools would flag these as unavailable and remove them from the master set

						// We don't do that, we might want to later though?

						// Also, we should maybe validate the value to only true/false
						if (value === "false") {
							break;
						}
					}

					globals.push(name);
				}
			}

			return globals;
		}

		getRootScope() {
			return this;
		}

		generateUid(name) {
			const prefixed =
				"" +
				___R$project$rome$$romejs$compiler$constants_ts$SCOPE_PRIVATE_PREFIX +
				(name === undefined ? "" : name);

			// Check for invalid names
			if (
				name !== undefined &&
				!___R$project$rome$$romejs$js$ast$utils$isValidIdentifierName_ts$default(
					name,
				)
			) {
				throw new Error(name + " is not a valid identifier name");
			}

			// TODO find some way to remove the possibility of user bindings colliding with our private prefix
			let counter = 0;

			while (true) {
				const suffix = counter === 0 ? "" : String(counter);
				const name = prefixed + suffix;

				if (this.uids.has(name)) {
					counter++;
				} else {
					this.uids.add(name);
					return name;
				}
			}

			throw new Error("Unreachable");
		}
	}


  // project-rome/@romejs/compiler/methods/reduce.ts
const ___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$BAIL_EXIT = "BAIL";
	const ___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$KEEP_EXIT = "KEEP";

	/**
 * Validate the return value of an enter or exit transform
 */
	function ___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$validateTransformReturn(
		transformName,
		node,
		path,
	) {
		// Ignore some constants that will be handled later
		if (node === ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE) {
			return;
		}

		// If this function hits a symbol then it's invalid as we would have dealt with it before if it were a valid constant
		if (typeof node === "symbol") {
			throw new Error(
				"Returned a symbol from transform " +
				transformName +
				" that doesn't correspond to any reduce constant",
			);
		}

		// Verify common mistake of forgetting to return something
		if (typeof node === "undefined") {
			throw new Error(
				"Returned `undefined` from transform " +
				transformName +
				". If you meant to delete this node then use `return" +
				" REDUCE_REMOVE`, otherwise if you want to keep it then use `return path.node;`",
			);
		}

		// Handle returning an array of nodes
		if (Array.isArray(node)) {
			// keyed nodes cannot be replaced with an array of nodes
			if (path.opts.noArrays === true) {
				throw new Error(
					"Cannot replace this keyed node " +
					path.parent.type +
					"[" +
					path.opts.nodeKey +
					"] with an array of nodes - originated from transform " +
					transformName,
				);
			}
			return;
		}

		// Verify that it's a valid node
		if (!___R$project$rome$$romejs$js$ast$utils$isNodeLike_ts$default(node)) {
			throw new Error(
				"Expected a return value of a plain object with a `type` property or a reduce constant - originated from 'transform " +
				transformName,
			);
		}
	}

	/**
 * Given a return value from a transform, determine if we should bail out.
 * Bailing out means returning the actual node and making the parent reduce
 * call handle it (if any).
 */
	function ___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$shouldBailReduce(
		node,
	) {
		if (Array.isArray(node)) {
			// We just return the array of nodes, without transforming them
			// reduce() calls higher in the chain will splice this array and do it's
			// own transform call so when the transform is performed on the node it's
			// in it's correct place in the tree
			return true;
		}

		// This node is being removed, no point recursing into it
		if (node === ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE) {
			return true;
		}

		return false;
	}

	/**
 * Run an exit handler. We will return a tuple marking whether we should bail
 * with the returned value.
 */
	function ___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$runExit(
		path,
		name,
		callback,
		state,
	) {
		// Call transformer
		let transformedNode = callback(path, state);

		// Validate the node
		___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$validateTransformReturn(
			name,
			transformedNode,
			path,
		);

		// Check if we need to bail out
		if (
			___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$shouldBailReduce(
				transformedNode,
			)
		) {
			return [
				___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$BAIL_EXIT,
				transformedNode,
			];
		}

		// create new path if node has been changed
		if (transformedNode !== path.node) {
			path = path.fork(transformedNode);
		}

		return [
			___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$KEEP_EXIT,
			path,
		];
	}

	function ___R$project$rome$$romejs$compiler$methods$reduce_ts$default(
		origNode,
		visitors,
		context,
		pathOpts = {},
	) {
		// Initialize first path
		let path = new ___R$project$rome$$romejs$compiler$lib$Path_ts$default(
			origNode,
			context,
			pathOpts,
		);

		// Perform enter transforms
		for (const visitor of visitors) {
			const {enter} = visitor;
			if (enter === undefined) {
				continue;
			}

			// Call transformer
			let transformedNode = enter(path);

			// When returning this symbol, it indicates we should skip the subtree
			if (
				transformedNode ===
				___R$project$rome$$romejs$compiler$constants_ts$REDUCE_SKIP_SUBTREE
			) {
				return origNode;
			}

			// Validate the return value
			___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$validateTransformReturn(
				visitor.name,
				transformedNode,
				path,
			);

			// Check if we need to bail out. See the comment for shouldBailReduce on what that means
			if (
				___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$shouldBailReduce(
					transformedNode,
				)
			) {
				return transformedNode;
			}

			// Create new path if node has been changed
			if (transformedNode !== path.node) {
				path = path.fork(transformedNode);
			}
		}

		// Reduce the children
		let {node} = path;
		const visitorKeys = ___R$project$rome$$romejs$ast$js$utils_ts$visitorKeys.get(
			node.type,
		);
		if (visitorKeys !== undefined) {
			// Build the ancestry paths that we'll pass to each child path
			const ancestryPaths = pathOpts.ancestryPaths || [];
			let childAncestryPaths = [path].concat(ancestryPaths);

			// Reduce the children
			for (const key of visitorKeys) {
				// rome-ignore lint/js/noExplicitAny
				const oldVal = (node)[key];

				if (Array.isArray(oldVal)) {
					let children = oldVal;

					// When removing items from the children array, we decrement this offset and subtract it
					// whenever looking up to get the correct position
					let childrenOffset = 0;

					// This needs to be calculated beforehand as the length of the array may change when removing
					// items
					let length = children.length;

					for (let i = 0; i < length; i++) {
						// Calculate the correct index that this children can be found at
						const correctedIndex = childrenOffset + i;

						// Get the child
						const child = children[correctedIndex];

						// An array may be mixed containing [undefined, Node] etc so check that it's actually a valid node
						// An example of a property with empty elements is an JSArrayExpression with holes
						if (
							___R$project$rome$$romejs$js$ast$utils$isNodeLike_ts$default(
								child,
							)
						) {
							// Run transforms on this node
							const newChild = ___R$project$rome$$romejs$compiler$methods$reduce_ts$default(
								child,
								visitors,
								context,
								{
									noScopeCreation: pathOpts.noScopeCreation,
									parentScope: path.scope,
									ancestryPaths: childAncestryPaths,
									listKey: correctedIndex,
									nodeKey: key,
								},
							);

							// If this item has been changed then...
							if (newChild !== child && !context.frozen) {
								// Clone the children array
								children = children.slice();

								// Check if the item is to be deleted
								// REDUCE_REMOVE or an empty array are considered equivalent
								if (
									newChild ===
									___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE ||
									(Array.isArray(newChild) && newChild.length === 0)
								) {
									// Remove the item from the array
									children.splice(correctedIndex, 1);

									// Since the array now has one less item, change the offset so all
									// future indices will be correct
									childrenOffset--;
								} else if (Array.isArray(newChild)) {
									var ___R$;
									// Remove the previous, and add the new items to the array
									___R$ = children,
										___R$.splice.apply(___R$, [correctedIndex, 1, ...newChild]);

									// We increase the length of the array so that this loop covers
									// the newly inserted nodes
									// `childrenOffset` is not used here because that's just used to
									// skip elements
									length += newChild.length;

									// Revisit the current index, this is necessary as there's now a
									// new node at this position
									i--;
								} else {
									// Otherwise it's a valid node so set it
									children[correctedIndex] = newChild;

									// Revisit the current index, the node has changed and some
									// transforms may care about it
									i--;
								}

								// Mutate the original node - funky typing since Flow doesn't understand the mutation
								node = (Object.assign({}, node, {[key]: children}));

								// Create a new node path
								path = path.fork(node);

								// And create a new ancestry array for subsequent children
								childAncestryPaths = [path].concat(ancestryPaths);
							}
						}
					}
				} else if (
					___R$project$rome$$romejs$js$ast$utils$isNodeLike_ts$default(oldVal)
				) {
					// Run transforms on this node
					let newVal = ___R$project$rome$$romejs$compiler$methods$reduce_ts$default(
						oldVal,
						visitors,
						context,
						{
							noScopeCreation: pathOpts.noScopeCreation,
							parentScope: path.scope,
							ancestryPaths: childAncestryPaths,
							noArrays: true,
							nodeKey: key,
						},
					);

					// If this value has been changed then...
					if (newVal !== oldVal && !context.frozen) {
						// When replacing a key value, we cannot replace it with an array
						if (Array.isArray(newVal)) {
							throw new Error(
								"Cannot replace a key value node with an array of nodes",
							);
						}

						// If the node is deleted then use `void` instead
						if (
							newVal ===
							___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE
						) {
							newVal = undefined;
						}

						// Mutate the original object - funky typing since Flow doesn't understand the mutation
						node = (Object.assign({}, node, {[key]: newVal}));

						// Create a new node path for it
						path = path.fork(node);

						// And create a new ancestry array for subsequent children
						childAncestryPaths = [path].concat(ancestryPaths);
					}
				} else {
					// not sure what this is...
					continue;
				}
			}
		}

		// Run all exit hooks
		for (const ref of path.hooks) {
			const {exit} = ref.descriptor;
			if (exit === undefined) {
				// A hook exit method is optional
				continue;
			}

			const res = ___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$runExit(
				path,
				ref.descriptor.name,
				exit,
				ref.state,
			);
			if (
				res[0] ===
				___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$BAIL_EXIT
			) {
				return res[1];
			} else {
				path = res[1];
			}
		}

		// Run exit transforms
		for (const visitor of visitors) {
			if (visitor.exit !== undefined) {
				const res = ___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$runExit(
					path,
					visitor.name,
					visitor.exit,
					undefined,
				);
				if (
					res[0] ===
					___R$$priv$project$rome$$romejs$compiler$methods$reduce_ts$BAIL_EXIT
				) {
					return res[1];
				} else {
					path = res[1];
				}
			}
		}

		return path.node;
	}


  // project-rome/@romejs/compiler/suppressions.ts
const ___R$project$rome$$romejs$compiler$suppressions_ts$SUPPRESSION_START = "rome-ignore";





	function ___R$$priv$project$rome$$romejs$compiler$suppressions_ts$extractSuppressionsFromComment(
		context,
		comment,
		nodeToComment,
	) {
		const commentLocation = comment.loc;
		if (commentLocation === undefined) {
			return undefined;
		}

		const suppressedCategories = new Set();
		const diagnostics = [];
		const suppressions = [];

		const lines = comment.value.split("\n");
		const cleanLines = lines.map((line) => {
			// Trim line and remove leading star
			return line.trim().replace(/\*[\s]/, "");
		});

		for (const line of cleanLines) {
			if (
				!line.startsWith(
					___R$project$rome$$romejs$compiler$suppressions_ts$SUPPRESSION_START,
				)
			) {
				continue;
			}

			const nextNode = nodeToComment.get(comment);
			if (nextNode === undefined || nextNode.loc === undefined) {
				diagnostics.push({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SUPPRESSIONS.MISSING_TARGET,
					location: commentLocation,
				});
				continue;
			}

			const startLine = nextNode.loc.start.line;
			const endLine = nextNode.loc.end.line;

			const lineWithoutPrefix = line.slice(
				___R$project$rome$$romejs$compiler$suppressions_ts$SUPPRESSION_START.length,
			);
			if (lineWithoutPrefix[0] !== " ") {
				diagnostics.push({
					description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SUPPRESSIONS.MISSING_SPACE,
					location: commentLocation,
				});
				continue;
			}

			const categories = lineWithoutPrefix.trim().split(" ");
			const cleanCategories = categories.map((category) => category.trim());

			for (let category of cleanCategories) {
				if (category === "") {
					continue;
				}

				// If a category ends with a colon then all the things that follow it are an explanation
				let shouldBreak = false;
				if (category[category.length - 1] === ":") {
					shouldBreak = true;
					category = category.slice(-1);
				}

				if (suppressedCategories.has(category)) {
					diagnostics.push({
						description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.SUPPRESSIONS.DUPLICATE(
							category,
						),
						location: commentLocation,
					});
				} else {
					suppressedCategories.add(category);

					suppressions.push({
						filename: context.filename,
						category,
						commentLocation,
						startLine,
						endLine,
					});
				}

				if (shouldBreak) {
					break;
				}
			}
		}

		if (suppressions.length === 0 && diagnostics.length === 0) {
			return undefined;
		} else {
			return {diagnostics, suppressions};
		}
	}

	function ___R$project$rome$$romejs$compiler$suppressions_ts$extractSuppressionsFromProgram(
		context,
		ast,
	) {
		const {comments} = ast;

		let diagnostics = [];
		let suppressions = [];

		const nodeToComment = new Map();
		context.reduce(
			ast,
			{
				name: "extractSuppressions",
				enter(path) {
					const {node} = path;

					for (const comment of context.comments.getCommentsFromIds(
						node.leadingComments,
					)) {
						nodeToComment.set(comment, node);
					}

					return node;
				},
			},
			{
				noScopeCreation: true,
			},
		);

		for (const comment of comments) {
			const result = ___R$$priv$project$rome$$romejs$compiler$suppressions_ts$extractSuppressionsFromComment(
				context,
				comment,
				nodeToComment,
			);
			if (result !== undefined) {
				diagnostics = diagnostics.concat(result.diagnostics);
				suppressions = suppressions.concat(result.suppressions);
			}
		}

		return {suppressions, diagnostics};
	}

	function ___R$project$rome$$romejs$compiler$suppressions_ts$matchesSuppression(
		{filename, start, end},
		suppression,
	) {
		return (
			filename === suppression.filename &&
			start !== undefined &&
			end !== undefined &&
			start.line >= suppression.startLine &&
			end.line <= suppression.endLine
		);
	}


  // project-rome/@romejs/compiler/transforms/compile/transpile/classProperties.ts
function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$hasClassProps(
		node,
	) {
		for (const bodyNode of node.meta.body) {
			if (bodyNode.type === "JSClassProperty") {
				return true;
			}
		}

		return false;
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$createConstructor(
		rest,
		body,
	) {
		return ___R$project$rome$$romejs$ast$js$classes$JSClassMethod_ts$jsClassMethod.create({
			kind: "constructor",
			key: ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts$jsStaticPropertyKey.quick(
				___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
					"constructor",
				),
			),
			meta: ___R$project$rome$$romejs$ast$js$classes$JSClassPropertyMeta_ts$jsClassPropertyMeta.create({

			}),
			head: ___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts$jsFunctionHead.create({
				params: [],
				rest,
			}),
			body: ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.create({
				body,
			}),
		});
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$toExpressionStatements(
		expressions,
	) {
		return expressions.map((expr) => {
			return ___R$project$rome$$romejs$ast$js$statements$JSExpressionStatement_ts$jsExpressionStatement.create({
				expression: expr,
			});
		});
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$isSuperCall(
		node,
	) {
		return node.type === "JSCallExpression" && node.callee.type === "JSSuper";
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$transformClass(
		node,
		scope,
		context,
	) {
		const bodyReplacements = [];
		const constructorAssignments = [];
		const className =
			node.id === undefined ? scope.generateUid("class") : node.id.name;

		let _constructor = undefined;
		const filteredClassBody = [];
		for (const bodyNode of node.meta.body) {
			if (bodyNode.type === "JSClassMethod" && bodyNode.kind === "constructor") {
				_constructor = bodyNode;
				continue;
			}

			if (bodyNode.type === "JSClassProperty") {
				if (bodyNode.value === undefined) {
					continue;
				}

				if (bodyNode.key.type === "JSComputedPropertyKey") {
					if (bodyNode.meta.static === true) {
						bodyReplacements.push(
							___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`${className}[${bodyNode.key.value}] = ${bodyNode.value};`,
						);
					} else {
						constructorAssignments.push(
							___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`this[${bodyNode.key.value}] = ${bodyNode.value};`,
						);
					}
				} else {
					if (bodyNode.meta.static === true) {
						bodyReplacements.push(
							___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`${className}.${bodyNode.key.value} = ${bodyNode.value};`,
						);
					} else {
						constructorAssignments.push(
							___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`this.${bodyNode.key.value} = ${bodyNode.value};`,
						);
					}
				}
			} else {
				filteredClassBody.push(bodyNode);
			}
		}

		if (constructorAssignments.length) {
			if (node.meta.superClass !== undefined) {
				if (_constructor) {
					const visited = new Set();

					// find super() and insert assignments
					const reducedConstructor = context.reduce(
						_constructor,
						[
							{
								name: "classPropertiesInjector",
								enter(path) {
									const {node} = path;

									if (visited.has(node)) {
										return node;
									}

									if (
										___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$isSuperCall(
											node,
										) &&
										path.parent.type !== "JSExpressionStatement"
									) {
										visited.add(node);

										// TODO retain proper value of super()
										return ___R$project$rome$$romejs$ast$js$expressions$JSSequenceExpression_ts$jsSequenceExpression.create({
											expressions: [node, ...constructorAssignments],
										});
									}

									if (
										node.type === "JSExpressionStatement" &&
										___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$isSuperCall(
											node.expression,
										)
									) {
										visited.add(node);

										return ([
											node,
											...___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$toExpressionStatements(
												constructorAssignments,
											),
										]);
									}

									return node;
								},
							},
						],
					);
					_constructor = ___R$project$rome$$romejs$ast$js$classes$JSClassMethod_ts$jsClassMethod.assert(
						reducedConstructor,
					);
				} else {
					// create new constructor with a super() call and assignments
					_constructor = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$createConstructor(
						___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.quick(
							"args",
						),
						[
							___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`super(...args);`,
							...___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$toExpressionStatements(
								constructorAssignments,
							),
						],
					);
				}
			} else {
				if (_constructor) {
					// add assignments to end of constructor
					_constructor = Object.assign(
						{},
						_constructor,
						{
							body: Object.assign(
								{},
								_constructor.body,
								{
									body: [
										...___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$toExpressionStatements(
											constructorAssignments,
										),
										..._constructor.body.body,
									],
								},
							),
						},
					);
				} else {
					// create new constructor with just the assignments
					_constructor = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$createConstructor(
						undefined,
						___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$toExpressionStatements(
							constructorAssignments,
						),
					);
				}
			}
		}

		if (_constructor !== undefined) {
			filteredClassBody.unshift(_constructor);
		}

		const newClass = Object.assign(
			{},
			node,
			{
				id: node.id !== undefined && node.id.name === className
					? node.id
					: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.create({
							name: className,
						}),
				meta: Object.assign({}, node.meta, {body: filteredClassBody}),
			},
		);

		return {
			newClass,
			className,
			declarations: bodyReplacements,
		};
	}
	const ___R$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$default = {
		name: "classProperties",
		enter(path) {
			const {node, scope, context} = path;

			// correctly replace an export class with the class node then append the declarations
			if (
				(node.type === "JSExportLocalDeclaration" ||
				node.type === "JSExportDefaultDeclaration") &&
				node.declaration !== undefined &&
				node.declaration.type === "JSClassDeclaration" &&
				___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$hasClassProps(
					node.declaration,
				)
			) {
				const {newClass, declarations} = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$transformClass(
					node.declaration,
					scope,
					context,
				);
				return ([
					Object.assign({}, node, {declaration: newClass}),
					...declarations,
				]);
			}

			// turn a class expression into an IIFE that returns a class declaration
			if (
				node.type === "JSClassExpression" &&
				___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$hasClassProps(
					node,
				)
			) {
				const className =
					node.id === undefined ? scope.generateUid("class") : node.id.name;

				return ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression.create({
					callee: ___R$project$rome$$romejs$ast$js$expressions$JSArrowFunctionExpression_ts$jsArrowFunctionExpression.create({
						head: ___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts$jsFunctionHead.quick([]),
						body: ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.create({
							body: [
								Object.assign(
									{},
									node,
									{
										type: "JSClassDeclaration",
										id: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.quick(
											className,
										),
									},
								),
								___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts$jsReturnStatement.create({
									argument: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
										className,
									),
								}),
							],
						}),
					}),
					arguments: [],
				});
			}

			if (
				node.type === "JSClassDeclaration" &&
				___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$hasClassProps(
					node,
				)
			) {
				const {newClass, declarations} = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$transformClass(
					node,
					scope,
					context,
				);
				return ([newClass, ...declarations]);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/transpile/paramlessCatch.ts
const ___R$project$rome$$romejs$compiler$transforms$compile$transpile$paramlessCatch_ts$default = {
		name: "paramlessCatch",
		enter(path) {
			const {node} = path;

			if (node.type === "JSCatchClause" && node.param === undefined) {
				return Object.assign(
					{},
					node,
					{
						param: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.create({
							name: path.scope.generateUid(),
						}),
					},
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/transpile/optionalChaining.ts
const ___R$project$rome$$romejs$compiler$transforms$compile$transpile$optionalChaining_ts$default = {
		name: "optionalChaining",
		enter(path) {
			const {node} = path;

			if (node.type === "JSMemberExpression" && node.property.optional) {
				// TODO assign `node.object` to a variable and use it as a reference
				if (node.property.type === "JSComputedMemberProperty") {
					return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`${node.object} == null ? undefined : ${node.object}[${node.property.value}]`;
				} else {
					return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`${node.object} == null ? undefined : ${node.object}.${node.property.value}`;
				}
			}

			if (node.type === "JSOptionalCallExpression") {
				// TODO assign `node.callee` to a variable and use it as a reference
				return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`${node.callee} == null ? undefined : ${___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression.create({
					callee: node.callee,
					arguments: node.arguments,
				})}`;
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/transpile/nullishCoalescing.ts
const ___R$project$rome$$romejs$compiler$transforms$compile$transpile$nullishCoalescing_ts$default = {
		name: "nullishCoalescing",
		enter(path) {
			const {node} = path;

			if (node.type === "JSLogicalExpression" && node.operator === "??") {
				// TODO assign `node.left` to a variable and use it as a reference
				return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`${node.left} == null ? ${node.right} : ${node.left}`;
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/defaultHooks/index.ts




	const ___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$bindingInjector = ___R$project$rome$$romejs$compiler$api$createHook_ts$default({
		name: "bindingInjectorHook",
		initialState: {
			bindings: [],
		},
		call(path, state, opts = {}) {
			const name =
				opts.name === undefined ? path.scope.generateUid() : opts.name;

			const ref = ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
				name,
			);

			// lol
			const ass = ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentIdentifier_ts$jsAssignmentIdentifier.quick(
				name,
			);

			return {
				value: [ref, ass],
				state: {
					bindings: [...state.bindings, [name, opts.init]],
				},
			};
		},
		exit(path, state) {
			const {node} = path;

			if (node.type !== "JSBlockStatement" && node.type !== "JSRoot") {
				throw new Error("Never should have been used as a provider");
			}

			const {bindings} = state;
			if (bindings.length === 0) {
				return node;
			}

			return Object.assign(
				{},
				node,
				{
					body: [
						___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.quick(
							___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.create({
								kind: "var",
								declarations: bindings.map(([name, init]) => {
									return ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator.create({
										id: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.quick(
											name,
										),
										init,
									});
								}),
							}),
						),
						...node.body,
					],
				},
			);
		},
	});

	const ___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$variableInjectorVisitor = {
		name: "variableInjector",
		enter(path) {
			const {node} = path;

			if (node.type === "JSBlockStatement" || node.type === "JSRoot") {
				path.provideHook(
					___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$bindingInjector,
				);
			}

			return node;
		},
	};





	const ___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$commentInjector = ___R$project$rome$$romejs$compiler$api$createHook_ts$default({
		name: "commentInjectorHook",
		initialState: {
			comments: [],
		},
		call(path, state, comment) {
			let commentWithId;
			let comments = state.comments;

			const {id} = comment;
			if (id === undefined) {
				commentWithId = path.context.comments.addComment(comment);
			} else {
				// This comment already has an id so update it
				commentWithId = Object.assign({}, comment, {id});
				path.context.comments.updateComment(commentWithId);

				// Remove from existing comments
				comments = comments.filter((comment) => comment.id !== id);
			}

			return {
				value: commentWithId.id,
				state: {
					comments: [...comments, commentWithId],
				},
			};
		},
		exit(path, state) {
			const {node} = path;

			if (node.type !== "JSRoot") {
				throw new Error("Never should have been used as a provider");
			}

			return Object.assign(
				{},
				node,
				{comments: [...node.comments, ...state.comments]},
			);
		},
	});

	const ___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$commentInjectorVisitor = {
		name: "commentInjector",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSCommentBlock" || node.type === "JSCommentLine") {
				context.comments.updateComment(node);
			}

			if (node.type === "JSRoot") {
				context.comments.setComments(node.comments);
				return path.provideHook(
					___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$commentInjector,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/transpile/callSpread.ts
const ___R$project$rome$$romejs$compiler$transforms$compile$transpile$callSpread_ts$default = {
		name: "callSpread",
		enter(path) {
			const {node} = path;

			if (node.type === "JSCallExpression") {
				let func = node.callee;

				// Impossible to transform a bare super call
				if (func.type === "JSSuper") {
					return node;
				}

				let hasSpread = false;
				for (const arg of node.arguments) {
					if (arg.type === "JSSpreadElement") {
						hasSpread = true;
						break;
					}
				}
				if (hasSpread) {
					let prepend;

					let object;
					if (func.type === "JSMemberExpression") {
						const injection = path.callHook(
							___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$bindingInjector,
							{},
						);
						object = injection[0];

						prepend = ___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts$jsAssignmentExpression.create({
							operator: "=",
							left: injection[1],
							right: func.object,
						});

						func = ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts$jsMemberExpression.create({
							object,
							property: func.property,
						});
					} else {
						object = ___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts$jsNullLiteral.create({

						});
					}

					let call = {
						type: "JSCallExpression",
						loc: node.loc,
						callee: ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`${func}.apply`,
						arguments: [
							object,
							___R$project$rome$$romejs$ast$js$expressions$JSArrayExpression_ts$jsArrayExpression.create({
								elements: node.arguments,
							}),
						],
					};

					if (prepend === undefined) {
						return call;
					} else {
						return ___R$project$rome$$romejs$ast$js$expressions$JSSequenceExpression_ts$jsSequenceExpression.create({
							expressions: [prepend, call],
						});
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/transpile/templateLiterals.ts
const ___R$project$rome$$romejs$compiler$transforms$compile$transpile$templateLiterals_ts$default = {
		name: "jsTemplateLiterals",
		enter(path) {
			const {node, parent} = path;

			if (node.type === "JSTaggedTemplateExpression") {
				// TODO
			}

			if (
				node.type === "JSTemplateLiteral" &&
				parent.type !== "JSTaggedTemplateExpression"
			) {
				const nodes = [];
				const {expressions, quasis} = node;

				let index = 0;
				for (const elem of quasis) {
					if (elem.cooked) {
						nodes.push(
							___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.create({
								value: elem.cooked,
							}),
						);
					}

					if (index < expressions.length) {
						const expr = expressions[index++];
						if (expr.type !== "JSStringLiteral" || expr.value !== "") {
							nodes.push(expr);
						}
					}
				}

				if (nodes.length === 1) {
					return nodes[0];
				}

				// Since `+` is left-to-right associative, nsure the first node is a string if first/second isn't
				if (
					nodes[0].type !== "JSStringLiteral" &&
					nodes[1].type !== "JSStringLiteral"
				) {
					nodes.unshift(
						___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.quick(
							"",
						),
					);
				}

				// Build the final expression
				let root = nodes[0];
				for (let i = 1; i < nodes.length; i++) {
					root = ___R$project$rome$$romejs$ast$js$expressions$JSBinaryExpression_ts$jsBinaryExpression.create({
						operator: "+",
						left: root,
						right: nodes[i],
					});
				}
				return root;
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/transpile/objectSpread.ts
function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$hasSpreadProperty(
		props,
	) {
		for (const prop of props) {
			if (prop.type === "JSSpreadProperty") {
				return true;
			}
		}
		return false;
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$getRestProperty(
		node,
	) {
		if (node === undefined) {
			return undefined;
		}

		switch (node.type) {
			case "JSVariableDeclarator":
				return ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$getRestProperty(
					node.id,
				);

			case "JSVariableDeclarationStatement":
				return ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$getRestProperty(
					node.declaration,
				);

			case "JSVariableDeclaration": {
				for (const declarator of node.declarations) {
					const rest = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$getRestProperty(
						declarator,
					);
					if (rest !== undefined) {
						return rest;
					}
				}
				return undefined;
			}

			case "JSBindingObjectPattern":
				return node.rest;
		}

		return undefined;
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$transformSpreadProperty(
		path,
		node,
	) {
		let props = [];
		const assignArgs = [];

		function pushProps() {
			if (props.length === 0 && assignArgs.length > 0) {
				return;
			}

			assignArgs.push(
				___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression.create({
					properties: props,
				}),
			);

			props = [];
		}

		for (const prop of node.properties) {
			if (prop.type === "JSSpreadProperty") {
				pushProps();
				assignArgs.push(prop.argument);
			} else {
				props.push(prop);
			}
		}

		pushProps();

		return ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression.create({
			callee: ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`Object.assign`,
			arguments: assignArgs,
		});
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$transformRestProperty(
		path,
		node,
	) {
		const nodes = [];

		for (const declarator of node.declarations) {
			const restElem = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$getRestProperty(
				declarator,
			);

			if (
				restElem === undefined ||
				declarator.id.type !== "JSBindingObjectPattern"
			) {
				nodes.push(
					___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.quick(
						___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.create({
							kind: node.kind,
							declarations: [declarator],
						}),
					),
				);
				continue;
			}

			const uid = path.scope.generateUid();

			// push on the initial declaration so we can reference it later
			nodes.push(
				___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.quick(
					___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.create({
						kind: node.kind,
						declarations: [
							___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator.create({
								id: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.create({
									name: uid,
								}),
								init: declarator.init,
							}),
						],
					}),
				),
			);

			// fetch all the previous prop names
			const removeProps = [];
			for (const prop of declarator.id.properties) {
				if (prop.type === "JSBindingObjectPatternProperty") {
					if (
						prop.key.type === "JSComputedPropertyKey" ||
						prop.key.value.type !== "JSIdentifier"
					) {
						throw new Error("unimplemented");
					} else {
						removeProps.push(prop.key.value.name);
					}
				}
			}

			// clone the init to the rest element
			const restName = restElem.name;
			nodes.push(
				___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.quick(
					___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.create({
						kind: node.kind,
						declarations: [
							___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator.create({
								id: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.quick(
									restName,
								),
								init: ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`Object.assign({}, ${uid})`,
							}),
						],
					}),
				),
			);

			// `delete` the properties
			for (const name of removeProps) {
				nodes.push(
					___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`delete ${restName}.${name};`,
				);
			}

			// push on the initial destructuring without the rest element
			nodes.push(
				___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.quick(
					___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.create({
						kind: node.kind,
						declarations: [
							___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator.create({
								id: ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPattern_ts$jsBindingObjectPattern.create({
									properties: declarator.id.properties,
									rest: undefined,
								}),
								init: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
									uid,
								),
							}),
						],
					}),
				),
			);
		}

		return nodes;
	}
	const ___R$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$default = {
		name: "objectSpread",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSVariableDeclarationStatement" &&
				___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$getRestProperty(
					node,
				) !== undefined
			) {
				return ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$transformRestProperty(
					path,
					node.declaration,
				);
			}

			if (
				node.type === "JSObjectExpression" &&
				___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$hasSpreadProperty(
					node.properties,
				)
			) {
				return ___R$$priv$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$transformSpreadProperty(
					path,
					node,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/validation/optimizeImports.ts
// TODO: Remove this. This contains React for the following reason:
	//   A user may write: import * as React from 'react';
	//   We will remove the namespace and have only the used specifiers
	//   But the JSX plugin inserts `React.createElement`. Oh no.
	const ___R$$priv$project$rome$$romejs$compiler$transforms$compile$validation$optimizeImports_ts$IGNORED_NAMES = [
		"React",
		"react",
	];

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$validation$optimizeImports_ts$getName(
		node,
	) {
		if (
			node.type !== "JSMemberExpression" &&
			node.type !== "JSXMemberExpression"
		) {
			return undefined;
		}

		const {property} = node;

		if (property.type === "JSComputedMemberProperty") {
			if (property.value.type === "JSStringLiteral") {
				return property.value.value;
			}
		} else {
			if (
				___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(
					property,
				)
			) {
				return property.name;
			}
		}

		return undefined;
	}
	const ___R$project$rome$$romejs$compiler$transforms$compile$validation$optimizeImports_ts$default = {
		name: "optimizeImports",
		enter(path) {
			const {node} = path;

			if (node.type !== "JSRoot") {
				return node;
			}

			// Check if we have any wildcard imports
			const wildcardImports = new Map();
			const wildcardImportNodeToLocal = new Map();
			for (const child of node.body) {
				if (
					child.type === "JSImportDeclaration" &&
					!___R$$priv$project$rome$$romejs$compiler$transforms$compile$validation$optimizeImports_ts$IGNORED_NAMES.includes(
						child.source.value,
					) &&
					child.namespaceSpecifier !== undefined
				) {
					const specifier = child.namespaceSpecifier;
					wildcardImports.set(
						specifier.local.name.name,
						{
							binding: path.scope.getBindingAssert(specifier.local.name.name),
							names: new Set(),
							mappings: new Map(),
							references: new Set(),
						},
					);
					wildcardImportNodeToLocal.set(child, specifier.local.name.name);
				}
			}
			if (wildcardImports.size === 0) {
				return node;
			}

			// - Find all imported names from this namespace

			// - Remove the namespaces that have computed property access
			path.traverse(
				"optimizeImportsWildcardCollector",
				(path) => {
					const {node, parent} = path;
					if (node.type !== "JSReferenceIdentifier") {
						return;
					}

					// Ensure we're referencing a wildcard import
					const wildcardInfo = wildcardImports.get(node.name);
					if (wildcardInfo === undefined) {
						return;
					}

					// Ensure that the binding hasn't been shadowed
					if (path.scope.getBinding(node.name) !== wildcardInfo.binding) {
						return;
					}

					const isComputed =
						parent.type === "JSMemberExpression" &&
						parent.object === node &&
						___R$$priv$project$rome$$romejs$compiler$transforms$compile$validation$optimizeImports_ts$getName(
							parent,
						) === undefined;
					const isUnboxed =
						parent.type !== "JSMemberExpression" &&
						parent.type !== "JSXMemberExpression";

					if (isComputed || isUnboxed) {
						// Deopt as we can't follow this
						wildcardImports.delete(node.name);
					} else {
						const name = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$validation$optimizeImports_ts$getName(
							parent,
						);
						if (name === undefined) {
							throw new Error("Expected name");
						}
						wildcardInfo.names.add(name);
						wildcardInfo.references.add(parent);
					}
				},
			);
			if (wildcardImports.size === 0) {
				return node;
			}

			// Populate the `mappings` field with a uid
			for (const info of wildcardImports.values()) {
				for (const name of info.names) {
					info.mappings.set(name, path.scope.generateUid(name));
				}
			}

			return path.reduce({
				name: "optimizeImportWilcards",
				enter(path) {
					const {node} = path;

					// Replace all member expressions with their uids
					if (
						(node.type === "JSMemberExpression" ||
						node.type === "JSXMemberExpression") &&
						___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(
							node.object,
						)
					) {
						const wildcardInfo = wildcardImports.get(node.object.name);
						if (wildcardInfo !== undefined && wildcardInfo.references.has(node)) {
							const name = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$validation$optimizeImports_ts$getName(
								node,
							);
							if (name === undefined) {
								throw new Error("Expected name");
							}

							const newName = wildcardInfo.mappings.get(name);
							if (newName === undefined) {
								throw new Error("Expected newName");
							}

							if (node.type === "JSXMemberExpression") {
								return ___R$project$rome$$romejs$ast$js$jsx$JSXIdentifier_ts$jsxIdentifier.quick(
									newName,
								);
							} else {
								return ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
									newName,
								);
							}
						}
					}

					// Add new specifiers to wildcard import declarations
					if (
						node.type === "JSImportDeclaration" &&
						wildcardImportNodeToLocal.has(node)
					) {
						const local = wildcardImportNodeToLocal.get(node);
						if (local === undefined) {
							throw new Error("Expected local");
						}

						const wildcardInfo = wildcardImports.get(local);
						if (wildcardInfo === undefined) {
							// We would have deopted earlier
							return node;
						}

						// Remove wildcard specifier
						let namedSpecifiers = [...(node.namedSpecifiers || [])];

						// Add on our new mappings
						for (const [imported, local] of wildcardInfo.mappings) {
							namedSpecifiers.push(
								___R$project$rome$$romejs$ast$js$modules$JSImportSpecifier_ts$jsImportSpecifier.create({
									imported: ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
										imported,
									),
									local: ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifierLocal_ts$jsImportSpecifierLocal.quick(
										___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.quick(
											local,
										),
									),
								}),
							);
						}

						return ___R$project$rome$$romejs$ast$js$modules$JSImportDeclaration_ts$jsImportDeclaration.create(
							Object.assign(
								{},
								node,
								{namespaceSpecifier: undefined, namedSpecifiers},
							),
						);
					}

					return node;
				},
			});
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/validation/optimizeExports.ts
const ___R$project$rome$$romejs$compiler$transforms$compile$validation$optimizeExports_ts$default = {
		name: "optimizeExports",
		enter(path) {
			const {node} = path;

			// turn `import {a} from 'b'; export {a}`; to `export {a} from 'b';`';
			if (
				node.type === "JSExportLocalDeclaration" &&
				node.exportKind === "value" &&
				node.declaration === undefined &&
				node.specifiers !== undefined
			) {
				const nodes = [];
				const specifiers = [];

				for (const specifier of node.specifiers) {
					if (specifier.type === "JSExportLocalSpecifier") {
						const binding = path.scope.getBinding(specifier.local.name);
						if (
							binding !== undefined &&
							binding instanceof
							___R$project$rome$$romejs$compiler$scope$bindings_ts$ImportBinding &&
							binding.meta.type === "name"
						) {
							nodes.push(
								___R$project$rome$$romejs$ast$js$modules$JSExportExternalDeclaration_ts$jsExportExternalDeclaration.create({
									namedSpecifiers: [
										___R$project$rome$$romejs$ast$js$modules$JSExportExternalSpecifier_ts$jsExportExternalSpecifier.create({
											local: ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
												binding.meta.imported,
											),
											exported: specifier.exported,
											loc: specifier.loc,
										}),
									],
									source: ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.quick(
										binding.meta.source,
									),
								}),
							);
						} else {
							specifiers.push(specifier);
						}
					} else {
						// TODO ???
						specifiers.push(specifier);
					}
				}

				if (specifiers.length === node.specifiers.length && nodes.length === 0) {
					return node;
				}

				if (specifiers.length !== 0) {
					nodes.push(
						___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts$jsExportLocalDeclaration.create({
							specifiers,
						}),
					);
				}

				return nodes;
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compile/jsx.ts
function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertJSXIdentifier(
		path,
	) {
		const {node} = path;

		if (node.type === "JSXReferenceIdentifier") {
			if (node.name === "this") {
				return ___R$project$rome$$romejs$ast$js$expressions$JSThisExpression_ts$jsThisExpression.create({

				});
			} else {
				return ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.create(
					{
						name: node.name,
					},
					node,
				);
			}
		} else if (node.type === "JSXIdentifier") {
			return ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.quick(
				node.name,
			);
		} else if (node.type === "JSXMemberExpression") {
			let prop = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertJSXIdentifier(
				path.getChildPath("property"),
			);

			if (prop.type === "JSReferenceIdentifier") {
				return ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts$jsMemberExpression.create({
					object: ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertJSXIdentifier(
						path.getChildPath("object"),
					),
					property: ___R$project$rome$$romejs$ast$js$auxiliary$JSStaticMemberProperty_ts$jsStaticMemberProperty.quick(
						___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
							prop.name,
						),
					),
				});
			} else {
				return ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts$jsMemberExpression.create({
					object: ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertJSXIdentifier(
						path.getChildPath("object"),
					),
					property: ___R$project$rome$$romejs$ast$js$auxiliary$JSComputedMemberProperty_ts$jsComputedMemberProperty.quick(
						prop,
					),
				});
			}
		} else {
			throw new Error(
				"Received a node of type " +
				node.type +
				", the only node types that should be in this position are JSXIdentifier and JSXMemberExpression",
			);
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertAttributeValue(
		node,
	) {
		if (node.type === "JSXExpressionContainer") {
			return node.expression;
		} else {
			return node;
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$extractName(
		node,
	) {
		if (node.type === "JSXNamespacedName") {
			throw new Error("JSX is not XML blah blah blah");
		} else {
			return ___R$project$rome$$romejs$ast$js$jsx$JSXIdentifier_ts$jsxIdentifier.assert(
				node,
			).name;
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertAttribute(
		node,
	) {
		let valueNode = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertAttributeValue(
			node.value ||
			___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts$jsBooleanLiteral.create({
				value: true,
			}),
		);
		if (
			valueNode.type === "JSStringLiteral" &&
			(!node.value || node.value.type !== "JSXExpressionContainer")
		) {
			valueNode = ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.create({
				value: valueNode.value.replace(/\n\s+/g, " "),
			});
		}

		const name = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$extractName(
			node.name,
		);

		if (
			___R$project$rome$$romejs$js$ast$utils$isValidIdentifierName_ts$default(
				name,
			)
		) {
			const nameNode = ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.create({
				name,
				loc: ___R$project$rome$$romejs$js$ast$utils$inheritLoc_ts$default(node),
			});

			return ___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts$jsObjectProperty.create({
				key: ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts$jsStaticPropertyKey.quick(
					nameNode,
				),
				value: valueNode,
			});
		} else {
			return ___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts$jsObjectProperty.create({
				key: ___R$project$rome$$romejs$ast$js$objects$JSComputedPropertyKey_ts$jsComputedPropertyKey.quick(
					___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.quick(
						name,
					),
				),
				value: valueNode,
			});
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$pushProps(
		_props,
		objs,
	) {
		if (!_props.length) {
			return _props;
		}

		objs.push(
			___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression.create({
				properties: _props,
			}),
		);
		return [];
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$buildOpeningElementAttributes(
		attribs,
	) {
		let _props = [];
		const objs = [];

		while (attribs.length > 0) {
			const prop = attribs.shift();

			if (prop.type === "JSXSpreadAttribute") {
				_props = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$pushProps(
					_props,
					objs,
				);
				objs.push(prop.argument);
			} else {
				_props.push(
					___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertAttribute(
						prop,
					),
				);
			}
		}

		___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$pushProps(
			_props,
			objs,
		);

		let ret;
		if (objs.length === 1) {
			// only one object
			ret = objs[0];
		} else {
			// looks like we have multiple objects
			if (objs[0].type !== "JSObjectExpression") {
				objs.unshift(
					___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression.create({
						properties: [],
					}),
				);
			}

			// spread it
			ret = ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression.create({
				callee: ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`Object.assign`,
				arguments: objs,
			});
		}

		return ret;
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$cleanJSXElementLiteralChild(
		value,
	) {
		const lines = value.split(/\r\n|\n|\r/);

		let lastNonEmptyLine = 0;

		for (let i = 0; i < lines.length; i++) {
			if (lines[i].match(/[^ \t]/)) {
				lastNonEmptyLine = i;
			}
		}

		let str = "";

		for (let i = 0; i < lines.length; i++) {
			const line = lines[i];

			const isFirstLine = i === 0;
			const isLastLine = i === lines.length - 1;
			const isLastNonEmptyLine = i === lastNonEmptyLine;

			// replace rendered whitespace tabs with spaces
			let trimmedLine = line.replace(/\t/g, " ");

			// trim whitespace touching a newline
			if (!isFirstLine) {
				trimmedLine = trimmedLine.replace(/^[ ]+/, "");
			}

			// trim whitespace touching an endline
			if (!isLastLine) {
				trimmedLine = trimmedLine.replace(/[ ]+$/, "");
			}

			if (trimmedLine) {
				if (!isLastNonEmptyLine) {
					trimmedLine += " ";
				}

				str += trimmedLine;
			}
		}

		if (str !== "") {
			return ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.quick(
				str,
			);
		} else {
			return undefined;
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$buildChildren(
		children,
	) {
		const elems = [];

		for (let child of children) {
			if (child.type === "JSXText") {
				const node = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$cleanJSXElementLiteralChild(
					child.value,
				);
				if (node !== undefined) {
					elems.push(node);
				}
				continue;
			}

			if (child.type === "JSXExpressionContainer") {
				const {expression} = child;
				if (expression.type !== "JSXEmptyExpression") {
					elems.push(child.expression);
				}
				continue;
			}

			if (child.type === "JSXSpreadChild") {
				elems.push(
					___R$project$rome$$romejs$ast$js$auxiliary$JSSpreadElement_ts$jsSpreadElement.quick(
						child.expression,
					),
				);
				continue;
			}

			elems.push(child);
		}

		return elems;
	}
	const ___R$project$rome$$romejs$compiler$transforms$compile$jsx_ts$default = {
		name: "jsx",
		enter(path) {
			const {node, context, parent} = path;

			if (___R$project$rome$$romejs$ast$js$jsx$JSXElement_ts$jsxElement.is(node)) {
				let type = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$convertJSXIdentifier(
					path.getChildPath("name"),
				);

				if (
					___R$project$rome$$romejs$ast$js$jsx$JSXNamespacedName_ts$jsxNamespacedName.is(
						node.name,
					)
				) {
					// TODO better handle this
					context.addNodeDiagnostic(
						type,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.COMPILER.JSX_NOT_XML,
					);
				}

				let attribs;
				if (node.attributes.length > 0) {
					attribs = ___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$buildOpeningElementAttributes(
						node.attributes,
					);
				} else {
					attribs = ___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts$jsNullLiteral.create({

					});
				}

				const call = ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression.create({
					callee: ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`React.createElement`,
					arguments: [
						type,
						attribs,
						...___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$buildChildren(
							node.children,
						),
					],
				});

				// If we're a JSX element child then we need to be wrapped
				if (
					___R$project$rome$$romejs$ast$js$jsx$JSXElement_ts$jsxElement.is(
						parent,
					)
				) {
					return ___R$project$rome$$romejs$ast$js$jsx$JSXExpressionContainer_ts$jsxExpressionContainer.create({
						expression: call,
					});
				} else {
					return call;
				}
			}

			if (node.type === "JSXFragment") {
				const type = ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`React.Fragment`;
				const attribs = ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`null`;
				return ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression.create({
					callee: ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`React.createElement`,
					arguments: [
						type,
						attribs,
						...___R$$priv$project$rome$$romejs$compiler$transforms$compile$jsx_ts$buildChildren(
							node.children,
						),
					],
				});
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/_utils.ts
function ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getOptions(
		context,
	) {
		const opts = context.options.bundle;
		if (opts === undefined) {
			throw new Error("No bundle options found");
		}
		return opts;
	}

	function ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrivateName(
		name,
		moduleId,
	) {
		return (
			___R$project$rome$$romejs$compiler$constants_ts$SCOPE_PRIVATE_PREFIX +
			"$priv$" +
			___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$normalizeModuleId(
				moduleId,
			) +
			"$" +
			name
		);
	}

	function ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$normalizeModuleId(
		id,
	) {
		// TODO probably need more stuff in this
		return id.replace(/[\\\/@\-]/g, "$").replace(/[\-.]/g, "_");
	}

	function ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
		name,
		moduleId,
		opts,
	) {
		const forwarded = opts.resolvedImports[moduleId + ":" + name];
		if (forwarded !== undefined) {
			moduleId = forwarded.id;
			name = forwarded.name;
		}

		return (
			___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
				___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$normalizeModuleId(
					moduleId,
				),
			) +
			"$" +
			name
		);
	}

	function ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
		moduleId,
	) {
		return (
			"" +
			___R$project$rome$$romejs$compiler$constants_ts$SCOPE_PRIVATE_PREFIX +
			___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$normalizeModuleId(
				moduleId,
			)
		);
	}

	function ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getModuleId(
		source,
		opts,
	) {
		return opts.relativeSourcesToModuleId[source];
	}


  // project-rome/@romejs/js-analysis/Graph.ts


	class ___R$project$rome$$romejs$js$analysis$Graph_ts$default {
		constructor() {
			this.nodes = [];
			this.nodesByValue = new Map();
		}

		addNode(value) {
			if (this.find(value)) {
				return;
			}

			const node = {lines: [], value};
			this.nodesByValue.set(value, node);
			this.nodes.push(node);
		}

		find(value) {
			return this.nodesByValue.get(value);
		}

		hasConnections(value) {
			const node = this.nodesByValue.get(value);
			return (
				node !== undefined && (node == null ? undefined : node.lines).length > 0
			);
		}

		addLine(startValue, endValue) {
			const startNode = this.find(startValue);
			const endNode = this.find(endValue);

			if (!startNode || !endNode) {
				throw new Error("Both nodes need to exist");
			}

			startNode.lines.push(endNode);
		}
	}


  // project-rome/@romejs/js-analysis/types/T.ts
let ___R$$priv$project$rome$$romejs$js$analysis$types$T_ts$counter = 0;





	class ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode) {
			this.human = undefined;
			this.scope = scope;

			const {hub} = scope;
			this.hub = hub;
			this.utils = hub.utils;
			this.evaluator = hub.evaluator;
			this.originEvaluator = scope.evaluator.evaluatingType;

			// setup graph
			this.graph = scope.evaluator.graph;
			this.graph.addNode(this);

			this.originNode = originNode;
			this.originLoc = originNode === undefined ? undefined : originNode.loc;
			this.id =
				String(process.pid) +
				":" +
				String(___R$$priv$project$rome$$romejs$js$analysis$types$T_ts$counter++);

			this.compatibilityCache = new Map();
		}

		getConstructor() {
			// @ts-ignore
			return this.constructor;
		}

		setHuman(human) {
			this.human = human;
		}

		shouldMatch(type) {
			this.hub.assertOpen();
			this.graph.addLine(this, type);
		}

		hasConnections() {
			return this.graph.hasConnections(this);
		}

		explodeUnion() {
			return [this];
		}

		compatibleWith(otherType) {
			return otherType instanceof this.constructor;
		}

		clone() {
			const idsToType = new Map();

			const addType = (type) => {
				const reduced = this.utils.reduce(type);
				idsToType.set(type.id, type);
				return reduced.id;
			};

			const data = this.serialize(addType);

			const getType = (id) => {
				if (typeof id !== "string") {
					throw new Error("Expected id to be a string");
				}

				const type = idsToType.get(id);
				if (type === undefined) {
					throw new Error("Expected type");
				}
				return type;
			};

			return this.getConstructor().hydrate(
				this.scope,
				this.originNode,
				data,
				getType,
			);
		}

		static hydrate(scope, originNode, data, getType) {
			throw new Error("Unimplemented " + this.type + ".hydrate");
		}

		serialize(addType) {
			throw new Error(
				"Unimplemented " + this.getConstructor().type + ".prototype.serialize",
			);
		}

		reduce() {
			return this;
		}

		humanize(builder) {
			const reduced = this.utils.reduce(this);
			if (reduced === this) {
				throw new Error("unimplemented");
			} else {
				return builder.humanize(reduced);
			}
		}

		inspect() {
			return this.utils.inspect(this);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$T_ts$default.type = "T";


  // project-rome/@romejs/js-analysis/types/UnknownT.ts
class ___R$project$rome$$romejs$js$analysis$types$UnknownT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$UnknownT_ts$default(
				scope,
				originNode,
			);
		}

		humanize() {
			return "unknown";
		}

		compatibleWith() {
			return false;
		}
	}
	___R$project$rome$$romejs$js$analysis$types$UnknownT_ts$default.type = "UnknownT";


  // project-rome/@romejs/js-analysis/types/OpenT.ts
class ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		humanize(builder) {
			const type = this.utils.reduce(this);
			if (type === this) {
				return "open";
			} else {
				return builder.humanize(type);
			}
		}

		reduce() {
			const node = this.graph.find(this);
			if (node === undefined) {
				return new ___R$project$rome$$romejs$js$analysis$types$UnknownT_ts$default(
					this.scope,
					this.originNode,
				);
			}

			const values = node.lines.map((line) => this.utils.reduce(line.value));
			return this.scope.createUnion(values, this.originNode);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default.type = "OpenT";


  // project-rome/@romejs/js-analysis/types/OpenIntrinsicT.ts
class ___R$project$rome$$romejs$js$analysis$types$OpenIntrinsicT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default {
		constructor(scope, originNode, name) {
			super(scope, originNode);
			this.name = name;
		}

		serialize() {
			return {
				name: this.name,
			};
		}

		static hydrate(scope, originNode, data) {
			return scope.intrinsics.get(String(data.name));
		}

		humanize() {
			return "open intrinsic";
		}
	}
	___R$project$rome$$romejs$js$analysis$types$OpenIntrinsicT_ts$default.type = "OpenIntrinsicT";


  // project-rome/@romejs/js-analysis/Intrinsics.ts
class ___R$project$rome$$romejs$js$analysis$Intrinsics_ts$default {
		constructor(scope) {
			this.scope = scope;

			this.intrinsicByName = new Map();

			this.NumberPrototype = this.createOpenT("NumberPrototype");
			this.Number = this.createOpenT("Number");

			this.StringPrototype = this.createOpenT("StringPrototype");
			this.String = this.createOpenT("String");

			this.ObjectPrototype = this.createOpenT("ObjectPrototype");
			this.Object = this.createOpenT("Object");

			this.ArrayPrototype = this.createOpenT("ArrayPrototype");
			this.Array = this.createOpenT("Array");

			this.RegExpPrototype = this.createOpenT("RegExpPrototype");
			this.RegExp = this.createOpenT("RegExp");
		}

		get(name) {
			const t = this.intrinsicByName.get(name);
			if (t === undefined) {
				throw new Error("No intrinsic found for " + name);
			}
			return t;
		}

		createOpenT(name) {
			const t = new ___R$project$rome$$romejs$js$analysis$types$OpenIntrinsicT_ts$default(
				this.scope,
				undefined,
				name,
			);
			this.intrinsicByName.set(name, t);
			return t;
		}

		link() {
			this.String.shouldMatch(this.scope.query(["String"]));
			this.StringPrototype.shouldMatch(
				this.scope.query(["String", "prototype"]),
			);

			this.Object.shouldMatch(this.scope.query(["Object"]));
			this.ObjectPrototype.shouldMatch(
				this.scope.query(["Object", "prototype"]),
			);

			this.Array.shouldMatch(this.scope.query(["Array"]));
			this.ArrayPrototype.shouldMatch(this.scope.query(["Array", "prototype"]));

			this.RegExp.shouldMatch(this.scope.query(["RegExp"]));
			this.RegExpPrototype.shouldMatch(
				this.scope.query(["RegExp", "prototype"]),
			);

			this.Number.shouldMatch(this.scope.query(["Number"]));
			this.NumberPrototype.shouldMatch(
				this.scope.query(["Number", "prototype"]),
			);
		}
	}


  // project-rome/@romejs/js-analysis/types/ObjPropT.ts
class ___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, key, value) {
			super(scope, originNode);
			this.key = key;
			this.value = value;
		}

		serialize(addType) {
			return {
				key: this.key,
				value: addType(this.value),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default(
				scope,
				originNode,
				String(data.key),
				getType(data.value),
			);
		}

		compatibleWith(otherType) {
			if (
				otherType instanceof
				___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default &&
				otherType.key === this.key
			) {
				return this.utils.checkCompability(this.value, otherType.value);
			} else {
				return false;
			}
		}

		humanize(builder) {
			return this.key + ": " + builder.humanize(this.value);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default.type = "ObjPropT";


  // project-rome/@romejs/js-analysis/types/ObjT.ts
class ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, opts) {
			super(scope, originNode);
			this.calls = opts.calls === undefined ? [] : opts.calls;
			this.props = opts.props === undefined ? [] : opts.props;
			this.proto = opts.proto;
		}

		serialize(addType) {
			if (
				this.constructor !==
				___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default
			) {
				throw new Error(
					"Expected ObjT to be constructor, youve likely forgot to define this method in the type subclass",
				);
			}

			return {
				calls: this.calls.map((type) => addType(type)),
				proto: this.proto === undefined ? undefined : addType(this.proto),
				props: this.props.map((type) => addType(type)),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default(
				scope,
				originNode,
				{
					props: Array(data.props).map((id) => getType(id)),
					proto: data.proto === undefined ? undefined : getType(data.proto),
					calls: Array(data.calls).map((id) => getType(id)),
				},
			);
		}

		compatibleWith(otherType) {
			if (
				!(otherType instanceof
				___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default)
			) {
				return false;
			}

			const ourProps = this.props;
			const theirProps = otherType.props;

			// check that the other type has all of our props
			for (const ourPropRaw of ourProps) {
				// reduce and get the key of this prop
				const ourProp = this.utils.reduce(ourPropRaw);
				let key;
				if (
					ourProp instanceof
					___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default
				) {
					key = ourProp.key;
				} else {
					// should probably do something here
					continue;
				}

				// try and find a prop of the same key in the other object
				let theirProp;
				for (const theirPropRaw of theirProps) {
					const maybeTheirProp = this.utils.reduce(theirPropRaw);
					if (
						maybeTheirProp instanceof
						___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default &&
						maybeTheirProp.key === key
					) {
						theirProp = maybeTheirProp;
						break;
					}
				}

				if (!ourProp || !theirProp) {
					return false;
				}

				const compatibility = this.utils.checkCompability(ourProp, theirProp);
				if (compatibility.type === "incompatible") {
					return compatibility;
				}
			}

			return true;
		}

		humanize(builder) {
			if (this.props.length === 0) {
				return "{}";
			} else {
				return [
					"{",
					...this.props.map((prop) => {
						const val = builder.humanize(prop);
						let lines = val.split("\n");
						lines = lines.map((line) => "  " + line);
						return lines.join("\n") + ",";
					}),
					"}",
				].join("\n");
			}
		}
	}
	___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default.type = "ObjT";


  // project-rome/@romejs/js-analysis/types/StringLiteralT.ts
class ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default {
		constructor(scope, originNode, value) {
			super(
				scope,
				originNode,
				{
					props: [],
					proto: scope.intrinsics.StringPrototype,
					calls: [],
				},
			);
			this.value = value;
		}

		serialize() {
			return {value: this.value};
		}

		static hydrate(scope, originNode, data) {
			return new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
				scope,
				originNode,
				String(data.value),
			);
		}

		humanize() {
			let str = JSON.stringify(this.value);
			if (this.value.includes("'")) {
				return str;
			} else {
				return "'" + str.slice(1, -1) + "'";
			}
		}

		compatibleWith(type) {
			return (
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default &&
				type.value === this.value
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default.type = "StringLiteralT";


  // project-rome/@romejs/js-analysis/types/AnyT.ts
class ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default(
				scope,
				originNode,
			);
		}

		compatibleWith() {
			return true;
		}

		humanize() {
			return "any";
		}
	}
	___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default.type = "AnyT";


  // project-rome/@romejs/js-analysis/types/errors/E.ts


	class ___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default(
				scope,
				originNode,
			);
		}

		humanize() {
			return this.getError().description.message.value;
		}

		getError() {
			throw new Error("unimplemented");
		}

		compatibleWith() {
			return false;
		}
	}
	___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default.type = "E";


  // project-rome/@romejs/js-analysis/types/errors/UnknownPropE.ts
class ___R$project$rome$$romejs$js$analysis$types$errors$UnknownPropE_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default {
		constructor(scope, originNode, opts) {
			super(scope, originNode);
			this.thisKeys = opts.thisKeys;
			this.protoKeys = opts.protoKeys;
			this.allProps = [...this.thisKeys, ...this.protoKeys];
			this.key = opts.key;
			this.object = opts.object;
			this.property = opts.property;
		}

		sortProps(props) {
			if (props.length === 0) {
				return props;
			}

			const ratings = ___R$project$rome$$romejs$string$utils$orderBySimilarity_ts$orderBySimilarity(
				this.key,
				props,
			);
			const sortedProps = ratings.map((prop) => prop.target);
			return sortedProps;
		}

		getError() {
			return {
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.TYPE_CHECK.UNKNOWN_PROP(
					this.key,
					this.allProps,
				),
				lowerTarget: this.property,
				upperTarget: this.object,
			};
		}
	}
	___R$project$rome$$romejs$js$analysis$types$errors$UnknownPropE_ts$default.type = "UnknownPropE";


  // project-rome/@romejs/js-analysis/types/ObjIndexPropT.ts
class ___R$project$rome$$romejs$js$analysis$types$ObjIndexPropT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, key, value) {
			super(scope, originNode);
			this.key = key;
			this.value = value;
		}

		serialize(addType) {
			return {
				key: addType(this.key),
				value: addType(this.value),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$ObjIndexPropT_ts$default(
				scope,
				originNode,
				getType(data.key),
				getType(data.value),
			);
		}

		humanize(builder) {
			return (
				"[" + builder.humanize(this.key) + "]: " + builder.humanize(this.value)
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$ObjIndexPropT_ts$default.type = "ObjIndexPropT";


  // project-rome/@romejs/js-analysis/types/GetPropT.ts
class ___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, object, property) {
			super(scope, originNode);
			this.object = object;
			this.property = property;
		}

		serialize(addType) {
			return {
				object: addType(this.object),
				property: addType(this.property),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default(
				scope,
				originNode,
				getType(data.object),
				getType(data.property),
			);
		}

		lookup(object, property, opts = {}) {
			object = this.utils.reduce(object);
			property = this.utils.reduce(property);

			const thisKeys = new Set();

			//
			const protoKeys = opts.protoKeys === undefined ? [] : opts.protoKeys;
			const topObject = opts.topObject === undefined ? object : opts.topObject;

			// turn property into string key
			let key;
			if (
				property instanceof
				___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default
			) {
				key = property.value;
			}

			// look up on object
			if (
				key !== undefined &&
				object instanceof
				___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default
			) {
				//
				const indexers = [];
				for (const maybePropRaw of object.props) {
					const maybeProp = this.utils.reduce(maybePropRaw);
					if (
						maybeProp instanceof
						___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default
					) {
						if (maybeProp.key === key) {
							// TODO collate these in case there's multiple properties of this name
							return this.utils.reduce(maybeProp.value);
						} else {
							thisKeys.add(maybeProp.key);
						}
					} else if (
						maybeProp instanceof
						___R$project$rome$$romejs$js$analysis$types$ObjIndexPropT_ts$default
					) {
						indexers.push(maybeProp);
					}
				}

				//
				for (const indexer of indexers) {
					if (this.utils.isCompatibleWith(indexer.key, property)) {
						return this.utils.reduce(indexer.value);
					}
				}

				//
				if (object.proto) {
					return this.lookup(
						object.proto,
						property,
						{
							topObject,
							protoKeys: [...protoKeys, ...thisKeys],
						},
					);
				}
			}

			// property lookups on an `any` return `any`!
			if (
				object instanceof
				___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default ||
				object instanceof
				___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default
			) {
				return new ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default(
					this.scope,
					this.originNode,
				);
			}

			//
			if (typeof key === "string") {
				return new ___R$project$rome$$romejs$js$analysis$types$errors$UnknownPropE_ts$default(
					this.scope,
					this.originNode,
					{
						object: topObject,
						property,
						key,
						thisKeys: Array.from(thisKeys),
						protoKeys,
					},
				);
			} else {
				return new ___R$project$rome$$romejs$js$analysis$types$UnknownT_ts$default(
					this.scope,
					this.originNode,
				);
			}
		}

		reduce() {
			return this.lookup(this.object, this.property);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default.type = "GetPropT";


  // project-rome/@romejs/js-analysis/types/UnionT.ts
class ___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, types) {
			super(scope, originNode);
			this.types = [...new Set(types)];
		}

		serialize(addType) {
			return {
				types: this.types.map((type) => addType(type)),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default(
				scope,
				originNode,
				Array(data.types).map((id) => getType(id)),
			);
		}

		reduce() {
			const uniqTypes = [];
			const types = this.explodeUnion();

			for (const type of types) {
				let foundMatch = false;
				for (const compareType of uniqTypes) {
					const isCompatible = this.utils.isCompatibleWith(compareType, type);
					if (isCompatible) {
						foundMatch = true;
						break;
					}
				}
				if (foundMatch === false) {
					uniqTypes.push(type);
				}
			}

			if (uniqTypes.length === types.length) {
				return this;
			} else if (uniqTypes.length === 1) {
				return uniqTypes[0];
			} else {
				return new ___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default(
					this.scope,
					this.originNode,
					uniqTypes,
				);
			}
		}

		explodeUnion() {
			let types = [];
			const visited = new Set([this]);

			for (const type of this.types) {
				const reduced = this.utils.reduce(type);
				if (visited.has(reduced)) {
					continue;
				} else {
					visited.add(reduced);
				}

				types = types.concat(this.utils.explodeUnion(type));
			}

			return types;
		}

		compatibleWith(otherType) {
			const ourTypes = this.utils.explodeUnion(this);

			// fast path to check if a union contains a type
			if (ourTypes.includes(otherType)) {
				return true;
			}

			const otherTypes = this.utils.explodeUnion(otherType);
			const missing = [];

			for (const type of ourTypes) {
				let compatible = false;

				for (const otherType of otherTypes) {
					if (this.utils.isCompatibleWith(type, otherType)) {
						compatible = true;
					}
				}

				if (compatible === false) {
					missing.push(type);
				}
			}

			if (missing.length === 0) {
				return true;
			} else {
				// create custom error with the types that weren't in the opposing one
				//return new MissingUnionE(this.scope, otherType.originNode, otherType, this, missing);
				return false;
			}
		}

		humanize(builder) {
			return this.types.map((type) => builder.humanize(type)).join(" | ");
		}
	}
	___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default.type = "UnionT";


  // project-rome/@romejs/js-analysis/scopes.ts






	class ___R$project$rome$$romejs$js$analysis$scopes_ts$Scope {
		constructor(opts) {
			let {evaluator, parentScope} = opts;
			if (evaluator === undefined && parentScope !== undefined) {
				evaluator = parentScope.evaluator;
			}

			if (evaluator === undefined) {
				throw new Error("No evaluator was passed or inferred");
			}

			this.intrinsics = evaluator.intrinsics;
			this.evaluator = evaluator;
			this.hub = evaluator.hub;
			this.parentScope = parentScope;

			this.bindings = new Map();
		}

		getBinding(name) {
			let scope = this;
			while (scope) {
				const binding = scope.bindings.get(name);
				if (binding) {
					return binding.type;
				}
				scope = scope.parentScope;
			}
			return undefined;
		}

		getBindingAssert(name) {
			const binding = this.getBinding(name);
			if (binding === undefined) {
				throw new Error("Expected binding " + name);
			}
			return binding;
		}

		query(paths) {
			let initial = this.getBinding(paths[0]);
			if (initial === undefined) {
				throw new Error(
					'Expected "' +
					paths[0] +
					'" binding, found ' +
					JSON.stringify(this.getBindingNames()) +
					" " +
					this.evaluator.filename,
				);
			}

			//invariant(initial !== undefined, `Expected "${paths[0]}" binding`);
			for (let i = 1; i < paths.length; i++) {
				initial = new ___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default(
					this,
					undefined,
					initial,
					new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
						this,
						undefined,
						paths[i],
					),
				);
			}

			return initial;
		}

		declareBinding(name, originNode) {
			if (name === undefined) {
				throw new Error("Expected name");
			}
			this.bindings.set(
				name,
				{
					type: new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
						this,
						originNode,
					),
					status: "declared",
				},
			);
		}

		addBinding(name, type) {
			if (name === undefined) {
				throw new Error("Expected name");
			}

			const existingBinding = this.bindings.get(name);
			if (existingBinding !== undefined && existingBinding.status === "declared") {
				if (
					!(existingBinding.type instanceof
					___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default)
				) {
					throw new Error("expected OpenT");
				}

				existingBinding.type.shouldMatch(type);
			}

			this.bindings.set(
				name,
				{
					type,
					status: "initialized",
				},
			);
		}

		getBindingNames() {
			const names = new Set(
				this.parentScope ? this.parentScope.getBindingNames() : [],
			);

			for (const [name] of this.bindings) {
				names.add(name);
			}

			return Array.from(names);
		}

		getOwnBindingNames() {
			return Array.from(this.bindings.keys());
		}

		createUnion(types, originNode) {
			if (types.length === 0) {
				return new ___R$project$rome$$romejs$js$analysis$types$UnknownT_ts$default(
					this,
					originNode,
				);
			} else if (types.length === 1) {
				return types[0];
			} else {
				return new ___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default(
					this,
					originNode,
					types,
				);
			}
		}

		fork() {
			return new ___R$project$rome$$romejs$js$analysis$scopes_ts$Scope({
				evaluator: this.evaluator,
				parentScope: this,
			});
		}

		find(klass) {
			const scope = this.findOptional(klass);
			if (scope === undefined) {
				throw new Error("Failed to find class");
			} else {
				return scope;
			}
		}

		findOptional(klass) {
			let scope = this;

			do {
				if (scope instanceof klass) {
					return scope;
				}

				scope = scope.parentScope;
			} while (scope !== undefined);

			return undefined;
		}

		refine() {
			return new ___R$project$rome$$romejs$js$analysis$scopes_ts$RefineScope({
				evaluator: this.evaluator,
				parentScope: this,
			});
		}

		evaluate(node) {
			return this.evaluator.evaluate(node, this);
		}
	}

	class ___R$project$rome$$romejs$js$analysis$scopes_ts$RefineScope
		extends ___R$project$rome$$romejs$js$analysis$scopes_ts$Scope {}



	class ___R$project$rome$$romejs$js$analysis$scopes_ts$ClassScope
		extends ___R$project$rome$$romejs$js$analysis$scopes_ts$Scope {
		constructor(opts, meta) {
			super(opts);
			this.meta = meta;
		}
	}

	class ___R$project$rome$$romejs$js$analysis$scopes_ts$ThisScope
		extends ___R$project$rome$$romejs$js$analysis$scopes_ts$Scope {
		constructor(opts, context) {
			super(opts);
			this.context = context;
		}
	}



	class ___R$project$rome$$romejs$js$analysis$scopes_ts$FunctionScope
		extends ___R$project$rome$$romejs$js$analysis$scopes_ts$ThisScope {
		constructor(opts, meta) {
			super(opts, meta.thisContext);
			this.meta = meta;
		}
	}


  // project-rome/@romejs/js-analysis/types/errors/UnknownImportE.ts
class ___R$project$rome$$romejs$js$analysis$types$errors$UnknownImportE_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default {
		constructor(scope, originNode, opts) {
			super(scope, originNode);
			this.possibleNames = opts.possibleNames;
			this.importedName = opts.importedName;
			this.source = opts.source;
		}

		getError() {
			return {
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.TYPE_CHECK.UNKNOWN_IMPORT(
					this.importedName,
					this.source,
					this.possibleNames,
				),
				lowerTarget: this,
			};
		}
	}
	___R$project$rome$$romejs$js$analysis$types$errors$UnknownImportE_ts$default.type = "UnknownImportE";


  // project-rome/@romejs/js-analysis/types/VoidT.ts
class ___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default(
				scope,
				originNode,
			);
		}

		humanize() {
			return "void";
		}
	}
	___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default.type = "VoidT";


  // project-rome/@romejs/js-analysis/types/EmptyT.ts
class ___R$project$rome$$romejs$js$analysis$types$EmptyT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$EmptyT_ts$default(
				scope,
				originNode,
			);
		}

		humanize() {
			return "empty";
		}

		compatibleWith(otherType) {
			return (
				otherType instanceof
				___R$project$rome$$romejs$js$analysis$types$EmptyT_ts$default ||
				otherType instanceof
				___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$EmptyT_ts$default.type = "EmptyT";


  // project-rome/@romejs/js-analysis/types/BooleanLiteralT.ts
class ___R$project$rome$$romejs$js$analysis$types$BooleanLiteralT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, value) {
			super(scope, originNode);
			this.value = value;
		}

		serialize() {
			return {value: this.value};
		}

		static hydrate(scope, originNode, data) {
			return new ___R$project$rome$$romejs$js$analysis$types$BooleanLiteralT_ts$default(
				scope,
				originNode,
				Boolean(data.value),
			);
		}

		humanize() {
			if (this.value === true) {
				return "true";
			} else {
				return "false";
			}
		}

		compatibleWith(type) {
			return (
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$BooleanLiteralT_ts$default &&
				type.value === this.value
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$BooleanLiteralT_ts$default.type = "BooleanLiteralT";


  // project-rome/@romejs/js-analysis/types/BooleanT.ts
class ___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default(
				scope,
				originNode,
			);
		}

		humanize() {
			return "boolean";
		}

		compatibleWith(type) {
			// A boolean literal can flow into a generic boolean
			return (
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default ||
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$BooleanLiteralT_ts$default
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default.type = "BooleanT";


  // project-rome/@romejs/js-analysis/types/errors/NotCallableE.ts
class ___R$project$rome$$romejs$js$analysis$types$errors$NotCallableE_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default {
		constructor(scope, originNode, callee) {
			super(scope, originNode);
			this.callee = callee;
		}

		getError() {
			return {
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.TYPE_CHECK.NOT_CALLABLE,
				lowerTarget: this.callee,
			};
		}
	}
	___R$project$rome$$romejs$js$analysis$types$errors$NotCallableE_ts$default.type = "NotCallableE";


  // project-rome/@romejs/js-analysis/types/FunctionT.ts
class ___R$project$rome$$romejs$js$analysis$types$FunctionT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default {
		constructor(scope, originNode, opts) {
			super(
				scope,
				originNode,
				{
					props: opts.props,
					proto: opts.proto,
					calls: [],
				},
			);
			this.params = opts.params;
			this.rest = opts.rest;
			this.returns = opts.returns;
			this.body = opts.body;
		}

		serialize(addType) {
			return {
				params: this.params.map((type) => addType(type)),
				rest: this.rest ? addType(this.rest) : undefined,
				returns: addType(this.returns),
				proto: this.proto === undefined ? undefined : addType(this.proto),
				body: this.body === undefined ? undefined : addType(this.body),
				props: this.props.map((type) => addType(type)),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$FunctionT_ts$default(
				scope,
				originNode,
				{
					params: Array(data.params).map((id) => getType(id)),
					rest: data.rest === undefined ? undefined : getType(data.rest),
					returns: getType(data.returns),
					props: Array(data.props).map((id) => getType(id)),
					proto: data.proto === undefined ? undefined : getType(data.proto),
					body: data.body === undefined ? undefined : getType(data.body),
				},
			);
		}

		humanize(builder) {
			return (
				"(" +
				this.params.map((param) => builder.humanize(param)).join(", ") +
				") => " +
				builder.humanize(this.returns)
			);
		}

		reduce() {
			// No body, just a type signature
			const {body} = this;
			if (body === undefined) {
				return this;
			}

			// Reduce the body and create a new function
			const reducedBody = this.utils.reduce(body);
			if (reducedBody !== body) {
				return new ___R$project$rome$$romejs$js$analysis$types$FunctionT_ts$default(
					this.scope,
					this.originNode,
					{
						params: this.params,
						rest: this.rest,
						returns: this.returns,
						props: this.props,
						proto: this.proto,
						body: reducedBody,
					},
				);
			}

			// Already been reduced
			return this;
		}
	}
	___R$project$rome$$romejs$js$analysis$types$FunctionT_ts$default.type = "FunctionT";


  // project-rome/@romejs/js-analysis/types/CallT.ts
class ___R$project$rome$$romejs$js$analysis$types$CallT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, callee, args) {
			super(scope, originNode);
			this.callee = callee;
			this.args = args;
		}

		reduce() {
			let callee = this.utils.reduce(this.callee);
			if (
				callee instanceof
				___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default &&
				callee.calls.length
			) {
				callee = this.utils.reduce(callee.calls[0]);
			}

			if (
				callee instanceof
				___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default ||
				callee instanceof
				___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default
			) {
				return new ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default(
					this.scope,
					this.originNode,
				);
			} else if (
				callee instanceof
				___R$project$rome$$romejs$js$analysis$types$FunctionT_ts$default
			) {
				return this.utils.reduce(callee.returns);
			} else {
				return new ___R$project$rome$$romejs$js$analysis$types$errors$NotCallableE_ts$default(
					this.scope,
					this.originNode,
					this.callee,
				);
			}
		}
	}
	___R$project$rome$$romejs$js$analysis$types$CallT_ts$default.type = "CallT";


  // project-rome/@romejs/js-analysis/types/ClassT.ts
class ___R$project$rome$$romejs$js$analysis$types$ClassT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default {
		constructor(scope, originNode, opts) {
			// point `class.prototype.__proto__` to `superClass.prototype`
			let protoProp = undefined;
			if (opts.extends) {
				const originNode = opts.extends.originNode;
				protoProp = new ___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default(
					scope,
					originNode,
					opts.extends,
					new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
						scope,
						originNode,
						"prototype",
					),
				);
			}

			// create `class.prototype.constructor`
			const constructorOpen = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
				scope,
				undefined,
			);
			const constructorProp = new ___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default(
				scope,
				undefined,
				"constructor",
				constructorOpen,
			);
			const instances = [...opts.instances, constructorProp];

			// create `class.prototype`
			const protoObj = new ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default(
				scope,
				originNode,
				{
					props: instances,
					proto: protoProp,
					calls: [],
				},
			);

			super(
				scope,
				originNode,
				{
					props: [
						...opts.statics,
						new ___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default(
							scope,
							originNode,
							"prototype",
							protoObj,
						),
					],
					proto: opts.extends,
					calls: opts.calls === undefined ? [] : opts.calls,
				},
			);

			constructorOpen.shouldMatch(this);

			this._constructor = opts._constructor;
			this._statics = opts.statics;
			this._instances = opts.instances;
			this._extends = opts.extends;
		}

		serialize(addType) {
			return {
				constructor: this._constructor === undefined
					? undefined
					: addType(this._constructor),
				statics: this._statics.map((type) => addType(type)),
				instances: this._instances.map((type) => addType(type)),
				extends: this._extends === undefined
					? undefined
					: addType(this._extends),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$ClassT_ts$default(
				scope,
				originNode,
				{
					_constructor: data.constructor === undefined
						? undefined
						: getType(data.constructor),
					statics: Array(data.statics).map((id) => getType(id)),
					instances: Array(data.instances).map((id) => getType(id)),
					extends: data.extends === undefined
						? undefined
						: getType(data.extends),
				},
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$ClassT_ts$default.type = "ClassT";


  // project-rome/@romejs/js-analysis/types/IntersectionT.ts
class ___R$project$rome$$romejs$js$analysis$types$IntersectionT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, types) {
			super(scope, originNode);
			this.types = types;
		}

		serialize(addType) {
			return {
				types: this.types.map((type) => addType(type)),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$IntersectionT_ts$default(
				scope,
				originNode,
				Array(data.types).map((id) => getType(id)),
			);
		}

		compatibleWith(otherType) {
			for (const type of this.types) {
				const compatibility = this.utils.checkCompability(type, otherType);
				if (compatibility.type === "incompatible") {
					return compatibility;
				}
			}
			return true;
		}

		humanize(builder) {
			return this.types.map((type) => builder.humanize(type)).join(" & ");
		}
	}
	___R$project$rome$$romejs$js$analysis$types$IntersectionT_ts$default.type = "IntersectionT";


  // project-rome/@romejs/js-analysis/types/NullT.ts
class ___R$project$rome$$romejs$js$analysis$types$NullT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$NullT_ts$default(
				scope,
				originNode,
			);
		}

		humanize() {
			return "null";
		}
	}
	___R$project$rome$$romejs$js$analysis$types$NullT_ts$default.type = "NullT";


  // project-rome/@romejs/js-analysis/types/MaybeT.ts
class ___R$project$rome$$romejs$js$analysis$types$MaybeT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, parent) {
			super(scope, originNode);
			this.parent = parent;
		}

		serialize(addType) {
			return {
				parent: addType(this.parent),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$MaybeT_ts$default(
				scope,
				originNode,
				getType(data.parent),
			);
		}

		humanize(builder) {
			return "?" + builder.humanize(this.parent);
		}

		explodeUnion() {
			return [
				new ___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default(
					this.scope,
					this.originNode,
				),
				new ___R$project$rome$$romejs$js$analysis$types$NullT_ts$default(
					this.scope,
					this.originNode,
				),
				...this.utils.explodeUnion(this.parent),
			];
		}

		compatibleWith(otherType) {
			if (
				otherType instanceof
				___R$project$rome$$romejs$js$analysis$types$MaybeT_ts$default
			) {
				return this.utils.checkCompability(this.parent, otherType.parent);
			} else {
				return (
					otherType instanceof
					___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default ||
					otherType instanceof
					___R$project$rome$$romejs$js$analysis$types$NullT_ts$default ||
					this.utils.checkCompability(this.parent, otherType)
				);
			}
		}
	}
	___R$project$rome$$romejs$js$analysis$types$MaybeT_ts$default.type = "MaybeT";


  // project-rome/@romejs/js-analysis/types/MixedT.ts
class ___R$project$rome$$romejs$js$analysis$types$MixedT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$MixedT_ts$default(
				scope,
				originNode,
			);
		}

		compatibleWith() {
			return false;
		}

		humanize() {
			return "mixed";
		}
	}
	___R$project$rome$$romejs$js$analysis$types$MixedT_ts$default.type = "MixedT";


  // project-rome/@romejs/js-analysis/types/NumericT.ts
class ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default {
		constructor(scope, originNode) {
			super(
				scope,
				originNode,
				{
					props: [],
					proto: scope.intrinsics.NumberPrototype,
					calls: [],
				},
			);
		}

		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default(
				scope,
				originNode,
			);
		}

		humanize() {
			return "number";
		}

		compatibleWith(type) {
			// a numeric literal can flow into a generic number
			return (
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default ||
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default.type = "NumericT";


  // project-rome/@romejs/js-analysis/types/NumericLiteralT.ts
class ___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default {
		constructor(scope, originNode, value) {
			super(
				scope,
				originNode,
				{
					props: [],
					proto: scope.intrinsics.NumberPrototype,
					calls: [],
				},
			);
			this.value = value;
		}

		serialize() {
			return {value: this.value};
		}

		static hydrate(scope, originNode, data) {
			return new ___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default(
				scope,
				originNode,
				Number(data.value),
			);
		}

		humanize() {
			return String(this.value);
		}

		compatibleWith(type) {
			return (
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default ||
				(type instanceof
				___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default &&
				type.value === this.value)
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default.type = "NumericLiteralT";


  // project-rome/@romejs/js-analysis/types/ImportT.ts
class ___R$project$rome$$romejs$js$analysis$types$ImportT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, opts) {
			super(scope, originNode);
			this.importedName = opts.importedName;
			this.relative =
				opts.relative === undefined ? scope.evaluator.filename : opts.relative;
			this.source = opts.source;
			this.absolute = undefined;
			this.resolvedType = undefined;
			scope.evaluator.addImport(
				this,
				{
					importedName: this.importedName,
					relative: this.relative,
					source: this.source,
				},
			);
		}

		setAbsolute(absolute) {
			this.absolute = absolute;
		}

		setResolvedType(resolvedType) {
			this.resolvedType = resolvedType;
		}

		serialize() {
			return {
				importedName: this.importedName,
				relative: this.relative,
				source: this.source,
			};
		}

		static hydrate(scope, originNode, data) {
			return new ___R$project$rome$$romejs$js$analysis$types$ImportT_ts$default(
				scope,
				originNode,
				{
					importedName: String(data.importedName),
					source: String(data.source),
					relative: String(data.relative),
				},
			);
		}

		humanize(builder) {
			let object;
			if (this.resolvedType !== undefined) {
				object = builder.humanize(this.resolvedType);
			} else if (this.absolute === undefined) {
				object = '$Exports<"' + this.source + '", "' + this.relative + '">';
			} else {
				object = '$Exports<"' + this.absolute + '">';
			}

			if (this.importedName === undefined) {
				return object;
			} else {
				return object + "." + this.importedName;
			}
		}

		reduce() {
			if (this.resolvedType === undefined) {
				return this;
			} else {
				return this.resolvedType;
			}
		}
	}
	___R$project$rome$$romejs$js$analysis$types$ImportT_ts$default.type = "ImportT";


  // project-rome/@romejs/js-analysis/types/StringT.ts
class ___R$project$rome$$romejs$js$analysis$types$StringT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default {
		constructor(scope, originNode) {
			super(
				scope,
				originNode,
				{
					props: [],
					proto: scope.intrinsics.StringPrototype,
					calls: [],
				},
			);
		}

		serialize() {
			return {};
		}

		static hydrate(scope, originNode) {
			return new ___R$project$rome$$romejs$js$analysis$types$StringT_ts$default(
				scope,
				originNode,
			);
		}

		humanize() {
			return "string";
		}

		compatibleWith(type) {
			// a string literal can flow into a generic string
			return (
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$StringT_ts$default ||
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$StringT_ts$default.type = "StringT";


  // project-rome/@romejs/js-analysis/types/ExhaustiveT.ts
class ___R$$priv$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$ENotExhaustive
		extends ___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default {
		constructor(scope, originNode, target, only, extraenous) {
			super(scope, originNode);
			this.target = target;
			this.only = only;
			this.extraenous = extraenous;
		}

		getError() {
			return {
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.TYPE_CHECK.NOT_EXHAUSTIVE(
					this.utils.humanize(this.only),
					this.utils.humanize(this.target),
				),
				lowerTarget: this.target,
			};
		}
	}
	___R$$priv$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$ENotExhaustive.type = "ENotExhaustive";
	class ___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, target, only) {
			super(scope, originNode);
			this.target = target;
			this.only = only;
		}

		serialize(addType) {
			return {
				target: addType(this.target),
				only: addType(this.only),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default(
				scope,
				originNode,
				getType(data.target),
				getType(data.only),
			);
		}

		reduce() {
			const target = this.utils.reduce(this.target);
			const only = this.utils.reduce(this.only);
			if (
				target instanceof
				___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default ||
				only instanceof
				___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default
			) {
				return this.only;
			}

			const targetCandidates = this.utils.explodeUnion(target);
			const onlyCandidates = this.utils.explodeUnion(only);

			const extraneous = [];
			for (const possible of targetCandidates) {
				let compatible = false;

				for (const otherType of onlyCandidates) {
					if (this.utils.isCompatibleWith(possible, otherType)) {
						compatible = true;
					}
				}

				if (compatible === false) {
					extraneous.push(possible);
				}
			}

			if (extraneous.length === 0) {
				return target;
			} else {
				return new ___R$$priv$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$ENotExhaustive(
					this.scope,
					this.originNode,
					this.target,
					this.only,
					extraneous,
				);
			}
		}

		humanize(builder) {
			return (
				"exhaustive " +
				builder.humanize(this.target) +
				" should only match " +
				builder.humanize(this.target)
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default.type = "ExhaustiveT";


  // project-rome/@romejs/js-analysis/types/InstanceT.ts
class ___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default {
		constructor(scope, originNode, target, typeParameters) {
			const prototype = new ___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default(
				scope,
				originNode,
				target,
				new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
					scope,
					originNode,
					"prototype",
				),
			);
			super(
				scope,
				originNode,
				{
					props: [],
					proto: prototype,
					calls: [],
				},
			);

			this.typeParameters = typeParameters;
			this.target = target;
		}

		serialize(addType) {
			return {
				target: addType(this.target),
				params: this.typeParameters.map((type) => addType(type)),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default(
				scope,
				originNode,
				getType(data.target),
				Array(data.params).map((id) => getType(id)),
			);
		}

		humanize(builder) {
			const name = builder.humanize(this.target);
			const typeParams = this.typeParameters;
			if (typeParams.length === 0) {
				return name;
			} else {
				return (
					name +
					"<" +
					typeParams.map((param) => builder.humanize(param)).join(", ") +
					">"
				);
			}
		}

		compatibleWith(otherType) {
			return (
				otherType instanceof
				___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default &&
				this.utils.checkCompability(this.target, otherType.target)
			);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default.type = "InstanceT";


  // project-rome/@romejs/js-analysis/types/GenericT.ts
class ___R$project$rome$$romejs$js$analysis$types$GenericT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, name, type) {
			super(scope, originNode);
			this.name = name;
			this.type = type;
		}

		serialize(addType) {
			return {
				name: this.name,
				type: addType(this.type),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$GenericT_ts$default(
				scope,
				originNode,
				String(data.name),
				getType(data.type),
			);
		}

		humanize() {
			return this.name;
		}

		reduce() {
			const type = this.utils.reduce(this.type);
			if (
				type instanceof
				___R$project$rome$$romejs$js$analysis$types$ClassT_ts$default
			) {
				return new ___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default(
					this.scope,
					this.originNode,
					this.type,
					[],
				);
			} else {
				return type;
			}
		}
	}
	___R$project$rome$$romejs$js$analysis$types$GenericT_ts$default.type = "GenericT";


  // project-rome/@romejs/js-analysis/types/BinaryOpT.ts
function ___R$$priv$project$rome$$romejs$js$analysis$types$BinaryOpT_ts$isNumber(
		t,
	) {
		return (
			t instanceof
			___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default ||
			t instanceof
			___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default
		);
	}

	class ___R$project$rome$$romejs$js$analysis$types$BinaryOpT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, left, operator, right) {
			super(scope, originNode);
			this.operator = operator;
			this.left = left;
			this.right = right;
		}

		serialize(addType) {
			return {
				left: addType(this.left),
				right: addType(this.right),
			};
		}

		static hydrate(scope, originNode, data, getType) {
			return new ___R$project$rome$$romejs$js$analysis$types$BinaryOpT_ts$default(
				scope,
				originNode,
				getType(data.left),
				String(data.operator),
				getType(data.right),
			);
		}

		reduce() {
			const left = this.utils.reduce(this.left);
			const right = this.utils.reduce(this.right);
			const {scope, originNode, operator} = this;

			// return type
			switch (operator) {
				case // returns booleans
				"===":
				case "==":
				case "!=":
				case "!==":
				case "<":
				case "<=":
				case ">":
				case ">=":
				case "in":
				case "instanceof":
					// TODO return BooleanLiteralT in the cases whe we have all the info
					return new ___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default(
						scope,
						originNode,
					);

				// Returns a string or a number
				case "+":
					if (
						left instanceof
						___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default ||
						right instanceof
						___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default
					) {
						return new ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default(
							scope,
							originNode,
						);
					} else if (
						left instanceof
						___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default &&
						right instanceof
						___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default
					) {
						return new ___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default(
							scope,
							originNode,
							left.value + right.value,
						);
					} else if (
						___R$$priv$project$rome$$romejs$js$analysis$types$BinaryOpT_ts$isNumber(
							left,
						) &&
						___R$$priv$project$rome$$romejs$js$analysis$types$BinaryOpT_ts$isNumber(
							right,
						)
					) {
						return new ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default(
							scope,
							originNode,
						);
					} else if (
						left instanceof
						___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default &&
						right instanceof
						___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default
					) {
						return new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
							scope,
							originNode,
							left.value + right.value,
						);
					} else {
						return new ___R$project$rome$$romejs$js$analysis$types$StringT_ts$default(
							scope,
							originNode,
						);
					}

				// returns a number
				case "<<":
				case ">>":
				case ">>>":
				case "-":
				case "*":
				case "/":
				case "%":
				case "**":
				case "|":
				case "^":
				case "&":
					// TODO return NumericLiteralT if left/right are literals too
					return new ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default(
						scope,
						originNode,
					);

				default:
					throw new Error("Unknown operator");
			}
		}
	}
	___R$project$rome$$romejs$js$analysis$types$BinaryOpT_ts$default.type = "BinaryOpT";


  // project-rome/@romejs/js-analysis/types/errors/MissingUnionE.ts
class ___R$project$rome$$romejs$js$analysis$types$errors$MissingUnionE_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default {
		constructor(scope, originNode, target, union, missing) {
			super(scope, originNode);
			this.target = target;
			this.union = union;
			this.missing = missing;
		}

		getError() {
			return {
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.TYPE_CHECK.MISSING_CONDITION(
					this.missing.map((type) => this.utils.humanize(type)),
				),
				lowerTarget: this.target,
			};
		}
	}
	___R$project$rome$$romejs$js$analysis$types$errors$MissingUnionE_ts$default.type = "MissingUnionE";


  // project-rome/@romejs/js-analysis/types/RefinedT.ts
class ___R$project$rome$$romejs$js$analysis$types$RefinedT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, root, remove) {
			super(scope, originNode);
			this.root = root;
			this.remove = remove;
		}

		reduce() {
			const {root} = this;

			const exploded = this.utils.explodeUnion(root);
			const removeTypes = this.utils.explodeUnion(this.remove);

			const clean = [];
			const removed = [];

			// remove any possible derived types from the root that are compatible with the removed type
			for (const type of exploded) {
				let compatible = false;

				// check if any of the removed types are compatible, if every removed type is incompatible then

				// we've refined away the type
				for (const remove of removeTypes) {
					if (this.utils.isCompatibleWith(type, remove)) {
						compatible = true;
					}
				}

				if (compatible === false) {
					clean.push(type);
				} else {
					removed.push(type);
				}
			}

			if (removed.length === 0) {
				// return an error here because the removed type doesn't exist in the root
				return new ___R$project$rome$$romejs$js$analysis$types$errors$MissingUnionE_ts$default(
					root.scope,
					root.originNode,
					root,
					this.remove,
					removed,
				);
			} else {
				return root.scope.createUnion(clean, root.originNode);
			}
		}
	}
	___R$project$rome$$romejs$js$analysis$types$RefinedT_ts$default.type = "RefinedT";


  // project-rome/@romejs/js-analysis/types/RefineTypeofT.ts
class ___R$project$rome$$romejs$js$analysis$types$RefineTypeofT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, node, str, fallback) {
			super(scope, node);
			this.str = str;
			this.fallback = fallback;
		}

		reduce() {
			const {fallback, utils} = this;
			const str = utils.reduce(this.str);

			if (
				str instanceof
				___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default
			) {
				let val;

				switch (str.value) {
					case "string": {
						val = new ___R$project$rome$$romejs$js$analysis$types$StringT_ts$default(
							this.scope,
							undefined,
						);
						break;
					}

					case "number": {
						val = new ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default(
							this.scope,
							undefined,
						);
						break;
					}

					case "undefined": {
						val = new ___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default(
							this.scope,
							undefined,
						);
						break;
					}

					case "boolean": {
						val = new ___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default(
							this.scope,
							undefined,
						);
						break;
					}

					case "symbol":
					case "function":
					case "object":
						// TODO
						return utils.reduce(fallback);

					default:
						// TODO complain about unknown value
						return utils.reduce(fallback);
				}

				// make sure our refinement is actually possible and matches a value in `fallback`

				// then pluck the matching type
				const types = utils.explodeUnion(fallback);
				for (const type of types) {
					if (utils.isCompatibleWith(type, val)) {
						return utils.reduce(type);
					}
				}

				// TODO complain of a missing condition
				return utils.reduce(fallback);
			}

			return utils.reduce(fallback);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$RefineTypeofT_ts$default.type = "RefineTypeofT";


  // project-rome/@romejs/js-analysis/types/TypeofT.ts
class ___R$project$rome$$romejs$js$analysis$types$TypeofT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, node, obj) {
			super(scope, node);
			this.obj = obj;
		}

		reduce() {
			const types = this.utils.explodeUnion(this.obj);

			const possibleTypes = [];
			for (const rawType of types) {
				const type = this.utils.reduce(rawType);
				let typeStr;

				if (
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$StringT_ts$default ||
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default
				) {
					typeStr = "string";
				}

				if (
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default ||
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default
				) {
					typeStr = "number";
				}

				if (
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default ||
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$BooleanLiteralT_ts$default
				) {
					typeStr = "boolean";
				}

				if (
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default
				) {
					typeStr = "undefined";
				}

				if (
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default
				) {
					if (type.calls.length === 0) {
						typeStr = "object";
					} else {
						typeStr = "function";
					}
				}

				if (
					type instanceof
					___R$project$rome$$romejs$js$analysis$types$NullT_ts$default
				) {
					typeStr = "object";
				}

				// TODO symbol

				// TODO bigint
				if (typeStr !== undefined) {
					possibleTypes.push(
						new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
							this.scope,
							this.originNode,
							typeStr,
						),
					);
				}
			}

			if (possibleTypes.length === 0) {
				return new ___R$project$rome$$romejs$js$analysis$types$StringT_ts$default(
					this.scope,
					this.originNode,
				);
			} else {
				return this.scope.createUnion(possibleTypes, this.originNode);
			}
		}
	}
	___R$project$rome$$romejs$js$analysis$types$TypeofT_ts$default.type = "TypeofT";


  // project-rome/@romejs/js-analysis/types/SideEffectT.ts
class ___R$project$rome$$romejs$js$analysis$types$SideEffectT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, actualType) {
			super(scope, originNode);
			this.actualType = actualType;
		}

		reduce() {
			return this.utils.reduce(this.actualType);
		}
	}
	___R$project$rome$$romejs$js$analysis$types$SideEffectT_ts$default.type = "SideEffectT";


  // project-rome/@romejs/js-analysis/types/BlockT.ts
class ___R$project$rome$$romejs$js$analysis$types$BlockT_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$T_ts$default {
		constructor(scope, originNode, body) {
			super(scope, originNode);
			this.body = body;
		}

		reduce() {
			const body = [];
			let changed = false;

			for (const type of this.body) {
				const reduced = this.utils.reduce(type);
				body.push(reduced);
				if (reduced !== type) {
					changed = true;
				}
			}

			if (changed) {
				return new ___R$project$rome$$romejs$js$analysis$types$BlockT_ts$default(
					this.scope,
					this.originNode,
					body,
				);
			} else {
				return this;
			}
		}

		humanize() {
			return "{}";
		}
	}
	___R$project$rome$$romejs$js$analysis$types$BlockT_ts$default.type = "BlockT";


  // project-rome/@romejs/js-analysis/types/errors/UndeclaredVarE.ts
class ___R$project$rome$$romejs$js$analysis$types$errors$UndeclaredVarE_ts$default
		extends ___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default {
		constructor(scope, originNode, name) {
			super(scope, originNode);
			this.name = name;
		}

		getError() {
			const possibleNames = this.scope.getBindingNames();
			return {
				description: ___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.TYPE_CHECK.UNDECLARED_VARIABLE(
					this.name,
					possibleNames,
				),
				lowerTarget: this,
			};
		}
	}
	___R$project$rome$$romejs$js$analysis$types$errors$UndeclaredVarE_ts$default.type = "UndeclaredVarE";


  // project-rome/@romejs/js-analysis/types/index.ts
const ___R$project$rome$$romejs$js$analysis$types$index_ts = {
		get default() {
			return ___R$project$rome$$romejs$js$analysis$types$index_ts$default;
		},
	};
	const ___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types = new Map();
	const ___R$project$rome$$romejs$js$analysis$types$index_ts$default = ___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types;
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"AnyT",
		___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"BooleanLiteralT",
		___R$project$rome$$romejs$js$analysis$types$BooleanLiteralT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"BooleanT",
		___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"CallT",
		___R$project$rome$$romejs$js$analysis$types$CallT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"ClassT",
		___R$project$rome$$romejs$js$analysis$types$ClassT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"EmptyT",
		___R$project$rome$$romejs$js$analysis$types$EmptyT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"FunctionT",
		___R$project$rome$$romejs$js$analysis$types$FunctionT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"GetPropT",
		___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"IntersectionT",
		___R$project$rome$$romejs$js$analysis$types$IntersectionT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"MaybeT",
		___R$project$rome$$romejs$js$analysis$types$MaybeT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"MixedT",
		___R$project$rome$$romejs$js$analysis$types$MixedT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"NullT",
		___R$project$rome$$romejs$js$analysis$types$NullT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"NumericLiteralT",
		___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"NumericT",
		___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"ObjPropT",
		___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"ObjT",
		___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"OpenIntrinsicT",
		___R$project$rome$$romejs$js$analysis$types$OpenIntrinsicT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"ImportT",
		___R$project$rome$$romejs$js$analysis$types$ImportT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"OpenT",
		___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"StringLiteralT",
		___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"StringT",
		___R$project$rome$$romejs$js$analysis$types$StringT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"UnionT",
		___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"UnknownT",
		___R$project$rome$$romejs$js$analysis$types$UnknownT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"VoidT",
		___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"ExhaustiveT",
		___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"InstanceT",
		___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"GenericT",
		___R$project$rome$$romejs$js$analysis$types$GenericT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"ObjIndexPropT",
		___R$project$rome$$romejs$js$analysis$types$ObjIndexPropT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"BinaryOpT",
		___R$project$rome$$romejs$js$analysis$types$BinaryOpT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"RefinedT",
		___R$project$rome$$romejs$js$analysis$types$RefinedT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"RefineTypeofT",
		___R$project$rome$$romejs$js$analysis$types$RefineTypeofT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"TypeofT",
		___R$project$rome$$romejs$js$analysis$types$TypeofT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"SideEffectT",
		___R$project$rome$$romejs$js$analysis$types$SideEffectT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"BlockT",
		___R$project$rome$$romejs$js$analysis$types$BlockT_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"E",
		___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"NotCallableE",
		___R$project$rome$$romejs$js$analysis$types$errors$NotCallableE_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"UndeclaredVarE",
		___R$project$rome$$romejs$js$analysis$types$errors$UndeclaredVarE_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"UnknownPropE",
		___R$project$rome$$romejs$js$analysis$types$errors$UnknownPropE_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"UnknownImportE",
		___R$project$rome$$romejs$js$analysis$types$errors$UnknownImportE_ts$default,
	);
	___R$$priv$project$rome$$romejs$js$analysis$types$index_ts$types.set(
		"MissingUnionE",
		___R$project$rome$$romejs$js$analysis$types$errors$MissingUnionE_ts$default,
	);


  // project-rome/@romejs/js-analysis/evaluators/temp/JSAmbiguousFlowTypeCastExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$temp$JSAmbiguousFlowTypeCastExpression_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$temp$JSAmbiguousFlowTypeCastExpression_ts$jsAmbiguousFlowTypeCastExpression.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSArrayExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSArrayExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSArrayExpression_ts$jsArrayExpression.assert(
			node,
		);
		const elems = [];

		for (const expr of node.elements) {
			if (expr === undefined) {
				// TODO array hole, add undefined here
			} else {
				elems.push(scope.evaluate(expr));
			}
		}

		let value;
		if (elems.length === 0) {
			value = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
				scope,
				node,
			);
		} else {
			value = scope.createUnion(elems, node);
		}
		return new ___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default(
			scope,
			node,
			scope.intrinsics.Array,
			[value],
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSArrayHole.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSArrayHole_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSArrayHole_ts$jsArrayHole.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/utils/executeAtom.ts
function ___R$project$rome$$romejs$js$analysis$utils$executeAtom_ts$default(
		leftNode,
		rightType,
		scope,
	) {
		switch (leftNode.type) {
			case "JSBindingIdentifier": {
				scope.addBinding(leftNode.name, rightType);
				break;
			}

			case "JSBindingObjectPattern": {
				for (const prop of leftNode.properties) {
					___R$project$rome$$romejs$js$analysis$utils$executeAtom_ts$default(
						prop,
						rightType,
						scope,
					);
				}
				break;
			}

			case "JSBindingObjectPatternProperty": {
				const {key} = leftNode;
				if (
					key.type === "JSComputedPropertyKey" ||
					key.value.type !== "JSIdentifier"
				) {
					throw new Error("unimplemented");
				}

				const propKey = new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
					scope,
					key,
					key.value.name,
				);
				const getProp = new ___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default(
					scope,
					leftNode,
					rightType,
					propKey,
				);
				___R$project$rome$$romejs$js$analysis$utils$executeAtom_ts$default(
					leftNode.value,
					getProp,
					scope,
				);
				break;
			}

			case "JSBindingArrayPattern": {
				for (let i = 0; i < leftNode.elements.length; i++) {
					const elem = leftNode.elements[i];
					if (elem === undefined) {
						continue;
					}

					const propKey = new ___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default(
						scope,
						elem,
						i,
					);
					const getProp = new ___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default(
						scope,
						leftNode,
						rightType,
						propKey,
					);
					___R$project$rome$$romejs$js$analysis$utils$executeAtom_ts$default(
						elem,
						getProp,
						scope,
					);
				}
				break;
			}

			case "JSBindingAssignmentPattern": {
				___R$project$rome$$romejs$js$analysis$utils$executeAtom_ts$default(
					leftNode.left,
					rightType,
					scope,
				);
				break;
			}
		}
	}


  // project-rome/@romejs/js-analysis/utils/executeFunction.ts
function ___R$project$rome$$romejs$js$analysis$utils$executeFunction_ts$default(
		node,
		scope,
		bindId,
		thisContext,
	) {
		const {head} = node;

		// build return type
		const returns = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
			scope,
			head.returnType ? head.returnType : node,
		);

		// type check the body
		const bodyScope = new ___R$project$rome$$romejs$js$analysis$scopes_ts$FunctionScope(
			{
				parentScope: scope,
			},
			{
				thisContext: thisContext
					? thisContext
					: new ___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default(
							scope,
							undefined,
						),
				returnType: returns,
			},
		);
		if (head.typeParameters) {
			bodyScope.evaluate(head.typeParameters);
		}

		// build param types
		const params = [];
		let rest;
		for (let paramNode of head.params) {
			let optional =
				paramNode.meta !== undefined && paramNode.meta.optional === true;
			if (paramNode.type === "JSBindingAssignmentPattern") {
				optional = false;
				paramNode = paramNode.left;
			}

			let paramType;
			if (
				paramNode.meta !== undefined &&
				paramNode.meta.typeAnnotation !== undefined
			) {
				paramType = scope.evaluate(paramNode.meta.typeAnnotation);
			} else {
				paramType = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
					scope,
					paramNode,
				);
			}

			if (optional) {
				paramType = new ___R$project$rome$$romejs$js$analysis$types$MaybeT_ts$default(
					scope,
					paramNode,
					paramType,
				);
			}

			params.push(paramType);
		}

		for (let i = 0; i < head.params.length; i++) {
			___R$project$rome$$romejs$js$analysis$utils$executeAtom_ts$default(
				head.params[i],
				params[i],
				scope,
			);
		}
		const block = bodyScope.evaluate(node.body);

		// if no types have flowed into the return type then it'll return undefined
		if (returns.hasConnections() === false) {
			//const ret = new VoidT(scope, node);
			//returns.shouldMatch(ret);
		}

		if (head.returnType) {
			returns.shouldMatch(scope.evaluate(head.returnType));
		}

		// create the function
		const func = new ___R$project$rome$$romejs$js$analysis$types$FunctionT_ts$default(
			scope,
			node,
			{params, rest, returns, body: block},
		);
		return func;
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSArrowFunctionExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSArrowFunctionExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSArrowFunctionExpression_ts$jsArrowFunctionExpression.assert(
			node,
		);

		let thisContext;
		const funcScope = scope.findOptional(
			___R$project$rome$$romejs$js$analysis$scopes_ts$FunctionScope,
		);
		if (funcScope !== undefined) {
			thisContext = funcScope.meta.thisContext;
		}

		return ___R$project$rome$$romejs$js$analysis$utils$executeFunction_ts$default(
			node,
			scope,
			true,
			thisContext,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSAssignmentArrayPattern.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentArrayPattern_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentArrayPattern_ts$jsAssignmentArrayPattern.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSAssignmentAssignmentPattern.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentAssignmentPattern_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentAssignmentPattern_ts$jsAssignmentAssignmentPattern.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSAssignmentExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSAssignmentExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts$jsAssignmentExpression.assert(
			node,
		);

		const {left, right, operator} = node;

		if (operator === "=") {
			const rightType = scope.evaluate(right);
			const leftType = scope.evaluate(left);
			leftType.shouldMatch(rightType);
			return new ___R$project$rome$$romejs$js$analysis$types$SideEffectT_ts$default(
				scope,
				node,
				rightType,
			);
		} else {
			// TODO!
			return undefined;
		}
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSAssignmentIdentifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentIdentifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentIdentifier_ts$jsAssignmentIdentifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSAssignmentObjectPattern.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentObjectPattern_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPattern_ts$jsAssignmentObjectPattern.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSAssignmentObjectPatternProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentObjectPatternProperty_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentObjectPatternProperty_ts$jsAssignmentObjectPatternProperty.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSAwaitExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSAwaitExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSAwaitExpression_ts$jsAwaitExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/literals/JSBigIntLiteral.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$literals$JSBigIntLiteral_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$literals$JSBigIntLiteral_ts$jsBigIntLiteral.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSBinaryExpression.ts
function ___R$$priv$project$rome$$romejs$js$analysis$evaluators$expressions$JSBinaryExpression_ts$maybeRefine(
		node,
		left,
		right,
		scope,
	) {
		const evaluator = scope.evaluator;

		if (left.type === "JSIdentifier") {
			scope.addBinding(left.name, evaluator.getTypeFromEvaluatedNode(right));
			return true;
		}

		if (
			left.type === "JSUnaryExpression" &&
			left.operator === "typeof" &&
			left.argument.type === "JSReferenceIdentifier"
		) {
			const name = left.argument.name;
			const binding = scope.getBinding(name);
			if (binding !== undefined) {
				const type = new ___R$project$rome$$romejs$js$analysis$types$RefineTypeofT_ts$default(
					scope,
					node,
					evaluator.getTypeFromEvaluatedNode(right),
					binding,
				);
				scope.addBinding(name, type);
				return true;
			}
		}

		return false;
	}

	function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSBinaryExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSBinaryExpression_ts$jsBinaryExpression.assert(
			node,
		);

		const left = scope.evaluate(node.left);
		const right = scope.evaluate(node.right);

		// Enforce that the left and right sides of these operators are numbers
		switch (node.operator) {
			case "<<":
			case ">>":
			case ">>>":
			case "-":
			case "*":
			case "/":
			case "%":
			case "**":
			case "|":
			case "^":
			case "&":
			case "<":
			case "<=":
			case ">":
			case ">=": {
				const num = new ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default(
					scope,
					undefined,
				);
				new ___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default(
					scope,
					node,
					left,
					num,
				);
				new ___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default(
					scope,
					node,
					right,
					num,
				);
				break;
			}
		}

		// Refinements
		let refinedScope = scope;
		if (node.operator === "===") {
			refinedScope = scope.refine();
			___R$$priv$project$rome$$romejs$js$analysis$evaluators$expressions$JSBinaryExpression_ts$maybeRefine(
				node,
				node.left,
				node.right,
				refinedScope,
			) ||
			___R$$priv$project$rome$$romejs$js$analysis$evaluators$expressions$JSBinaryExpression_ts$maybeRefine(
				node,
				node.right,
				node.left,
				refinedScope,
			);
		}

		return new ___R$project$rome$$romejs$js$analysis$types$BinaryOpT_ts$default(
			refinedScope,
			node,
			left,
			node.operator,
			right,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSBindingArrayPattern.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingArrayPattern_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSBindingArrayPattern_ts$jsBindingArrayPattern.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSBindingAssignmentPattern.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingAssignmentPattern_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSBindingAssignmentPattern_ts$jsBindingAssignmentPattern.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSBindingIdentifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingIdentifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSBindingObjectPattern.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingObjectPattern_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPattern_ts$jsBindingObjectPattern.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSBindingObjectPatternProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingObjectPatternProperty_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSBindingObjectPatternProperty_ts$jsBindingObjectPatternProperty.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSBlockStatement.ts
function ___R$$priv$project$rome$$romejs$js$analysis$evaluators$statements$JSBlockStatement_ts$shouldHoistExecute(
		node,
	) {
		if (node === undefined) {
			return false;
		}

		if (
			node.type === "JSFunctionDeclaration" ||
			___R$project$rome$$romejs$js$ast$utils$isTypeNode_ts$default(node)
		) {
			return true;
		}

		if (
			node.type === "JSExportLocalDeclaration" ||
			node.type === "JSExportDefaultDeclaration"
		) {
			return ___R$$priv$project$rome$$romejs$js$analysis$evaluators$statements$JSBlockStatement_ts$shouldHoistExecute(
				node.declaration,
			);
		}

		return false;
	}

	function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSBlockStatement_ts$default(
		node,
		scope,
	) {
		node =
			node.type === "JSRoot"
				? node
				: ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.assert(
						node,
					);

		// Declare variables
		for (const child of node.body) {
			if (child.type === "JSImportDeclaration") {
				scope.evaluate(child);
			}

			const declarations = ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
				child,
			);
			for (const id of declarations) {
				scope.declareBinding(id.name, id);
			}
		}

		const types = [];

		// Execute hoisted nodes
		const body = [];
		for (const child of node.body) {
			if (child.type === "JSImportDeclaration") {
				// already executed
			} else if (
				___R$$priv$project$rome$$romejs$js$analysis$evaluators$statements$JSBlockStatement_ts$shouldHoistExecute(
					child,
				)
			) {
				types.push(scope.evaluate(child));
			} else {
				body.push(child);
			}
		}

		// Execute rest
		for (const child of body) {
			types.push(scope.evaluate(child));
		}

		return new ___R$project$rome$$romejs$js$analysis$types$BlockT_ts$default(
			scope,
			node,
			types,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/literals/JSBooleanLiteral.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$literals$JSBooleanLiteral_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts$jsBooleanLiteral.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$BooleanLiteralT_ts$default(
			scope,
			node,
			node.value,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSBreakStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSBreakStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSBreakStatement_ts$jsBreakStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSCallExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSCallExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSCallExpression_ts$jsCallExpression.assert(
			node,
		);

		return new ___R$project$rome$$romejs$js$analysis$types$CallT_ts$default(
			scope,
			node,
			scope.evaluate(node.callee),
			node.arguments.map((arg) => {
				return scope.evaluate(arg);
			}),
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSCatchClause.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSCatchClause_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSCatchClause_ts$jsCatchClause.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSClassExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassExpression_ts$default(
		node,
		scope,
	) {
		node =
			node.type === "JSClassDeclaration"
				? node
				: ___R$project$rome$$romejs$ast$js$classes$JSClassExpression_ts$jsClassExpression.assert(
						node,
					);

		const instances = [];
		const statics = [];

		//
		const classInstance = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
			scope,
			node,
		);
		const classId = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
			scope,
			node,
		);

		//
		const bodyScope = new ___R$project$rome$$romejs$js$analysis$scopes_ts$ClassScope(
			{parentScope: scope},
			{
				instance: classInstance,
				static: classId,
			},
		);

		if (node.id !== undefined) {
			bodyScope.addBinding(node.id.name, classId);
		}

		if (node.meta.typeParameters !== undefined) {
			bodyScope.evaluate(node.meta.typeParameters);
		}

		let _constructor = undefined;

		for (const bodyNode of node.meta.body) {
			const type = bodyScope.evaluate(bodyNode);

			if (bodyNode.type === "JSClassMethod" && bodyNode.kind === "constructor") {
				_constructor = type;
			} else {
				if (
					bodyNode.type !== "TSIndexSignature" &&
					bodyNode.meta.static === true
				) {
					statics.push(type);
				} else {
					instances.push(type);
				}
			}
		}

		//
		const classOrigin = node.id ? node.id : node;
		let type = new ___R$project$rome$$romejs$js$analysis$types$ClassT_ts$default(
			scope,
			classOrigin,
			{
				_constructor,
				instances,
				statics,
				extends: node.meta.superClass
					? scope.evaluate(node.meta.superClass)
					: undefined,
			},
		);
		if (node.id) {
			type.setHuman(node.id.name);
		}

		//
		classId.shouldMatch(type);

		//
		const instance = new ___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default(
			scope,
			classOrigin,
			type,
			[],
		);
		classInstance.shouldMatch(instance);

		return type;
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSClassDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassDeclaration_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$classes$JSClassDeclaration_ts$jsClassDeclaration.assert(
			node,
		);
		const type = ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassExpression_ts$default(
			node,
			scope,
		);
		if (node.id) {
			scope.addBinding(node.id.name, type);
		}
		return type;
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSClassHead.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassHead_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$classes$JSClassHead_ts$jsClassHead.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSClassMethod.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassMethod_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$classes$JSClassMethod_ts$jsClassMethod.assert(
			node,
		);
		if (node.key.type === "JSComputedPropertyKey" === true) {
			// TODO
			return undefined;
		}

		const classScope = scope.find(
			___R$project$rome$$romejs$js$analysis$scopes_ts$ClassScope,
		);
		const thisContext =
			node.meta.static === true
				? classScope.meta.static
				: classScope.meta.instance;
		const func = ___R$project$rome$$romejs$js$analysis$utils$executeFunction_ts$default(
			node,
			scope,
			false,
			thisContext,
		);

		if (node.key.value.type !== "JSIdentifier") {
			throw new Error("Expected only an jsIdentifier key");
		}
		return new ___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default(
			scope,
			node,
			node.key.value.name,
			func,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSClassPrivateMethod.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassPrivateMethod_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateMethod_ts$jsClassPrivateMethod.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSClassPrivateProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassPrivateProperty_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$classes$JSClassPrivateProperty_ts$jsClassPrivateProperty.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSClassProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassProperty_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$classes$JSClassProperty_ts$jsClassProperty.assert(
			node,
		);

		if (node.key.type === "JSComputedPropertyKey") {
			// TODO
			return undefined;
		}

		const classScope = scope.find(
			___R$project$rome$$romejs$js$analysis$scopes_ts$ClassScope,
		);
		const funcScope = new ___R$project$rome$$romejs$js$analysis$scopes_ts$ThisScope(
			{parentScope: scope},
			classScope.meta.instance,
		);

		let annotatedType;
		let inferredType;

		if (node.typeAnnotation) {
			annotatedType = funcScope.evaluate(node.typeAnnotation);
		}

		if (node.value) {
			inferredType = funcScope.evaluate(node.value);

			if (annotatedType !== undefined) {
				inferredType.shouldMatch(annotatedType);
			}
		}

		if (annotatedType === undefined && inferredType === undefined) {
			// TODO what do we do here?
			inferredType = new ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default(
				scope,
				node,
			);
		}

		const actualValue =
			annotatedType === undefined ? inferredType : annotatedType;
		if (actualValue === undefined) {
			throw new Error("Expected actual value");
		}

		if (node.key.value.type !== "JSIdentifier") {
			throw new Error("Expected only an jsIdentifier key");
		}

		return new ___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default(
			scope,
			node,
			node.key.value.name,
			actualValue,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSClassPropertyMeta.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassPropertyMeta_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$classes$JSClassPropertyMeta_ts$jsClassPropertyMeta.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/core/JSCommentBlock.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$core$JSCommentBlock_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$core$JSCommentBlock_ts$jsCommentBlock.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/core/JSCommentLine.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$core$JSCommentLine_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$core$JSCommentLine_ts$jsCommentLine.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSComputedMemberProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSComputedMemberProperty_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSComputedMemberProperty_ts$jsComputedMemberProperty.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/objects/JSComputedPropertyKey.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$objects$JSComputedPropertyKey_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$objects$JSComputedPropertyKey_ts$jsComputedPropertyKey.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSIfStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSIfStatement_ts$default(
		node,
		scope,
	) {
		node =
			node.type === "JSConditionalExpression"
				? node
				: ___R$project$rome$$romejs$ast$js$statements$JSIfStatement_ts$jsIfStatement.assert(
						node,
					);

		const test = scope.evaluate(node.test);
		new ___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default(
			scope,
			node,
			test,
			new ___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default(
				scope,
				undefined,
			),
		);

		const hasRefinedTest =
			test.scope instanceof
			___R$project$rome$$romejs$js$analysis$scopes_ts$RefineScope;

		const consequentScope = hasRefinedTest ? test.scope : scope;
		const consequent = consequentScope.evaluate(node.consequent);

		if (node.alternate === undefined) {
			return consequent;
		} else {
			const alternateScope = scope.fork();

			/*if (hasRefinedTest) {
      // get bindings from 'test.scope and flip them
      for (const name of test.scope.getOwnBindingNames()) {
        const outerBinding = scope.getBinding(name);
        invariant(outerBinding !== undefined, 'expected outerBinding for %s', name);

        const refinedBinding = test.scope.getBinding(name);
        invariant(refinedBinding !== undefined, 'expected refinedBinding for %s', name);

        const opposite = new RefinedT(alternateScope, refinedBinding.originNode, outerBinding, refinedBinding);
        alternateScope.addBinding(name, opposite);
      }
    }*/
			return new ___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default(
				scope,
				undefined,
				[consequent, alternateScope.evaluate(node.alternate)],
			);
		}
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSConditionalExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSConditionalExpression_ts$default(
		node,
		scope,
	) {
		return ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSIfStatement_ts$default(
			node,
			scope,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSContinueStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSContinueStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSContinueStatement_ts$jsContinueStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSDebuggerStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSDebuggerStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSDebuggerStatement_ts$jsDebuggerStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/core/JSDirective.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$core$JSDirective_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$core$JSDirective_ts$jsDirective.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSDoExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSDoExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSDoExpression_ts$jsDoExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSDoWhileStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSDoWhileStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSDoWhileStatement_ts$jsDoWhileStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSEmptyStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSEmptyStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSEmptyStatement_ts$jsEmptyStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSExportAllDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportAllDeclaration_ts$default(
		node,
		scope,
		{evaluator},
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSExportAllDeclaration_ts$jsExportAllDeclaration.assert(
			node,
		);
		evaluator.addExportAll(node.source.value);
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSExportDefaultDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportDefaultDeclaration_ts$default(
		node,
		scope,
		{evaluator},
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultDeclaration_ts$jsExportDefaultDeclaration.assert(
			node,
		);

		const decl = node.declaration;
		const declType = scope.evaluate(decl);
		evaluator.addExport("default", declType);
		return declType;
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSExportDefaultSpecifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportDefaultSpecifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSExportDefaultSpecifier_ts$jsExportDefaultSpecifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSExportExternalDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportExternalDeclaration_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSExportExternalDeclaration_ts$jsExportExternalDeclaration.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSExportExternalSpecifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportExternalSpecifier_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSExportExternalSpecifier_ts$jsExportExternalSpecifier.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSExportLocalDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportLocalDeclaration_ts$default(
		node,
		scope,
		{evaluator},
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSExportLocalDeclaration_ts$jsExportLocalDeclaration.assert(
			node,
		);

		// export const foo = 'bar';

		// export default function foo() {}
		const decl = node.declaration;
		if (decl !== undefined) {
			const declType = scope.evaluate(decl);

			switch (decl.type) {
				case "JSFunctionDeclaration":
				case "JSClassDeclaration": {
					const id = decl.id;
					if (id === undefined) {
						throw new Error("Expected id");
					}
					evaluator.addExport(id.name, declType);
					break;
				}

				case "JSVariableDeclarationStatement": {
					for (const id of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
						decl,
					)) {
						const type = scope.getBinding(id.name);
						if (type === undefined) {
							throw new Error("Couldn't find binding type for " + id.name);
						}
						evaluator.addExport(id.name, type);
					}
					break;
				}

				case "TSTypeAliasTypeAnnotation": {
					const type = scope.getBinding(decl.id.name);
					if (type === undefined) {
						throw new Error("Couldn't find binding type for " + decl.id.name);
					}
					evaluator.addExport(decl.id.name, type);
					break;
				}
			}

			return declType;
		}

		// export {foo, bar};

		// export {foo, bar} from './foo';
		const source = undefined; // TODO node.source === undefined ? undefined : node.source.value;
		const {specifiers} = node;
		if (specifiers !== undefined) {
			for (const specifier of specifiers) {
				if (
					specifier.type === "JSExportLocalSpecifier" ||
					specifier.type === "JSExportExternalSpecifier"
				) {
					let type;
					if (source === undefined) {
						type = scope.evaluate(specifier.local);
					} else {
						type = new ___R$project$rome$$romejs$js$analysis$types$ImportT_ts$default(
							scope,
							node,
							{
								importedName: specifier.local.name,
								source,
							},
						);
					}
					evaluator.addExport(specifier.exported.name, type);
				}
			}
		}

		return undefined;
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSExportLocalSpecifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportLocalSpecifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSExportLocalSpecifier_ts$jsExportLocalSpecifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSExportNamespaceSpecifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportNamespaceSpecifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSExportNamespaceSpecifier_ts$jsExportNamespaceSpecifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSExpressionStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSExpressionStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSExpressionStatement_ts$jsExpressionStatement.assert(
			node,
		);

		return scope.evaluate(node.expression);
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSForInStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSForInStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSForInStatement_ts$jsForInStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSForOfStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSForOfStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSForOfStatement_ts$jsForOfStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSForStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSForStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSForStatement_ts$jsForStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSFunctionDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSFunctionDeclaration_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSFunctionDeclaration_ts$jsFunctionDeclaration.assert(
			node,
		);

		const func = ___R$project$rome$$romejs$js$analysis$utils$executeFunction_ts$default(
			node,
			scope,
			false,
		);
		if (node.id !== undefined) {
			scope.addBinding(node.id.name, func);
		}
		return func;
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSFunctionExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSFunctionExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSFunctionExpression_ts$jsFunctionExpression.assert(
			node,
		);
		return ___R$project$rome$$romejs$js$analysis$utils$executeFunction_ts$default(
			node,
			scope,
			true,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSFunctionHead.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSFunctionHead_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts$jsFunctionHead.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSIdentifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSIdentifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.assert(
			node,
		);

		const binding = scope.getBinding(node.name);
		if (binding) {
			const type = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
				scope,
				node,
			);
			type.shouldMatch(binding);
			return type;
		} else {
			switch (node.name) {
				case "React$PropType$Primitive":
				case "React$PropType$ArrayOf":
				case "React$PropType$InstanceOf":
				case "React$PropType$ObjectOf":
				case "React$PropType$OneOf":
				case "React$PropType$OneOfType":
				case "React$PropTypePartial":
				case "React$ElementProps":
				case "React$ElementRef":
				case "$Exact":
				case "Partial":
				case "$Keys":
				case "Object$Assign":
				case "Object$GetPrototypeOf":
				case "Object$SetPrototypeOf":
				case "$CharSet":
				case "Class":
				case "$Compose":
				case "$ComposeReverse":
				case "$Subtype":
				case "Function$Prototype$Apply":
				case "Function$Prototype$Bind":
				case "Function$Prototype$Call":
				case "$Exports":
					return new ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default(
						scope,
						node,
					);

				default:
					return new ___R$project$rome$$romejs$js$analysis$types$errors$UndeclaredVarE_ts$default(
						scope,
						node,
						node.name,
					);
			}
		}
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSImportCall.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportCall_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSImportCall_ts$jsImportCall.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSImportDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportDeclaration_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSImportDeclaration_ts$jsImportDeclaration.assert(
			node,
		);

		const source = node.source.value;

		for (const specifier of ___R$project$rome$$romejs$js$ast$utils$getImportSpecifiers_ts$default(
			node,
		)) {
			if (specifier.type === "JSImportSpecifier") {
				const localName = specifier.local.name.name;
				const importedName = specifier.imported.name;

				const open = new ___R$project$rome$$romejs$js$analysis$types$ImportT_ts$default(
					scope,
					specifier,
					{
						importedName,
						source,
					},
				);
				scope.addBinding(localName, open);
			} else if (specifier.type === "JSImportDefaultSpecifier") {
				const localName = specifier.local.name.name;
				const open = new ___R$project$rome$$romejs$js$analysis$types$ImportT_ts$default(
					scope,
					specifier,
					{
						importedName: "default",
						source,
					},
				);
				scope.addBinding(localName, open);
			} else if (specifier.type === "JSImportNamespaceSpecifier") {
				const localName = specifier.local.name.name;
				const open = new ___R$project$rome$$romejs$js$analysis$types$ImportT_ts$default(
					scope,
					specifier,
					{
						importedName: undefined,
						source,
					},
				);
				scope.addBinding(localName, open);
			} else {
				// TODO error
			}
		}
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSImportDefaultSpecifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportDefaultSpecifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSImportDefaultSpecifier_ts$jsImportDefaultSpecifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSImportNamespaceSpecifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportNamespaceSpecifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSImportNamespaceSpecifier_ts$jsImportNamespaceSpecifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSImportSpecifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportSpecifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifier_ts$jsImportSpecifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/modules/JSImportSpecifierLocal.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportSpecifierLocal_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$modules$JSImportSpecifierLocal_ts$jsImportSpecifierLocal.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/core/JSInterpreterDirective.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$core$JSInterpreterDirective_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$core$JSInterpreterDirective_ts$jsInterpreterDirective.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSLabeledStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSLabeledStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSLabeledStatement_ts$jsLabeledStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSLogicalExpression.ts
function ___R$$priv$project$rome$$romejs$js$analysis$evaluators$expressions$JSLogicalExpression_ts$uniq(
		args,
	) {
		return [...new Set(args)];
	}

	function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSLogicalExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSLogicalExpression_ts$jsLogicalExpression.assert(
			node,
		);

		switch (node.operator) {
			case "||": {
				const left = scope.refine().evaluate(node.left);
				const right = scope.refine().evaluate(node.right);

				// create a new scope that has unions of all the refined bindings
				const refinedScope = scope.refine();
				const refinedNames = ___R$$priv$project$rome$$romejs$js$analysis$evaluators$expressions$JSLogicalExpression_ts$uniq([
					...left.scope.getOwnBindingNames(),
					...right.scope.getOwnBindingNames(),
				]);
				const mergeScopes = [left.scope, right.scope];
				for (const name of refinedNames) {
					const rawTypes = new Set();
					for (const scope of mergeScopes) {
						const binding = scope.getBinding(name);
						if (binding !== undefined) {
							rawTypes.add(binding);
						}
					}

					const types = Array.from(rawTypes);
					refinedScope.addBinding(name, refinedScope.createUnion(types));
				}

				return new ___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default(
					refinedScope,
					node,
					[left, right],
				);
			}

			case "&&": {
				const left = scope.evaluate(node.left);
				const right = left.scope.evaluate(node.right);
				return new ___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default(
					right.scope,
					node,
					[left, right],
				);
			}

			default:
				throw new Error("Unknown operator");
		}
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSMemberExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSMemberExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts$jsMemberExpression.assert(
			node,
		);
		if (node.property.type === "JSComputedMemberProperty") {
			throw new Error("Computed properties not supportd yet");
		}

		if (node.property.value.type === "JSPrivateName") {
			throw new Error("PrivateName in static member not supported yet");
		}

		const prop = new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
			scope,
			node.property.value,
			node.property.value.name,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$GetPropT_ts$default(
			scope,
			node,
			scope.evaluate(node.object),
			prop,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSMetaProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSMetaProperty_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSMetaProperty_ts$jsMetaProperty.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/temp/JSMockParent.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$temp$JSMockParent_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$jsMockParent.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSNewExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSNewExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSNewExpression_ts$jsNewExpression.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$InstanceT_ts$default(
			scope,
			node,
			scope.evaluate(node.callee),
			[],
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/literals/JSNullLiteral.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$literals$JSNullLiteral_ts$default(
		node,
		scope,
	) {
		node = node = ___R$project$rome$$romejs$ast$js$literals$JSNullLiteral_ts$jsNullLiteral.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$NullT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/literals/JSNumericLiteral.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$literals$JSNumericLiteral_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$literals$JSNumericLiteral_ts$jsNumericLiteral.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$NumericLiteralT_ts$default(
			scope,
			node,
			node.value,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/objects/JSObjectExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$objects$JSObjectExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression.assert(
			node,
		);
		const props = [];

		for (const prop of node.properties) {
			if (prop.type === "JSSpreadProperty") {
				// TODO
			} else if (prop.type === "JSObjectProperty") {
				if (prop.key.type === "JSComputedPropertyKey") {
					// TODO
				} else {
					const {
						key: {value: key},
						value,
					} = prop;

					let keyStr;
					if (key.type === "JSIdentifier") {
						keyStr = key.name;
					} else {
						// TODO
						continue;
					}

					if (keyStr === undefined) {
						throw new Error("Expected keyStr");
					}

					props.push(
						new ___R$project$rome$$romejs$js$analysis$types$ObjPropT_ts$default(
							scope,
							prop,
							keyStr,
							scope.evaluate(value),
						),
					);
				}
			} else {
				// TODO
			}
		}

		return new ___R$project$rome$$romejs$js$analysis$types$ObjT_ts$default(
			scope,
			node,
			{
				calls: [],
				props,
				proto: scope.intrinsics.ObjectPrototype,
			},
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/objects/JSObjectMethod.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$objects$JSObjectMethod_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$objects$JSObjectMethod_ts$jsObjectMethod.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/objects/JSObjectProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$objects$JSObjectProperty_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts$jsObjectProperty.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSOptionalCallExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSOptionalCallExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSOptionalCallExpression_ts$jsOptionalCallExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/patterns/JSPatternMeta.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSPatternMeta_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$patterns$JSPatternMeta_ts$jsPatternMeta.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/classes/JSPrivateName.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$classes$JSPrivateName_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$classes$JSPrivateName_ts$jsPrivateName.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSReferenceIdentifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSReferenceIdentifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpAlternation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpAlternation_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpAlternation_ts$jsRegExpAlternation.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpAnyCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpAnyCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpAnyCharacter_ts$jsRegExpAnyCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharacter_ts$jsRegExpCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpCharSet.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpCharSet_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSet_ts$jsRegExpCharSet.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpCharSetRange.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpCharSetRange_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpCharSetRange_ts$jsRegExpCharSetRange.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpControlCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpControlCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpControlCharacter_ts$jsRegExpControlCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpDigitCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpDigitCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpDigitCharacter_ts$jsRegExpDigitCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpEndCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpEndCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpEndCharacter_ts$jsRegExpEndCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpGroupCapture.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpGroupCapture_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupCapture_ts$jsRegExpGroupCapture.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpGroupNonCapture.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpGroupNonCapture_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpGroupNonCapture_ts$jsRegExpGroupNonCapture.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/literals/JSRegExpLiteral.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$literals$JSRegExpLiteral_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$literals$JSRegExpLiteral_ts$jsRegExpLiteral.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpNamedBackReference.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNamedBackReference_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpNamedBackReference_ts$jsRegExpNamedBackReference.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpNonDigitCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNonDigitCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonDigitCharacter_ts$jsRegExpNonDigitCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpNonWhiteSpaceCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNonWhiteSpaceCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWhiteSpaceCharacter_ts$jsRegExpNonWhiteSpaceCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpNonWordBoundaryCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNonWordBoundaryCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordBoundaryCharacter_ts$jsRegExpNonWordBoundaryCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpNonWordCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNonWordCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpNonWordCharacter_ts$jsRegExpNonWordCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpNumericBackReference.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNumericBackReference_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpNumericBackReference_ts$jsRegExpNumericBackReference.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpQuantified.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpQuantified_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpQuantified_ts$jsRegExpQuantified.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpStartCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpStartCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpStartCharacter_ts$jsRegExpStartCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpSubExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpSubExpression_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpSubExpression_ts$jsRegExpSubExpression.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpWhiteSpaceCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpWhiteSpaceCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpWhiteSpaceCharacter_ts$jsRegExpWhiteSpaceCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpWordBoundaryCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpWordBoundaryCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordBoundaryCharacter_ts$jsRegExpWordBoundaryCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/regex/JSRegExpWordCharacter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpWordCharacter_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$regex$JSRegExpWordCharacter_ts$jsRegExpWordCharacter.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSReturnStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSReturnStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts$jsReturnStatement.assert(
			node,
		);
		const funcScope = scope.find(
			___R$project$rome$$romejs$js$analysis$scopes_ts$FunctionScope,
		);
		if (node.argument === undefined) {
			// TODO connect to undefined
		} else {
			const type = scope.evaluate(node.argument);
			funcScope.meta.returnType.shouldMatch(type);
		}
	}


  // project-rome/@romejs/js-analysis/evaluators/core/JSRoot.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$core$JSRoot_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$jsRoot.assert(node);
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSBlockStatement_ts$default(
			node,
			scope,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSSequenceExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSSequenceExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSSequenceExpression_ts$jsSequenceExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSSpreadElement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSSpreadElement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSSpreadElement_ts$jsSpreadElement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/objects/JSSpreadProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$objects$JSSpreadProperty_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$objects$JSSpreadProperty_ts$jsSpreadProperty.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSStaticMemberProperty.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSStaticMemberProperty_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSStaticMemberProperty_ts$jsStaticMemberProperty.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/objects/JSStaticPropertyKey.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$objects$JSStaticPropertyKey_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts$jsStaticPropertyKey.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/literals/JSStringLiteral.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$literals$JSStringLiteral_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$StringLiteralT_ts$default(
			scope,
			node,
			node.value,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSSuper.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSSuper_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSSuper_ts$jsSuper.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSSwitchCase.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSSwitchCase_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSSwitchCase_ts$jsSwitchCase.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSSwitchStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSSwitchStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSSwitchStatement_ts$jsSwitchStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSTaggedTemplateExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSTaggedTemplateExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSTaggedTemplateExpression_ts$jsTaggedTemplateExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSTemplateElement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSTemplateElement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts$jsTemplateElement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/literals/JSTemplateLiteral.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$literals$JSTemplateLiteral_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts$jsTemplateLiteral.assert(
			node,
		);
		for (const expr of node.expressions) {
			new ___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default(
				scope,
				expr,
				scope.evaluate(expr),
				new ___R$project$rome$$romejs$js$analysis$types$StringT_ts$default(
					scope,
					undefined,
				),
			);
		}
		return new ___R$project$rome$$romejs$js$analysis$types$StringT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSThisExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSThisExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSThisExpression_ts$jsThisExpression.assert(
			node,
		);
		const thisScope = scope.find(
			___R$project$rome$$romejs$js$analysis$scopes_ts$ThisScope,
		);
		if (thisScope === undefined) {
			// TODO complain
			return undefined;
		} else {
			const type = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
				scope,
				node,
			);
			type.shouldMatch(thisScope.context);
			return type;
		}
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSThrowStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSThrowStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSThrowStatement_ts$jsThrowStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSTryStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSTryStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSTryStatement_ts$jsTryStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSUnaryExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSUnaryExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSUnaryExpression_ts$jsUnaryExpression.assert(
			node,
		);
		const argType = scope.evaluate(node.argument);

		switch (node.operator) {
			case // booleans
			"delete":
			case "!":
				return new ___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default(
					scope,
					node,
				);

			// numbers
			case "+":
			case "-":
			case "~":
				return new ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default(
					scope,
					node,
				);

			// strings
			case "typeof":
				return new ___R$project$rome$$romejs$js$analysis$types$TypeofT_ts$default(
					scope,
					node,
					argType,
				);

			// void
			case "void":
				return new ___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default(
					scope,
					node,
				);

			// empty!
			case "throw":
				break;
		}

		return undefined;
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSUpdateExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSUpdateExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSUpdateExpression_ts$jsUpdateExpression.assert(
			node,
		);
		const type = new ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default(
			scope,
			node,
		);
		new ___R$project$rome$$romejs$js$analysis$types$ExhaustiveT_ts$default(
			scope,
			node.argument,
			scope.evaluate(node.argument),
			type,
		);
		return type;
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSVariableDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSVariableDeclaration_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.assert(
			node,
		);

		for (const declarator of node.declarations) {
			const {id, init} = declarator;
			let inferredType;

			if (init === undefined) {
				inferredType = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
					scope,
					declarator,
				);
				inferredType.shouldMatch(
					new ___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default(
						scope,
						declarator,
					),
				);
			} else {
				inferredType = scope.evaluate(init);
			}

			let actualType = inferredType;

			if (id.meta !== undefined && id.meta.typeAnnotation !== undefined) {
				const annotatedType = scope.evaluate(id.meta.typeAnnotation);
				inferredType.shouldMatch(annotatedType);
				actualType = annotatedType;
			}

			___R$project$rome$$romejs$js$analysis$utils$executeAtom_ts$default(
				id,
				actualType,
				scope,
			);
		}
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSVariableDeclarationStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSVariableDeclarationStatement_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/auxiliary/JSVariableDeclarator.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSVariableDeclarator_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSWhileStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSWhileStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSWhileStatement_ts$jsWhileStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/statements/JSWithStatement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$statements$JSWithStatement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$statements$JSWithStatement_ts$jsWithStatement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXAttribute.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXAttribute_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXAttribute_ts$jsxAttribute.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXElement.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXElement_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXElement_ts$jsxElement.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXEmptyExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXEmptyExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXEmptyExpression_ts$jsxEmptyExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXExpressionContainer.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXExpressionContainer_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXExpressionContainer_ts$jsxExpressionContainer.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXFragment.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXFragment_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXFragment_ts$jsxFragment.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXIdentifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXIdentifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXIdentifier_ts$jsxIdentifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXMemberExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXMemberExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXMemberExpression_ts$jsxMemberExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXNamespacedName.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXNamespacedName_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXNamespacedName_ts$jsxNamespacedName.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXReferenceIdentifier.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXReferenceIdentifier_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXReferenceIdentifier_ts$jsxReferenceIdentifier.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXSpreadAttribute.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXSpreadAttribute_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadAttribute_ts$jsxSpreadAttribute.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXSpreadChild.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXSpreadChild_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXSpreadChild_ts$jsxSpreadChild.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/jsx/JSXText.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXText_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$jsx$JSXText_ts$jsxText.assert(node);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/expressions/JSYieldExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSYieldExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$expressions$JSYieldExpression_ts$jsYieldExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSAnyKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAnyKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSAnyKeywordTypeAnnotation_ts$tsAnyKeywordTypeAnnotation.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSArrayType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSArrayType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSArrayType_ts$tsArrayType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSAsExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAsExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSAsExpression_ts$tsAsExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSAssignmentAsExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAssignmentAsExpression_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentAsExpression_ts$tsAssignmentAsExpression.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSAssignmentNonNullExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAssignmentNonNullExpression_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentNonNullExpression_ts$tsAssignmentNonNullExpression.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSAssignmentTypeAssertion.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAssignmentTypeAssertion_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSAssignmentTypeAssertion_ts$tsAssignmentTypeAssertion.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSBigIntKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSBigIntKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSBigIntKeywordTypeAnnotation_ts$tsBigIntKeywordTypeAnnotation.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSBooleanKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSBooleanKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSBooleanKeywordTypeAnnotation_ts$tsBooleanKeywordTypeAnnotation.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$BooleanT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSBooleanLiteralTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSBooleanLiteralTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSBooleanLiteralTypeAnnotation_ts$tsBooleanLiteralTypeAnnotation.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSCallSignatureDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSCallSignatureDeclaration_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSCallSignatureDeclaration_ts$tsCallSignatureDeclaration.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSConditionalType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSConditionalType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSConditionalType_ts$tsConditionalType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSConstructorType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSConstructorType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSConstructorType_ts$tsConstructorType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSConstructSignatureDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSConstructSignatureDeclaration_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSConstructSignatureDeclaration_ts$tsConstructSignatureDeclaration.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSDeclareFunction.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSDeclareFunction_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSDeclareFunction_ts$tsDeclareFunction.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSDeclareMethod.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSDeclareMethod_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSDeclareMethod_ts$tsDeclareMethod.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSEmptyKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSEmptyKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSEmptyKeywordTypeAnnotation_ts$tsEmptyKeywordTypeAnnotation.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSEnumDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSEnumDeclaration_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSEnumDeclaration_ts$tsEnumDeclaration.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSEnumMember.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSEnumMember_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSEnumMember_ts$tsEnumMember.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSExportAssignment.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSExportAssignment_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSExportAssignment_ts$tsExportAssignment.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSExpressionWithTypeArguments.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSExpressionWithTypeArguments_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSExpressionWithTypeArguments_ts$tsExpressionWithTypeArguments.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSExternalModuleReference.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSExternalModuleReference_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSExternalModuleReference_ts$tsExternalModuleReference.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSFunctionType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSFunctionType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSFunctionType_ts$tsFunctionType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSImportEqualsDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSImportEqualsDeclaration_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSImportEqualsDeclaration_ts$tsImportEqualsDeclaration.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSImportType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSImportType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSImportType_ts$tsImportType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSIndexedAccessType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSIndexedAccessType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSIndexedAccessType_ts$tsIndexedAccessType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSIndexSignature.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSIndexSignature_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSIndexSignature_ts$tsIndexSignature.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSInferType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSInferType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSInferType_ts$tsInferType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSInterfaceBody.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSInterfaceBody_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceBody_ts$tsInterfaceBody.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSInterfaceDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSInterfaceDeclaration_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSInterfaceDeclaration_ts$tsInterfaceDeclaration.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSIntersectionTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSIntersectionTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSIntersectionTypeAnnotation_ts$tsIntersectionTypeAnnotation.assert(
			node,
		);

		return new ___R$project$rome$$romejs$js$analysis$types$IntersectionT_ts$default(
			scope,
			node,
			node.types.map((type) => {
				return scope.evaluate(type);
			}),
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSMappedType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSMappedType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSMappedType_ts$tsMappedType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSMethodSignature.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSMethodSignature_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSMethodSignature_ts$tsMethodSignature.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSMixedKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSMixedKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSMixedKeywordTypeAnnotation_ts$tsMixedKeywordTypeAnnotation.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$MixedT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSModuleBlock.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSModuleBlock_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSModuleBlock_ts$tsModuleBlock.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSModuleDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSModuleDeclaration_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSModuleDeclaration_ts$tsModuleDeclaration.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSNamespaceExportDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNamespaceExportDeclaration_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSNamespaceExportDeclaration_ts$tsNamespaceExportDeclaration.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSNeverKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNeverKeywordTypeAnnotation_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSNeverKeywordTypeAnnotation_ts$tsNeverKeywordTypeAnnotation.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSNonNullExpression.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNonNullExpression_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSNonNullExpression_ts$tsNonNullExpression.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSNullKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNullKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSNullKeywordTypeAnnotation_ts$tsNullKeywordTypeAnnotation.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$NullT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSNumberKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNumberKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSNumberKeywordTypeAnnotation_ts$tsNumberKeywordTypeAnnotation.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$NumericT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSNumericLiteralTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNumericLiteralTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSNumericLiteralTypeAnnotation_ts$tsNumericLiteralTypeAnnotation.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSObjectKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSObjectKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSObjectKeywordTypeAnnotation_ts$tsObjectKeywordTypeAnnotation.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSOptionalType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSOptionalType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSOptionalType_ts$tsOptionalType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSParenthesizedType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSParenthesizedType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSParenthesizedType_ts$tsParenthesizedType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSPropertySignature.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSPropertySignature_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSPropertySignature_ts$tsPropertySignature.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSQualifiedName.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSQualifiedName_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSQualifiedName_ts$tsQualifiedName.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSSignatureDeclarationMeta.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSSignatureDeclarationMeta_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSSignatureDeclarationMeta_ts$tsSignatureDeclarationMeta.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSStringKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSStringKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSStringKeywordTypeAnnotation_ts$tsStringKeywordTypeAnnotation.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$StringT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSStringLiteralTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSStringLiteralTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSStringLiteralTypeAnnotation_ts$tsStringLiteralTypeAnnotation.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSSymbolKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSSymbolKeywordTypeAnnotation_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSSymbolKeywordTypeAnnotation_ts$tsSymbolKeywordTypeAnnotation.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTemplateLiteralTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTemplateLiteralTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTemplateLiteralTypeAnnotation_ts$tsTemplateLiteralTypeAnnotation.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSThisType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSThisType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSThisType_ts$tsThisType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTupleType.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTupleType_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTupleType_ts$tsTupleType.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeAliasTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeAliasTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeAliasTypeAnnotation_ts$tsTypeAliasTypeAnnotation.assert(
			node,
		);

		const typeScope = scope.fork();
		if (node.typeParameters) {
			typeScope.evaluate(node.typeParameters);
		}

		const right = typeScope.evaluate(node.right);
		scope.addBinding(node.id.name, right);
		return right;
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeAssertion.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeAssertion_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeAssertion_ts$tsTypeAssertion.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeLiteral.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeLiteral_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeLiteral_ts$tsTypeLiteral.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeOperator.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeOperator_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeOperator_ts$tsTypeOperator.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeParameter.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeParameter_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameter_ts$tsTypeParameter.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeParameterDeclaration.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeParameterDeclaration_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterDeclaration_ts$tsTypeParameterDeclaration.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeParameterInstantiation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeParameterInstantiation_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterInstantiation_ts$tsTypeParameterInstantiation.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypePredicate.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypePredicate_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypePredicate_ts$tsTypePredicate.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeQuery.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeQuery_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeQuery_ts$tsTypeQuery.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSTypeReference.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeReference_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSTypeReference_ts$tsTypeReference.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSUndefinedKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSUndefinedKeywordTypeAnnotation_ts$default(
		node,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSUndefinedKeywordTypeAnnotation_ts$tsUndefinedKeywordTypeAnnotation.assert(
			node,
		);
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSUnionTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSUnionTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSUnionTypeAnnotation_ts$tsUnionTypeAnnotation.assert(
			node,
		);

		return new ___R$project$rome$$romejs$js$analysis$types$UnionT_ts$default(
			scope,
			node,
			node.types.map((type) => {
				return scope.evaluate(type);
			}),
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSUnknownKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSUnknownKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSUnknownKeywordTypeAnnotation_ts$tsUnknownKeywordTypeAnnotation.assert(
			node,
		);
		scope;
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/js-analysis/evaluators/typescript/TSVoidKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSVoidKeywordTypeAnnotation_ts$default(
		node,
		scope,
	) {
		node = ___R$project$rome$$romejs$ast$js$typescript$TSVoidKeywordTypeAnnotation_ts$tsVoidKeywordTypeAnnotation.assert(
			node,
		);
		return new ___R$project$rome$$romejs$js$analysis$types$VoidT_ts$default(
			scope,
			node,
		);
	}


  // project-rome/@romejs/js-analysis/evaluators/index.ts
const ___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators = new Map();
	const ___R$project$rome$$romejs$js$analysis$evaluators$index_ts$default = ___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators;
	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSAmbiguousFlowTypeCastExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$temp$JSAmbiguousFlowTypeCastExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSArrayExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSArrayExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSArrayHole",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSArrayHole_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSArrowFunctionExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSArrowFunctionExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSAssignmentArrayPattern",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentArrayPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSAssignmentAssignmentPattern",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentAssignmentPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSAssignmentExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSAssignmentExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSAssignmentIdentifier",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSAssignmentObjectPattern",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentObjectPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSAssignmentObjectPatternProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSAssignmentObjectPatternProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSAwaitExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSAwaitExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBigIntLiteral",
		___R$project$rome$$romejs$js$analysis$evaluators$literals$JSBigIntLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBinaryExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSBinaryExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBindingArrayPattern",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingArrayPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBindingAssignmentPattern",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingAssignmentPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBindingIdentifier",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBindingObjectPattern",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingObjectPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBindingObjectPatternProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSBindingObjectPatternProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBlockStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSBlockStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBooleanLiteral",
		___R$project$rome$$romejs$js$analysis$evaluators$literals$JSBooleanLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSBreakStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSBreakStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSCallExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSCallExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSCatchClause",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSCatchClause_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSClassDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSClassExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSClassHead",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassHead_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSClassMethod",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassMethod_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSClassPrivateMethod",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassPrivateMethod_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSClassPrivateProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassPrivateProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSClassProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSClassPropertyMeta",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSClassPropertyMeta_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSCommentBlock",
		___R$project$rome$$romejs$js$analysis$evaluators$core$JSCommentBlock_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSCommentLine",
		___R$project$rome$$romejs$js$analysis$evaluators$core$JSCommentLine_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSComputedMemberProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSComputedMemberProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSComputedPropertyKey",
		___R$project$rome$$romejs$js$analysis$evaluators$objects$JSComputedPropertyKey_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSConditionalExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSConditionalExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSContinueStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSContinueStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSDebuggerStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSDebuggerStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSDirective",
		___R$project$rome$$romejs$js$analysis$evaluators$core$JSDirective_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSDoExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSDoExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSDoWhileStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSDoWhileStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSEmptyStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSEmptyStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExportAllDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportAllDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExportDefaultDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportDefaultDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExportDefaultSpecifier",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportDefaultSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExportExternalDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportExternalDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExportExternalSpecifier",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportExternalSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExportLocalDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportLocalDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExportLocalSpecifier",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportLocalSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExportNamespaceSpecifier",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSExportNamespaceSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSExpressionStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSExpressionStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSForInStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSForInStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSForOfStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSForOfStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSForStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSForStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSFunctionDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSFunctionDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSFunctionExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSFunctionExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSFunctionHead",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSFunctionHead_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSIdentifier",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSIfStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSIfStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSImportCall",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportCall_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSImportDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSImportDefaultSpecifier",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportDefaultSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSImportNamespaceSpecifier",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportNamespaceSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSImportSpecifier",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSImportSpecifierLocal",
		___R$project$rome$$romejs$js$analysis$evaluators$modules$JSImportSpecifierLocal_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSInterpreterDirective",
		___R$project$rome$$romejs$js$analysis$evaluators$core$JSInterpreterDirective_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSLabeledStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSLabeledStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSLogicalExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSLogicalExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSMemberExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSMemberExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSMetaProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSMetaProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSMockParent",
		___R$project$rome$$romejs$js$analysis$evaluators$temp$JSMockParent_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSNewExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSNewExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSNullLiteral",
		___R$project$rome$$romejs$js$analysis$evaluators$literals$JSNullLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSNumericLiteral",
		___R$project$rome$$romejs$js$analysis$evaluators$literals$JSNumericLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSObjectExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$objects$JSObjectExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSObjectMethod",
		___R$project$rome$$romejs$js$analysis$evaluators$objects$JSObjectMethod_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSObjectProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$objects$JSObjectProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSOptionalCallExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSOptionalCallExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSPatternMeta",
		___R$project$rome$$romejs$js$analysis$evaluators$patterns$JSPatternMeta_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSPrivateName",
		___R$project$rome$$romejs$js$analysis$evaluators$classes$JSPrivateName_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSReferenceIdentifier",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSReferenceIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpAlternation",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpAlternation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpAnyCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpAnyCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpCharSet",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpCharSet_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpCharSetRange",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpCharSetRange_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpControlCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpControlCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpDigitCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpDigitCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpEndCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpEndCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpGroupCapture",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpGroupCapture_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpGroupNonCapture",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpGroupNonCapture_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpLiteral",
		___R$project$rome$$romejs$js$analysis$evaluators$literals$JSRegExpLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpNamedBackReference",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNamedBackReference_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpNonDigitCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNonDigitCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpNonWhiteSpaceCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNonWhiteSpaceCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpNonWordBoundaryCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNonWordBoundaryCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpNonWordCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNonWordCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpNumericBackReference",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpNumericBackReference_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpQuantified",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpQuantified_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpStartCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpStartCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpSubExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpSubExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpWhiteSpaceCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpWhiteSpaceCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpWordBoundaryCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpWordBoundaryCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRegExpWordCharacter",
		___R$project$rome$$romejs$js$analysis$evaluators$regex$JSRegExpWordCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSReturnStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSReturnStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSRoot",
		___R$project$rome$$romejs$js$analysis$evaluators$core$JSRoot_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSSequenceExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSSequenceExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSSpreadElement",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSSpreadElement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSSpreadProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$objects$JSSpreadProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSStaticMemberProperty",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSStaticMemberProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSStaticPropertyKey",
		___R$project$rome$$romejs$js$analysis$evaluators$objects$JSStaticPropertyKey_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSStringLiteral",
		___R$project$rome$$romejs$js$analysis$evaluators$literals$JSStringLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSSuper",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSSuper_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSSwitchCase",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSSwitchCase_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSSwitchStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSSwitchStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSTaggedTemplateExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSTaggedTemplateExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSTemplateElement",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSTemplateElement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSTemplateLiteral",
		___R$project$rome$$romejs$js$analysis$evaluators$literals$JSTemplateLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSThisExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSThisExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSThrowStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSThrowStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSTryStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSTryStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSUnaryExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSUnaryExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSUpdateExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSUpdateExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSVariableDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSVariableDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSVariableDeclarationStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSVariableDeclarationStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSVariableDeclarator",
		___R$project$rome$$romejs$js$analysis$evaluators$auxiliary$JSVariableDeclarator_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSWhileStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSWhileStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSWithStatement",
		___R$project$rome$$romejs$js$analysis$evaluators$statements$JSWithStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXAttribute",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXAttribute_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXElement",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXElement_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXEmptyExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXEmptyExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXExpressionContainer",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXExpressionContainer_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXFragment",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXFragment_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXIdentifier",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXMemberExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXMemberExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXNamespacedName",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXNamespacedName_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXReferenceIdentifier",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXReferenceIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXSpreadAttribute",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXSpreadAttribute_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXSpreadChild",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXSpreadChild_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSXText",
		___R$project$rome$$romejs$js$analysis$evaluators$jsx$JSXText_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"JSYieldExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$expressions$JSYieldExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSAnyKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAnyKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSArrayType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSArrayType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSAsExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAsExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSAssignmentAsExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAssignmentAsExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSAssignmentNonNullExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAssignmentNonNullExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSAssignmentTypeAssertion",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSAssignmentTypeAssertion_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSBigIntKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSBigIntKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSBooleanKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSBooleanKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSBooleanLiteralTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSBooleanLiteralTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSCallSignatureDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSCallSignatureDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSConditionalType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSConditionalType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSConstructorType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSConstructorType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSConstructSignatureDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSConstructSignatureDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSDeclareFunction",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSDeclareFunction_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSDeclareMethod",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSDeclareMethod_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSEmptyKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSEmptyKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSEnumDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSEnumDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSEnumMember",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSEnumMember_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSExportAssignment",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSExportAssignment_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSExpressionWithTypeArguments",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSExpressionWithTypeArguments_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSExternalModuleReference",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSExternalModuleReference_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSFunctionType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSFunctionType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSImportEqualsDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSImportEqualsDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSImportType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSImportType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSIndexedAccessType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSIndexedAccessType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSIndexSignature",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSIndexSignature_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSInferType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSInferType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSInterfaceBody",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSInterfaceBody_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSInterfaceDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSInterfaceDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSIntersectionTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSIntersectionTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSMappedType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSMappedType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSMethodSignature",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSMethodSignature_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSMixedKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSMixedKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSModuleBlock",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSModuleBlock_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSModuleDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSModuleDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSNamespaceExportDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNamespaceExportDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSNeverKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNeverKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSNonNullExpression",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNonNullExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSNullKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNullKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSNumberKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNumberKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSNumericLiteralTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSNumericLiteralTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSObjectKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSObjectKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSOptionalType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSOptionalType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSParenthesizedType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSParenthesizedType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSPropertySignature",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSPropertySignature_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSQualifiedName",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSQualifiedName_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSSignatureDeclarationMeta",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSSignatureDeclarationMeta_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSStringKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSStringKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSStringLiteralTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSStringLiteralTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSSymbolKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSSymbolKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTemplateLiteralTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTemplateLiteralTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSThisType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSThisType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTupleType",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTupleType_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeAliasTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeAliasTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeAssertion",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeAssertion_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeLiteral",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeOperator",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeOperator_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeParameter",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeParameter_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeParameterDeclaration",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeParameterDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeParameterInstantiation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeParameterInstantiation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypePredicate",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypePredicate_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeQuery",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeQuery_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSTypeReference",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSTypeReference_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSUndefinedKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSUndefinedKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSUnionTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSUnionTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSUnknownKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSUnknownKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$js$analysis$evaluators$index_ts$evaluators.set(
		"TSVoidKeywordTypeAnnotation",
		___R$project$rome$$romejs$js$analysis$evaluators$typescript$TSVoidKeywordTypeAnnotation_ts$default,
	);


  // project-rome/@romejs/js-analysis/Evaluator.ts






	class ___R$project$rome$$romejs$js$analysis$Evaluator_ts$ModuleSignatureManager {
		constructor(graph, getModuleSignature, topScope) {
			this.topScope = topScope;
			this.getModuleSignature = getModuleSignature;
			this.graph = graph;
			this.openTypes = new Map();
			this.filename = graph.filename;

			this.exportNamesToTypeId = new Map();
		}

		addAll(manager) {
			for (const [name, id] of manager.exportNamesToTypeId) {
				if (name === "default") {
					// ignore `default`
					continue;
				}

				this.exportNamesToTypeId.set(name, id);

				const openType = manager.openTypes.get(id);
				if (openType === undefined) {
					throw new Error("Expected an open type");
				}
				this.openTypes.set(id, openType);
			}
		}

		async init() {
			const {graph, openTypes} = this;

			// Create initial open types for all the nodes in this graph
			for (const id in graph.types) {
				const open = new ___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default(
					this.topScope,
					undefined,
				);
				openTypes.set(id, open);
			}

			let currGetType;

			// Create a factory to fetch the open ids
			const getType = (id) => {
				if (id === undefined) {
					throw new Error("expected id");
				}

				if (typeof id !== "string") {
					throw new Error("expected string id");
				}

				const type = openTypes.get(id);

				if (type === undefined) {
					throw new Error(
						graph.filename +
						": Expected type of id " +
						id +
						" but it doesn't exist, serialized data: " +
						String(JSON.stringify(currGetType)),
					);
				}

				return type;
			};

			// Fetch the graphs of `export *` dependencies, future calls to `this.getModuleSignature` will fetch from 'cache
			await Promise.all(
				graph.exports.map((def) => {
					if (def.type === "all") {
						return this.getModuleSignature(def.source, graph.filename);
					} else {
						return undefined;
					}
				}),
			);

			// Resolve all exports
			for (const def of graph.exports) {
				if (def.type === "all") {
					const manager = await this.getModuleSignature(
						def.source,
						graph.filename,
					);
					if (manager !== undefined) {
						this.addAll(manager);
					}
				} else {
					this.exportNamesToTypeId.set(def.name, def.value);
				}
			}

			// Hydrate all types in the graph and link them to their open types
			for (const id in graph.types) {
				const node = graph.types[id];
				const {origin, type, data, human} = node;
				currGetType = node;

				// Retrieve the open type
				const openT = openTypes.get(id);
				if (openT === undefined) {
					throw new Error("Expected an open type");
				}

				// Get the type constructor
				const TConstructor = ___R$project$rome$$romejs$js$analysis$types$index_ts$default.get(
					type,
				);
				if (TConstructor === undefined) {
					throw new Error("Expected a valid internal type constructor name");
				}

				// Create the type

				// @ts-ignore
				const realT = TConstructor.hydrate(
					this.topScope,
					{loc: origin},
					data,
					getType,
				);

				//
				realT.setHuman(human);

				// Link it to the open type
				openT.shouldMatch(realT);
			}
		}

		link(importedName, type) {
			const graph = this.graph;

			// Get type id for this export
			const maybeExportId = this.exportNamesToTypeId.get(importedName);
			if (maybeExportId === undefined) {
				// Export not found in the module so let's link it to an error
				const error = new ___R$project$rome$$romejs$js$analysis$types$errors$UnknownImportE_ts$default(
					this.topScope,
					type.originNode,
					{
						possibleNames: Array.from(this.exportNamesToTypeId.keys()),
						importedName,
						source: graph.filename,
					},
				);
				error.shouldMatch(type);
				return;
			}

			// Retrieve the open type
			const openT = this.openTypes.get(maybeExportId);
			if (openT === undefined) {
				throw new Error("Expected an open type");
			}

			// Link it to this type
			type.setResolvedType(openT);
		}
	}



	class ___R$project$rome$$romejs$js$analysis$Evaluator_ts$default {
		constructor(hub, filename) {
			this.filename = filename;
			this.nodeToType = new Map();
			this.exports = [];
			this.imports = [];
			this.hub = hub;
			this.graph = hub.graph;
			// TODO we should use `ThisScope` and set it correctly to `window` or `undefined` depending on strict mode
			this.topScope = new ___R$project$rome$$romejs$js$analysis$scopes_ts$Scope({
				evaluator: this,
			});
			this.intrinsics = this.topScope.intrinsics = new ___R$project$rome$$romejs$js$analysis$Intrinsics_ts$default(
				this.topScope,
			);
			this.evaluatingType = undefined;
		}

		initModuleSignature(graph, getModuleSignature) {
			return new ___R$project$rome$$romejs$js$analysis$Evaluator_ts$ModuleSignatureManager(
				graph,
				getModuleSignature,
				this.topScope,
			);
		}

		seed(ast) {
			return this.evaluate(ast, this.topScope);
		}

		evaluate(node, scope) {
			if (node === undefined) {
				throw new Error("Expected node but received undefined");
			}

			const evaluator = ___R$project$rome$$romejs$js$analysis$evaluators$index_ts$default.get(
				node.type,
			);
			if (evaluator === undefined) {
				throw new Error("what is this? " + node.type);
			} else {
				const oldEvaluatingType = this.evaluatingType;
				this.evaluatingType = node.type;
				let type = evaluator(node, scope, this.hub);
				if (type === undefined) {
					type = new ___R$project$rome$$romejs$js$analysis$types$EmptyT_ts$default(
						scope,
						node,
					);
				}
				this.evaluatingType = oldEvaluatingType;
				this.nodeToType.set(node, type);
				return type;
			}
		}

		getTypeFromEvaluatedNode(node) {
			const type = this.nodeToType.get(node);
			if (type === undefined) {
				throw new Error(
					"getTypeFromEvaluatedNode() called on a node that has not been validated yet",
				);
			} else {
				return type;
			}
		}

		addExport(name, type) {
			this.exports.push({
				type: "local",
				name,
				value: type,
			});
		}

		addExportAll(source) {
			this.exports.push({
				type: "all",
				source,
			});
		}

		addImport(t, opts) {
			this.imports.push({
				relative: opts.relative,
				importedName: opts.importedName,
				source: opts.source,
				type: t,
			});
		}
	}


  // project-rome/@romejs/js-analysis/Utils.ts
class ___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$ReduceRecursionError
		extends Error {}

	const ___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$TYPE_COMPATIBLE = {
		type: "compatible",
	};

	const ___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$MAX_DEPTH = 100;

	class ___R$project$rome$$romejs$js$analysis$Utils_ts$HumanBuilder {
		constructor() {
			this.stack = new Set();
			this.usedAliases = new Set();
			this.aliases = new Map();
		}

		isRecursive(t) {
			if (t.human !== undefined) {
				return false;
			}

			if (this.aliases.has(t)) {
				return true;
			}

			if (this.stack.has(t)) {
				return true;
			}

			return false;
		}

		humanize(type) {
			// Check if we already have a human form for this type
			if (type.human !== undefined) {
				return type.human;
			}

			// Check if we have an already created alias
			if (this.aliases.has(type)) {
				const alias = this.aliases.get(type);
				if (alias === undefined) {
					throw new Error("Expected alias");
				}
				return alias;
			}

			// Generate an alias if we've determined this as recursive
			if (this.isRecursive(type)) {
				const alias = "Alias" + type.id;
				this.aliases.set(type, alias);
				return alias;
			}

			// Setup the stack and call
			this.stack.add(type);
			try {
				let humanized = type.humanize(this);

				// Check if an alias was created
				const alias = this.aliases.get(type);
				if (alias !== undefined) {
					humanized = alias + " = " + humanized;
				}
				return humanized;
			} finally {
				this.stack.delete(type);
			}
		}
	}

	class ___R$project$rome$$romejs$js$analysis$Utils_ts$default {
		constructor(hub) {
			this.reduceCatchers = new Set();
			this.reduceCache = new Map();
			this.reduceStack = new Set();
			this.compatibilityDepth = 0;
			this.hub = hub;
			this.debug = false;
		}

		inspect(t, safe = false) {
			const prevDebug = this.debug;
			this.debug = true;

			const data = new Map();
			data.set("id", String(t.id));

			const {originLoc, originEvaluator} = t;
			if (originLoc === undefined) {
				data.set("origin", "unknown");
			} else {
				data.set(
					"origin",
					String(originLoc.filename) +
					":" +
					String(originLoc.start.line) +
					":" +
					String(originLoc.start.column),
				);
			}
			if (originEvaluator !== undefined) {
				data.set("evaluator", originEvaluator);
			}

			const dataStr = Array.from(data.keys()).map((key) =>
				key + ": " + String(data.get(key))
			).join(", ");

			let info = t.getConstructor().type + "<";
			if (safe === false) {
				info += this.humanize(t) + ", ";
			}
			info += dataStr + ">";

			this.debug = prevDebug;
			return info;
		}

		assertClosed() {
			if (this.debug === false) {
				this.hub.assertClosed();
			}
		}

		explodeUnion(type) {
			return Array.from(new Set(this.reduce(type).explodeUnion()));
		}

		isCompatibleWith(a, b) {
			return this.checkCompability(a, b).type === "compatible";
		}

		checkCompability(a, b) {
			this.assertClosed();

			const lower = this.reduce(a);
			const upper = this.reduce(b);

			// Exact same type
			if (lower === upper) {
				return ___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$TYPE_COMPATIBLE;
			}

			// Any types shouldn't cause errors
			if (
				lower instanceof
				___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default ||
				upper instanceof
				___R$project$rome$$romejs$js$analysis$types$AnyT_ts$default
			) {
				return ___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$TYPE_COMPATIBLE;
			}

			// Simple check for call stack limits
			if (
				this.compatibilityDepth >
				___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$MAX_DEPTH
			) {
				throw new Error(
					"Max depth exceeded when checking compatibility of " +
					lower.inspect() +
					" to " +
					upper.inspect(),
				);
			}

			const cached = lower.compatibilityCache.get(upper);
			if (cached === undefined) {
				lower.compatibilityCache.set(
					upper,
					{
						type: "incompatible",
						lower,
						upper,
					},
				);
			} else {
				return cached;
			}

			// Check this relationship for compatibility
			this.compatibilityDepth++;
			let ret;
			try {
				ret = lower.compatibleWith(upper);
			} catch (err) {
				if (
					err instanceof
					___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$ReduceRecursionError
				) {
					ret = ___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$TYPE_COMPATIBLE;
				} else {
					throw err;
				}
			} finally {
				this.compatibilityDepth--;
			}
			let res;
			if (ret === true) {
				res = ___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$TYPE_COMPATIBLE;
			} else if (ret === false) {
				res = {type: "incompatible", lower: a, upper: b};
			} else if (
				ret instanceof
				___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default
			) {
				res = {type: "incompatible", lower: a, upper: ret};
			} else {
				res = ret;
			}

			lower.compatibilityCache.set(upper, res);

			return res;
		}

		humanize(type) {
			this.assertClosed();

			return new ___R$project$rome$$romejs$js$analysis$Utils_ts$HumanBuilder().humanize(
				type,
			);
		}

		reduce(type) {
			//
			this.assertClosed();

			//
			const cached = this.reduceCache.get(type);
			if (cached !== undefined) {
				return cached;
			}

			// Check if we're already trying to reduce this node, in that case this is a recursion error
			if (this.reduceStack.has(type)) {
				//throw new ReduceRecursionError(`Reduce recursion error for ${this.inspect(type, true)}`);
				return new ___R$project$rome$$romejs$js$analysis$types$UnknownT_ts$default(
					type.scope,
					type.originNode,
				);
			}

			//
			if (
				this.reduceStack.size >
				___R$$priv$project$rome$$romejs$js$analysis$Utils_ts$MAX_DEPTH
			) {
				throw new Error("Max depth exceeded when reducing");
			}

			this.reduceStack.add(type);

			if (this.reduceCatchers.size) {
				for (const set of this.reduceCatchers) {
					set.add(type);
				}
			}

			try {
				const reduced = type.reduce();

				if (reduced === undefined) {
					throw new Error(
						"The reduce() method for " +
						this.inspect(type, true) +
						" returned null",
					);
				}

				if (reduced.getConstructor().type === "OpenT") {
					throw new Error(
						"The reduce() method for " +
						this.inspect(type, true) +
						" returned an OpenT. This should never be possible. It likely forgot to return utils.reduce() on it.",
					);
				}

				if (this.debug === false) {
					this.reduceCache.set(type, reduced);
				}

				return reduced;
			} finally {
				this.reduceStack.delete(type);
			}
		}

		reduceCatch(type) {
			const involved = new Set();
			this.reduceCatchers.add(involved);

			const final = this.reduce(type);
			this.reduceCatchers.delete(involved);

			return {final, involved};
		}
	}


  // project-rome/@romejs/js-analysis/Hub.ts
const ___R$$priv$project$rome$$romejs$js$analysis$Hub_ts$statuses = {
		OPEN: 0,
		CLOSING: 1,
		CLOSED: 2,
	};



	class ___R$project$rome$$romejs$js$analysis$Hub_ts$default {
		constructor(ast, project) {
			this.context = new ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default({
				// TODO
				sourceText: "",
				ast,
				project,
				origin: {
					category: "typeChecking",
				},
			});
			this.utils = new ___R$project$rome$$romejs$js$analysis$Utils_ts$default(
				this,
			);
			this.graph = new ___R$project$rome$$romejs$js$analysis$Graph_ts$default();
			this.evaluator = new ___R$project$rome$$romejs$js$analysis$Evaluator_ts$default(
				this,
				ast.filename,
			);
			this.status = ___R$$priv$project$rome$$romejs$js$analysis$Hub_ts$statuses.OPEN;
		}

		close() {
			this.status = ___R$$priv$project$rome$$romejs$js$analysis$Hub_ts$statuses.CLOSING;

			for (const [node] of this.graph.nodesByValue) {
				this.utils.reduce(node);
			}

			this.status = ___R$$priv$project$rome$$romejs$js$analysis$Hub_ts$statuses.CLOSED;
		}

		isClosing() {
			return (
				this.status ===
				___R$$priv$project$rome$$romejs$js$analysis$Hub_ts$statuses.CLOSING
			);
		}

		isOpen() {
			return (
				this.isClosing() ||
				this.status ===
				___R$$priv$project$rome$$romejs$js$analysis$Hub_ts$statuses.OPEN
			);
		}

		isClosed() {
			return (
				this.isClosing() ||
				this.status ===
				___R$$priv$project$rome$$romejs$js$analysis$Hub_ts$statuses.CLOSED
			);
		}

		assertOpen() {
			if (this.isClosed() && this.isClosing() === false) {
				throw new Error(
					"This method can only be called when the graph has been open",
				);
			}
		}

		assertClosed() {
			if (this.isOpen() && this.isClosing() === false) {
				throw new Error(
					"This method can only be called when the graph has been closed",
				);
			}
		}
	}


  // project-rome/@romejs/js-analysis/api/buildGraph.ts
async function ___R$project$rome$$romejs$js$analysis$api$buildGraph_ts$default(
		opts,
	) {
		const {ast, connected, project, provider} = opts;

		const hub = new ___R$project$rome$$romejs$js$analysis$Hub_ts$default(
			ast,
			project,
		);
		const {evaluator} = hub;
		if (provider.libs !== undefined) {
			let body = [];
			for (const ast of provider.libs) {
				body = [...body, ...ast.body];
			}
			evaluator.seed(Object.assign({}, ast, {body}));
		}
		evaluator.seed(ast);

		// fetch imports
		if (connected) {
			// create graphs
			const graphs = new Map();
			async function getModuleSignature(source, relative) {
				const graphKey = relative + ":" + source;
				if (graphs.has(graphKey)) {
					// already prepared graph
					return graphs.get(graphKey);
				}

				// query the provider for the export types
				const graph = await provider.getExportTypes(relative, source);

				// check if the resolved graph even exists
				if (graph === undefined) {
					// TODO unknown module, create an error
					graphs.set(graphKey, undefined);
					return undefined;
				}

				// check if we've already initialised this graph before, in the case of different relative URLs
				if (graphs.has(graph.filename)) {
					// TODO this is pretty inefficient, we shouldn't even receive it
					const manager = graphs.get(graph.filename);
					graphs.set(graphKey, manager);
					return manager;
				}

				// create the graph
				const manager = evaluator.initModuleSignature(graph, getModuleSignature);
				graphs.set(graphKey, manager);
				graphs.set(graph.filename, manager);
				await manager.init();
				return manager;
			}

			// seed graphs
			const seedCache = new Set();
			await Promise.all(
				evaluator.imports.map(({source, relative}) => {
					const cacheKey = source + ":" + relative;
					if (seedCache.has(cacheKey)) {
						return undefined;
					}

					seedCache.add(cacheKey);
					return getModuleSignature(source, relative);
				}),
			);

			// link imports
			for (const {source, importedName, relative, type} of evaluator.imports) {
				const graphKey = relative + ":" + source;
				const graph = graphs.get(graphKey);
				if (graph === undefined) {
					// unknown module, an error would have been created in the initial graph prep
					continue;
				}

				if (importedName === undefined) {
					// nothing to link here!
					continue;
				}

				type.setAbsolute(graph.filename);
				graph.link(importedName, type);
			}
		}

		evaluator.intrinsics.link();
		hub.close();
		return hub;
	}


  // project-rome/@romejs/js-analysis/api/getModuleSignature.ts
const ___R$$priv$project$rome$$romejs$js$analysis$api$getModuleSignature_ts$exportsCache = new WeakMap();

	async function ___R$project$rome$$romejs$js$analysis$api$getModuleSignature_ts$default(
		opts,
	) {
		const {ast, provider} = opts;
		const {filename} = ast;

		if (filename.includes("node_modules")) {
			return {
				filename,
				exports: [],
				types: {},
			};
		}

		const cached = ___R$$priv$project$rome$$romejs$js$analysis$api$getModuleSignature_ts$exportsCache.get(
			ast,
		);
		if (cached !== undefined) {
			return cached;
		}

		const {
			evaluator: {exports},
			utils,
		} = await ___R$project$rome$$romejs$js$analysis$api$buildGraph_ts$default({
			ast,
			project: opts.project,
			connected: false,
			provider,
		});
		const types = {};
		const exportMap = [];

		const added = new Set();

		function addType(type) {
			const reducedType = utils.reduce(type);
			if (added.has(reducedType)) {
				return reducedType.id;
			} else {
				added.add(reducedType);
			}

			// export errors as any types to suppress errors
			if (
				reducedType instanceof
				___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default
			) {
				types[reducedType.id] = {
					human: undefined,
					origin: reducedType.originLoc,
					type: "AnyT",
					data: {},
				};
				return reducedType.id;
			}

			const data = reducedType.serialize(addType);

			types[reducedType.id] = {
				human: reducedType.human,
				origin: reducedType.originLoc,
				type: reducedType.getConstructor().type,
				data,
			};
			return reducedType.id;
		}

		for (const def of exports) {
			if (def.type === "all") {
				exportMap.push({
					type: "all",
					source: def.source,
				});
			} else if (def.type === "local") {
				exportMap.push({
					type: "local",
					name: def.name,
					value: addType(def.value),
				});
			} else {
				throw new Error("unknown export def type");
			}
		}

		const result = {
			filename,
			exports: exportMap,
			types,
		};
		___R$$priv$project$rome$$romejs$js$analysis$api$getModuleSignature_ts$exportsCache.set(
			ast,
			result,
		);
		return result;
	}


  // project-rome/@romejs/js-analysis/api/check.ts
async function ___R$project$rome$$romejs$js$analysis$api$check_ts$default(opts) {
		const hub = await ___R$project$rome$$romejs$js$analysis$api$buildGraph_ts$default({
			ast: opts.ast,
			connected: true,
			provider: opts.provider,
			project: opts.project,
		});
		___R$$priv$project$rome$$romejs$js$analysis$api$check_ts$resolveGraph(hub);
		return hub.context.diagnostics.getDiagnostics();
	}

	function ___R$$priv$project$rome$$romejs$js$analysis$api$check_ts$isError(t) {
		return (
			t !== undefined &&
			t instanceof
			___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default
		);
	}

	function ___R$$priv$project$rome$$romejs$js$analysis$api$check_ts$resolveGraph(
		hub,
	) {
		const {graph, utils, context} = hub;

		// we track caught errors here as if a normal type returns a error in it's reduce() method

		// then it will be added to the graph, however we'd have already dealt with it
		const caughtErrors = new Set();

		for (const node of graph.nodes) {
			const lower = node.value;

			// unconnected node, we'll resolve these if they've been connected to any nodes
			if (
				lower instanceof
				___R$project$rome$$romejs$js$analysis$types$OpenT_ts$default
			) {
				continue;
			}

			// see if this reduces to a type error
			const reduced = utils.reduce(lower);
			if (
				reduced instanceof
				___R$project$rome$$romejs$js$analysis$types$errors$E_ts$default
			) {
				if (caughtErrors.has(reduced)) {
					continue;
				} else {
					caughtErrors.add(reduced);
				}

				let {description, lowerTarget, upperTarget} = reduced.getError();

				// ignore errors inside
				if (
					___R$$priv$project$rome$$romejs$js$analysis$api$check_ts$isError(
						lowerTarget,
					) ||
					___R$$priv$project$rome$$romejs$js$analysis$api$check_ts$isError(
						upperTarget,
					)
				) {
					continue;
				}

				let advice = [];

				if (upperTarget !== undefined) {
					const marker =
						upperTarget && !(upperTarget instanceof reduced.constructor)
							? utils.humanize(upperTarget)
							: undefined;
					const {originLoc} = upperTarget;

					if (originLoc !== undefined && marker !== undefined) {
						advice.push({
							type: "log",
							category: "info",
							text: marker,
						});
					} else if (originLoc !== undefined) {
						advice.push({
							type: "frame",
							location: {
								filename: originLoc.filename,
								start: originLoc.start,
								end: originLoc.end,
								marker,
							},
						});
					}
				}

				description = Object.assign(
					{},
					description,
					{advice: [...advice, ...description.advice]},
				);

				context.addNodeDiagnostic(
					lowerTarget.originNode,
					description,
					{
						marker: lowerTarget && !(lowerTarget instanceof reduced.constructor)
							? utils.humanize(lowerTarget)
							: undefined,
					},
				);
				continue;
			}

			// ignore unconnected nodes
			if (node.lines.length === 0) {
				continue;
			}

			for (const line of node.lines) {
				const upper = line.value;
				const compatibility = utils.checkCompability(upper, lower);

				if (compatibility.type === "incompatible") {
					// ignore associated errors, as they've already been handled
					if (
						___R$$priv$project$rome$$romejs$js$analysis$api$check_ts$isError(
							compatibility.lower,
						) ||
						___R$$priv$project$rome$$romejs$js$analysis$api$check_ts$isError(
							compatibility.upper,
						)
					) {
						continue;
					}

					context.addNodeDiagnostic(
						compatibility.lower.originNode,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.TYPE_CHECK.INCOMPATIBILITY(
							utils.humanize(upper),
							upper.originLoc,
						),
						{
							marker: utils.humanize(compatibility.lower),
						},
					);
				}
			}
		}

		return context.diagnostics.getDiagnostics();
	}


  // project-rome/@romejs/js-analysis/types.ts
const ___R$project$rome$$romejs$js$analysis$types_ts = {};











  // project-rome/@romejs/js-analysis/index.ts
const ___R$project$rome$$romejs$js$analysis$index_ts = {
		get getModuleSignature() {
			return ___R$project$rome$$romejs$js$analysis$api$getModuleSignature_ts$default;
		},
		get buildGraph() {
			return ___R$project$rome$$romejs$js$analysis$api$buildGraph_ts$default;
		},
		get check() {
			return ___R$project$rome$$romejs$js$analysis$api$check_ts$default;
		},
	};
	Object.keys(___R$project$rome$$romejs$js$analysis$types$index_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$js$analysis$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$js$analysis$types$index_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$js$analysis$types_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$js$analysis$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$js$analysis$types_ts[key];
				},
			},
		);
	});


  // project-rome/@romejs/formatter/node/parentheses.ts
function ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isClassExtendsClause(
		node,
		parent,
	) {
		return (
			(parent.type === "JSClassDeclaration" ||
			parent.type === "JSClassExpression") &&
			parent.meta.superClass === node
		);
	}

	const ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens = new Map();
	const ___R$project$rome$$romejs$formatter$node$parentheses_ts$default = ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens;
	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"TSAsExpression",
		() => true,
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"TSAssignmentAsExpression",
		() => true,
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"TSTypeAssertion",
		() => true,
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSMemberExpression",
		(node, parent) => {
			if (node.property.optional) {
				return (
					(parent.type === "JSCallExpression" && parent.callee === node) ||
					(parent.type === "JSMemberExpression" && parent.object === node)
				);
			} else {
				return false;
			}
		},
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSUpdateExpression",
		(node, parent) => {
			return (
				// (foo++).test(), (foo++)[0]
				(parent.type === "JSMemberExpression" && parent.object === node) ||
				// (foo++)()
				(parent.type === "JSCallExpression" && parent.callee === node) ||
				// new (foo++)()
				(parent.type === "JSNewExpression" && parent.callee === node) ||
				___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isClassExtendsClause(
					node,
					parent,
				)
			);
		},
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSObjectExpression",
		(node, parent, printStack) => {
			return ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isFirstInStatement(
				printStack,
				{considerArrow: true},
			);
		},
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSDoExpression",
		(node, parent, printStack) => {
			return ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isFirstInStatement(
				printStack,
			);
		},
	);

	function ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenLogicalExpression(
		node,
		parent,
	) {
		if (
			node.operator === "**" &&
			parent.type === "JSBinaryExpression" &&
			parent.operator === "**"
		) {
			return parent.left === node;
		}

		// class A extends (B ?? C) {
		if (
			___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isClassExtendsClause(
				node,
				parent,
			)
		) {
			return true;
		}

		// (f ?? g)()
		// (f ?? g)?.()
		// new (A ?? B)()
		if (
			parent.type === "JSCallExpression" ||
			parent.type === "JSOptionalCallExpression" ||
			parent.type === "JSNewExpression"
		) {
			return parent.callee === node;
		}

		// ...(a ?? b)
		// await (a ?? b)
		if (
			___R$project$rome$$romejs$js$ast$utils$isUnaryLike_ts$default(parent) ||
			parent.type === "JSAwaitExpression"
		) {
			return true;
		}

		// (a ?? b).x
		// (a ?? b)?.x
		if (parent.type === "JSMemberExpression" && parent.object === node) {
			return true;
		}

		// (a ?? b) ?? c
		// a ?? (b ?? c)
		if (parent.type === "JSLogicalExpression") {
			if (node.type === "JSLogicalExpression") {
				return node.operator !== parent.operator;
			}
		}

		if (___R$project$rome$$romejs$js$ast$utils$isBinary_ts$default(parent)) {
			const parentOp = parent.operator;
			const parentPos = ___R$project$rome$$romejs$js$ast$utils$getPrecedence_ts$default(
				parentOp,
			);

			const nodeOp = node.operator;
			const nodePos = ___R$project$rome$$romejs$js$ast$utils$getPrecedence_ts$default(
				nodeOp,
			);

			if (
				// Logical expressions with the same precedence don't need parens.
				(parentPos === nodePos &&
				parent.right === node &&
				parent.type !== "JSLogicalExpression") ||
				parentPos > nodePos
			) {
				return true;
			}
		}

		return false;
	}

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSLogicalExpression",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenLogicalExpression,
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSBinaryExpression",
		(node, parent) => {
			// let i = (1 in []);
			// for ((1 in []);;);
			if (
				node.operator === "in" &&
				(parent.type === "JSVariableDeclarator" ||
				___R$project$rome$$romejs$js$ast$utils$isFor_ts$default(parent))
			) {
				return true;
			}

			return ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenLogicalExpression(
				node,
				parent,
			);
		},
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSSequenceExpression",
		(node, parent) => {
			if (
				// Although parentheses wouldn't hurt around sequence
				// expressions in the head of for loops, traditional style
				// dictates that e.g. i++, j++ should not be wrapped with
				// parentheses.
				parent.type === "JSForStatement" ||
				parent.type === "JSThrowStatement" ||
				parent.type === "JSReturnStatement" ||
				(parent.type === "JSIfStatement" && parent.test === node) ||
				(parent.type === "JSWhileStatement" && parent.test === node) ||
				(parent.type === "JSForInStatement" && parent.right === node) ||
				(parent.type === "JSSwitchStatement" && parent.discriminant === node) ||
				(parent.type === "JSExpressionStatement" && parent.expression === node)
			) {
				return false;
			}

			// Arrow function builder handles the parens printing.
			if (parent.type === "JSArrowFunctionExpression") {
				return false;
			}

			// Otherwise err on the side of overparenthesization, adding
			// explicit exceptions above if this proves overzealous.
			return true;
		},
	);

	function ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenYieldExpression(
		node,
		parent,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$isBinary_ts$default(parent) ||
			___R$project$rome$$romejs$js$ast$utils$isUnaryLike_ts$default(parent) ||
			parent.type === "JSMemberExpression" ||
			(parent.type === "JSCallExpression" && parent.callee === node) ||
			(parent.type === "JSNewExpression" && parent.callee === node) ||
			(parent.type === "JSAwaitExpression" && node.type === "JSYieldExpression") ||
			(parent.type === "JSConditionalExpression" && node === parent.test) ||
			___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isClassExtendsClause(
				node,
				parent,
			)
		);
	}

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSYieldExpression",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenYieldExpression,
	);
	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSAwaitExpression",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenYieldExpression,
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSOptionalCallExpression",
		(node, parent) => {
			return (
				(parent.type === "JSCallExpression" && parent.callee === node) ||
				(parent.type === "JSMemberExpression" && parent.object === node)
			);
		},
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSClassExpression",
		(node, parent, printStack) => {
			return ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isFirstInStatement(
				printStack,
				{considerDefaultExports: true},
			);
		},
	);

	function ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenUnaryExpression(
		node,
		parent,
	) {
		return (
			(parent.type === "JSMemberExpression" && parent.object === node) ||
			(parent.type === "JSCallExpression" && parent.callee === node) ||
			(parent.type === "JSNewExpression" && parent.callee === node) ||
			(parent.type === "JSBinaryExpression" &&
			parent.operator === "**" &&
			parent.left === node) ||
			___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isClassExtendsClause(
				node,
				parent,
			)
		);
	}

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSUnaryExpression",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenUnaryExpression,
	);
	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSSpreadElement",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenUnaryExpression,
	);
	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSSpreadProperty",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenUnaryExpression,
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSFunctionExpression",
		(node, parent, printStack) => {
			return ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isFirstInStatement(
				printStack,
				{considerDefaultExports: true},
			);
		},
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSArrowFunctionExpression",
		(node, parent) => {
			return (
				parent.type === "JSExportLocalDeclaration" ||
				___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenConditionalExpression(
					node,
					parent,
				)
			);
		},
	);

	function ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenConditionalExpression(
		node,
		parent,
	) {
		if (
			___R$project$rome$$romejs$js$ast$utils$isUnaryLike_ts$default(parent) ||
			___R$project$rome$$romejs$js$ast$utils$isBinary_ts$default(parent) ||
			(parent.type === "JSConditionalExpression" && parent.test === node) ||
			parent.type === "JSAwaitExpression" ||
			(parent.type === "JSMemberExpression" &&
			parent.object === node &&
			parent.property.optional) ||
			(parent.type === "JSOptionalCallExpression" && parent.callee === node) ||
			parent.type === "JSTaggedTemplateExpression" ||
			parent.type === "TSTypeAssertion" ||
			parent.type === "TSAsExpression"
		) {
			return true;
		}

		return ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenUnaryExpression(
			node,
			parent,
		);
	}

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSConditionalExpression",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenConditionalExpression,
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"JSAssignmentExpression",
		(node, parent) => {
			if (node.left.type === "JSAssignmentObjectPattern") {
				return true;
			} else {
				return ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenConditionalExpression(
					node,
					parent,
				);
			}
		},
	);

	function ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenUnionTypeAnnotation(
		node,
		parent,
	) {
		return (
			parent.type === "TSIntersectionTypeAnnotation" ||
			parent.type === "TSUnionTypeAnnotation" ||
			parent.type === "TSArrayType" ||
			parent.type === "TSOptionalType"
		);
	}

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"TSUnionTypeAnnotation",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenUnionTypeAnnotation,
	);
	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"TSIntersectionTypeAnnotation",
		___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$needsParenUnionTypeAnnotation,
	);

	___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$parens.set(
		"TSInferType",
		(node, parent) => {
			return parent.type === "TSArrayType" || parent.type === "TSOptionalType";
		},
	);

	// Walk up the print stack to deterimine if our node can come first
	// in statement.
	function ___R$$priv$project$rome$$romejs$formatter$node$parentheses_ts$isFirstInStatement(
		printStack,
		{considerArrow = false, considerDefaultExports = false} = {},
	) {
		let i = printStack.length - 1;
		let node = printStack[i];
		i--;
		let parent = printStack[i];
		while (i > 0) {
			if (
				(parent.type === "JSExpressionStatement" && parent.expression === node) ||
				parent.type === "JSTaggedTemplateExpression" ||
				(considerDefaultExports &&
				parent.type === "JSExportDefaultDeclaration" &&
				parent.declaration === node) ||
				(considerArrow &&
				parent.type === "JSArrowFunctionExpression" &&
				parent.body === node)
			) {
				return true;
			}

			if (
				(parent.type === "JSCallExpression" && parent.callee === node) ||
				(parent.type === "JSSequenceExpression" &&
				parent.expressions[0] === node) ||
				(parent.type === "JSMemberExpression" && parent.object === node) ||
				(___R$project$rome$$romejs$js$ast$utils$isConditional_ts$default(parent) &&
				parent.test === node) ||
				(___R$project$rome$$romejs$js$ast$utils$isBinary_ts$default(parent) &&
				parent.left === node) ||
				(parent.type === "JSAssignmentExpression" && parent.left === node)
			) {
				node = parent;
				i--;
				parent = printStack[i];
			} else {
				return false;
			}
		}

		return false;
	}


  // project-rome/@romejs/formatter/node/index.ts
const ___R$project$rome$$romejs$formatter$node$index_ts = {
		getLinesBetween: ___R$project$rome$$romejs$formatter$node$index_ts$getLinesBetween,
		needsParens: ___R$project$rome$$romejs$formatter$node$index_ts$needsParens,
		isOnSameLine: ___R$project$rome$$romejs$formatter$node$index_ts$isOnSameLine,
	};
	function ___R$$priv$project$rome$$romejs$formatter$node$index_ts$isOrHasCallExpression(
		node,
	) {
		if (node.type === "JSCallExpression") {
			return true;
		}

		if (node.type === "JSComputedMemberProperty") {
			return ___R$$priv$project$rome$$romejs$formatter$node$index_ts$isOrHasCallExpression(
				node.value,
			);
		}

		if (node.type === "JSMemberExpression") {
			return (
				___R$$priv$project$rome$$romejs$formatter$node$index_ts$isOrHasCallExpression(
					node.object,
				) ||
				___R$$priv$project$rome$$romejs$formatter$node$index_ts$isOrHasCallExpression(
					node.property,
				)
			);
		}

		return false;
	}

	function ___R$$priv$project$rome$$romejs$formatter$node$index_ts$orderLoc(
		a,
		b,
	) {
		if (
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(a.end.index) <
			___R$project$rome$$romejs$ob1$index_ts$ob1Get0(b.start.index)
		) {
			return [a, b];
		} else {
			return [b, a];
		}
	}

	function ___R$project$rome$$romejs$formatter$node$index_ts$getLinesBetween(
		aNode,
		bNode,
	) {
		if (aNode.loc && bNode.loc) {
			const [a, b] = ___R$$priv$project$rome$$romejs$formatter$node$index_ts$orderLoc(
				aNode.loc,
				bNode.loc,
			);
			return (
				___R$project$rome$$romejs$ob1$index_ts$ob1Get1(b.start.line) -
				___R$project$rome$$romejs$ob1$index_ts$ob1Get1(a.end.line)
			);
		} else {
			return 0;
		}
	}

	function ___R$project$rome$$romejs$formatter$node$index_ts$needsParens(
		node,
		parent,
		printStack,
	) {
		if (!parent) {
			return false;
		}

		if (parent.type === "JSNewExpression" && parent.callee === node) {
			if (
				___R$$priv$project$rome$$romejs$formatter$node$index_ts$isOrHasCallExpression(
					node,
				)
			) {
				return true;
			}
		}

		const fn = ___R$project$rome$$romejs$formatter$node$parentheses_ts$default.get(
			node.type,
		);
		return fn ? fn(node, parent, printStack) : false;
	}

	function ___R$project$rome$$romejs$formatter$node$index_ts$isOnSameLine(
		aNode,
		bNode,
	) {
		if (aNode.loc && bNode.loc) {
			return aNode.loc.end.line === bNode.loc.start.line;
		} else {
			return false;
		}
	}


  // project-rome/@romejs/formatter/builders/js/comments.ts
function ___R$project$rome$$romejs$formatter$builders$js$comments_ts$hasInnerComments(
		node,
	) {
		return node.innerComments !== undefined && node.innerComments.length > 0;
	}

	function ___R$project$rome$$romejs$formatter$builders$js$comments_ts$printComment(
		node,
	) {
		switch (node.type) {
			case "JSCommentBlock": {
				const lines = node.value.split("\n");
				if (lines.every((line) => line.trimStart().charAt(0) === "*")) {
					return ___R$project$rome$$romejs$formatter$tokens_ts$comment(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							"/*",
							___R$project$rome$$romejs$formatter$tokens_ts$join(
								___R$project$rome$$romejs$formatter$tokens_ts$hardline,
								lines.map((line, index) =>
									index === 0
										? line.trimEnd()
										: " " +
											(index < lines.length - 1 ? line.trim() : line.trimStart())
								),
							),
							"*/",
						]),
					);
				} else {
					return ___R$project$rome$$romejs$formatter$tokens_ts$comment(
						"/*" + node.value + "*/",
					);
				}
			}

			case "JSCommentLine": {
				return ___R$project$rome$$romejs$formatter$tokens_ts$comment(
					"//" + node.value.trimEnd(),
				);
			}
		}
	}

	function ___R$$priv$project$rome$$romejs$formatter$builders$js$comments_ts$printCommentSeparator(
		left,
		right,
	) {
		const linesBetween = ___R$project$rome$$romejs$formatter$node$index_ts$getLinesBetween(
			left,
			right,
		);
		return linesBetween === 0
			? ___R$project$rome$$romejs$formatter$tokens_ts$space
			: linesBetween === 1
				? ___R$project$rome$$romejs$formatter$tokens_ts$hardline
				: ___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$hardline,
						___R$project$rome$$romejs$formatter$tokens_ts$hardline,
					]);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$comments_ts$printLeadingComment(
		node,
		next,
	) {
		const comment = ___R$project$rome$$romejs$formatter$builders$js$comments_ts$printComment(
			node,
		);
		if (node.type === "JSCommentLine") {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				comment,
				___R$project$rome$$romejs$formatter$tokens_ts$hardline,
			]);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				comment,
				___R$$priv$project$rome$$romejs$formatter$builders$js$comments_ts$printCommentSeparator(
					node,
					next,
				),
			]);
		}
	}

	function ___R$project$rome$$romejs$formatter$builders$js$comments_ts$printTrailingComment(
		node,
		previous,
	) {
		const comment = ___R$project$rome$$romejs$formatter$builders$js$comments_ts$printComment(
			node,
		);
		const linesBetween = ___R$project$rome$$romejs$formatter$node$index_ts$getLinesBetween(
			previous,
			node,
		);

		if (linesBetween >= 1) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$lineSuffix(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					linesBetween > 1
						? ___R$project$rome$$romejs$formatter$tokens_ts$hardline
						: "",
					___R$project$rome$$romejs$formatter$tokens_ts$hardline,
					comment,
				]),
			);
		} else {
			if (node.type === "JSCommentBlock") {
				return ___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(
					___R$project$rome$$romejs$formatter$tokens_ts$lineSuffix(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$space,
							comment,
						]),
					),
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$space,
						comment,
					]),
				);
			} else {
				return ___R$project$rome$$romejs$formatter$tokens_ts$lineSuffix(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$space,
						comment,
					]),
				);
			}
		}
	}


  // project-rome/@romejs/formatter/builders/js/temp/JSAmbiguousFlowTypeCastExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$temp$JSAmbiguousFlowTypeCastExpression_ts$default() {
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSArrayExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSArrayExpression_ts$default(
		builder,
		node,
	) {
		const hasContents = node.elements.length > 0;
		const hasRest =
			(node.type === "JSBindingArrayPattern" ||
			node.type === "JSAssignmentArrayPattern") &&
			node.rest !== undefined;

		if (!hasContents && !hasRest) {
			if (
				___R$project$rome$$romejs$formatter$builders$js$comments_ts$hasInnerComments(
					node,
				)
			) {
				return ___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						"[",
						builder.tokenizeInnerComments(node, true),
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
						"]",
					]),
				);
			} else {
				return "[]";
			}
		}

		const tokens = [];

		if (hasContents) {
			const elements = [];

			for (let i = 0; i < node.elements.length; i++) {
				const element = node.elements[i];
				const printed = builder.tokenize(element, node);

				if (i > 0 && builder.getLinesBetween(node.elements[i - 1], element) > 1) {
					elements.push(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$softline,
							printed,
						]),
					);
				} else {
					elements.push(printed);
				}
			}

			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$join(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						",",
						___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
					]),
					elements,
				),
			);

			if (hasRest) {
				tokens.push(
					",",
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
				);
			} else {
				// Add trailing comma
				tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(","));
			}
		}

		if (hasRest) {
			tokens.push("...", builder.tokenize((node).rest, node));
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"[",
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
						___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
					]),
				),
				___R$project$rome$$romejs$formatter$tokens_ts$softline,
				"]",
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSArrayHole.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSArrayHole_ts$default(
		builder,
		node,
	) {
		return builder.tokenizeInnerComments(node, false);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSArrowFunctionExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSArrowFunctionExpression_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.head.async === true) {
			tokens.push("async");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		tokens.push(builder.tokenize(node.head, node));
		tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space, "=>");

		const body = builder.tokenize(node.body, node);

		// Keep these types of node on the line as the arrow
		if (
			node.body.type === "JSArrayExpression" ||
			node.body.type === "JSObjectExpression" ||
			node.body.type === "JSBlockStatement" ||
			node.body.type === "JSArrowFunctionExpression"
		) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					body,
				]),
			);
		}

		if (node.body.type === "JSSequenceExpression") {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
				___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$space,
						"(",
						___R$project$rome$$romejs$formatter$tokens_ts$indent(
							___R$project$rome$$romejs$formatter$tokens_ts$concat([
								___R$project$rome$$romejs$formatter$tokens_ts$softline,
								body,
							]),
						),
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
						")",
					]),
				),
			]);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
				___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$indent(
							___R$project$rome$$romejs$formatter$tokens_ts$concat([
								___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
								body,
							]),
						),
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
					]),
				),
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSAssignmentArrayPattern.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentArrayPattern_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$expressions$JSArrayExpression_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSBindingAssignmentPattern.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingAssignmentPattern_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.left, node),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"=",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.right, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSAssignmentAssignmentPattern.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentAssignmentPattern_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingAssignmentPattern_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/utils.ts
function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$buildLabelStatementBuilder(
		prefix,
	) {
		return (builder, node) => {
			const tokens = [prefix];

			if (node.label) {
				tokens.push(
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					builder.tokenize(node.label, node),
				);
			}

			tokens.push(";");

			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		};
	}

	function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$buildThrowAndReturnStatementBuilder(
		prefix,
	) {
		return (builder, node) => {
			const tokens = [prefix];

			if (node.argument) {
				tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);

				if (
					node.argument.type === "JSBinaryExpression" ||
					node.argument.type === "JSLogicalExpression" ||
					node.argument.type === "JSSequenceExpression"
				) {
					tokens.push(
						___R$project$rome$$romejs$formatter$tokens_ts$group(
							___R$project$rome$$romejs$formatter$tokens_ts$concat([
								___R$project$rome$$romejs$formatter$tokens_ts$ifBreak("("),
								___R$project$rome$$romejs$formatter$tokens_ts$indent(
									___R$project$rome$$romejs$formatter$tokens_ts$concat([
										___R$project$rome$$romejs$formatter$tokens_ts$softline,
										builder.tokenize(node.argument, node),
									]),
								),
								___R$project$rome$$romejs$formatter$tokens_ts$softline,
								___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(")"),
							]),
						),
					);
				} else {
					tokens.push(builder.tokenize(node.argument, node));
				}
			}

			tokens.push(";");

			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		};
	}

	function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printMethod(
		builder,
		node,
	) {
		const kind = node.kind;

		const tokens = [];

		if (kind === "method" && node.head.generator === true) {
			tokens.push("*");
		}

		if (kind === "get" || kind === "set") {
			tokens.push(kind);
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		if (node.head.async === true) {
			tokens.push("async");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		if (node.type === "TSDeclareMethod") {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
				builder.tokenize(node.head, node),
			]);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			builder.tokenize(node.key, node),
			builder.tokenize(node.head, node),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.body, node),
		]);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printBindingPatternParams(
		builder,
		node,
		params,
		rest,
	) {
		if (params.length === 0 && rest === undefined) {
			if (
				___R$project$rome$$romejs$formatter$builders$js$comments_ts$hasInnerComments(
					node,
				)
			) {
				return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"(",
					builder.tokenizeInnerComments(node, true),
					___R$project$rome$$romejs$formatter$tokens_ts$hardline,
					")",
				]);
			} else {
				return "()";
			}
		}

		const tokens = [
			___R$project$rome$$romejs$formatter$tokens_ts$softline,
			___R$project$rome$$romejs$formatter$tokens_ts$join(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					",",
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
				]),
				params.map((param) => builder.tokenize(param, node)),
			),
		];

		if (rest) {
			if (params.length > 0) {
				tokens.push(
					",",
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
				);
			}
			tokens.push("...", builder.tokenize(rest, node));
		}

		if (params.length > 0 && !rest) {
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(","));
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"(",
			___R$project$rome$$romejs$formatter$tokens_ts$indent(
				___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			),
			___R$project$rome$$romejs$formatter$tokens_ts$softline,
			")",
		]);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printTSBraced(
		builder,
		node,
		members,
	) {
		if (members.length === 0) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"{",
					builder.tokenizeInnerComments(node, true),
					___R$project$rome$$romejs$formatter$tokens_ts$softline,
					"}",
				]),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"{",
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$hardline,
						___R$project$rome$$romejs$formatter$tokens_ts$join(
							___R$project$rome$$romejs$formatter$tokens_ts$hardline,
							members.map((member, index) => {
								const printed = builder.tokenize(member, node);
								if (
									index > 0 &&
									builder.getLinesBetween(members[index - 1], member) > 1
								) {
									return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
										___R$project$rome$$romejs$formatter$tokens_ts$hardline,
										printed,
									]);
								} else {
									return printed;
								}
							}),
						),
					]),
				),
				___R$project$rome$$romejs$formatter$tokens_ts$hardline,
				"}",
			]),
			true,
		);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printPatternMeta(
		builder,
		node,
		meta,
	) {
		if (builder.options.typeAnnotations && meta !== undefined) {
			const tokens = [];

			if (meta.optional) {
				tokens.push("?");
			}

			if (meta.typeAnnotation) {
				tokens.push(
					":",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					builder.tokenize(meta.typeAnnotation, node),
				);
			}

			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		} else {
			return "";
		}
	}

	function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printClause(
		builder,
		clause,
		parent,
	) {
		if (clause.type === "JSEmptyStatement") {
			return ";";
		}

		if (clause.type === "JSBlockStatement") {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(clause, parent),
			]);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$indent(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
				builder.tokenize(clause, parent),
			]),
		);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printCommaList(
		builder,
		nodes,
		parent,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$join(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				",",
				___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
			]),
			nodes.map((node) => builder.tokenize(node, parent)),
		);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printAssignment(
		builder,
		node,
		left,
		operator,
		right,
	) {
		const canBreak =
			right.type === "JSBinaryExpression" ||
			right.type === "JSLogicalExpression" ||
			right.type === "JSSequenceExpression" ||
			(right.type === "JSConditionalExpression" &&
			___R$project$rome$$romejs$js$ast$utils$isBinary_ts$default(right.test));

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				builder.tokenize(left, node),
				operator,
				canBreak
					? ___R$project$rome$$romejs$formatter$tokens_ts$group(
							___R$project$rome$$romejs$formatter$tokens_ts$indent(
								___R$project$rome$$romejs$formatter$tokens_ts$concat([
									___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
									builder.tokenize(right, node),
								]),
							),
						)
					: ___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$space,
							builder.tokenize(right, node),
						]),
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSAssignmentExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSAssignmentExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printAssignment(
			builder,
			node,
			node.left,
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				node.operator,
			]),
			node.right,
		);
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSIdentifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSIdentifier_ts$default(
		builder,
		node,
	) {
		return node.name;
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSAssignmentIdentifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentIdentifier_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSIdentifier_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/objects/JSObjectExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectExpression_ts$default(
		builder,
		node,
	) {
		if (
			___R$project$rome$$romejs$formatter$builders$js$comments_ts$hasInnerComments(
				node,
			)
		) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"{",
					builder.tokenizeInnerComments(node, true),
					___R$project$rome$$romejs$formatter$tokens_ts$softline,
					"}",
				]),
			);
		}

		const tokens = [];
		const props = node.properties;

		tokens.push(
			___R$project$rome$$romejs$formatter$tokens_ts$join(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					",",
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
				]),
				props.map((prop, index) => {
					const printed = builder.tokenize(prop, node);
					if (index > 0 && builder.getLinesBetween(props[index - 1], prop) > 1) {
						return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$softline,
							printed,
						]);
					} else {
						return printed;
					}
				}),
			),
		);

		if (
			(node.type === "JSBindingObjectPattern" ||
			node.type === "JSAssignmentObjectPattern") &&
			node.rest !== undefined
		) {
			if (props.length > 0) {
				tokens.push(
					",",
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
				);
				if (builder.getLinesBetween(props[props.length - 1], node.rest) > 1) {
					tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$softline);
				}
			}

			tokens.push("...", builder.tokenize(node.rest, node));
		} else if (props.length > 0) {
			// Add trailing comma
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(","));
		}

		// If the first property is not one the same line as the opening brace,
		// the object is printed on multiple lines.
		const shouldBreak =
			node.loc !== undefined &&
			props.length > 0 &&
			props[0].loc !== undefined &&
			props[0].loc.start.line !== node.loc.start.line;

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"{",
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
						___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
					]),
				),
				___R$project$rome$$romejs$formatter$tokens_ts$softline,
				"}",
			]),
			shouldBreak,
		);
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSAssignmentObjectPattern.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentObjectPattern_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectExpression_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/objects/JSObjectProperty.ts
function ___R$$priv$project$rome$$romejs$formatter$builders$js$objects$JSObjectProperty_ts$isShorthand(
		key,
		value,
	) {
		return (
			key.type === "JSStaticPropertyKey" &&
			key.value.type === "JSIdentifier" &&
			(value.type === "JSReferenceIdentifier" ||
			value.type === "JSBindingIdentifier" ||
			value.type === "JSAssignmentIdentifier") &&
			value.name === key.value.name
		);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectProperty_ts$default(
		builder,
		node,
	) {
		const tokens = [builder.tokenize(node.key, node)];

		if (
			(node.value.type === "JSBindingAssignmentPattern" ||
			node.value.type === "JSAssignmentAssignmentPattern") &&
			___R$$priv$project$rome$$romejs$formatter$builders$js$objects$JSObjectProperty_ts$isShorthand(
				node.key,
				node.value.left,
			)
		) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"=",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.value.right, node.value),
			]);
		} else if (
			___R$$priv$project$rome$$romejs$formatter$builders$js$objects$JSObjectProperty_ts$isShorthand(
				node.key,
				node.value,
			)
		) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
				":",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.value, node),
			]);
		}
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSAssignmentObjectPatternProperty.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentObjectPatternProperty_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectProperty_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSAwaitExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSAwaitExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"await",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.argument, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/literals/JSBigIntLiteral.ts
function ___R$project$rome$$romejs$formatter$builders$js$literals$JSBigIntLiteral_ts$default(
		builder,
		node,
	) {
		return node.value + "n";
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSBinaryExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSBinaryExpression_ts$default(
		builder,
		node,
		parent,
	) {
		const shouldNotGroup =
			(parent.type === "JSIfStatement" && parent.test === node) ||
			(parent.type === "JSDoWhileStatement" && parent.test === node) ||
			(parent.type === "JSWhileStatement" && parent.test === node) ||
			(parent.type === "JSSwitchStatement" && parent.discriminant === node);

		const parts = ___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSBinaryExpression_ts$printBinaryExpression(
			builder,
			node,
			parent,
			shouldNotGroup,
		);

		if (shouldNotGroup) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(parts);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(parts),
		);
	}

	function ___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSBinaryExpression_ts$printBinaryExpression(
		builder,
		node,
		parent,
		shouldNotGroup,
	) {
		const parts = [];

		if (
			___R$project$rome$$romejs$js$ast$utils$isBinary_ts$default(node.left) &&
			___R$project$rome$$romejs$js$ast$utils$getPrecedence_ts$default(
				node.operator,
			) ===
			___R$project$rome$$romejs$js$ast$utils$getPrecedence_ts$default(
				node.left.operator,
			)
		) {
			var ___R$;
			___R$ = parts,
				___R$.push.apply(
					___R$,
					[
						...___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSBinaryExpression_ts$printBinaryExpression(
							builder,
							node.left,
							node,
							shouldNotGroup,
						),
					],
				);
		} else {
			parts.push(builder.tokenize(node.left, node));
		}

		// Inline object and array expressions:
		//   obj && {
		//   arr ?? [
		const shouldInline =
			node.type === "JSLogicalExpression" &&
			(node.right.type === "JSArrayExpression" ||
			node.right.type === "JSObjectExpression");

		const right = ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			node.operator,
			shouldInline
				? ___R$project$rome$$romejs$formatter$tokens_ts$space
				: ___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
			builder.tokenize(node.right, node),
		]);

		const shouldGroup =
			!shouldNotGroup &&
			node.type !== parent.type &&
			node.type !== node.left.type &&
			node.type !== node.right.type;

		parts.push(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				shouldGroup
					? ___R$project$rome$$romejs$formatter$tokens_ts$group(right)
					: right,
			]),
		);

		return parts;
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSBindingArrayPattern.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingArrayPattern_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$builders$js$expressions$JSArrayExpression_ts$default(
				builder,
				node,
			),
			___R$project$rome$$romejs$formatter$builders$js$utils_ts$printPatternMeta(
				builder,
				node,
				node.meta,
			),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSBindingIdentifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingIdentifier_ts$default(
		builder,
		node,
	) {
		if (node.name[0] === "*") {
			// Internal name
			return "";
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSIdentifier_ts$default(
				builder,
				node,
			),
			___R$project$rome$$romejs$formatter$builders$js$utils_ts$printPatternMeta(
				builder,
				node,
				node.meta,
			),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSBindingObjectPattern.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingObjectPattern_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectExpression_ts$default(
				builder,
				node,
			),
			___R$project$rome$$romejs$formatter$builders$js$utils_ts$printPatternMeta(
				builder,
				node,
				node.meta,
			),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSBindingObjectPatternProperty.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingObjectPatternProperty_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectProperty_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSBlockStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSBlockStatement_ts$default(
		builder,
		node,
		parent,
	) {
		const hasComments =
			node.innerComments !== undefined && node.innerComments.length > 0;
		const hasContents = node.body !== undefined && node.body.length > 0;
		const hasDirectives =
			node.directives !== undefined && node.directives.length > 0;

		if (
			!hasComments &&
			!hasContents &&
			!hasDirectives &&
			(parent.type === "JSArrowFunctionExpression" ||
			parent.type === "JSClassMethod" ||
			parent.type === "JSClassPrivateMethod" ||
			parent.type === "JSDoWhileStatement" ||
			parent.type === "JSForInStatement" ||
			parent.type === "JSForOfStatement" ||
			parent.type === "JSForStatement" ||
			parent.type === "JSFunctionDeclaration" ||
			parent.type === "JSFunctionExpression" ||
			parent.type === "JSObjectMethod" ||
			parent.type === "JSSwitchStatement" ||
			parent.type === "JSWhileStatement")
		) {
			return "{}";
		}

		const tokens = ["{"];

		if (hasDirectives) {
			for (const directive of node.directives) {
				tokens.push(
					___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$hardline,
							builder.tokenize(directive, node),
						]),
					),
				);
			}
		}

		if (hasContents) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$hardline,
						builder.tokenizeStatementList(node.body, node),
					]),
				),
			);
		}

		if (hasComments) {
			tokens.push(builder.tokenizeInnerComments(node, true));
		}

		tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$hardline, "}");

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/literals/JSBooleanLiteral.ts
function ___R$project$rome$$romejs$formatter$builders$js$literals$JSBooleanLiteral_ts$default(
		builder,
		node,
	) {
		return node.value ? "true" : "false";
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSBreakStatement.ts
const ___R$project$rome$$romejs$formatter$builders$js$statements$JSBreakStatement_ts$default = ___R$project$rome$$romejs$formatter$builders$js$utils_ts$buildLabelStatementBuilder(
		"break",
	);


  // project-rome/@romejs/formatter/builders/js/expressions/JSCallExpression.ts


	function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSCallExpression_ts$default(
		builder,
		node,
	) {
		const tokens = [builder.tokenize(node.callee, node)];

		if (node.type === "JSOptionalCallExpression") {
			tokens.push("?.");
		}

		if (node.typeArguments) {
			tokens.push(builder.tokenize(node.typeArguments, node));
		}

		tokens.push(
			___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSCallExpression_ts$printArguments(
				builder,
				node,
			),
		);

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}

	function ___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSCallExpression_ts$printArguments(
		builder,
		node,
	) {
		if (node.arguments.length === 0) {
			if (
				___R$project$rome$$romejs$formatter$builders$js$comments_ts$hasInnerComments(
					node,
				)
			) {
				return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"(",
					builder.tokenizeInnerComments(node, true),
					___R$project$rome$$romejs$formatter$tokens_ts$hardline,
					")",
				]);
			} else {
				return "()";
			}
		}

		if (node.arguments.length === 1) {
			const argument = node.arguments[0];
			if (
				argument.type === "JSArrayExpression" ||
				argument.type === "JSObjectExpression" ||
				___R$project$rome$$romejs$js$ast$utils$isFunctionNode_ts$default(
					argument,
				)
			) {
				return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"(",
					builder.tokenize(argument, node),
					")",
				]);
			}
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"(",
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
						___R$project$rome$$romejs$formatter$builders$js$utils_ts$printCommaList(
							builder,
							node.arguments,
							node,
						),
					]),
				),
				___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(","),
				___R$project$rome$$romejs$formatter$tokens_ts$softline,
				")",
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSCatchClause.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSCatchClause_ts$default(
		builder,
		node,
	) {
		if (node.param) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"catch",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"(",
				builder.tokenize(node.param, node),
				") ",
				builder.tokenize(node.body, node),
			]);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"catch",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.body, node),
			]);
		}
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSClassDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = ["class"];

		if (node.id) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.id, node),
			);
		}

		tokens.push(
			builder.tokenize(node.meta, node),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"{",
		);

		if (
			___R$project$rome$$romejs$formatter$builders$js$comments_ts$hasInnerComments(
				node.meta,
			)
		) {
			tokens.push(
				builder.tokenizeInnerComments(node.meta, true),
				___R$project$rome$$romejs$formatter$tokens_ts$hardline,
			);
		}

		if (node.meta.body.length > 0) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$hardline,
							builder.tokenizeStatementList(node.meta.body, node.meta),
						]),
					),
					___R$project$rome$$romejs$formatter$tokens_ts$hardline,
				]),
			);
		}

		tokens.push("}");

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSClassExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassDeclaration_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSClassHead.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassHead_ts$default(
		builder,
		node,
	) {
		const tokens = [];
		const tokenGroups = [];

		tokens.push(builder.tokenize(node.typeParameters, node));

		if (node.superClass) {
			tokenGroups.push(
				___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
						"extends",
						___R$project$rome$$romejs$formatter$tokens_ts$space,
						builder.tokenize(node.superClass, node),
						builder.tokenize(node.superTypeParameters, node),
					]),
				),
			);
		}

		if (
			builder.options.typeAnnotations &&
			node.implements &&
			node.implements.length > 0
		) {
			tokenGroups.push(
				___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
				"implements",
				___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
							___R$project$rome$$romejs$formatter$builders$js$utils_ts$printCommaList(
								builder,
								node.implements,
								node,
							),
						]),
					),
				),
			);
		}

		if (tokenGroups.length > 0) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat(tokenGroups),
					),
				),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSClassMethod.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassMethod_ts$default(
		builder,
		node,
	) {
		const printed = ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printMethod(
			builder,
			node,
		);

		if (node.meta.static === true) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"static",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				printed,
			]);
		} else {
			return printed;
		}
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSClassPrivateMethod.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassPrivateMethod_ts$default(
		builder,
		node,
	) {
		const printed = ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printMethod(
			builder,
			node,
		);
		if (node.meta.static === true) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"static",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				printed,
			]);
		} else {
			return printed;
		}
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSClassPrivateProperty.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassPrivateProperty_ts$default(
		builder,
		node,
	) {
		const tokens = [
			builder.tokenize(node.meta, node),
			builder.tokenize(node.key, node),
		];

		if (builder.options.typeAnnotations && node.typeAnnotation) {
			tokens.push(
				":",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			);
		}

		if (node.value) {
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
			tokens.push("=");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
			tokens.push(builder.tokenize(node.value, node));
		}

		tokens.push(";");

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
		);
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSClassProperty.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassProperty_ts$default(
		builder,
		node,
	) {
		if (node.value === undefined && !builder.options.typeAnnotations) {
			// A JSClassProperty with no value is a type annotation
			return "";
		}

		const tokens = [
			builder.tokenize(node.meta, node),
			builder.tokenize(node.key, node),
		];

		if (builder.options.typeAnnotations && node.typeAnnotation) {
			tokens.push(
				":",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			);
		}

		if (node.value) {
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
			tokens.push("=");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
			tokens.push(builder.tokenize(node.value, node));
		}

		tokens.push(";");

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
		);
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSClassPropertyMeta.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSClassPropertyMeta_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (!builder.options.typeAnnotations) {
			if (node.accessibility) {
				tokens.push(node.accessibility);
			}

			if (node.readonly) {
				tokens.push(
					"readonly",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
				);
			}

			if (node.abstract) {
				tokens.push(
					"abstract",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
				);
			}
		}

		if (node.static) {
			tokens.push("static", ___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/core/JSCommentBlock.ts
function ___R$project$rome$$romejs$formatter$builders$js$core$JSCommentBlock_ts$default() {
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/formatter/builders/js/core/JSCommentLine.ts
function ___R$project$rome$$romejs$formatter$builders$js$core$JSCommentLine_ts$default() {
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSComputedMemberProperty.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSComputedMemberProperty_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.optional) {
			tokens.push("?.");
		}

		tokens.push("[", builder.tokenize(node.value, node), "]");

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/objects/JSComputedPropertyKey.ts
function ___R$project$rome$$romejs$formatter$builders$js$objects$JSComputedPropertyKey_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"[",
			builder.tokenize(node.value, node),
			"]",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSConditionalExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$default(
		builder,
		node,
		parent,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$printConditionalExpression(
			builder.tokenize(node.test, node),
			builder.tokenize(node.consequent, node),
			builder.tokenize(node.alternate, node),
			parent,
			node.consequent,
			node.alternate,
		);
	}

	function ___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$isConditionalExpression(
		node,
	) {
		return (
			node.type === "JSConditionalExpression" ||
			node.type === "TSConditionalType"
		);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$printConditionalExpression(
		test,
		consequent,
		alternate,
		parentNode,
		consequentNode,
		alternateNode,
	) {
		const printed = ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			test,
			___R$project$rome$$romejs$formatter$tokens_ts$indent(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
					"?",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$isConditionalExpression(
						consequentNode,
					)
						? consequent
						: ___R$project$rome$$romejs$formatter$tokens_ts$indent(consequent),
				]),
			),
			___R$project$rome$$romejs$formatter$tokens_ts$indent(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
					":",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$isConditionalExpression(
						alternateNode,
					)
						? alternate
						: ___R$project$rome$$romejs$formatter$tokens_ts$indent(alternate),
				]),
			),
		]);

		// Do not group nested conditional expressions. By doing so, if a conditional
		// expression breaks, the hole chain breaks.
		return ___R$$priv$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$isConditionalExpression(
			parentNode,
		)
			? printed
			: ___R$project$rome$$romejs$formatter$tokens_ts$group(printed);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSContinueStatement.ts
const ___R$project$rome$$romejs$formatter$builders$js$statements$JSContinueStatement_ts$default = ___R$project$rome$$romejs$formatter$builders$js$utils_ts$buildLabelStatementBuilder(
		"continue",
	);


  // project-rome/@romejs/formatter/builders/js/statements/JSDebuggerStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSDebuggerStatement_ts$default() {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"debugger",
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/literals/JSStringLiteral.ts
function ___R$project$rome$$romejs$formatter$builders$js$literals$JSStringLiteral_ts$default(
		builder,
		node,
		parent,
	) {
		// JSX Attribute strings have ridiculous alternate semantics, should probably be a distinct AST node
		const quotes =
			parent.type === "JSXAttribute" || node.value.includes('"') ? "'" : '"';

		const value =
			parent.type === "JSXAttribute"
				? ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$escapeXHTMLEntities(
						node.value,
					)
				: node.value;

		return ___R$project$rome$$romejs$string$escape$escapeString_ts$default(
			value,
			{quote: quotes},
		);
	}


  // project-rome/@romejs/formatter/builders/js/core/JSDirective.ts
function ___R$project$rome$$romejs$formatter$builders$js$core$JSDirective_ts$default(
		builder,
		node,
		parent,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$builders$js$literals$JSStringLiteral_ts$default(
				builder,
				node,
				parent,
			),
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSDoExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSDoExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"do",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.body, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSDoWhileStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSDoWhileStatement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"do",
					___R$project$rome$$romejs$formatter$builders$js$utils_ts$printClause(
						builder,
						node.body,
						node,
					),
				]),
			),
			node.body.type === "JSBlockStatement"
				? ___R$project$rome$$romejs$formatter$tokens_ts$space
				: ___R$project$rome$$romejs$formatter$tokens_ts$hardline,
			"while",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"(",
			___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$softline,
							builder.tokenize(node.test, node),
						]),
					),
					___R$project$rome$$romejs$formatter$tokens_ts$softline,
				]),
			),
			")",
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSEmptyStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSEmptyStatement_ts$default() {
		return ";";
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSExportAllDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportAllDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [
			"export",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
		];

		if (node.exportKind === "type") {
			if (!builder.options.typeAnnotations) {
				return "";
			}

			tokens.push("type", ___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		tokens.push(
			"*",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"from",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.source, node),
			";",
		);

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSExportLocalDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportLocalDeclaration_ts$default(
		builder,
		node,
	) {
		if (node.exportKind === "type" && !builder.options.typeAnnotations) {
			return "";
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"export",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			___R$project$rome$$romejs$formatter$builders$js$modules$JSExportLocalDeclaration_ts$printExportDeclaration(
				builder,
				node,
			),
		]);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportLocalDeclaration_ts$printExportDeclaration(
		builder,
		node,
	) {
		if (node.declaration) {
			const tokens = [builder.tokenize(node.declaration, node)];
			if (
				!___R$project$rome$$romejs$js$ast$utils$isDeclaration_ts$default(
					node.declaration,
				)
			) {
				tokens.push(";");
			}
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		} else {
			if (node.type !== "JSExportLocalDeclaration") {
				throw new Error("Expected JSExportLocalDeclaration");
			}

			const {specifiers} = node;
			if (specifiers === undefined) {
				throw new Error("Expected specifiers since there was no declaration");
			}

			const tokens = [];

			if (node.exportKind === "type") {
				tokens.push("type", ___R$project$rome$$romejs$formatter$tokens_ts$space);
			}

			if (specifiers.length === 0) {
				if (
					___R$project$rome$$romejs$formatter$builders$js$comments_ts$hasInnerComments(
						node,
					)
				) {
					tokens.push(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							"{",
							builder.tokenizeInnerComments(node, true),
							___R$project$rome$$romejs$formatter$tokens_ts$hardline,
							"}",
						]),
					);
				} else {
					tokens.push("{}");
				}
			} else {
				tokens.push(
					___R$project$rome$$romejs$formatter$tokens_ts$group(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							"{",
							___R$project$rome$$romejs$formatter$tokens_ts$indent(
								___R$project$rome$$romejs$formatter$tokens_ts$concat([
									___R$project$rome$$romejs$formatter$tokens_ts$softline,
									___R$project$rome$$romejs$formatter$builders$js$utils_ts$printCommaList(
										builder,
										specifiers,
										node,
									),
								]),
							),
							___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(","),
							___R$project$rome$$romejs$formatter$tokens_ts$softline,
							"}",
						]),
					),
				);
			}

			tokens.push(";");

			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		}
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSExportDefaultDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportDefaultDeclaration_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"export",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"default",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			___R$project$rome$$romejs$formatter$builders$js$modules$JSExportLocalDeclaration_ts$printExportDeclaration(
				builder,
				node,
			),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSExportDefaultSpecifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportDefaultSpecifier_ts$default(
		builder,
		node,
	) {
		return builder.tokenize(node.exported, node);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSImportDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSImportDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [
			"import",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
		];

		if (node.importKind === "type" || node.importKind === "typeof") {
			tokens.push(node.importKind);
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		const {namedSpecifiers, defaultSpecifier, namespaceSpecifier} = node;

		if (
			namedSpecifiers.length > 0 ||
			namespaceSpecifier !== undefined ||
			defaultSpecifier !== undefined
		) {
			tokens.push(
				___R$project$rome$$romejs$formatter$builders$js$modules$JSImportDeclaration_ts$printModuleSpecifiers(
					builder,
					node,
				),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"from",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			);
		}

		tokens.push(builder.tokenize(node.source, node), ";");

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
		);
	}

	function ___R$project$rome$$romejs$formatter$builders$js$modules$JSImportDeclaration_ts$printModuleSpecifiers(
		builder,
		node,
	) {
		const {namedSpecifiers, defaultSpecifier, namespaceSpecifier} = node;

		const groups = [];

		if (defaultSpecifier !== undefined) {
			groups.push(builder.tokenize(node.defaultSpecifier, node));
		}

		if (namespaceSpecifier !== undefined) {
			groups.push(builder.tokenize(node.namespaceSpecifier, node));
		}

		if (namedSpecifiers.length > 0) {
			const specifiers = [];

			for (const specifier of namedSpecifiers) {
				specifiers.push(builder.tokenize(specifier, node));
			}

			if (specifiers.length === 1) {
				// Do not create insert softline tokens when there is a single specifier
				// in order to keep the braces on the same line.
				groups.push(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						"{",
						specifiers[0],
						"}",
					]),
				);
			} else {
				groups.push(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						"{",
						___R$project$rome$$romejs$formatter$tokens_ts$indent(
							___R$project$rome$$romejs$formatter$tokens_ts$concat([
								___R$project$rome$$romejs$formatter$tokens_ts$softline,
								___R$project$rome$$romejs$formatter$tokens_ts$join(
									___R$project$rome$$romejs$formatter$tokens_ts$concat([
										",",
										___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
									]),
									specifiers,
								),
							]),
						),
						___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(","),
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
						"}",
					]),
				);
			}
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$join(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				",",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			]),
			groups,
		);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSExportExternalDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportExternalDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [
			"export",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
		];

		if (node.exportKind === "type") {
			if (!builder.options.typeAnnotations) {
				return "";
			}

			tokens.push("type", ___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		tokens.push(
			___R$project$rome$$romejs$formatter$builders$js$modules$JSImportDeclaration_ts$printModuleSpecifiers(
				builder,
				node,
			),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"from",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.source, node),
			";",
		);

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
		);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSExportLocalSpecifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportLocalSpecifier_ts$default(
		builder,
		node,
	) {
		const tokens = [builder.tokenize(node.local, node)];

		if (node.local.name === node.exported.name) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"as",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.exported, node),
			]);
		}
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSExportExternalSpecifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportExternalSpecifier_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportLocalSpecifier_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSExportNamespaceSpecifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSExportNamespaceSpecifier_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"*",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"as",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.exported, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSExpressionStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSExpressionStatement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.expression, node),
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSForInStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSForInStatement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"for",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"(",
				builder.tokenize(node.left, node),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"in",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.right, node),
				")",
				___R$project$rome$$romejs$formatter$builders$js$utils_ts$printClause(
					builder,
					node.body,
					node,
				),
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSForOfStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSForOfStatement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"for",
				node.await
					? ___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$space,
							"await",
						])
					: "",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"(",
				builder.tokenize(node.left, node),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"of",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.right, node),
				")",
				___R$project$rome$$romejs$formatter$builders$js$utils_ts$printClause(
					builder,
					node.body,
					node,
				),
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSForStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSForStatement_ts$default(
		builder,
		node,
	) {
		const body = ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printClause(
			builder,
			node.body,
			node,
		);

		if (!node.init && !node.test && !node.update) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"for",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					"(;;)",
					body,
				]),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"for",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"(",
				___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$indent(
							___R$project$rome$$romejs$formatter$tokens_ts$concat([
								___R$project$rome$$romejs$formatter$tokens_ts$softline,
								builder.tokenize(node.init, node),
								";",
								___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
								builder.tokenize(node.test, node),
								";",
								___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
								builder.tokenize(node.update, node),
							]),
						),
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
					]),
				),
				")",
				body,
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSFunctionExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSFunctionExpression_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.head.async === true) {
			tokens.push("async");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		tokens.push("function");

		if (node.head.generator === true) {
			tokens.push("*");
		}

		if (node.id) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.id, node),
			);
		}

		tokens.push(
			builder.tokenize(node.head, node),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.body, node),
		);

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSFunctionDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSFunctionDeclaration_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$expressions$JSFunctionExpression_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSFunctionHead.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSFunctionHead_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (builder.options.typeAnnotations && node.typeParameters) {
			tokens.push(builder.tokenize(node.typeParameters, node));
		}

		const printedParameters = ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printBindingPatternParams(
			builder,
			node,
			node.params,
			node.rest,
		);

		let printedReturnType = "";
		if (builder.options.typeAnnotations) {
			if (node.returnType) {
				const tokens = [":"];
				tokens.push(
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					builder.tokenize(node.returnType, node),
				);
				printedReturnType = ___R$project$rome$$romejs$formatter$tokens_ts$concat(
					tokens,
				);
			}
		}

		tokens.push(
			___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					printedParameters,
					printedReturnType,
				]),
			),
		);

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSIfStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSIfStatement_ts$default(
		builder,
		node,
	) {
		const tokens = [
			___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"if",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					"(",
					___R$project$rome$$romejs$formatter$tokens_ts$group(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$indent(
								___R$project$rome$$romejs$formatter$tokens_ts$concat([
									___R$project$rome$$romejs$formatter$tokens_ts$softline,
									builder.tokenize(node.test, node),
								]),
							),
							___R$project$rome$$romejs$formatter$tokens_ts$softline,
						]),
					),
					")",
				]),
			),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
		];

		let needsBlock = false;
		if (node.alternate) {
			needsBlock =
				___R$$priv$project$rome$$romejs$formatter$builders$js$statements$JSIfStatement_ts$getLastStatement(
					node.consequent,
				).type === "JSIfStatement";
		}

		if (needsBlock) {
			tokens.push(
				"{",
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$hardline,
						builder.tokenize(node.consequent, node),
					]),
				),
				___R$project$rome$$romejs$formatter$tokens_ts$hardline,
				"}",
			);
		} else {
			tokens.push(builder.tokenize(node.consequent, node));
		}

		if (node.alternate) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"else",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.alternate, node),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}

	// Recursively get the last statement.
	function ___R$$priv$project$rome$$romejs$formatter$builders$js$statements$JSIfStatement_ts$getLastStatement(
		statement,
	) {
		if (
			(statement.type === "JSWithStatement" ||
			statement.type === "JSWhileStatement" ||
			statement.type === "JSDoWhileStatement" ||
			statement.type === "JSForOfStatement" ||
			statement.type === "JSForInStatement" ||
			statement.type === "JSForStatement") &&
			___R$project$rome$$romejs$js$ast$utils$isStatement_ts$default(
				statement.body,
			)
		) {
			return ___R$$priv$project$rome$$romejs$formatter$builders$js$statements$JSIfStatement_ts$getLastStatement(
				statement.body,
			);
		} else {
			return statement;
		}
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSImportCall.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSImportCall_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"import(",
			builder.tokenize(node.argument, node),
			")",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSImportDefaultSpecifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSImportDefaultSpecifier_ts$default(
		builder,
		node,
	) {
		return builder.tokenize(node.local.name, node);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSImportNamespaceSpecifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSImportNamespaceSpecifier_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"*",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"as",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.local.name, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSImportSpecifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSImportSpecifier_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		tokens.push(builder.tokenize(node.imported, node));

		if (node.local.name.name !== node.imported.name) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"as",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.local.name, node),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/modules/JSImportSpecifierLocal.ts
function ___R$project$rome$$romejs$formatter$builders$js$modules$JSImportSpecifierLocal_ts$default(
		builder,
		node,
	) {
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/formatter/builders/js/core/JSInterpreterDirective.ts
function ___R$project$rome$$romejs$formatter$builders$js$core$JSInterpreterDirective_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"#!" + node.value,
			___R$project$rome$$romejs$formatter$tokens_ts$hardline,
			___R$project$rome$$romejs$formatter$tokens_ts$hardline,
		]);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSLabeledStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSLabeledStatement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.label, node),
			":",
			node.body.type === "JSEmptyStatement"
				? ";"
				: ___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$space,
						builder.tokenize(node.body, node),
					]),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSLogicalExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSLogicalExpression_ts$default(
		builder,
		node,
		parent,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$expressions$JSBinaryExpression_ts$default(
			builder,
			node,
			parent,
		);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSMemberExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSMemberExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.object, node),
			builder.tokenize(node.property, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSMetaProperty.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSMetaProperty_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.meta, node),
			".",
			builder.tokenize(node.property, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/temp/JSMockParent.ts
function ___R$project$rome$$romejs$formatter$builders$js$temp$JSMockParent_ts$default() {
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSNewExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSNewExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"new",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			___R$project$rome$$romejs$formatter$builders$js$expressions$JSCallExpression_ts$default(
				builder,
				node,
			),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/literals/JSNullLiteral.ts
function ___R$project$rome$$romejs$formatter$builders$js$literals$JSNullLiteral_ts$default() {
		return "null";
	}


  // project-rome/@romejs/formatter/builders/js/literals/JSNumericLiteral.ts
function ___R$project$rome$$romejs$formatter$builders$js$literals$JSNumericLiteral_ts$default(
		builder,
		node,
	) {
		if (builder.options.format === "pretty") {
			if (node.format === undefined) {
				return ___R$project$rome$$romejs$string$utils$humanizeNumber_ts$humanizeNumber(
					node.value,
				);
			} else {
				switch (node.format) {
					case "binary":
						return "0b" + node.value.toString(2);
					case "octal":
						return "0o" + node.value.toString(8);
					case "hex":
						return "0x" + node.value.toString(16);
				}
			}
		} else {
			return String(node.value);
		}
	}


  // project-rome/@romejs/formatter/builders/js/objects/JSObjectMethod.ts
function ___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectMethod_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printMethod(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSOptionalCallExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSOptionalCallExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$expressions$JSCallExpression_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/patterns/JSPatternMeta.ts
function ___R$project$rome$$romejs$formatter$builders$js$patterns$JSPatternMeta_ts$default() {
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/formatter/builders/js/classes/JSPrivateName.ts
function ___R$project$rome$$romejs$formatter$builders$js$classes$JSPrivateName_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"#",
			builder.tokenize(node.id, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSReferenceIdentifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSReferenceIdentifier_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSIdentifier_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpAlternation.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpAlternation_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.left, node),
			"|",
			builder.tokenize(node.right, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpAnyCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpAnyCharacter_ts$default() {
		return ".";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpCharacter_ts$default(
		builder,
		node,
		parent,
	) {
		const isInCharSet = parent.type === "JSRegExpCharSet";
		if (isInCharSet) {
			switch (node.value) {
				case "$":
				case "^":
				case ".":
				case "?":
				case "{":
				case "}":
				case "+":
				case "*":
				case "[":
				case "]":
				case "(":
				case ")":
				case "|":
					return node.value;

				case "-":
					return "\\-";
			}
		}

		switch (node.value) {
			case "\t":
				return "\\t";

			case "\n":
				return "\\n";

			case "\r":
				return "\\r";

			case "\x0b":
				return "\\v";

			case "\f":
				return "\\f";

			case "\b":
				return "\\b";

			case "/":
			case "\\":
			case "$":
			case "^":
			case ".":
			case "?":
			case "{":
			case "}":
			case "+":
			case "*":
			case "[":
			case "]":
			case "(":
			case ")":
			case "|":
				return "\\" + node.value;

			default:
				return ___R$project$rome$$romejs$string$escape$escapeString_ts$default(
					node.value,
					{json: true, unicodeOnly: true},
				);
		}
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpCharSet.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpCharSet_ts$default(
		builder,
		node,
	) {
		const tokens = ["["];

		if (node.invert) {
			tokens.push("^");
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			___R$project$rome$$romejs$formatter$tokens_ts$concat(
				node.body.map((item) => builder.tokenize(item, node)),
			),
			"]",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpCharSetRange.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpCharSetRange_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.start, node),
			"-",
			builder.tokenize(node.end, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpControlCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpControlCharacter_ts$default() {
		throw new Error("unimplemented");
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpDigitCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpDigitCharacter_ts$default() {
		return "\\d";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpEndCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpEndCharacter_ts$default() {
		return "$";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpGroupCapture.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpGroupCapture_ts$default(
		builder,
		node,
	) {
		const tokens = ["("];

		if (node.name !== undefined) {
			tokens.push("?<");
			tokens.push(node.name);
			tokens.push(">");
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			builder.tokenize(node.expression, node),
			")",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpGroupNonCapture.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpGroupNonCapture_ts$default(
		builder,
		node,
	) {
		const tokens = ["(?"];

		switch (node.kind) {
			case "positive-lookahead": {
				tokens.push("=");
				break;
			}

			case "negative-lookahead": {
				tokens.push("!");
				break;
			}

			case "positive-lookbehind": {
				tokens.push("<!");
				break;
			}

			case "negative-lookbehind": {
				tokens.push("<=");
				break;
			}

			default: {
				tokens.push(":");
				break;
			}
		}

		tokens.push(builder.tokenize(node.expression, node));
		tokens.push(")");

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/literals/JSRegExpLiteral.ts
function ___R$project$rome$$romejs$formatter$builders$js$literals$JSRegExpLiteral_ts$default(
		builder,
		node,
	) {
		const flags = [];

		if (node.global === true) {
			flags.push("g");
		}

		if (node.multiline === true) {
			flags.push("m");
		}

		if (node.sticky === true) {
			flags.push("y");
		}

		if (node.insensitive === true) {
			flags.push("i");
		}

		if (node.noDotNewline === true) {
			flags.push("s");
		}

		if (node.unicode === true) {
			flags.push("u");
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"/",
			builder.tokenize(node.expression, node),
			"/",
			flags.join(""),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpNamedBackReference.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNamedBackReference_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"\\k",
			"<",
			node.name,
			">",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpNonDigitCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNonDigitCharacter_ts$default() {
		return "\\D";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpNonWhiteSpaceCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNonWhiteSpaceCharacter_ts$default() {
		return "\\S";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpNonWordBoundaryCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNonWordBoundaryCharacter_ts$default() {
		return "\\B";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpNonWordCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNonWordCharacter_ts$default() {
		return "\\W";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpNumericBackReference.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNumericBackReference_ts$default(
		builder,
		node,
	) {
		return "\\" + node.value;
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpQuantified.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpQuantified_ts$default(
		builder,
		node,
	) {
		const tokens = [builder.tokenize(node.target, node)];

		if (node.min === 0 && node.max === 1) {
			tokens.push("?");
		} else if (node.min === 0 && node.max === undefined) {
			tokens.push("*");
		} else if (node.min === 1 && node.max === undefined) {
			tokens.push("+");
		} else {
			tokens.push("{");

			tokens.push(String(node.min));

			if (node.min !== node.max) {
				tokens.push(",");
				if (node.max !== undefined) {
					tokens.push(String(node.max));
				}
			}

			tokens.push("}");
		}

		if (node.lazy) {
			tokens.push("?");
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpStartCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpStartCharacter_ts$default() {
		return "^";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpSubExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpSubExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(
			node.body.map((item) => builder.tokenize(item, node)),
		);
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpWhiteSpaceCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpWhiteSpaceCharacter_ts$default() {
		return "\\s";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpWordBoundaryCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpWordBoundaryCharacter_ts$default() {
		return "\\b";
	}


  // project-rome/@romejs/formatter/builders/js/regex/JSRegExpWordCharacter.ts
function ___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpWordCharacter_ts$default() {
		return "\\w";
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSReturnStatement.ts
const ___R$project$rome$$romejs$formatter$builders$js$statements$JSReturnStatement_ts$default = ___R$project$rome$$romejs$formatter$builders$js$utils_ts$buildThrowAndReturnStatementBuilder(
		"return",
	);


  // project-rome/@romejs/formatter/builders/js/core/JSRoot.ts
function ___R$project$rome$$romejs$formatter$builders$js$core$JSRoot_ts$default(
		builder,
		node,
	) {
		const tokens = [builder.tokenizeStatementList(node.directives, node)];

		if (node.directives && node.directives.length) {
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$hardline);
		}

		if (node.interpreter && builder.options.allowInterpreterDirective) {
			tokens.push(builder.tokenize(node.interpreter, node));
		}

		tokens.push(
			builder.tokenizeInnerComments(node, false),
			builder.tokenizeStatementList(node.body, node),
		);

		tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$hardline);

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSSequenceExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSSequenceExpression_ts$default(
		builder,
		node,
		parent,
	) {
		if (
			parent.type === "JSExpressionStatement" ||
			parent.type === "JSForStatement" ||
			parent.type === "JSSequenceExpression"
		) {
			// Indent expressions after the first to improve the readability
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat(
					node.expressions.map((expr, i) =>
						i === 0
							? builder.tokenize(expr, node)
							: ___R$project$rome$$romejs$formatter$tokens_ts$concat([
									",",
									___R$project$rome$$romejs$formatter$tokens_ts$indent(
										___R$project$rome$$romejs$formatter$tokens_ts$concat([
											___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
											builder.tokenize(expr, node),
										]),
									),
								])
					),
				),
			);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$join(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						",",
						___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
					]),
					node.expressions.map((expr) => builder.tokenize(expr, node)),
				),
			);
		}
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSSpreadElement.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSSpreadElement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"...",
			builder.tokenize(node.argument, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/objects/JSSpreadProperty.ts
function ___R$project$rome$$romejs$formatter$builders$js$objects$JSSpreadProperty_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"...",
			builder.tokenize(node.argument, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSStaticMemberProperty.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSStaticMemberProperty_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.optional) {
			tokens.push("?");
		}

		tokens.push(".", builder.tokenize(node.value, node));

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/objects/JSStaticPropertyKey.ts
function ___R$project$rome$$romejs$formatter$builders$js$objects$JSStaticPropertyKey_ts$default(
		builder,
		node,
	) {
		return builder.tokenize(node.value, node);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSSuper.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSSuper_ts$default() {
		return "super";
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSSwitchCase.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSSwitchCase_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.test) {
			tokens.push(
				"case",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.test, node),
				":",
			);
		} else {
			tokens.push("default", ":");
		}

		const {consequent} = node;
		if (consequent.length === 1 && consequent[0].type === "JSBlockStatement") {
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
			tokens.push(builder.tokenize(consequent[0], node));
		} else if (consequent.length > 0) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$hardline,
						builder.tokenizeStatementList(consequent, node),
					]),
				),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSSwitchStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSSwitchStatement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"switch",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					"(",
					___R$project$rome$$romejs$formatter$tokens_ts$group(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$indent(
								___R$project$rome$$romejs$formatter$tokens_ts$concat([
									___R$project$rome$$romejs$formatter$tokens_ts$softline,
									builder.tokenize(node.discriminant, node),
								]),
							),
							___R$project$rome$$romejs$formatter$tokens_ts$softline,
						]),
					),
					")",
				]),
			),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"{",
			node.cases.length > 0
				? ___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$hardline,
							builder.tokenizeStatementList(node.cases, node),
						]),
					)
				: "",
			___R$project$rome$$romejs$formatter$tokens_ts$hardline,
			"}",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSTaggedTemplateExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSTaggedTemplateExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.tag, node),
			builder.tokenize(node.quasi, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSTemplateElement.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSTemplateElement_ts$default(
		builder,
		node,
		parent,
	) {
		parent = ___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts$jsTemplateLiteral.assert(
			parent,
		);

		const isFirst = parent.quasis[0] === node;
		const isLast = parent.quasis[parent.quasis.length - 1] === node;

		const value = (isFirst ? "`" : "}") + node.raw + (isLast ? "`" : "${");
		return value;
	}


  // project-rome/@romejs/formatter/builders/js/literals/JSTemplateLiteral.ts
function ___R$project$rome$$romejs$formatter$builders$js$literals$JSTemplateLiteral_ts$default(
		builder,
		node,
	) {
		const tokens = [];
		const quasis = node.quasis;

		for (let i = 0; i < quasis.length; i++) {
			tokens.push(builder.tokenize(quasis[i], node));

			if (i + 1 < quasis.length) {
				tokens.push(builder.tokenize(node.expressions[i], node));
			}
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSThisExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSThisExpression_ts$default() {
		return "this";
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSThrowStatement.ts
const ___R$project$rome$$romejs$formatter$builders$js$statements$JSThrowStatement_ts$default = ___R$project$rome$$romejs$formatter$builders$js$utils_ts$buildThrowAndReturnStatementBuilder(
		"throw",
	);


  // project-rome/@romejs/formatter/builders/js/statements/JSTryStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSTryStatement_ts$default(
		builder,
		node,
	) {
		const tokens = [
			"try",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.block, node),
		];

		if (node.handler) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.handler, node),
			);
		}

		if (node.finalizer) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"finally",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.finalizer, node),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSUnaryExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSUnaryExpression_ts$default(
		builder,
		node,
	) {
		if (
			node.operator === "void" ||
			node.operator === "delete" ||
			node.operator === "typeof"
		) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				node.operator,
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.argument, node),
			]);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				node.operator,
				builder.tokenize(node.argument, node),
			]);
		}
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSUpdateExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSUpdateExpression_ts$default(
		builder,
		node,
	) {
		if (node.prefix === true) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				node.operator,
				builder.tokenize(node.argument, node),
			]);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				builder.tokenize(node.argument, node),
				node.operator,
			]);
		}
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSVariableDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSVariableDeclaration_ts$default(
		builder,
		node,
	) {
		const declarations = node.declarations.map((declaration) =>
			builder.tokenize(declaration, node)
		);

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				node.kind,
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				declarations.shift(),
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat(
						declarations.map((declaration) =>
							___R$project$rome$$romejs$formatter$tokens_ts$concat([
								",",
								___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
								declaration,
							])
						),
					),
				),
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSVariableDeclarationStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSVariableDeclarationStatement_ts$default(
		builder,
		node,
	) {
		if (node.declare === true && !builder.options.typeAnnotations) {
			return "";
		}

		const tokens = [];

		if (node.declare) {
			tokens.push(
				"declare",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			builder.tokenize(node.declaration, node),
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/auxiliary/JSVariableDeclarator.ts
function ___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSVariableDeclarator_ts$default(
		builder,
		node,
	) {
		if (node.init) {
			return ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printAssignment(
				builder,
				node,
				node.id,
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					"=",
				]),
				node.init,
			);
		} else {
			return builder.tokenize(node.id, node);
		}
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSWhileStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSWhileStatement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"while",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"(",
				___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$indent(
							___R$project$rome$$romejs$formatter$tokens_ts$concat([
								___R$project$rome$$romejs$formatter$tokens_ts$softline,
								builder.tokenize(node.test, node),
							]),
						),
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
					]),
				),
				")",
				___R$project$rome$$romejs$formatter$builders$js$utils_ts$printClause(
					builder,
					node.body,
					node,
				),
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/statements/JSWithStatement.ts
function ___R$project$rome$$romejs$formatter$builders$js$statements$JSWithStatement_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"with",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"(",
			builder.tokenize(node.object, node),
			")",
			___R$project$rome$$romejs$formatter$builders$js$utils_ts$printClause(
				builder,
				node.body,
				node,
			),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXAttribute.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXAttribute_ts$default(
		builder,
		node,
	) {
		const tokens = [builder.tokenize(node.name, node)];

		if (node.value) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
				"=",
				builder.tokenize(node.value, node),
			]);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		}
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXElement.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXElement_ts$default(
		builder,
		node,
	) {
		const tokens = [
			"<",
			builder.tokenize(node.name, node),
			builder.tokenize(node.typeArguments, node),
		];

		if (node.attributes.length > 0) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				___R$project$rome$$romejs$formatter$tokens_ts$join(
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
					node.attributes.map((attr) => builder.tokenize(attr, node)),
				),
			);
		}

		if (node.selfClosing === true && node.children.length === 0) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					"/>",
				]),
			);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				___R$project$rome$$romejs$formatter$tokens_ts$group(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
						">",
					]),
				),
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat(
						node.children.map((child) => builder.tokenize(child, node)),
					),
				),
				"</",
				builder.tokenize(node.name, node),
				">",
			]);
		}
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXEmptyExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXEmptyExpression_ts$default(
		builder,
		node,
	) {
		return builder.tokenizeInnerComments(node, false);
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXExpressionContainer.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXExpressionContainer_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"{",
			builder.tokenize(node.expression, node),
			"}",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXFragment.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXFragment_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"<>",
			___R$project$rome$$romejs$formatter$tokens_ts$indent(
				___R$project$rome$$romejs$formatter$tokens_ts$concat(
					node.children.map((child) => builder.tokenize(child, node)),
				),
			),
			"</>",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXIdentifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXIdentifier_ts$default(
		builder,
		node,
	) {
		return node.name;
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXMemberExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXMemberExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.object, node),
			".",
			builder.tokenize(node.property, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXNamespacedName.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXNamespacedName_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.namespace, node),
			":",
			builder.tokenize(node.name, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXReferenceIdentifier.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXReferenceIdentifier_ts$default(
		builder,
		node,
	) {
		return node.name;
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXSpreadAttribute.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXSpreadAttribute_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"{",
			"...",
			builder.tokenize(node.argument, node),
			"}",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXSpreadChild.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXSpreadChild_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"{",
			"...",
			builder.tokenize(node.expression, node),
			"}",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/jsx/JSXText.ts
function ___R$project$rome$$romejs$formatter$builders$js$jsx$JSXText_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$js$parser$xhtmlEntities_ts$escapeXHTMLEntities(
			node.value,
		);
	}


  // project-rome/@romejs/formatter/builders/js/expressions/JSYieldExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$expressions$JSYieldExpression_ts$default(
		builder,
		node,
	) {
		const tokens = ["yield"];

		if (node.delegate === true) {
			tokens.push("*");
		}

		if (node.argument) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.argument, node),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSAnyKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSAnyKeywordTypeAnnotation_ts$default() {
		return "any";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSArrayType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSArrayType_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.elementType, node),
			"[]",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSAsExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSAsExpression_ts$default(
		builder,
		node,
	) {
		if (builder.options.typeAnnotations) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				builder.tokenize(node.expression, node),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"as",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			]);
		} else {
			return builder.tokenize(node.expression, node);
		}
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSAssignmentAsExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSAssignmentAsExpression_ts$default(
		builder,
		node,
	) {
		if (builder.options.typeAnnotations) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				builder.tokenize(node.expression, node),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"as",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			]);
		} else {
			return builder.tokenize(node.expression, node);
		}
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSAssignmentNonNullExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSAssignmentNonNullExpression_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.expression, node),
			"!",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSAssignmentTypeAssertion.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSAssignmentTypeAssertion_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"<",
			builder.tokenize(node.typeAnnotation, node),
			">",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.expression, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSBigIntKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSBigIntKeywordTypeAnnotation_ts$default() {
		return "bigint";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSBooleanKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSBooleanKeywordTypeAnnotation_ts$default() {
		return "boolean";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSBooleanLiteralTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSBooleanLiteralTypeAnnotation_ts$default(
		builder,
		node,
	) {
		return node.value ? "true" : "false";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSCallSignatureDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSCallSignatureDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [builder.tokenize(node.meta, node)];

		if (node.typeAnnotation) {
			tokens.push(
				":",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			);
		}

		tokens.push(";");

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSConditionalType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSConditionalType_ts$default(
		builder,
		node,
		parent,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$printConditionalExpression(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				builder.tokenize(node.checkType, node),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"extends",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.extendsType, node),
			]),
			builder.tokenize(node.trueType, node),
			builder.tokenize(node.falseType, node),
			parent,
			node.trueType,
			node.falseType,
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSConstructorType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSConstructorType_ts$default(
		builder,
		node,
	) {
		const tokens = [
			"new",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.meta, node),
		];

		if (node.typeAnnotation) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"=>",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSConstructSignatureDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSConstructSignatureDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [
			"new",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.meta, node),
		];

		if (node.typeAnnotation) {
			tokens.push(
				":",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			);
		}

		tokens.push(";");

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSDeclareFunction.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSDeclareFunction_ts$default(
		builder,
		node,
	) {
		let tokens = [];

		if (node.declare) {
			tokens.push(
				"declare",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			"function",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.id, node),
			builder.tokenize(node.head, node),
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSDeclareMethod.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSDeclareMethod_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.meta, node),
			builder.tokenize(node.key, node),
			___R$project$rome$$romejs$formatter$builders$js$utils_ts$printMethod(
				builder,
				node,
			),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSEmptyKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSEmptyKeywordTypeAnnotation_ts$default() {
		return "empty";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSEnumDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSEnumDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.declare) {
			tokens.push(
				"declare",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			);
		}

		if (node.const) {
			tokens.push("const", ___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		tokens.push(
			"enum",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.id, node),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			___R$project$rome$$romejs$formatter$builders$js$utils_ts$printTSBraced(
				builder,
				node,
				node.members,
			),
		);

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSEnumMember.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSEnumMember_ts$default(
		builder,
		node,
	) {
		const tokens = [builder.tokenize(node.id, node)];

		if (node.initializer) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"=",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.initializer, node),
			);
		}

		tokens.push(",");

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSExportAssignment.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSExportAssignment_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"export",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"=",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.expression, node),
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSExpressionWithTypeArguments.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSExpressionWithTypeArguments_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.expression, node),
			builder.tokenize(node.typeParameters, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSExternalModuleReference.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSExternalModuleReference_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"require(",
			builder.tokenize(node.expression, node),
			")",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSFunctionType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSFunctionType_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				builder.tokenize(node.meta, node),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"=>",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSImportEqualsDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSImportEqualsDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [];
		if (node.isExport) {
			tokens.push("export");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		tokens.push(
			"import",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.id, node),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"=",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.moduleReference, node),
			";",
		);

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSImportType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSImportType_ts$default(
		builder,
		node,
	) {
		const tokens = ["import(", builder.tokenize(node.argument, node), ")"];

		if (node.qualifier) {
			tokens.push(".", builder.tokenize(node.qualifier, node));
		}

		if (node.typeParameters) {
			tokens.push(builder.tokenize(node.typeParameters, node));
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSIndexedAccessType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSIndexedAccessType_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.objectType, node),
			"[",
			builder.tokenize(node.indexType, node),
			"]",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSIndexSignature.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSIndexSignature_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.readonly) {
			tokens.push("readonly");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			"[",
			builder.tokenize(node.key, node),
			"]",
			":",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.typeAnnotation, node),
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSInferType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSInferType_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"infer",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.typeParameter, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSInterfaceBody.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSInterfaceBody_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printTSBraced(
			builder,
			node,
			node.body,
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSInterfaceDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSInterfaceDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.declare) {
			tokens.push(
				"declare",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			);
		}

		tokens.push(
			"interface",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.id, node),
			builder.tokenize(node.typeParameters, node),
		);

		if (node.extends) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"extends",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				___R$project$rome$$romejs$formatter$builders$js$utils_ts$printCommaList(
					builder,
					node.extends,
					node,
				),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.body, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSIntersectionTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSIntersectionTypeAnnotation_ts$default(
		builder,
		node,
	) {
		const parts = [];
		let shouldIndent = false;
		let previous;

		for (let i = 0; i < node.types.length; i++) {
			const type = node.types[i];
			const printed = builder.tokenize(type, node);

			if (previous === undefined) {
				parts.push(printed);
			} else if (
				___R$$priv$project$rome$$romejs$formatter$builders$js$typescript$TSIntersectionTypeAnnotation_ts$isObjectType(
					previous,
				) &&
				___R$$priv$project$rome$$romejs$formatter$builders$js$typescript$TSIntersectionTypeAnnotation_ts$isObjectType(
					type,
				)
			) {
				//   let foo: {
				//     a: string;
				//     b: string;
				//   } & {
				//     c: string;
				//     d: string;
				//   };
				parts.push(
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					"&",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					shouldIndent
						? ___R$project$rome$$romejs$formatter$tokens_ts$indent(printed)
						: printed,
				);
			} else if (
				!___R$$priv$project$rome$$romejs$formatter$builders$js$typescript$TSIntersectionTypeAnnotation_ts$isObjectType(
					previous,
				) &&
				!___R$$priv$project$rome$$romejs$formatter$builders$js$typescript$TSIntersectionTypeAnnotation_ts$isObjectType(
					type,
				)
			) {
				//   let foo: XXXX &
				//     YYYY &&
				//     ZZZZ;
				parts.push(
					___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$space,
							"&",
							___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
							printed,
						]),
					),
				);
			} else {
				//   let z: AAA & {
				//     a: string;
				//     b: string;
				//   } & BBB &
				//     CCC & {
				//       c: string;
				//       d: string;
				//     };
				if (i > 1) {
					shouldIndent = true;
				}

				parts.push(
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					"&",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
					shouldIndent
						? ___R$project$rome$$romejs$formatter$tokens_ts$indent(printed)
						: printed,
				);
			}

			previous = type;
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(parts),
		);
	}

	function ___R$$priv$project$rome$$romejs$formatter$builders$js$typescript$TSIntersectionTypeAnnotation_ts$isObjectType(
		node,
	) {
		return node.type === "TSMappedType" || node.type === "TSTypeLiteral";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSMappedType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSMappedType_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.readonly) {
			tokens.push(
				___R$$priv$project$rome$$romejs$formatter$builders$js$typescript$TSMappedType_ts$tokenIfPlusMinus(
					builder,
					node.readonly,
				),
				"readonly",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			);
		}

		const {typeParameter} = node;
		tokens.push(
			"[",
			typeParameter.name,
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"in",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(typeParameter.constraint, typeParameter),
			"]",
		);

		if (node.optional) {
			tokens.push(
				___R$$priv$project$rome$$romejs$formatter$builders$js$typescript$TSMappedType_ts$tokenIfPlusMinus(
					builder,
					node.optional,
				),
				"?",
			);
		}

		if (node.typeAnnotation) {
			tokens.push(
				":",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"{",
				___R$project$rome$$romejs$formatter$tokens_ts$indent(
					___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$softline,
						___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
					]),
				),
				___R$project$rome$$romejs$formatter$tokens_ts$softline,
				"}",
			]),
		);
	}

	function ___R$$priv$project$rome$$romejs$formatter$builders$js$typescript$TSMappedType_ts$tokenIfPlusMinus(
		builder,
		token,
	) {
		switch (token) {
			case "+":
			case "-":
				return token;

			default:
				return "";
		}
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSMethodSignature.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSMethodSignature_ts$default(
		builder,
		node,
	) {
		const tokens = [
			builder.tokenize(node.key, node),
			builder.tokenize(node.meta, node),
		];

		if (node.returnType) {
			tokens.push(":");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
			tokens.push(builder.tokenize(node.returnType, node));
		}

		tokens.push(";");

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSMixedKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSMixedKeywordTypeAnnotation_ts$default() {
		return "mixed";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSModuleBlock.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSModuleBlock_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"{",
			___R$project$rome$$romejs$formatter$tokens_ts$indent(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$hardline,
					builder.tokenizeStatementList(node.body, node),
				]),
			),
			___R$project$rome$$romejs$formatter$tokens_ts$hardline,
			"}",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSModuleDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSModuleDeclaration_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.declare) {
			tokens.push("declare");
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		if (!node.global) {
			tokens.push(
				node.id.type === "JSBindingIdentifier" ? "namespace" : "module",
			);
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$space);
		}

		tokens.push(builder.tokenize(node.id, node));

		if (!node.body) {
			tokens.push(";");
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		}

		let body = node.body;
		while (body !== undefined && body.type === "TSModuleDeclaration") {
			tokens.push(".", builder.tokenize(body.id, body));
			body = body.body;
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(body, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSNamespaceExportDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSNamespaceExportDeclaration_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"export",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"as",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			"namespace",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.id, node),
			";",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSNeverKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSNeverKeywordTypeAnnotation_ts$default() {
		return "never";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSNonNullExpression.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSNonNullExpression_ts$default(
		builder,
		node,
	) {
		const expr = builder.tokenize(node.expression, node);

		if (builder.options.typeAnnotations) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([expr, "!"]);
		} else {
			return expr;
		}
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSNullKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSNullKeywordTypeAnnotation_ts$default() {
		return "null";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSNumberKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSNumberKeywordTypeAnnotation_ts$default() {
		return "number";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSNumericLiteralTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSNumericLiteralTypeAnnotation_ts$default(
		builder,
		node,
	) {
		return String(node.value);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSObjectKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSObjectKeywordTypeAnnotation_ts$default() {
		return "object";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSOptionalType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSOptionalType_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.typeAnnotation, node),
			"?",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSParenthesizedType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSParenthesizedType_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"(",
			builder.tokenize(node.typeAnnotation, node),
			")",
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSPropertySignature.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSPropertySignature_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.readonly) {
			tokens.push(
				"readonly",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			);
		}

		tokens.push(builder.tokenize(node.key, node));

		if (node.optional) {
			tokens.push("?");
		}

		if (node.typeAnnotation) {
			tokens.push(
				":",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			);
		}

		tokens.push(";");

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSQualifiedName.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSQualifiedName_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.left, node),
			".",
			builder.tokenize(node.right, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSSignatureDeclarationMeta.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSSignatureDeclarationMeta_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.typeParameters, node),
			___R$project$rome$$romejs$formatter$builders$js$utils_ts$printBindingPatternParams(
				builder,
				node,
				node.parameters,
				node.rest,
			),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSStringKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSStringKeywordTypeAnnotation_ts$default() {
		return "string";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSStringLiteralTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSStringLiteralTypeAnnotation_ts$default(
		builder,
		node,
		parent,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$literals$JSStringLiteral_ts$default(
			builder,
			node,
			parent,
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSSymbolKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSSymbolKeywordTypeAnnotation_ts$default() {
		return "symbol";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTemplateLiteralTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTemplateLiteralTypeAnnotation_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$string$escape$escapeString_ts$default(
			node.value,
			{quote: "`"},
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSThisType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSThisType_ts$default() {
		return "this";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTupleType.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTupleType_ts$default(
		builder,
		node,
	) {
		if (node.elementTypes.length === 0 && node.rest === undefined) {
			if (
				___R$project$rome$$romejs$formatter$builders$js$comments_ts$hasInnerComments(
					node,
				)
			) {
				return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"[",
					builder.tokenizeInnerComments(node, true),
					___R$project$rome$$romejs$formatter$tokens_ts$hardline,
					"]",
				]);
			} else {
				return "[]";
			}
		}

		const parts = [];

		for (const elementType of node.elementTypes) {
			parts.push(builder.tokenize(elementType, node));
		}

		if (node.rest !== undefined) {
			parts.push(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"...",
					builder.tokenize(node.rest, node),
				]),
			);
		}

		const tokens = [
			"[",
			___R$project$rome$$romejs$formatter$tokens_ts$indent(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$softline,
					___R$project$rome$$romejs$formatter$tokens_ts$join(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							",",
							___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
						]),
						parts,
					),
				]),
			),
		];

		if (node.rest === undefined) {
			tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(","));
		}

		tokens.push(___R$project$rome$$romejs$formatter$tokens_ts$softline, "]");

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens),
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeAliasTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeAliasTypeAnnotation_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"type",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.id, node),
				builder.tokenize(node.typeParameters, node),
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"=",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.right, node),
				";",
			]),
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeAssertion.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeAssertion_ts$default(
		builder,
		node,
	) {
		if (builder.options.typeAnnotations) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$group(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							"<",
							___R$project$rome$$romejs$formatter$tokens_ts$indent(
								___R$project$rome$$romejs$formatter$tokens_ts$concat([
									___R$project$rome$$romejs$formatter$tokens_ts$softline,
									builder.tokenize(node.typeAnnotation, node),
								]),
							),
							___R$project$rome$$romejs$formatter$tokens_ts$softline,
							">",
						]),
					),
					builder.tokenize(node.expression, node),
				]),
			);
		} else {
			return builder.tokenize(node.expression, node);
		}
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeLiteral.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeLiteral_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$utils_ts$printTSBraced(
			builder,
			node,
			node.members,
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeOperator.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeOperator_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			node.operator,
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.typeAnnotation, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeParameter.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeParameter_ts$default(
		builder,
		node,
	) {
		const tokens = [node.name];

		if (node.constraint) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"extends",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.constraint, node),
			);
		}

		if (node.default) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"=",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.default, node),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeParameterDeclaration.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeParameterDeclaration_ts$default(
		builder,
		node,
	) {
		const params = node.params;
		const shouldInline =
			params.length === 1 &&
			params[0].type !== "TSIntersectionTypeAnnotation" &&
			params[0].type !== "TSUnionTypeAnnotation" &&
			params[0].type !== "TSIndexedAccessType" &&
			params[0].type !== "TSMappedType";

		if (shouldInline) {
			return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
				"<",
				builder.tokenize(params[0], node),
				">",
			]);
		} else {
			return ___R$project$rome$$romejs$formatter$tokens_ts$group(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					"<",
					___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$softline,
							___R$project$rome$$romejs$formatter$builders$js$utils_ts$printCommaList(
								builder,
								params,
								node,
							),
						]),
					),
					___R$project$rome$$romejs$formatter$tokens_ts$softline,
					">",
				]),
			);
		}
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeParameterInstantiation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeParameterInstantiation_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeParameterDeclaration_ts$default(
			builder,
			node,
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypePredicate.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypePredicate_ts$default(
		builder,
		node,
	) {
		const tokens = [];

		if (node.asserts) {
			tokens.push(
				"asserts",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
			);
		}

		tokens.push(builder.tokenize(node.parameterName, node));

		if (node.typeAnnotation) {
			tokens.push(
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				"is",
				___R$project$rome$$romejs$formatter$tokens_ts$space,
				builder.tokenize(node.typeAnnotation, node),
			);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeQuery.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeQuery_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			"typeof",
			___R$project$rome$$romejs$formatter$tokens_ts$space,
			builder.tokenize(node.exprName, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSTypeReference.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeReference_ts$default(
		builder,
		node,
	) {
		return ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			builder.tokenize(node.typeName, node),
			builder.tokenize(node.typeParameters, node),
		]);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSUndefinedKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSUndefinedKeywordTypeAnnotation_ts$default() {
		return "undefined";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSUnionTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSUnionTypeAnnotation_ts$default(
		builder,
		node,
		parent,
	) {
		// Indentation may be handled by the parent node
		const shouldIndent =
			parent.type !== "TSTypeAssertion" &&
			parent.type !== "TSTypeParameterDeclaration" &&
			parent.type !== "TSTypeParameterInstantiation";

		const printed = ___R$project$rome$$romejs$formatter$tokens_ts$concat([
			___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					shouldIndent
						? ___R$project$rome$$romejs$formatter$tokens_ts$hardline
						: "",
					"|",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
				]),
			),
			___R$project$rome$$romejs$formatter$tokens_ts$join(
				___R$project$rome$$romejs$formatter$tokens_ts$concat([
					___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace,
					"|",
					___R$project$rome$$romejs$formatter$tokens_ts$space,
				]),
				node.types.map((type) =>
					___R$project$rome$$romejs$formatter$tokens_ts$indent(
						builder.tokenize(type, node),
					)
				),
			),
		]);

		return ___R$project$rome$$romejs$formatter$tokens_ts$group(
			shouldIndent
				? ___R$project$rome$$romejs$formatter$tokens_ts$indent(printed)
				: printed,
		);
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSUnknownKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSUnknownKeywordTypeAnnotation_ts$default() {
		return "unknown";
	}


  // project-rome/@romejs/formatter/builders/js/typescript/TSVoidKeywordTypeAnnotation.ts
function ___R$project$rome$$romejs$formatter$builders$js$typescript$TSVoidKeywordTypeAnnotation_ts$default() {
		return "void";
	}


  // project-rome/@romejs/formatter/builders/index.ts
// rome-ignore lint/noExplicitAny
	const ___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders = new Map();
	const ___R$project$rome$$romejs$formatter$builders$index_ts$default = ___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders;
	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSAmbiguousFlowTypeCastExpression",
		___R$project$rome$$romejs$formatter$builders$js$temp$JSAmbiguousFlowTypeCastExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSArrayExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSArrayExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSArrayHole",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSArrayHole_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSArrowFunctionExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSArrowFunctionExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSAssignmentArrayPattern",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentArrayPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSAssignmentAssignmentPattern",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentAssignmentPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSAssignmentExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSAssignmentExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSAssignmentIdentifier",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSAssignmentObjectPattern",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentObjectPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSAssignmentObjectPatternProperty",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSAssignmentObjectPatternProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSAwaitExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSAwaitExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBigIntLiteral",
		___R$project$rome$$romejs$formatter$builders$js$literals$JSBigIntLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBinaryExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSBinaryExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBindingArrayPattern",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingArrayPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBindingAssignmentPattern",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingAssignmentPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBindingIdentifier",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBindingObjectPattern",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingObjectPattern_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBindingObjectPatternProperty",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSBindingObjectPatternProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBlockStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSBlockStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBooleanLiteral",
		___R$project$rome$$romejs$formatter$builders$js$literals$JSBooleanLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSBreakStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSBreakStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSCallExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSCallExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSCatchClause",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSCatchClause_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSClassDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSClassDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSClassExpression",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSClassExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSClassHead",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSClassHead_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSClassMethod",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSClassMethod_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSClassPrivateMethod",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSClassPrivateMethod_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSClassPrivateProperty",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSClassPrivateProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSClassProperty",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSClassProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSClassPropertyMeta",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSClassPropertyMeta_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSCommentBlock",
		___R$project$rome$$romejs$formatter$builders$js$core$JSCommentBlock_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSCommentLine",
		___R$project$rome$$romejs$formatter$builders$js$core$JSCommentLine_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSComputedMemberProperty",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSComputedMemberProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSComputedPropertyKey",
		___R$project$rome$$romejs$formatter$builders$js$objects$JSComputedPropertyKey_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSConditionalExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSConditionalExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSContinueStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSContinueStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSDebuggerStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSDebuggerStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSDirective",
		___R$project$rome$$romejs$formatter$builders$js$core$JSDirective_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSDoExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSDoExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSDoWhileStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSDoWhileStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSEmptyStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSEmptyStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExportAllDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSExportAllDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExportDefaultDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSExportDefaultDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExportDefaultSpecifier",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSExportDefaultSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExportExternalDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSExportExternalDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExportExternalSpecifier",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSExportExternalSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExportLocalDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSExportLocalDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExportLocalSpecifier",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSExportLocalSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExportNamespaceSpecifier",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSExportNamespaceSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSExpressionStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSExpressionStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSForInStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSForInStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSForOfStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSForOfStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSForStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSForStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSFunctionDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSFunctionDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSFunctionExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSFunctionExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSFunctionHead",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSFunctionHead_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSIdentifier",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSIfStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSIfStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSImportCall",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSImportCall_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSImportDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSImportDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSImportDefaultSpecifier",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSImportDefaultSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSImportNamespaceSpecifier",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSImportNamespaceSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSImportSpecifier",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSImportSpecifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSImportSpecifierLocal",
		___R$project$rome$$romejs$formatter$builders$js$modules$JSImportSpecifierLocal_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSInterpreterDirective",
		___R$project$rome$$romejs$formatter$builders$js$core$JSInterpreterDirective_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSLabeledStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSLabeledStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSLogicalExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSLogicalExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSMemberExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSMemberExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSMetaProperty",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSMetaProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSMockParent",
		___R$project$rome$$romejs$formatter$builders$js$temp$JSMockParent_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSNewExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSNewExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSNullLiteral",
		___R$project$rome$$romejs$formatter$builders$js$literals$JSNullLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSNumericLiteral",
		___R$project$rome$$romejs$formatter$builders$js$literals$JSNumericLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSObjectExpression",
		___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSObjectMethod",
		___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectMethod_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSObjectProperty",
		___R$project$rome$$romejs$formatter$builders$js$objects$JSObjectProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSOptionalCallExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSOptionalCallExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSPatternMeta",
		___R$project$rome$$romejs$formatter$builders$js$patterns$JSPatternMeta_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSPrivateName",
		___R$project$rome$$romejs$formatter$builders$js$classes$JSPrivateName_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSReferenceIdentifier",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSReferenceIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpAlternation",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpAlternation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpAnyCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpAnyCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpCharSet",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpCharSet_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpCharSetRange",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpCharSetRange_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpControlCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpControlCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpDigitCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpDigitCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpEndCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpEndCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpGroupCapture",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpGroupCapture_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpGroupNonCapture",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpGroupNonCapture_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpLiteral",
		___R$project$rome$$romejs$formatter$builders$js$literals$JSRegExpLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpNamedBackReference",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNamedBackReference_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpNonDigitCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNonDigitCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpNonWhiteSpaceCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNonWhiteSpaceCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpNonWordBoundaryCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNonWordBoundaryCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpNonWordCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNonWordCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpNumericBackReference",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpNumericBackReference_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpQuantified",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpQuantified_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpStartCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpStartCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpSubExpression",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpSubExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpWhiteSpaceCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpWhiteSpaceCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpWordBoundaryCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpWordBoundaryCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRegExpWordCharacter",
		___R$project$rome$$romejs$formatter$builders$js$regex$JSRegExpWordCharacter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSReturnStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSReturnStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSRoot",
		___R$project$rome$$romejs$formatter$builders$js$core$JSRoot_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSSequenceExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSSequenceExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSSpreadElement",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSSpreadElement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSSpreadProperty",
		___R$project$rome$$romejs$formatter$builders$js$objects$JSSpreadProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSStaticMemberProperty",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSStaticMemberProperty_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSStaticPropertyKey",
		___R$project$rome$$romejs$formatter$builders$js$objects$JSStaticPropertyKey_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSStringLiteral",
		___R$project$rome$$romejs$formatter$builders$js$literals$JSStringLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSSuper",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSSuper_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSSwitchCase",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSSwitchCase_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSSwitchStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSSwitchStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSTaggedTemplateExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSTaggedTemplateExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSTemplateElement",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSTemplateElement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSTemplateLiteral",
		___R$project$rome$$romejs$formatter$builders$js$literals$JSTemplateLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSThisExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSThisExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSThrowStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSThrowStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSTryStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSTryStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSUnaryExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSUnaryExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSUpdateExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSUpdateExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSVariableDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSVariableDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSVariableDeclarationStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSVariableDeclarationStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSVariableDeclarator",
		___R$project$rome$$romejs$formatter$builders$js$auxiliary$JSVariableDeclarator_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSWhileStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSWhileStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSWithStatement",
		___R$project$rome$$romejs$formatter$builders$js$statements$JSWithStatement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXAttribute",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXAttribute_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXElement",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXElement_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXEmptyExpression",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXEmptyExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXExpressionContainer",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXExpressionContainer_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXFragment",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXFragment_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXIdentifier",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXMemberExpression",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXMemberExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXNamespacedName",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXNamespacedName_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXReferenceIdentifier",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXReferenceIdentifier_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXSpreadAttribute",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXSpreadAttribute_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXSpreadChild",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXSpreadChild_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSXText",
		___R$project$rome$$romejs$formatter$builders$js$jsx$JSXText_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"JSYieldExpression",
		___R$project$rome$$romejs$formatter$builders$js$expressions$JSYieldExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSAnyKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSAnyKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSArrayType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSArrayType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSAsExpression",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSAsExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSAssignmentAsExpression",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSAssignmentAsExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSAssignmentNonNullExpression",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSAssignmentNonNullExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSAssignmentTypeAssertion",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSAssignmentTypeAssertion_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSBigIntKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSBigIntKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSBooleanKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSBooleanKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSBooleanLiteralTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSBooleanLiteralTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSCallSignatureDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSCallSignatureDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSConditionalType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSConditionalType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSConstructorType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSConstructorType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSConstructSignatureDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSConstructSignatureDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSDeclareFunction",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSDeclareFunction_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSDeclareMethod",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSDeclareMethod_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSEmptyKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSEmptyKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSEnumDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSEnumDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSEnumMember",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSEnumMember_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSExportAssignment",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSExportAssignment_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSExpressionWithTypeArguments",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSExpressionWithTypeArguments_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSExternalModuleReference",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSExternalModuleReference_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSFunctionType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSFunctionType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSImportEqualsDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSImportEqualsDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSImportType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSImportType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSIndexedAccessType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSIndexedAccessType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSIndexSignature",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSIndexSignature_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSInferType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSInferType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSInterfaceBody",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSInterfaceBody_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSInterfaceDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSInterfaceDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSIntersectionTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSIntersectionTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSMappedType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSMappedType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSMethodSignature",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSMethodSignature_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSMixedKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSMixedKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSModuleBlock",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSModuleBlock_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSModuleDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSModuleDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSNamespaceExportDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSNamespaceExportDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSNeverKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSNeverKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSNonNullExpression",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSNonNullExpression_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSNullKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSNullKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSNumberKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSNumberKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSNumericLiteralTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSNumericLiteralTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSObjectKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSObjectKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSOptionalType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSOptionalType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSParenthesizedType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSParenthesizedType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSPropertySignature",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSPropertySignature_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSQualifiedName",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSQualifiedName_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSSignatureDeclarationMeta",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSSignatureDeclarationMeta_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSStringKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSStringKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSStringLiteralTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSStringLiteralTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSSymbolKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSSymbolKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTemplateLiteralTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTemplateLiteralTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSThisType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSThisType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTupleType",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTupleType_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeAliasTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeAliasTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeAssertion",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeAssertion_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeLiteral",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeLiteral_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeOperator",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeOperator_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeParameter",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeParameter_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeParameterDeclaration",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeParameterDeclaration_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeParameterInstantiation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeParameterInstantiation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypePredicate",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypePredicate_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeQuery",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeQuery_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSTypeReference",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSTypeReference_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSUndefinedKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSUndefinedKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSUnionTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSUnionTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSUnknownKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSUnknownKeywordTypeAnnotation_ts$default,
	);

	___R$$priv$project$rome$$romejs$formatter$builders$index_ts$builders.set(
		"TSVoidKeywordTypeAnnotation",
		___R$project$rome$$romejs$formatter$builders$js$typescript$TSVoidKeywordTypeAnnotation_ts$default,
	);


  // project-rome/@romejs/formatter/tokens.ts
const ___R$project$rome$$romejs$formatter$tokens_ts = {
		get lineOrSpace() {
			return ___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace;
		},
		get softline() {
			return ___R$project$rome$$romejs$formatter$tokens_ts$softline;
		},
		get hardline() {
			return ___R$project$rome$$romejs$formatter$tokens_ts$hardline;
		},
		get space() {
			return ___R$project$rome$$romejs$formatter$tokens_ts$space;
		},
		group: ___R$project$rome$$romejs$formatter$tokens_ts$group,
		comment: ___R$project$rome$$romejs$formatter$tokens_ts$comment,
		indent: ___R$project$rome$$romejs$formatter$tokens_ts$indent,
		mark: ___R$project$rome$$romejs$formatter$tokens_ts$mark,
		concat: ___R$project$rome$$romejs$formatter$tokens_ts$concat,
		ifBreak: ___R$project$rome$$romejs$formatter$tokens_ts$ifBreak,
		join: ___R$project$rome$$romejs$formatter$tokens_ts$join,
		lineSuffix: ___R$project$rome$$romejs$formatter$tokens_ts$lineSuffix,
	};




















	const ___R$project$rome$$romejs$formatter$tokens_ts$lineOrSpace = {
		type: "Line",
		mode: "space",
	};

	const ___R$project$rome$$romejs$formatter$tokens_ts$softline = {
		type: "Line",
		mode: "soft",
	};

	const ___R$project$rome$$romejs$formatter$tokens_ts$hardline = {
		type: "Line",
		mode: "hard",
	};

	const ___R$project$rome$$romejs$formatter$tokens_ts$space = {
		type: "Space",
	};

	function ___R$project$rome$$romejs$formatter$tokens_ts$group(
		contents,
		shouldBreak = false,
	) {
		return {
			type: "Group",
			contents,
			shouldBreak,
		};
	}

	function ___R$project$rome$$romejs$formatter$tokens_ts$comment(value) {
		return {
			type: "Comment",
			value,
		};
	}

	function ___R$project$rome$$romejs$formatter$tokens_ts$indent(contents) {
		return {
			type: "Indent",
			contents,
		};
	}

	function ___R$project$rome$$romejs$formatter$tokens_ts$mark(loc, prop) {
		return {
			type: "PositionMarker",
			loc,
			prop,
		};
	}

	function ___R$project$rome$$romejs$formatter$tokens_ts$concat(parts) {
		if (parts.length === 0) {
			return "";
		}

		if (parts.length === 1) {
			return parts[0];
		}

		return {
			type: "Concat",
			parts,
		};
	}

	function ___R$project$rome$$romejs$formatter$tokens_ts$ifBreak(
		breakContents,
		flatContents,
	) {
		return {
			type: "IfBreak",
			breakContents,
			flatContents,
		};
	}

	function ___R$project$rome$$romejs$formatter$tokens_ts$join(separator, tokens) {
		if (tokens.length === 0) {
			return "";
		}

		if (tokens.length === 1) {
			return tokens[0];
		}

		const parts = [];

		for (let i = 0; i < tokens.length; i++) {
			if (i > 0) {
				parts.push(separator);
			}
			parts.push(tokens[i]);
		}

		return ___R$project$rome$$romejs$formatter$tokens_ts$concat(parts);
	}

	function ___R$project$rome$$romejs$formatter$tokens_ts$lineSuffix(contents) {
		return {
			type: "LineSuffix",
			contents,
		};
	}


  // project-rome/@romejs/formatter/Builder.ts




	class ___R$project$rome$$romejs$formatter$Builder_ts$default {
		constructor(opts, comments = []) {
			this.options = opts;
			this.comments = new ___R$project$rome$$romejs$js$parser$CommentsConsumer_ts$default(
				comments,
			);
			this.printedComments = new Set();
			this.printStack = [];
		}

		tokenize(node, parent) {
			if (node === undefined) {
				return "";
			}

			if (
				!this.options.typeAnnotations &&
				___R$project$rome$$romejs$js$ast$utils$isTypeNode_ts$default(node) &&
				!___R$project$rome$$romejs$js$ast$utils$isTypeExpressionWrapperNode_ts$default(
					node,
				)
			) {
				return "";
			}

			const tokenizeNode = ___R$project$rome$$romejs$formatter$builders$index_ts$default.get(
				node.type,
			);
			if (tokenizeNode === undefined) {
				throw new Error(
					"No known builder for node " +
					node.type +
					" with parent " +
					parent.type,
				);
			}

			this.printStack.push(node);
			let printedNode = tokenizeNode(this, node, parent);
			const needsParens = ___R$project$rome$$romejs$formatter$node$index_ts.needsParens(
				node,
				parent,
				this.printStack,
			);
			this.printStack.pop();

			if (printedNode !== "") {
				if (this.options.sourceMaps && node.loc !== undefined) {
					printedNode = ___R$project$rome$$romejs$formatter$tokens_ts$concat([
						___R$project$rome$$romejs$formatter$tokens_ts$mark(
							node.loc,
							"start",
						),
						printedNode,
						___R$project$rome$$romejs$formatter$tokens_ts$mark(node.loc, "end"),
					]);
				}

				if (needsParens) {
					printedNode = ___R$project$rome$$romejs$formatter$tokens_ts$concat([
						"(",
						printedNode,
						")",
					]);
				}
			}

			return this.tokenizeComments(node, printedNode);
		}

		tokenizeComments(node, printed) {
			const tokens = [];

			const leadingComments = this.getComments("leadingComments", node);
			if (leadingComments !== undefined) {
				let next = node;

				// Leading comments are traversed backward in order to get `next` right
				for (let i = leadingComments.length - 1; i >= 0; i--) {
					const comment = leadingComments[i];
					this.printedComments.add(comment.id);
					tokens.unshift(
						___R$project$rome$$romejs$formatter$builders$js$comments_ts$printLeadingComment(
							comment,
							next,
						),
					);
					next = comment;
				}
			}

			tokens.push(printed);

			const trailingComments = this.getComments("trailingComments", node);
			if (trailingComments !== undefined) {
				let previous = node;

				for (const comment of trailingComments) {
					this.printedComments.add(comment.id);
					tokens.push(
						___R$project$rome$$romejs$formatter$builders$js$comments_ts$printTrailingComment(
							comment,
							previous,
						),
					);
					previous = comment;
				}
			}

			return ___R$project$rome$$romejs$formatter$tokens_ts$concat(tokens);
		}

		tokenizeStatementList(nodes, parent) {
			if (nodes.length === 0) {
				return "";
			}

			const tokens = [];

			for (let i = 0; i < nodes.length; i++) {
				const isLast = i === nodes.length - 1;
				const node = nodes[i];

				if (node.type === "JSEmptyStatement") {
					continue;
				}

				let printed = this.tokenize(node, parent);

				if (!isLast) {
					const nextNode = nodes[i + 1];

					if (this.getLinesBetween(node, nextNode) > 1) {
						printed = ___R$project$rome$$romejs$formatter$tokens_ts$concat([
							printed,
							___R$project$rome$$romejs$formatter$tokens_ts$hardline,
						]);
					}
				}

				tokens.push(printed);
			}

			return ___R$project$rome$$romejs$formatter$tokens_ts$join(
				___R$project$rome$$romejs$formatter$tokens_ts$hardline,
				tokens,
			);
		}

		tokenizeInnerComments(node, shouldIndent) {
			const innerComments = this.getComments("innerComments", node);
			if (innerComments === undefined) {
				return "";
			}

			const tokens = [];

			for (const comment of innerComments) {
				this.printedComments.add(comment.id);
				tokens.push(
					___R$project$rome$$romejs$formatter$builders$js$comments_ts$printComment(
						comment,
					),
				);
			}

			return shouldIndent
				? ___R$project$rome$$romejs$formatter$tokens_ts$indent(
						___R$project$rome$$romejs$formatter$tokens_ts$concat([
							___R$project$rome$$romejs$formatter$tokens_ts$hardline,
							___R$project$rome$$romejs$formatter$tokens_ts$join(
								___R$project$rome$$romejs$formatter$tokens_ts$hardline,
								tokens,
							),
						]),
					)
				: ___R$project$rome$$romejs$formatter$tokens_ts$join(
						___R$project$rome$$romejs$formatter$tokens_ts$hardline,
						tokens,
					);
		}

		getComments(kind, node, all = false) {
			if (!node) {
				return undefined;
			}

			const ids = node[kind];
			if (ids === undefined) {
				return undefined;
			}

			const comments = this.comments.getCommentsFromIds(ids);

			if (all) {
				return comments;
			} else {
				return comments.filter((comment) =>
					!this.printedComments.has(comment.id)
				);
			}
		}

		getLinesBetween(a, b) {
			if (a.loc === undefined || b.loc === undefined) {
				return 0;
			}

			let aEndLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(
				a.loc.end.line,
			);
			let bStartLine = ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(
				b.loc.start.line,
			);

			// Simple cases:
			//  1. `a` and `b` are on the same line
			//  2. `a` and `b` are on their own line without empty lines between them
			if (bStartLine - aEndLine <= 1) {
				return bStartLine - aEndLine;
			}

			// If the are more than one line between `a` and `b`, the comment nodes must
			// be inspected to detect empty lines.
			//
			// In the following example, `getLinesBetween` should return `1`.
			//
			//     a;
			//     /* COMMENT */
			//     b;

			const aTrailingComments = this.getComments("trailingComments", a, true);
			const bLeadingComments = this.getComments("leadingComments", b, true);

			// Comments must be deduplicated because they are shared between nodes.
			// Walk them in order to calculate the nodes' boundaries.
			if (aTrailingComments !== undefined || bLeadingComments !== undefined) {
				const seenComments = new Set();

				// Expand `a` boundaries
				if (aTrailingComments !== undefined) {
					for (const comment of aTrailingComments) {
						seenComments.add(comment);

						if (comment.loc !== undefined) {
							aEndLine = Math.max(
								aEndLine,
								___R$project$rome$$romejs$ob1$index_ts$ob1Get1(
									comment.loc.end.line,
								),
							);
						}
					}
				}

				// Expand `b` boundaries
				if (bLeadingComments !== undefined) {
					for (const comment of bLeadingComments) {
						if (seenComments.has(comment)) {
							continue;
						}

						if (comment.loc !== undefined) {
							bStartLine = Math.min(
								bStartLine,
								___R$project$rome$$romejs$ob1$index_ts$ob1Get1(
									comment.loc.start.line,
								),
							);
						}
					}
				}
			}

			return bStartLine - aEndLine;
		}
	}


  // project-rome/@romejs/formatter/Printer.ts






	class ___R$$priv$project$rome$$romejs$formatter$Printer_ts$BreakError
		extends Error {
		constructor() {
			super(
				"This error represents a point in the formatter where we should line break. If you're seeing this something went wrong.",
			);
		}
	}

	class ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box {
		constructor(value) {
			this.value = value;
		}
	}

	function ___R$$priv$project$rome$$romejs$formatter$Printer_ts$forkState(
		parent,
		callback,
	) {
		const bufferLength = parent.buffer.length;
		const mappingsLength = parent.mappings.length;

		const state = Object.assign(
			{},
			parent,
			{
				generatedIndex: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
					parent.generatedIndex.value,
				),
				generatedLine: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
					parent.generatedLine.value,
				),
				generatedColumn: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
					parent.generatedColumn.value,
				),
				pendingSpaces: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
					parent.pendingSpaces.value,
				),
				pendingTabs: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
					parent.pendingTabs.value,
				),
				lineWidth: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
					parent.lineWidth.value,
				),
			},
		);

		try {
			callback(state);
		} catch (err) {
			// Discard dirty outputs
			if (parent.buffer.length !== bufferLength) {
				parent.buffer.length = bufferLength;
			}

			// Discard dirty mappings
			if (parent.mappings.length !== mappingsLength) {
				parent.mappings.length = mappingsLength;
			}

			throw err;
		}

		// Merge the states together
		parent.generatedIndex.value = state.generatedIndex.value;
		parent.generatedLine.value = state.generatedLine.value;
		parent.generatedColumn.value = state.generatedColumn.value;
		parent.pendingSpaces.value = state.pendingSpaces.value;
		parent.pendingTabs.value = state.pendingTabs.value;
		parent.lineWidth.value = state.lineWidth.value;
	}

	function ___R$$priv$project$rome$$romejs$formatter$Printer_ts$write(
		str,
		state,
		options,
	) {
		for (const ch of str) {
			state.generatedIndex.value = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
				state.generatedIndex.value,
			);
			if (ch === "\n") {
				state.generatedLine.value = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
					state.generatedLine.value,
				);
				state.generatedColumn.value = ___R$project$rome$$romejs$ob1$index_ts$ob1Number0;
				state.lineWidth.value = 0;
			} else {
				state.generatedColumn.value = ___R$project$rome$$romejs$ob1$index_ts$ob1Inc(
					state.generatedColumn.value,
				);
				if (ch === "\t") {
					state.lineWidth.value += options.tabWidth;
				} else {
					state.lineWidth.value++;
				}
			}
		}
		state.buffer.push(str);
	}

	function ___R$$priv$project$rome$$romejs$formatter$Printer_ts$print(
		token,
		state,
		options,
	) {
		const stack = [[token, state]];

		while (stack.length > 0) {
			const [token, state] = stack.pop();

			if (typeof token === "string") {
				if (token !== "") {
					// Print pending tabs
					if (state.pendingTabs.value > 0) {
						___R$$priv$project$rome$$romejs$formatter$Printer_ts$write(
							"\t".repeat(state.pendingTabs.value),
							state,
							options,
						);
						state.pendingTabs.value = 0;
					}

					// Print pending spaces
					if (state.pendingSpaces.value > 0) {
						___R$$priv$project$rome$$romejs$formatter$Printer_ts$write(
							" ".repeat(state.pendingSpaces.value),
							state,
							options,
						);
						state.pendingSpaces.value = 0;
					}

					let currentLine = state.generatedLine.value;

					___R$$priv$project$rome$$romejs$formatter$Printer_ts$write(
						token,
						state,
						options,
					);

					if (state.flat) {
						// If the line is too long, break the group
						if (state.lineWidth.value > options.printWidth) {
							throw new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$BreakError();
						}

						// If a new line was printed, break the group
						if (currentLine !== state.generatedLine.value) {
							throw new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$BreakError();
						}
					}
				}
			} else {
				switch (token.type) {
					case "Comment": {
						stack.push([token.value, state]);
						break;
					}

					case "Concat": {
						for (let i = token.parts.length - 1; i >= 0; i--) {
							stack.push([token.parts[i], state]);
						}
						break;
					}

					case "Group": {
						if (token.shouldBreak) {
							if (state.flat) {
								throw new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$BreakError();
							} else {
								stack.push([token.contents, state]);
								break;
							}
						}

						if (state.flat) {
							stack.push([token.contents, state]);
						} else {
							try {
								___R$$priv$project$rome$$romejs$formatter$Printer_ts$forkState(
									state,
									(next) => {
										// Try to print the group contents on a single line.
										// If it fails, break the group.
										next.flat = true;
										___R$$priv$project$rome$$romejs$formatter$Printer_ts$print(
											token.contents,
											next,
											options,
										);
									},
								);
							} catch (err) {
								if (
									err instanceof
									___R$$priv$project$rome$$romejs$formatter$Printer_ts$BreakError
								) {
									stack.push([token.contents, state]);
								} else {
									// This should not happen!
									// Let the error propagate.
									throw err;
								}
							}
						}
						break;
					}

					case "IfBreak": {
						if (state.flat) {
							if (token.flatContents) {
								stack.push([token.flatContents, state]);
							}
						} else {
							stack.push([token.breakContents, state]);
						}
						break;
					}

					case "Indent": {
						stack.push([
							token.contents,
							Object.assign(
								{},
								state,
								{
									indent: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
										state.indent.value + 1,
									),
								},
							),
						]);
						break;
					}

					case "Line": {
						if (state.flat) {
							switch (token.mode) {
								case "space": {
									state.pendingSpaces.value++;
									break;
								}

								case "soft":
									// Soft lines are not printed in flat mode.
									break;

								case "hard":
									// Hard lines are always printed.
									// In flat mode, the current group be broken.
									throw new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$BreakError();
							}
						} else {
							if (state.lineSuffixes.length > 0) {
								stack.push([token, state]);
								while (state.lineSuffixes.length > 0) {
									stack.push(state.lineSuffixes.pop());
								}
							} else {
								___R$$priv$project$rome$$romejs$formatter$Printer_ts$write(
									"\n",
									state,
									options,
								);

								// Enqueue the indentation
								state.pendingSpaces.value = 0;
								state.pendingTabs.value = state.indent.value;
							}
						}
						break;
					}

					case "LineSuffix": {
						if (state.flat) {
							throw new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$BreakError();
						} else {
							state.lineSuffixes.push([token.contents, state]);
						}
						break;
					}

					case "PositionMarker": {
						if (
							state.mappings.length > 0 &&
							state.mappings[state.mappings.length - 1].generated.index ===
							state.generatedIndex.value
						) {
							break;
						}

						state.mappings.push({
							generated: {
								line: state.generatedLine.value,
								column: state.generatedColumn.value,
								index: state.generatedIndex.value,
							},
							original: {
								line: token.loc[token.prop].line,
								column: token.loc[token.prop].column,
							},
							name: token.loc.identifierName,
							source: token.loc.filename,
						});
						break;
					}

					case "Space": {
						state.pendingSpaces.value++;
						break;
					}
				}
			}
		}
	}

	function ___R$project$rome$$romejs$formatter$Printer_ts$printTokenToString(
		token,
		options,
	) {
		const state = {
			flat: false,
			indent: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
				options.rootIndent,
			),
			pendingSpaces: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
				0,
			),
			pendingTabs: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
				0,
			),
			generatedIndex: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
				___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			),
			generatedLine: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
				___R$project$rome$$romejs$ob1$index_ts$ob1Number1,
			),
			generatedColumn: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(
				___R$project$rome$$romejs$ob1$index_ts$ob1Number0,
			),
			buffer: [],
			mappings: [],
			lineSuffixes: [],
			lineWidth: new ___R$$priv$project$rome$$romejs$formatter$Printer_ts$Box(0),
		};

		___R$$priv$project$rome$$romejs$formatter$Printer_ts$print(
			token,
			state,
			options,
		);

		return {
			code: state.buffer.join(""),
			mappings: state.mappings,
		};
	}


  // project-rome/@romejs/formatter/index.ts


	function ___R$project$rome$$romejs$formatter$index_ts$formatAST(
		ast,
		{
			format = "pretty",
			typeAnnotations = true,
			sourceMaps = false,
			comments,
			indent = 0,
			allowInterpreterDirective = true,
		} = {},
	) {
		const builder = new ___R$project$rome$$romejs$formatter$Builder_ts$default(
			{
				format,
				sourceMaps,
				typeAnnotations,
				allowInterpreterDirective,
			},
			ast.type === "JSRoot" ? ast.comments : comments,
		);
		const token = builder.tokenize(
			ast,
			___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$MOCK_PARENT,
		);
		const formatted = ___R$project$rome$$romejs$formatter$Printer_ts$printTokenToString(
			token,
			{
				printWidth: format === "pretty" ? 80 : Infinity,
				rootIndent: indent,
				tabWidth: 2,
			},
		);

		return formatted;
	}


  // project-rome/@romejs/core/common/file-handlers/javascript.ts
const ___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$IMPLICIT_JS_EXTENSIONS = [
		"js",
		"ts",
		"tsx",
		"json",
	];

	const ___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$JS_EXTENSIONS = [];

	function ___R$$priv$project$rome$$romejs$core$common$file$handlers$javascript_ts$buildJSHandler(
		ext,
		syntax,
		sourceType,
	) {
		___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$JS_EXTENSIONS.push(
			ext,
		);

		return {
			ext,
			sourceType,

			async parse({stat, sourceType, manifestPath, path, file, worker}) {
				const sourceText = await worker.readFile(file.real);
				const ast = ___R$project$rome$$romejs$js$parser$index_ts$parseJS({
					input: sourceText,
					mtime: stat.mtimeMs,
					manifestPath,
					path,
					sourceType,
					syntax,
					allowReturnOutsideFunction: sourceType === "script",
				});
				return {
					sourceText,
					ast,
					generated: false,
				};
			},

			async analyzeDependencies({file, worker, parseOptions}) {
				const {ast, sourceText, project, generated} = await worker.parse(
					file,
					parseOptions,
				);
				worker.logger.info("Analyzing:", file.real);

				return worker.api.interceptAndAddGeneratedToDiagnostics(
					await ___R$project$rome$$romejs$compiler$index_ts.analyzeDependencies({
						ref: file,
						ast,
						sourceText,
						project,
						options: {},
					}),
					generated,
				);
			},

			async format(info) {
				const {file: ref, parseOptions, worker} = info;

				const {ast, sourceText, generated} = await worker.parse(
					ref,
					parseOptions,
				);

				const out = ___R$project$rome$$romejs$formatter$index_ts$formatAST(
					ast,
					{
						sourceText,
					},
				);

				return worker.api.interceptAndAddGeneratedToDiagnostics(
					{
						formatted: out.code,
						sourceText,
						suppressions: [],
						diagnostics: ast.diagnostics,
					},
					generated,
				);
			},

			async lint(info) {
				const {file: ref, project, parseOptions, options, worker} = info;

				const {ast, sourceText, generated} = await worker.parse(
					ref,
					parseOptions,
				);

				worker.logger.info("Linting: ", ref.real);

				// Run the compiler in lint-mode which is where all the rules are actually ran
				const res = await ___R$project$rome$$romejs$compiler$index_ts.lint({
					applyFixes: options.applyFixes,
					ref,
					options: {
						lint: options.compilerOptions,
					},
					ast,
					project,
					sourceText,
				});

				// Extract lint diagnostics
				let {diagnostics} = res;

				// Only enable typechecking if enabled in .romeconfig
				let typeCheckingEnabled = project.config.typeCheck.enabled === true;
				if (project.config.typeCheck.libs.has(ref.real)) {
					// don't typecheck lib files
					typeCheckingEnabled = false;
				}

				// Run type checking if necessary
				if (typeCheckingEnabled) {
					const typeCheckProvider = await worker.getTypeCheckProvider(
						ref.project,
						options.prefetchedModuleSignatures,
						parseOptions,
					);
					const typeDiagnostics = await ___R$project$rome$$romejs$js$analysis$api$check_ts$default({
						ast,
						provider: typeCheckProvider,
						project,
					});
					diagnostics = [...diagnostics, ...typeDiagnostics];
				}

				return worker.api.interceptAndAddGeneratedToDiagnostics(
					{
						suppressions: res.suppressions,
						diagnostics,
						sourceText,
						formatted: res.src,
					},
					generated,
				);
			},
		};
	}

	const ___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$jsHandler = ___R$$priv$project$rome$$romejs$core$common$file$handlers$javascript_ts$buildJSHandler(
		"js",
		[],
	);
	const ___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$jsxHandler = ___R$$priv$project$rome$$romejs$core$common$file$handlers$javascript_ts$buildJSHandler(
		"jsx",
		["jsx"],
	);
	const ___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$cjsHandler = ___R$$priv$project$rome$$romejs$core$common$file$handlers$javascript_ts$buildJSHandler(
		"cjs",
		[],
		"script",
	);
	const ___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$mjsHandler = ___R$$priv$project$rome$$romejs$core$common$file$handlers$javascript_ts$buildJSHandler(
		"mjs",
		[],
		"module",
	);
	const ___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$tsHandler = ___R$$priv$project$rome$$romejs$core$common$file$handlers$javascript_ts$buildJSHandler(
		"ts",
		["ts"],
		"module",
	);
	const ___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$tsxHandler = ___R$$priv$project$rome$$romejs$core$common$file$handlers$javascript_ts$buildJSHandler(
		"tsx",
		["ts", "jsx"],
		"module",
	);


  // project-rome/@romejs/core/common/types/analyzeDependencies.ts
const ___R$project$rome$$romejs$core$common$types$analyzeDependencies_ts = {
		get UNKNOWN_ANALYZE_DEPENDENCIES_RESULT() {
			return ___R$project$rome$$romejs$core$common$types$analyzeDependencies_ts$UNKNOWN_ANALYZE_DEPENDENCIES_RESULT;
		},
	};




















	const ___R$project$rome$$romejs$core$common$types$analyzeDependencies_ts$UNKNOWN_ANALYZE_DEPENDENCIES_RESULT = {
		topLevelLocalBindings: {},
		moduleType: "unknown",
		syntax: [],
		diagnostics: [],
		firstTopAwaitLocation: undefined,
		importFirstUsage: [],
		exports: [],
		dependencies: [],
	};


  // project-rome/@romejs/core/common/file-handlers/text.ts
const ___R$project$rome$$romejs$core$common$file$handlers$text_ts$textHandler = {
		sourceType: "module",

		// Mock a single default export
		// We could always just pass this through to analyzeDependencies and get the same result due to the toJavaScript call below,
		// but the return value is predictable so we inline it
		async analyzeDependencies() {
			return Object.assign(
				{},
				___R$project$rome$$romejs$core$common$types$analyzeDependencies_ts$UNKNOWN_ANALYZE_DEPENDENCIES_RESULT,
				{
					moduleType: "es",
					exports: [
						{
							type: "local",
							// TODO we could fake this?
							loc: undefined,
							kind: "value",
							valueType: "other",
							name: "default",
						},
					],
				},
			);
		},

		async parse({path, file, worker}) {
			const src = await worker.readFile(file.real);
			const serial = JSON.stringify(src);
			const sourceText = "export default " + serial + ";";

			return {
				// Shouldn't error
				ast: ___R$project$rome$$romejs$js$parser$index_ts$parseJS({
					input: sourceText,
					sourceType: "module",
					path,
				}),
				sourceText,
				generated: true,
			};
		},
	};


  // project-rome/@romejs/core/common/file-handlers/json.ts
const ___R$project$rome$$romejs$core$common$file$handlers$json_ts$jsonHandler = Object.assign(
		{ext: "json"},
		___R$project$rome$$romejs$core$common$file$handlers$text_ts$textHandler,
		{
			async format(info) {
				const {file, worker} = info;
				const {uid} = file;

				const real = ___R$project$rome$$romejs$path$index_ts$createAbsoluteFilePath(
					file.real,
				);
				const sourceText = await worker.readFile(real);
				const path = ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
					uid,
				);

				let formatted = sourceText;

				if (sourceText.length > 50000) {
					// Fast path for big JSON files
					___R$project$rome$$romejs$codec$json$index_ts$parseJSON({
						path,
						input: sourceText,
					});
				} else {
					const {consumer, comments, hasExtensions} = ___R$project$rome$$romejs$codec$json$index_ts$consumeJSONExtra({
						input: sourceText,
						path,
					});

					if (hasExtensions) {
						formatted = ___R$project$rome$$romejs$codec$json$index_ts$stringifyRJSONFromConsumer({
							consumer,
							comments,
						});
					} else {
						formatted = String(
							___R$project$rome$$romejs$codec$json$index_ts$stringifyJSON(
								consumer.asUnknown(),
							),
						);
					}
				}

				return {
					sourceText,
					diagnostics: [],
					suppressions: [],
					formatted,
				};
			},

			async parse({path, file, worker}) {
				const src = await worker.readFile(file.real);

				// Parse the JSON to make sure it's valid
				const obj = ___R$project$rome$$romejs$codec$json$index_ts$parseJSON({
					path: ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
						file.uid,
					),
					input: src,
				});

				const rawJson = JSON.stringify(obj);
				const json = rawJson === undefined ? "undefined" : rawJson;
				const sourceText = "export default " + json + ";";

				return {
					// Shouldn't error
					ast: ___R$project$rome$$romejs$js$parser$index_ts$parseJS({
						input: sourceText,
						sourceType: "module",
						path,
					}),
					sourceText,
					generated: true,
				};
			},
		},
	);

	const ___R$project$rome$$romejs$core$common$file$handlers$json_ts$rjsonHandler = Object.assign(
		{},
		___R$project$rome$$romejs$core$common$file$handlers$json_ts$jsonHandler,
		{ext: "rjson"},
	);


  // project-rome/@romejs/core/common/file-handlers/index.ts




	function ___R$project$rome$$romejs$core$common$file$handlers$index_ts$getFileHandlerExtensions(
		projectConfig,
	) {
		return [
			...___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$DEFAULT_HANDLERS.keys(),
			...projectConfig.files.assetExtensions,
		];
	}

	function ___R$project$rome$$romejs$core$common$file$handlers$index_ts$getFileHandler(
		path,
		projectConfig,
	) {
		const basename = path.getBasename();

		const match = basename.match(/\.([a-zA-Z]+)$/);
		if (match == null) {
			return {ext: "", handler: undefined};
		}

		const ext = match[1];
		let handler = ___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$DEFAULT_HANDLERS.get(
			ext,
		);

		// Allow setting custom assert extensions in the project config
		if (
			handler === undefined &&
			projectConfig.files.assetExtensions.includes(ext)
		) {
			handler = ___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$assetHandler;
		}

		return {ext, handler};
	}

	function ___R$project$rome$$romejs$core$common$file$handlers$index_ts$getFileHandlerAssert(
		path,
		projectConfig,
	) {
		const {handler, ext} = ___R$project$rome$$romejs$core$common$file$handlers$index_ts$getFileHandler(
			path,
			projectConfig,
		);

		if (handler === undefined) {
			throw new Error("No file handler found for '" + path.join() + "'");
		} else {
			return {handler, ext};
		}
	}

	const ___R$project$rome$$romejs$core$common$file$handlers$index_ts$ASSET_EXPORT_TEMPORARY_VALUE = "VALUE_INJECTED_BY_BUNDLER";

	const ___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$assetHandler = Object.assign(
		{},
		___R$project$rome$$romejs$core$common$file$handlers$text_ts$textHandler,
		{
			ext: "unknown",
			canHaveScale: true,
			isAsset: true,
			async parse({path}) {
				// This exists just so analyzeDependencies has something to look at
				// When bundling we'll have custom logic in the compiler to handle assets and inject the correct string
				const sourceText =
					"export default '" +
					___R$project$rome$$romejs$core$common$file$handlers$index_ts$ASSET_EXPORT_TEMPORARY_VALUE +
					"';";

				return {
					// Shouldn't error
					ast: ___R$project$rome$$romejs$js$parser$index_ts$parseJS({
						input: sourceText,
						sourceType: "module",
						path,
					}),
					generated: true,
					sourceText,
				};
			},
		},
	);

	// Extensions that have a `lint` handler
	const ___R$project$rome$$romejs$core$common$file$handlers$index_ts$LINTABLE_EXTENSIONS = [];

	const ___R$project$rome$$romejs$core$common$file$handlers$index_ts$FORMATTABLE_EXTENSIONS = [];

	function ___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		handler,
	) {
		const {ext} = handler;

		if (handler.lint !== undefined) {
			___R$project$rome$$romejs$core$common$file$handlers$index_ts$LINTABLE_EXTENSIONS.push(
				ext,
			);
		}

		if (handler.format !== undefined) {
			___R$project$rome$$romejs$core$common$file$handlers$index_ts$FORMATTABLE_EXTENSIONS.push(
				ext,
			);
		}

		___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$DEFAULT_HANDLERS.set(
			ext,
			handler,
		);
	}

	const ___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$DEFAULT_HANDLERS = new Map();

	const ___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$DEFAULT_ASSET_EXTENSIONS = [
		// Images
		"png",
		"jpg",
		"jpeg",
		"gif",
		// Video
		"webm",
		"mp4",
		"m4v",
		"avi",
		"mkv",
		// Audio
		"mp3",
		// Fonts
		"woff",
		"woff2",
		"eot",
		"ttf",
		"otf",
	];

	for (const ext of ___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$DEFAULT_ASSET_EXTENSIONS) {
		___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
			Object.assign(
				{ext},
				___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$assetHandler,
			),
		);
	}

	___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$jsHandler,
	);
	___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$jsxHandler,
	);
	___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$cjsHandler,
	);
	___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$mjsHandler,
	);
	___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$tsHandler,
	);
	___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		___R$project$rome$$romejs$core$common$file$handlers$javascript_ts$tsxHandler,
	);
	___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		___R$project$rome$$romejs$core$common$file$handlers$json_ts$jsonHandler,
	);
	___R$$priv$project$rome$$romejs$core$common$file$handlers$index_ts$setHandler(
		___R$project$rome$$romejs$core$common$file$handlers$json_ts$rjsonHandler,
	);


  // project-rome/@romejs/compiler/transforms/compileForBundle/assetTransform.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$assetTransform_ts$default = {
		name: "asset",
		enter(path) {
			const {node} = path;
			const options = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getOptions(
				path.context,
			);

			if (
				node.type === "JSExportDefaultDeclaration" &&
				node.declaration.type === "JSStringLiteral" &&
				node.declaration.value ===
				___R$project$rome$$romejs$core$common$file$handlers$index_ts$ASSET_EXPORT_TEMPORARY_VALUE &&
				options.assetPath !== undefined
			) {
				return Object.assign(
					{},
					node,
					{
						declaration: Object.assign(
							{},
							node.declaration,
							{value: options.moduleId},
						),
					},
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/modern/cjsRootTransform.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$modern$cjsRootTransform_ts$default = {
		name: "cjsRootTransform",
		enter(path) {
			const {node, scope, context} = path;

			const {moduleId} = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getOptions(
				context,
			);

			if (node.type === "JSRoot") {
				const mappings = new Map();

				// make all variables private
				for (const [name] of path.scope.bindings) {
					mappings.set(
						name,
						___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrivateName(
							name,
							moduleId,
						),
					);
				}

				if (scope.hasBinding("exports") === false) {
					mappings.set(
						"exports",
						___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
							moduleId,
						),
					);
				}

				const newProgram = ___R$project$rome$$romejs$js$ast$utils$renameBindings_ts$default(
					path,
					mappings,
				);
				return newProgram;
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/modern/esToRefTransform.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$modern$esToRefTransform_ts$default = {
		name: "esToRefTransform",
		enter(path) {
			const {node, scope, context} = path;

			const opts = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getOptions(
				context,
			);

			if (___R$project$rome$$romejs$ast$js$core$JSRoot_ts$jsRoot.is(node)) {
				const mappings = new Map();

				// make all variables private
				for (const [name] of path.scope.bindings) {
					mappings.set(
						name,
						___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrivateName(
							name,
							opts.moduleId,
						),
					);
				}

				// map exports and imports and correctly
				for (const child of node.body) {
					if (
						child.type === "JSImportDeclaration" &&
						child.importKind !== "type" &&
						child.importKind !== "typeof"
					) {
						const moduleId = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getModuleId(
							child.source.value,
							opts,
						);
						if (moduleId === undefined) {
							continue;
						}

						for (const specifier of ___R$project$rome$$romejs$js$ast$utils$getImportSpecifiers_ts$default(
							child,
						)) {
							if (specifier.type === "JSImportSpecifier") {
								mappings.set(
									specifier.local.name.name,
									___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
										specifier.imported.name,
										moduleId,
										opts,
									),
								);
							} else if (specifier.type === "JSImportNamespaceSpecifier") {
								mappings.set(
									specifier.local.name.name,
									___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
										moduleId,
									),
								);
							} else if (specifier.type === "JSImportDefaultSpecifier") {
								mappings.set(
									specifier.local.name.name,
									___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
										"default",
										moduleId,
										opts,
									),
								);
							} else {
								throw new Error("unexpected");
							}
						}
					}

					if (child.type === "JSExportLocalDeclaration") {
						// export const foo = '';
						// export function foo() {}
						for (const {name} of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
							child,
						)) {
							mappings.set(
								name,
								___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
									name,
									opts.moduleId,
									opts,
								),
							);
						}

						// export {foo};
						if (child.specifiers !== undefined) {
							for (const specifier of child.specifiers) {
								const local = specifier.local.name;
								if (
									scope.getBindingAssert(local) instanceof
									___R$project$rome$$romejs$compiler$scope$bindings_ts$ImportBinding
								) {
									continue;
								}

								mappings.set(
									local,
									___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
										specifier.exported.name,
										opts.moduleId,
										opts,
									),
								);
							}
						}
					}

					if (child.type === "JSExportDefaultDeclaration") {
						const {declaration: decl} = child;
						if (
							(decl.type === "JSFunctionDeclaration" ||
							decl.type === "JSClassDeclaration") &&
							decl.id !== undefined
						) {
							mappings.set(
								decl.id.name,
								___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
									"default",
									opts.moduleId,
									opts,
								),
							);
						}
					}
				}

				const newProgram = ___R$project$rome$$romejs$ast$js$core$JSRoot_ts$jsRoot.assert(
					___R$project$rome$$romejs$js$ast$utils$renameBindings_ts$default(
						path,
						mappings,
					),
				);

				// Get new scope with updated bindings. TODO Maybe `renameBindings` should return the path?
				const newScope = scope.getRootScope().evaluate(
					newProgram,
					undefined,
					true,
				);

				if (opts.moduleAll === true) {
					// Get all the export names
					const exportNames = new Map();
					for (const child of newProgram.body) {
						if (child.type === "JSExportDefaultDeclaration") {
							exportNames.set(
								"default",
								___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
									"default",
									opts.moduleId,
									opts,
								),
							);
						}

						if (child.type === "JSExportExternalDeclaration") {
							// TODO defaultSpecifier and namespaceSpecifier
							const {source} = child;

							for (const specifier of child.namedSpecifiers) {
								// If this is an external export then use the correct name
								const moduleId = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getModuleId(
									source.value,
									opts,
								);
								if (moduleId === undefined) {
									continue;
								}

								const local = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
									specifier.local.name,
									moduleId,
									opts,
								);

								exportNames.set(specifier.exported.name, local);
							}
						}

						if (child.type === "JSExportLocalDeclaration") {
							if (child.declaration !== undefined) {
								throw new Error(
									"No export declarations should be here as they have been removed by renameBindings",
								);
							}

							const {specifiers} = child;
							if (specifiers !== undefined) {
								for (const specifier of specifiers) {
									// The local binding has already been rewritten by renameBindings if it existed
									exportNames.set(specifier.exported.name, specifier.local.name);
								}
							}
						}
					}

					const exportObjProps = [];

					for (const [exported, local] of exportNames) {
						const binding = newScope.getBinding(local);
						if (binding !== undefined) {
							if (
								binding instanceof
								___R$project$rome$$romejs$compiler$scope$bindings_ts$TypeBinding
							) {
								continue;
							}

							if (
								binding instanceof
								___R$project$rome$$romejs$compiler$scope$bindings_ts$FunctionBinding
							) {
								exportObjProps.push(
									___R$project$rome$$romejs$ast$js$objects$JSObjectProperty_ts$jsObjectProperty.create({
										key: ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts$jsStaticPropertyKey.quick(
											___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
												exported,
											),
										),
										value: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
											local,
										),
									}),
								);
								continue;
							}
						}

						exportObjProps.push(
							___R$project$rome$$romejs$ast$js$objects$JSObjectMethod_ts$jsObjectMethod.create({
								kind: "get",
								key: ___R$project$rome$$romejs$ast$js$objects$JSStaticPropertyKey_ts$jsStaticPropertyKey.quick(
									___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.quick(
										exported,
									),
								),
								head: ___R$project$rome$$romejs$ast$js$auxiliary$JSFunctionHead_ts$jsFunctionHead.quick([]),
								body: ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.create({
									body: [
										___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts$jsReturnStatement.create({
											argument: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.create({
												name: local,
											}),
										}),
									],
								}),
							}),
						);
					}

					const exportObj = ___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression.create({
						properties: exportObjProps,
					});

					return Object.assign(
						{},
						newProgram,
						{
							type: "JSRoot",
							body: [
								___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.quick(
									___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.create({
										kind: "const",
										declarations: [
											___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator.create({
												id: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.create({
													name: ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
														opts.moduleId,
													),
												}),
												init: exportObj,
											}),
										],
									}),
								),
								...newProgram.body,
							],
						},
					);
				} else {
					return newProgram;
				}
			}

			if (node.type === "JSImportDeclaration") {
				// should have already been handled with the JSRoot branch
				return ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE;
			}

			if (node.type === "JSExportDefaultDeclaration") {
				const {declaration} = node;
				if (
					declaration.type === "JSFunctionDeclaration" ||
					declaration.type === "JSClassDeclaration"
				) {
					if (declaration.id === undefined) {
						return Object.assign(
							{},
							node,
							{
								declaration: Object.assign(
									{},
									declaration,
									{
										id: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.create({
											name: ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
												"default",
												opts.moduleId,
												opts,
											),
										}),
									},
								),
							},
						);
					} else {
						// if the export was named then we'll have already given it the correct name
						return declaration;
					}
				} else {
					return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`const ${___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
						"default",
						opts.moduleId,
						opts,
					)} = ${declaration};`;
				}
			}

			if (node.type === "JSExportExternalDeclaration") {
				// Remove external exports with a source as they will be resolved correctly and never point here
				return ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE;
			}

			if (node.type === "JSExportLocalDeclaration") {
				const {declaration, specifiers} = node;

				if (specifiers === undefined) {
					if (declaration === undefined) {
						throw new Error(
							"No specifiers or declaration existed, if there's no specifiers then there should be a declaration",
						);
					}
					return declaration;
				} else {
					// check if any of the specifiers reference a global or import
					// if so, we need to insert declarations for them
					const nodes = [];

					for (const specifier of specifiers) {
						if (specifier.type === "JSExportLocalSpecifier") {
							const binding = path.scope.getBinding(specifier.local.name);

							// TODO we only really need this declaration for global bindings, `analyze()` could detect the exported import and resolvedImports would just work
							if (
								binding === undefined ||
								binding instanceof
								___R$project$rome$$romejs$compiler$scope$bindings_ts$ImportBinding
							) {
								nodes.push(
									___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.create({
										kind: "const",
										declarations: [
											___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator.create({
												id: ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.create({
													name: ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedName(
														specifier.exported.name,
														opts.moduleId,
														opts,
													),
												}),
												init: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
													specifier.local.name,
												),
											}),
										],
									}),
								);
							}
						} else {
							// TODO ???
						}
					}

					if (nodes.length === 0) {
						return ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE;
					} else {
						return nodes;
					}
				}
			}

			if (node.type === "JSExportAllDeclaration" && opts.moduleAll === true) {
				const moduleId = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getModuleId(
					node.source.value,
					opts,
				);
				if (moduleId === undefined) {
					return node;
				}

				const theirNamespace = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
					moduleId,
				);
				const ourNamespace = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
					opts.moduleId,
				);
				return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`
        Object.keys(${theirNamespace}).forEach(function (key) {
          if (key === 'default') return undefined;
          Object.defineProperty(${ourNamespace}, key, {
            enumerable: true,
            configurable: true,
            get: function get() {
              return ${theirNamespace}[key];
            }
          });
        });
      `;
			}

			if (node.type === "JSExportAllDeclaration" && opts.moduleAll !== true) {
				// We can remove these, this signature has already been flagged by analyze() and we'll automatically forward it
				return ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE;
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/modern/requireRewriteTransform.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$modern$requireRewriteTransform_ts$default = {
		name: "requireRewriteTransform",
		enter(path) {
			const {node, context} = path;

			const {relativeSourcesToModuleId, moduleId} = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getOptions(
				context,
			);

			// Replace all references to module.exports to the correct version
			if (
				node.type === "JSMemberExpression" &&
				___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node,
					"module.exports",
				)
			) {
				return ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.create({
					name: ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
						moduleId,
					),
					loc: ___R$project$rome$$romejs$js$ast$utils$inheritLoc_ts$default(
						node,
						"module.exports",
					),
				});
			}

			// Replace all assignments of module.exports to the correct version
			if (
				node.type === "JSAssignmentExpression" &&
				___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node.left,
					"module.exports",
				)
			) {
				return ___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts$jsAssignmentExpression.create({
					operator: node.operator,
					left: ___R$project$rome$$romejs$ast$js$patterns$JSAssignmentIdentifier_ts$jsAssignmentIdentifier.create({
						name: ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
							moduleId,
						),
						loc: ___R$project$rome$$romejs$js$ast$utils$inheritLoc_ts$default(
							node,
							"module.exports",
						),
					}),
					right: node.right,
				});
			}

			// Replace import foo = require('module');
			if (
				node.type === "TSImportEqualsDeclaration" &&
				node.moduleReference.type === "TSExternalModuleReference"
			) {
				return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`const ${node.id} = require(${node.moduleReference.expression});`;
			}

			// Now handle normal `require('module')`
			if (node.type !== "JSCallExpression") {
				return node;
			}

			const {callee} = node;
			if (callee.type !== "JSReferenceIdentifier" || callee.name !== "require") {
				return node;
			}

			const sourceArg = node.arguments[0];
			if (sourceArg.type !== "JSStringLiteral") {
				return node;
			}

			if (path.scope.hasBinding("require")) {
				return node;
			}

			const replacement = relativeSourcesToModuleId[sourceArg.value];
			if (typeof replacement === "string") {
				return ___R$project$rome$$romejs$ast$js$auxiliary$JSIdentifier_ts$jsIdentifier.create({
					name: ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace(
						replacement,
					),
				});
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/legacy/magicCJSTransform.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$magicCJSTransform_ts$default = {
		name: "magicCJSTransform",
		enter(path) {
			const {node, scope, context} = path;
			const options = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getOptions(
				context,
			);

			// Update relative requires with their module id
			if (
				node.type === "JSCallExpression" &&
				node.callee.type === "JSReferenceIdentifier" &&
				node.callee.name === "require" &&
				scope.getBinding("require") === undefined
			) {
				const args = node.arguments;
				const arg = args[0];

				// Maybe error?
				if (args.length !== 1 || arg.type !== "JSStringLiteral") {
					return node;
				}

				const source = arg.value;

				if (
					Object.prototype.hasOwnProperty.call(
						options.relativeSourcesToModuleId,
						source,
					)
				) {
					const resolved = options.relativeSourcesToModuleId[source];
					const sourceNode = ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.create({
						value: resolved,
					});
					return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`Rome.requireNamespace(${sourceNode})`;
				}
			}

			if (
				node.type === "JSReferenceIdentifier" &&
				node.name === "require" &&
				scope.getBinding("require") === undefined
			) {
				return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`Rome.requireNamespace`;
			}

			return node;
		},
		exit(path) {
			const {node, context} = path;
			const options = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getOptions(
				context,
			);

			// Add module wrapper
			if (node.type === "JSRoot") {
				const source = ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.create({
					value: options.moduleId,
				});

				// Build factory
				const factoryBody = ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.create({
					directives: node.directives,
					body: node.body,
				});

				const factory = Object.assign(
					{},
					___R$project$rome$$romejs$ast$js$expressions$JSFunctionExpression_ts$jsFunctionExpression.assert(
						___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`(function(module, exports) {})`,
					),
					{body: factoryBody},
				);

				// Build call
				const declare =
					options.analyze.moduleType === "es"
						? ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`Rome.declareES`
						: ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`Rome.declareCJS`;
				const wrapper = ___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`${declare}(${source}, ${factory})`;

				return Object.assign({}, node, {directives: [], body: [wrapper]});
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/legacy/inlineRequiresTransform.ts
const ___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$inlineRequiresTransform_ts$NON_INLINED_REQUIRES = [];
	const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$inlineRequiresTransform_ts$default = {
		name: "inlineRequiresTransform",
		enter(path) {
			const {node} = path;

			if (node.type === "JSReferenceIdentifier") {
				const binding = path.scope.getBinding(node.name);

				// Inline references to a require variable
				if (
					binding !== undefined &&
					binding instanceof
					___R$project$rome$$romejs$compiler$scope$bindings_ts$ConstBinding
				) {
					const source = ___R$project$rome$$romejs$js$ast$utils$getRequireSource_ts$default(
						binding.value,
						path.scope,
						true,
					);
					if (
						source !== undefined &&
						!___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$inlineRequiresTransform_ts$NON_INLINED_REQUIRES.includes(
							source,
						) &&
						!___R$project$rome$$romejs$js$ast$utils$isInTypeAnnotation_ts$default(
							path,
						) &&
						binding.value !== undefined
					) {
						return binding.value;
					}
				}
			}

			return node;
		},
		exit(path) {
			const {node} = path;

			if (node.type === "JSRoot" || node.type === "JSBlockStatement") {
				const body = [];
				let hadRequires = false;

				// Remove all require declarations that could have been inlined
				for (const bodyNode of node.body) {
					if (
						bodyNode.type === "JSVariableDeclarationStatement" &&
						bodyNode.declaration.kind === "const"
					) {
						let hadRequireDeclarators = false;
						const declarators = [];

						for (const decl of bodyNode.declaration.declarations) {
							if (decl.id.type !== "JSBindingIdentifier") {
								// Patterns aren't supported yet
								declarators.push(decl);
								continue;
							}

							const source = ___R$project$rome$$romejs$js$ast$utils$getRequireSource_ts$default(
								decl.init,
								path.scope,
								true,
							);
							if (source === undefined) {
								// Didn't contain a `require`
								declarators.push(decl);
								continue;
							}

							if (
								___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$inlineRequiresTransform_ts$NON_INLINED_REQUIRES.includes(
									source,
								)
							) {
								declarators.push(decl);
								continue;
							}

							hadRequireDeclarators = true;
							hadRequires = true;
						}

						if (hadRequireDeclarators) {
							if (declarators.length > 0) {
								body.push(
									Object.assign(
										{},
										bodyNode,
										{
											declaration: Object.assign(
												{},
												bodyNode.declaration,
												{declarations: declarators},
											),
										},
									),
								);
							}
							continue;
						}
					}

					body.push(bodyNode);
				}

				if (!hadRequires) {
					return node;
				}

				return Object.assign({}, node, {body});
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/legacy/esToCJSTransform.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$esToCJSTransform_ts$default = {
		name: "esToCJSTransform",
		enter(path) {
			const {node} = path;
			if (!___R$project$rome$$romejs$ast$js$core$JSRoot_ts$jsRoot.is(node)) {
				return node;
			}

			const options = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getOptions(
				path.context,
			);

			const topBody = [];
			const bottomBody = [];

			for (const bodyNode of node.body) {
				if (bodyNode.type === "JSImportDeclaration") {
					if (bodyNode.importKind === "type" || bodyNode.importKind === "typeof") {
						continue;
					}

					const moduleId = ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getModuleId(
						bodyNode.source.value,
						options,
					);
					if (moduleId === undefined) {
						continue;
					}

					const source = ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.create({
						value: moduleId,
					});

					const specifiers = ___R$project$rome$$romejs$js$ast$utils$getImportSpecifiers_ts$default(
						bodyNode,
					);
					if (specifiers.length === 0) {
						topBody.push(
							___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`Rome.requireNamespace(${source});`,
						);
					} else {
						for (const specifier of specifiers) {
							if (specifier.type === "JSImportSpecifier") {
								topBody.push(
									___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`const ${specifier.local.name} = Rome.requireNamespace(${source}).${specifier.imported};`,
								);
							} else if (specifier.type === "JSImportNamespaceSpecifier") {
								topBody.push(
									___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`const ${specifier.local.name} = Rome.requireNamespace(${source});`,
								);
							} else if (specifier.type === "JSImportDefaultSpecifier") {
								topBody.push(
									___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`const ${specifier.local.name} = Rome.requireDefault(${source});`,
								);
							}
						}
					}
					continue;
				}

				if (bodyNode.type === "JSExportAllDeclaration") {
					// TODO
					continue;
				}

				if (bodyNode.type === "JSExportExternalDeclaration") {
					if (bodyNode.exportKind === "type") {
						continue;
					}

					const {source} = bodyNode;

					// TODO defaultSpecifier and namespaceSpecifier
					for (const specifier of bodyNode.namedSpecifiers) {
						topBody.push(
							___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`Object.defineProperty(exports, ${___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.create({
								value: specifier.exported.name,
							})}, {
                get: function() {
                  return Rome.requireNamespace(${source}).${specifier.local};
                },
              })`,
						);
					}
				}

				if (bodyNode.type === "JSExportLocalDeclaration") {
					if (bodyNode.exportKind === "type") {
						continue;
					}

					const {declaration, specifiers} = bodyNode;

					if (declaration !== undefined) {
						// Hoist function declarations
						if (declaration.type === "JSFunctionDeclaration") {
							topBody.push(
								___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.${declaration.id} = ${declaration.id}`,
							);
							bottomBody.push(declaration);
							continue;
						}

						// Handle type declarations (these have no runtime ordering implications)
						if (
							declaration.type === "TSModuleDeclaration" ||
							declaration.type === "TSEnumDeclaration" ||
							declaration.type === "TSTypeAliasTypeAnnotation" ||
							declaration.type === "TSInterfaceDeclaration" ||
							declaration.type === "TSDeclareFunction"
						) {
							bottomBody.push(declaration);
							continue;
						}

						// Handle variables and classes
						if (
							declaration.type === "JSVariableDeclarationStatement" ||
							declaration.type === "JSClassDeclaration"
						) {
							bottomBody.push(declaration);

							for (const id of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
								declaration,
							)) {
								topBody.push(
									___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.${id} = undefined;`,
								);
								bottomBody.push(
									___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.${id} = ${id};`,
								);
							}
						}
					}

					if (specifiers !== undefined) {
						for (const specifier of specifiers) {
							const binding = path.scope.getBinding(specifier.local.name);

							if (
								binding instanceof
								___R$project$rome$$romejs$compiler$scope$bindings_ts$FunctionBinding
							) {
								topBody.push(
									___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.${specifier.exported} = ${specifier.local};`,
								);
							} else {
								topBody.push(
									___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.${specifier.exported} = undefined;`,
								);
								bottomBody.push(
									___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.${specifier.exported} = ${specifier.local};`,
								);
							}
						}
					}

					continue;
				}

				if (bodyNode.type === "JSExportDefaultDeclaration") {
					const {declaration} = bodyNode;

					// Hoist function declarations
					if (declaration.type === "JSFunctionDeclaration") {
						// If it has an id then there's no way that anything in the JSRoot can refer to it, so inline it as a function expression
						if (declaration.id === undefined) {
							const expr = Object.assign(
								{},
								declaration,
								{type: "JSFunctionExpression"},
							);
							topBody.push(
								___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.default = ${expr};`,
							);
						} else {
							topBody.push(declaration);
							topBody.push(
								___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.default = ${declaration.id};`,
							);
						}
						continue;
					}

					// Handle classes
					if (declaration.type === "JSClassDeclaration") {
						// Technically we could hoist these if they have no super class, but we don't as it's not spec compliant
						topBody.push(
							___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.default = undefined;`,
						);
						if (declaration.id === undefined) {
							const expr = Object.assign(
								{},
								declaration,
								{type: "JSClassExpression"},
							);
							bottomBody.push(
								___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.default = ${expr};`,
							);
						} else {
							bottomBody.push(declaration);
							bottomBody.push(
								___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.default = ${declaration.id};`,
							);
						}
						continue;
					}

					// Handle type declarations (these have no runtime ordering implications)
					if (
						declaration.type === "TSInterfaceDeclaration" ||
						declaration.type === "TSDeclareFunction"
					) {
						// Maybe we should keep them? Not sure what they would desugar to
						continue;
					}

					// Otherwise it's an expression
					bottomBody.push(
						___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.default = ${declaration};`,
					);

					// There are cases where we could omit this declaration at all if we the file has no imports, some other conditions etc
					topBody.push(
						___R$project$rome$$romejs$js$ast$utils$template_ts$default.statement`exports.default = undefined;`,
					);

					continue;
				}

				bottomBody.push(bodyNode);
			}

			return Object.assign({}, node, {body: [...topBody, ...bottomBody]});
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/metaPropertyTransform.ts
function ___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$isImportMeta(
		node,
	) {
		return (
			node.type === "JSMetaProperty" &&
			node.meta.name === "import" &&
			node.property.name === "meta"
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$createURLString(
		context,
	) {
		const str = ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.create({
			value: "file://" +
			___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$getFilename(
				context,
			),
		});
		return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`typeof __filename === 'string' ? 'file://' + __filename : ${str}`;
	}

	function ___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$getFilename(
		context,
	) {
		const {path} = context;
		if (path === undefined) {
			return "";
		} else {
			return path.join();
		}
	}
	const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$default = {
		name: "jsMetaPropertyTransform",
		enter(path) {
			const {node, context} = path;

			// Inline __filenamd and __dirname

			/*if (
      node.type === 'ReferenceIdentifier' &&
      (node.type === '__dirname' || node.name === '__filename')
    ) {
      if (node.type === '__dirname') {
        return jsStringLiteral.create({
          value: pathUtils.dirname(getFilename(context)),
        });
      }

      if (node.type === '__filename') {
        return jsStringLiteral.create({
          value: getFilename(context),
        });
      }
    }*/

			// Direct reference to import.meta.url
			if (
				node.type === "JSMemberExpression" &&
				node.property.type === "JSStaticMemberProperty" &&
				___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$isImportMeta(
					node.object,
				) &&
				node.property.value.type === "JSIdentifier" &&
				node.property.value.name === "url"
			) {
				return ___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$createURLString(
					context,
				);
			}

			// This is an escaped import.meta or else our other transform would have changed it
			if (
				___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$isImportMeta(
					node,
				)
			) {
				return ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`({url: ${___R$$priv$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$createURLString(
					context,
				)}})`;
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/scopedRomeTransform.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$scopedRomeTransform_ts$default = {
		name: "scopedRome",
		enter(path) {
			const {node, scope} = path;

			if (scope.node === node && scope.hasBinding("Rome")) {
				return ___R$project$rome$$romejs$js$ast$utils$renameBindings_ts$default(
					path,
					new Map([["Rome", scope.generateUid("Rome")]]),
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/asyncImportTransform.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$asyncImportTransform_ts$default = {
		name: "asyncImport",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSCallExpression" &&
				node.callee.type === "JSImportCall"
			) {
				return Object.assign(
					{},
					node,
					{
						callee: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.create({
							name: "require",
						}),
					},
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/compileForBundle/inlineEnv.ts
const ___R$project$rome$$romejs$compiler$transforms$compileForBundle$inlineEnv_ts$default = {
		name: "inlineEnv",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSMemberExpression" &&
				node.property.value.type === "JSIdentifier" &&
				node.property.value.name === "NODE_ENV" &&
				!path.scope.hasBinding("process") &&
				___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node,
					"process.env.NODE_ENV",
				)
			) {
				return ___R$project$rome$$romejs$ast$js$literals$JSStringLiteral_ts$jsStringLiteral.create({
					value: "development",
				});
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/transforms/index.ts
const ___R$project$rome$$romejs$compiler$transforms$index_ts$stageOrder = [
		"pre",
		"compile",
		"compileForBundle",
	];

	const ___R$project$rome$$romejs$compiler$transforms$index_ts$hookVisitors = [
		___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$variableInjectorVisitor,
		___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$commentInjectorVisitor,
	];

	const ___R$project$rome$$romejs$compiler$transforms$index_ts$stageTransforms = {
		// These may effect dependency analysis
		pre: () => [
			___R$project$rome$$romejs$compiler$transforms$compile$validation$optimizeImports_ts$default,
			___R$project$rome$$romejs$compiler$transforms$compile$validation$optimizeExports_ts$default,
			___R$project$rome$$romejs$compiler$transforms$compile$jsx_ts$default,
		],
		compile: () => [
			___R$project$rome$$romejs$compiler$transforms$compile$transpile$paramlessCatch_ts$default,
			___R$project$rome$$romejs$compiler$transforms$compile$transpile$optionalChaining_ts$default,
			___R$project$rome$$romejs$compiler$transforms$compile$transpile$nullishCoalescing_ts$default,
			___R$project$rome$$romejs$compiler$transforms$compile$transpile$objectSpread_ts$default,
			___R$project$rome$$romejs$compiler$transforms$compile$transpile$classProperties_ts$default,
			___R$project$rome$$romejs$compiler$transforms$compile$transpile$templateLiterals_ts$default,
			___R$project$rome$$romejs$compiler$transforms$compile$transpile$callSpread_ts$default,
		],
		compileForBundle: (projectConfig, options) => {
			const opts = options.bundle;
			if (opts === undefined) {
				throw new Error("Expected bundle options for compileForBundle stage");
			}

			const transforms = [];

			if (opts.assetPath !== undefined) {
				transforms.push(
					___R$project$rome$$romejs$compiler$transforms$compileForBundle$assetTransform_ts$default,
				);
			}
			transforms.push(
				___R$project$rome$$romejs$compiler$transforms$compileForBundle$metaPropertyTransform_ts$default,
			);
			transforms.push(
				___R$project$rome$$romejs$compiler$transforms$compileForBundle$asyncImportTransform_ts$default,
			);
			transforms.push(
				___R$project$rome$$romejs$compiler$transforms$compileForBundle$scopedRomeTransform_ts$default,
			);
			transforms.push(
				___R$project$rome$$romejs$compiler$transforms$compileForBundle$inlineEnv_ts$default,
			);

			if (opts.mode === "modern") {
				transforms.push(
					___R$project$rome$$romejs$compiler$transforms$compileForBundle$modern$requireRewriteTransform_ts$default,
				);
				transforms.push(
					opts.analyze.moduleType === "cjs"
						? ___R$project$rome$$romejs$compiler$transforms$compileForBundle$modern$cjsRootTransform_ts$default
						: ___R$project$rome$$romejs$compiler$transforms$compileForBundle$modern$esToRefTransform_ts$default,
				);
			} else {
				transforms.push(
					___R$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$inlineRequiresTransform_ts$default,
				);
				transforms.push(
					___R$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$esToCJSTransform_ts$default,
				);
				transforms.push(
					___R$project$rome$$romejs$compiler$transforms$compileForBundle$legacy$magicCJSTransform_ts$default,
				);
			}

			return transforms;
		},
	};


  // project-rome/@romejs/compiler/lint/decisions.ts
const ___R$project$rome$$romejs$compiler$lint$decisions_ts = {
		deriveDecisionPositionKey: ___R$project$rome$$romejs$compiler$lint$decisions_ts$deriveDecisionPositionKey,
		parseDecisionStrings: ___R$project$rome$$romejs$compiler$lint$decisions_ts$parseDecisionStrings,
		buildLintDecisionGlobalString: ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionGlobalString,
		buildLintDecisionString: ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionString,
		buildLintDecisionAdviceAction: ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionAdviceAction,
	};


	function ___R$$priv$project$rome$$romejs$compiler$lint$decisions_ts$validateAction(
		raw,
		unexpected,
	) {
		if (raw === "fix" || raw === "suppress" || raw === "ignore") {
			return raw;
		} else {
			unexpected(
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT_COMMAND.INVALID_DECISION_ACTION(
					raw,
				),
			);
			return undefined;
		}
	}

	function ___R$project$rome$$romejs$compiler$lint$decisions_ts$deriveDecisionPositionKey(
		action,
		loc,
	) {
		if (loc === undefined) {
			return undefined;
		}

		const {start} = loc;
		if (start === undefined) {
			return undefined;
		}

		if (action === "suppress") {
			return ___R$project$rome$$romejs$ob1$index_ts$ob1Get1(start.line);
		} else {
			return (
				___R$project$rome$$romejs$ob1$index_ts$ob1Get1(start.line) +
				":" +
				___R$project$rome$$romejs$ob1$index_ts$ob1Get0(start.column)
			);
		}
	}

	function ___R$project$rome$$romejs$compiler$lint$decisions_ts$parseDecisionStrings(
		decisions,
		cwd,
		unexpected,
	) {
		const lintCompilerOptionsPerFile = {};
		const globalDecisions = [];

		function parseGlobalDecision(parts, i) {
			if (parts.length !== 2) {
				unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT_COMMAND.INVALID_DECISION_PART_COUNT(
						i,
					),
				);
			}

			const [rawAction, rawCategory] = parts;

			const action = ___R$$priv$project$rome$$romejs$compiler$lint$decisions_ts$validateAction(
				rawAction,
				unexpected,
			);
			if (action === undefined) {
				return;
			}

			const category = (rawCategory);
			globalDecisions.push({category, action});
		}

		function parseLineDecision(parts, i) {
			if (parts.length < 4 || parts.length > 5) {
				unexpected(
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT_COMMAND.INVALID_DECISION_PART_COUNT(
						i,
					),
				);
			}

			const [rawAction, rawCategory, rawFilename, pos, id] = parts;

			const action = ___R$$priv$project$rome$$romejs$compiler$lint$decisions_ts$validateAction(
				rawAction,
				unexpected,
			);
			if (action === undefined) {
				return;
			}

			const category = (rawCategory);
			const resolvedFilename = cwd.resolve(rawFilename).join();

			let compilerOptions = lintCompilerOptionsPerFile[resolvedFilename];
			if (compilerOptions === undefined) {
				compilerOptions = {
					hasDecisions: true,
					globalDecisions: [],
					decisionsByPosition: {},
				};
				lintCompilerOptionsPerFile[resolvedFilename] = compilerOptions;
			}

			let decisionsForPosition = compilerOptions.decisionsByPosition[pos];
			if (decisionsForPosition === undefined) {
				decisionsForPosition = [];
				compilerOptions.decisionsByPosition[pos] = decisionsForPosition;
			}

			decisionsForPosition.push({
				action,
				category,
				id: id === undefined ? undefined : Number(id),
			});
		}

		for (let i = 0; i < decisions.length; i++) {
			const segment = decisions[i];
			const parts = ___R$project$rome$$romejs$string$utils$escapeSplit_ts$escapeSplit(
				segment,
				"-",
			);

			if (parts[0] === "global") {
				parseGlobalDecision(parts.slice(1), i);
			} else {
				parseLineDecision(parts, i);
			}
		}

		return {lintCompilerOptionsPerFile, globalDecisions};
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$decisions_ts$escapeFilename(
		filename,
	) {
		return filename.replace(/-/, "\\-");
	}

	function ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionGlobalString(
		action,
		category,
	) {
		return "global-" + action + "-" + category;
	}

	function ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionString(
		{
			filename,
			action,
			category,
			start,
			id,
		},
	) {
		const escapedFilename = ___R$$priv$project$rome$$romejs$compiler$lint$decisions_ts$escapeFilename(
			filename,
		);
		const pos = ___R$project$rome$$romejs$compiler$lint$decisions_ts$deriveDecisionPositionKey(
			action,
			{start},
		);

		const parts = [action, category, escapedFilename, pos];

		if (id !== undefined) {
			parts.push(String(id));
		}

		return parts.join("-");
	}

	function ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionAdviceAction(
		{
			noun,
			instruction,
			filename,
			shortcut,
			decision,
			extra,
		},
	) {
		return {
			type: "action",
			extra,
			hidden: true,
			command: "lint",
			shortcut,
			args: filename === undefined
				? []
				: [
						___R$$priv$project$rome$$romejs$compiler$lint$decisions_ts$escapeFilename(
							filename,
						),
					],
			noun,
			instruction,
			commandFlags: {
				decisions: [decision],
			},
		};
	}


  // project-rome/@romejs/ast-utils/isRoot.ts
function ___R$project$rome$$romejs$ast$utils$isRoot_ts$isRoot(node) {
		return (
			!Array.isArray(node) && typeof node !== "symbol" && node.type === "JSRoot"
		);
	}


  // project-rome/@romejs/ast-utils/index.ts



  // project-rome/@romejs/compiler/lib/CompilerContext.ts







	function ___R$$priv$project$rome$$romejs$compiler$lib$CompilerContext_ts$getFormattedCodeFromExitResult(
		result,
	) {
		if (Array.isArray(result)) {
			// TODO?
			return "";
		} else if (
			result ===
			___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE
		) {
			return "";
		} else {
			return ___R$project$rome$$romejs$formatter$index_ts$formatAST(result).code;
		}
	}

	class ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default {
		constructor(arg) {
			const {
				ast,
				origin,
				ref,
				frozen = false,
				options = {},
				sourceText = "",
				project = {
					folder: undefined,
					config: ___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG,
				},
				suppressions,
			} = arg;

			this.records = [];

			this.path = ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
				ast.filename,
			);
			this.filename = ast.filename;
			this.sourceText = sourceText;
			this.displayFilename =
				ref === undefined ? ast.filename : ref.relative.join();
			this.frozen = frozen;
			this.mtime = ast.mtime;
			this.project = project;
			this.options = options;
			this.origin = origin;
			this.cacheDependencies = new Set();
			this.sourceType = ast.sourceType;
			this.rootScope = new ___R$project$rome$$romejs$compiler$scope$Scope_ts$RootScope(
				this,
				ast,
			);

			this.comments = new ___R$project$rome$$romejs$js$parser$CommentsConsumer_ts$default(
				ast.comments,
			);
			this.diagnostics = new ___R$project$rome$$romejs$diagnostics$DiagnosticsProcessor_ts$default();

			if (suppressions === undefined) {
				const {suppressions, diagnostics} = ___R$project$rome$$romejs$compiler$suppressions_ts$extractSuppressionsFromProgram(
					this,
					ast,
				);
				this.suppressions = suppressions;
				this.diagnostics.addDiagnostics(diagnostics);
			} else {
				this.suppressions = suppressions;
			}
		}

		async normalizeTransforms(transforms) {
			return Promise.all(
				transforms.map(async (visitor) => {
					if (typeof visitor === "function") {
						return await visitor(this);
					} else {
						return visitor;
					}
				}),
			);
		}

		getComments(ids) {
			return this.comments.getCommentsFromIds(ids);
		}

		hasLocSuppression(loc, category) {
			if (loc === undefined) {
				return false;
			}

			for (const suppression of this.suppressions) {
				if (
					suppression.category === category &&
					___R$project$rome$$romejs$compiler$suppressions_ts$matchesSuppression(
						loc,
						suppression,
					)
				) {
					return true;
				}
			}

			return false;
		}

		getRootScope() {
			const {rootScope} = this;
			if (rootScope === undefined) {
				throw new Error("Expected root scope");
			}
			return rootScope;
		}

		getCacheDependencies() {
			return Array.from(this.cacheDependencies);
		}

		addCacheDependency(filename) {
			this.cacheDependencies.add(filename);
		}

		reduceRoot(ast, visitors, pathOpts) {
			const node = ___R$project$rome$$romejs$compiler$methods$reduce_ts$default(
				ast,
				[
					...___R$project$rome$$romejs$compiler$transforms$index_ts$hookVisitors,
					...(Array.isArray(visitors) ? visitors : [visitors]),
				],
				this,
				pathOpts,
			);
			if (!___R$project$rome$$romejs$ast$utils$isRoot_ts$isRoot(node)) {
				throw new Error("Expected root to be returned from reduce");
			}
			return node;
		}

		reduce(ast, visitors, pathOpts) {
			return ___R$project$rome$$romejs$compiler$methods$reduce_ts$default(
				ast,
				Array.isArray(visitors) ? visitors : [visitors],
				this,
				pathOpts,
			);
		}

		record(record) {
			this.records.push(record);
		}

		hasLintDecisions() {
			const {lint} = this.options;
			return lint !== undefined && lint.hasDecisions === true;
		}

		getLintDecisions(key) {
			const {lint} = this.options;
			if (lint === undefined) {
				return [];
			}

			const {globalDecisions = []} = lint;

			if (key === undefined) {
				return globalDecisions;
			}

			const {decisionsByPosition} = lint;
			if (decisionsByPosition === undefined) {
				return globalDecisions;
			}

			return [...globalDecisions, ...(decisionsByPosition[key] || [])];
		}

		addFixableDiagnostic(nodes, description, diag = {}) {
			const {old, fixed: defaultFixed, suggestions} = nodes;
			const target = nodes.target === undefined ? nodes.old : nodes.target;

			const {category} = description;
			const advice = [...description.advice];
			const loc = this.getLoc(target);
			const oldCode =
				loc === undefined
					? ""
					: this.sourceText.slice(
							___R$project$rome$$romejs$ob1$index_ts$ob1Get0(loc.start.index),
							___R$project$rome$$romejs$ob1$index_ts$ob1Get0(loc.end.index),
						);

			let fixed = defaultFixed;

			// Add recommended fix
			if (defaultFixed !== undefined) {
				advice.push({
					type: "log",
					category: "info",
					text: "Recommended fix",
				});

				advice.push({
					type: "diff",
					diff: ___R$project$rome$$romejs$string$diff$index_ts$default(
						oldCode,
						___R$$priv$project$rome$$romejs$compiler$lib$CompilerContext_ts$getFormattedCodeFromExitResult(
							defaultFixed,
						),
					),
				});
				if (loc === undefined) {
					advice.push({
						type: "log",
						category: "error",
						text: "Unable to find target location",
					});
				} else {
					advice.push(
						___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionAdviceAction({
							filename: this.displayFilename,
							decision: ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionString({
								action: "fix",
								filename: this.displayFilename,
								category,
								start: loc.start,
							}),
							shortcut: "f",
							noun: "Apply fix",
							instruction: "To apply this fix run",
						}),
					);

					advice.push(
						___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionAdviceAction({
							extra: true,
							noun: "Apply fix for ALL files with this category",
							instruction: "To apply fix for ALL files with this category run",
							decision: ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionGlobalString(
								"fix",
								category,
							),
						}),
					);
				}
			}

			if (suggestions !== undefined) {
				// If we have lint decisions then find the fix that corresponds with this suggestion
				if (this.hasLintDecisions()) {
					const decisions = this.getLintDecisions(
						___R$project$rome$$romejs$compiler$lint$decisions_ts$deriveDecisionPositionKey(
							"fix",
							loc,
						),
					);
					for (const decision of decisions) {
						if (
							decision.category === category &&
							decision.action === "fix" &&
							decision.id !== undefined
						) {
							const suggestion = suggestions[decision.id];
							if (suggestion !== undefined) {
								fixed = suggestion.fixed;
							}
						}
					}
				}

				// Add advice suggestions
				let index = 0;
				for (const suggestion of suggestions) {
					const num = index + 1;

					const titlePrefix =
						suggestions.length === 1 ? "Suggested fix" : "Suggested fix #" + num;
					advice.push({
						type: "log",
						category: "none",
						text: "<emphasis>" +
						titlePrefix +
						":</emphasis> " +
						suggestion.title,
					});

					advice.push({
						type: "diff",
						diff: ___R$project$rome$$romejs$string$diff$index_ts$default(
							oldCode,
							___R$$priv$project$rome$$romejs$compiler$lib$CompilerContext_ts$getFormattedCodeFromExitResult(
								suggestion.fixed,
							),
						),
					});

					advice.push({
						type: "log",
						category: "info",
						text: suggestion.description,
					});

					if (loc === undefined) {
						advice.push({
							type: "log",
							category: "error",
							text: "Unable to find target location",
						});
					} else {
						advice.push(
							___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionAdviceAction({
								noun: suggestions.length === 1
									? "Apply suggested fix"
									: 'Apply suggested fix "' + suggestion.title + '"',
								shortcut: String(num),
								instruction: "To apply this fix run",
								filename: this.displayFilename,
								decision: ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionString({
									filename: this.displayFilename,
									action: "fix",
									category,
									start: loc.start,
									id: index,
								}),
							}),
						);
					}

					index++;
				}
			}

			const {suppressed} = this.addLocDiagnostic(
				loc,
				Object.assign({}, description, {advice}),
				Object.assign({}, diag, {fixable: true}),
			);

			if (suppressed || fixed === undefined) {
				return old;
			}

			return fixed;
		}

		addLocDiagnostic(loc, description, contextDiag = {}) {
			let origins = [];
			if (this.origin !== undefined) {
				origins.push(this.origin);
			}
			if (contextDiag.origins !== undefined) {
				origins = origins.concat(contextDiag.origins);
			}

			if (loc !== undefined && loc.filename !== this.filename) {
				throw new Error(
					"Trying to add a location from " +
					loc.filename +
					" on a Context from " +
					this.path,
				);
			}

			const {category, advice = []} = description;
			if (loc !== undefined && loc.start !== undefined) {
				advice.push(
					___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionAdviceAction({
						noun: "Add suppression comment",
						shortcut: "s",
						instruction: "To suppress this error run",
						filename: this.displayFilename,
						decision: ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionString({
							filename: this.displayFilename,
							action: "suppress",
							category,
							start: loc.start,
						}),
					}),
				);

				advice.push(
					___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionAdviceAction({
						extra: true,
						noun: "Add suppression comments for ALL files with this category",
						instruction: "To add suppression comments for ALL files with this category run",
						decision: ___R$project$rome$$romejs$compiler$lint$decisions_ts$buildLintDecisionGlobalString(
							"suppress",
							category,
						),
					}),
				);
			}
			const ___R$ = contextDiag;
			const diag = Object.assign({}, ___R$);
			delete diag.marker;
			const {marker} = ___R$;
			const diagnostic = this.diagnostics.addDiagnostic(
				Object.assign(
					{},
					diag,
					{
						description: Object.assign({}, description, {advice}),
						location: {
							marker,
							mtime: this.mtime,
							filename: this.filename,
							start: loc === undefined ? undefined : loc.start,
							end: loc === undefined ? undefined : loc.end,
							language: "js",
							sourceType: this.sourceType,
						},
						origins,
					},
				),
			);

			let suppressed = this.hasLocSuppression(loc, description.category);

			// If we've been passed lint decisions then consider it suppressed unless we have been specifically told to fix it
			const diagCategory = description.category;
			if (this.hasLintDecisions()) {
				suppressed = true;

				const decisions = this.getLintDecisions(
					___R$project$rome$$romejs$compiler$lint$decisions_ts$deriveDecisionPositionKey(
						"fix",
						loc,
					),
				);
				for (const {category, action} of decisions) {
					if (category === diagCategory && action === "fix") {
						suppressed = false;
					}
				}
			}

			return {
				loc,
				diagnostic,
				suppressed,
			};
		}

		getLoc(node) {
			if (node === undefined) {
				return undefined;
			}

			if (Array.isArray(node)) {
				return ___R$project$rome$$romejs$parser$core$index_ts$extractSourceLocationRangeFromNodes(
					node,
				);
			} else {
				return node.loc;
			}
		}

		addNodeDiagnostic(node, description, diag = {}) {
			return this.addLocDiagnostic(this.getLoc(node), description, diag);
		}
	}


  // project-rome/@romejs/compiler/lib/Path.ts




	class ___R$project$rome$$romejs$compiler$lib$Path_ts$default {
		constructor(node, context, opts) {
			const ancestryPaths = opts.ancestryPaths || [];
			this.ancestryPaths = ancestryPaths;

			if (
				node ===
				___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$MOCK_PARENT
			) {
				this.parentPath = this;
			} else if (ancestryPaths.length === 0) {
				this.parentPath = new ___R$project$rome$$romejs$compiler$lib$Path_ts$default(
					___R$project$rome$$romejs$ast$js$temp$JSMockParent_ts$MOCK_PARENT,
					context,
					{
						isMock: true,
					},
				);
			} else {
				this.parentPath = ancestryPaths[0];
			}

			this.node = node;
			this.parent = this.parentPath.node;
			this.context = context;

			const parentScope =
				opts.parentScope === undefined ||
				___R$project$rome$$romejs$ast$utils$isRoot_ts$isRoot(node)
					? context.getRootScope()
					: opts.parentScope;

			let scope = opts.scope;
			if (scope === undefined) {
				if (opts.noScopeCreation === true) {
					scope = parentScope;
				} else {
					scope = parentScope.evaluate(node, this.parent, true);
				}
			}
			this.scope = scope;

			this.nodeKey = opts.nodeKey;
			this.listKey = opts.listKey;

			this.isMock = opts.isMock === true;
			this.opts = opts;

			this.hooks = opts.hooks === undefined ? [] : opts.hooks;
		}

		callHook(
			// rome-ignore lint/js/noExplicitAny
			descriptor,
			arg,
			optionalRet,
			requiredDepth,
		) {
			const hook = this.findHook(descriptor, requiredDepth);
			if (hook === undefined) {
				if (optionalRet === undefined) {
					throw new Error("No " + descriptor.name + " hook found");
				} else {
					return optionalRet;
				}
			}
			if (descriptor.call === undefined) {
				throw new Error("Hook doesn't have a call method");
			}

			const {depth, ref} = hook;
			const {state, value, bubble} = descriptor.call(this, ref.state, arg);
			ref.state = state;

			if (bubble === true) {
				return this.callHook(descriptor, arg, value, depth + 1);
			} else {
				return value;
			}
		}

		provideHook(
			// rome-ignore lint/js/noExplicitAny
			descriptor,
			state,
		) {
			this.hooks.push({
				state: Object.assign({}, descriptor.initialState, state),
				descriptor,
			});

			return this.node;
		}

		findHook(descriptor, requiredDepth = 0) {
			let depth = 0;
			for (const {hooks} of this.ancestryPaths) {
				for (const hook of hooks) {
					if (hook.descriptor === descriptor) {
						if (depth === requiredDepth) {
							return {ref: hook, depth};
						} else {
							depth++;
						}
					}
				}
			}
			return undefined;
		}

		findAncestry(callback) {
			for (const path of this.ancestryPaths) {
				if (callback(path)) {
					return path;
				}
			}
			return undefined;
		}

		getChildPath(key) {
			// rome-ignore lint/js/noExplicitAny
			const node = (this.node)[key];
			if (node === undefined) {
				throw new Error(
					"Attempted to get child path for " + key + " but no such node existed",
				);
			}

			return new ___R$project$rome$$romejs$compiler$lib$Path_ts$default(
				node,
				this.context,
				{
					parentScope: this.scope,
					ancestryPaths: this.ancestryPaths.concat([this]),
					nodeKey: key,
				},
			);
		}

		getChildPaths(key) {
			// rome-ignore lint/js/noExplicitAny
			const nodes = (this.node)[key];

			if (nodes === undefined) {
				throw new Error(
					"Attempted to get child paths for " +
					key +
					" but no such node existed",
				);
			}

			if (!Array.isArray(nodes)) {
				throw new Error("Expected child nodes for " + key + " to be an array");
			}

			const ancestryPaths = this.ancestryPaths.concat([this]);

			return nodes.map((node, i) => {
				return new ___R$project$rome$$romejs$compiler$lib$Path_ts$default(
					node,
					this.context,
					{
						parentScope: this.scope,
						ancestryPaths,
						listKey: i,
						nodeKey: key,
					},
				);
			});
		}

		getPathKeys() {
			const parts = [];

			let path = this;
			while (path !== undefined && !path.isMock) {
				if (path.listKey !== undefined) {
					parts.push(String(path.listKey));
				}
				if (path.nodeKey !== undefined) {
					parts.push(path.nodeKey);
				}
				path = path.parentPath;
			}

			return parts.reverse();
		}

		fork(newNode) {
			return new ___R$project$rome$$romejs$compiler$lib$Path_ts$default(
				newNode,
				this.context,
				this.getPathOptions(),
			);
		}

		getPathOptions() {
			return Object.assign(
				{},
				this.opts,
				{
					hooks: this.hooks,
					parentScope: this.scope === undefined
						? undefined
						: this.scope.parentScope,
				},
			);
		}

		traverse(name, callback) {
			this.reduce({
				name,
				enter(path) {
					callback(path);
					return path.node;
				},
			});
		}

		reduce(visitors, opts) {
			return ___R$project$rome$$romejs$compiler$methods$reduce_ts$default(
				this.node,
				Array.isArray(visitors) ? visitors : [visitors],
				this.context,
				Object.assign({}, this.getPathOptions(), opts),
			);
		}
	}


  // project-rome/@romejs/compiler/lib/Record.ts
class ___R$project$rome$$romejs$compiler$lib$Record_ts$default {}


  // project-rome/@romejs/compiler/lib/Cache.ts


	let ___R$$priv$project$rome$$romejs$compiler$lib$Cache_ts$projectIdCounter = 0;
	const ___R$$priv$project$rome$$romejs$compiler$lib$Cache_ts$projectToId = new WeakMap();

	class ___R$project$rome$$romejs$compiler$lib$Cache_ts$default {
		constructor() {
			this.cache = new WeakMap();
		}

		static buildQuery(req, additionalOptions) {
			const {ast, project, options} = req;
			const keyParts = [];

			let projectId = ___R$$priv$project$rome$$romejs$compiler$lib$Cache_ts$projectToId.get(
				project,
			);
			if (projectId === undefined) {
				projectId = ___R$$priv$project$rome$$romejs$compiler$lib$Cache_ts$projectIdCounter++;
				___R$$priv$project$rome$$romejs$compiler$lib$Cache_ts$projectToId.set(
					project,
					projectId,
				);
			}

			// Add project config cache counter
			keyParts.push(String(projectId));

			// Add options if they exist
			const extra = Object.assign({}, options, additionalOptions);
			if (Object.keys(extra).length > 0) {
				keyParts.push(JSON.stringify(extra));
			}

			return {
				ast,
				key: keyParts.join(";"),
			};
		}

		get(query) {
			const astCache = this.cache.get(query.ast);
			if (astCache) {
				return astCache.get(query.key);
			} else {
				return undefined;
			}
		}

		set(query, value) {
			let astCache = this.cache.get(query.ast);
			if (astCache === undefined) {
				astCache = new Map();
				this.cache.set(query.ast, astCache);
			}
			astCache.set(query.key, value);
		}
	}


  // project-rome/@romejs/compiler/methods/transform.ts


	const ___R$$priv$project$rome$$romejs$compiler$methods$transform_ts$transformCaches = ___R$project$rome$$romejs$compiler$transforms$index_ts$stageOrder.map(() =>
		new ___R$project$rome$$romejs$compiler$lib$Cache_ts$default()
	);

	async function ___R$project$rome$$romejs$compiler$methods$transform_ts$default(
		req,
	) {
		const stage = req.stage === undefined ? "compile" : req.stage;

		const {options, project} = req;
		let ast = req.ast;

		const cacheQuery = ___R$project$rome$$romejs$compiler$lib$Cache_ts$default.buildQuery(
			req,
		);

		const stageNo = ___R$project$rome$$romejs$compiler$transforms$index_ts$stageOrder.indexOf(
			stage,
		);

		// Check this exact stage cache
		const stageCache = ___R$$priv$project$rome$$romejs$compiler$methods$transform_ts$transformCaches[stageNo];
		const cached = stageCache.get(cacheQuery);
		if (cached !== undefined) {
			return cached;
		}

		let prevStageDiagnostics = [];
		let prevStageCacheDeps = [];
		let suppressions;

		// Run the previous stage
		if (stageNo > 0) {
			const prevStage = await ___R$project$rome$$romejs$compiler$methods$transform_ts$default(
				Object.assign(
					{},
					req,
					{
						stage: ___R$project$rome$$romejs$compiler$transforms$index_ts$stageOrder[stageNo -
						1],
					},
				),
			);
			prevStageDiagnostics = prevStage.diagnostics;
			prevStageCacheDeps = prevStage.cacheDependencies;
			ast = prevStage.ast;
			suppressions = prevStage.suppressions;
		}

		const context = new ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default({
			suppressions,
			ref: req.ref,
			sourceText: req.sourceText,
			ast,
			project,
			options,
			origin: {
				category: "transform",
			},
		});

		const transformFactory = ___R$project$rome$$romejs$compiler$transforms$index_ts$stageTransforms[stage];
		const transforms = transformFactory(project.config, options);

		let visitors = await context.normalizeTransforms(transforms);

		const compiledAst = context.reduceRoot(ast, visitors);

		const res = {
			suppressions: context.suppressions,
			diagnostics: [
				...prevStageDiagnostics,
				...context.diagnostics.getDiagnostics(),
			],
			cacheDependencies: [
				...prevStageCacheDeps,
				...context.getCacheDependencies(),
			],
			ast: compiledAst,
		};
		stageCache.set(cacheQuery, res);
		return res;
	}


  // project-rome/@romejs/compiler/api/compile.ts


	const ___R$$priv$project$rome$$romejs$compiler$api$compile_ts$compileCache = new ___R$project$rome$$romejs$compiler$lib$Cache_ts$default();

	async function ___R$project$rome$$romejs$compiler$api$compile_ts$default(req) {
		const {sourceText, ast} = req;

		const query = ___R$project$rome$$romejs$compiler$lib$Cache_ts$default.buildQuery(
			req,
		);
		const cached = ___R$$priv$project$rome$$romejs$compiler$api$compile_ts$compileCache.get(
			query,
		);
		if (cached) {
			return cached;
		}

		const {
			ast: transformedAst,
			diagnostics,
			suppressions,
			cacheDependencies,
		} = await ___R$project$rome$$romejs$compiler$methods$transform_ts$default(
			req,
		);

		const formatted = ___R$project$rome$$romejs$formatter$index_ts$formatAST(
			transformedAst,
			{
				typeAnnotations: false,
				indent: req.stage === "compileForBundle" ? 1 : 0,
				sourceMaps: true,
				sourceText,
				allowInterpreterDirective: false,
			},
		);

		if (req.inputSourceMap !== undefined) {
			const inputSourceMap = ___R$project$rome$$romejs$codec$source$map$SourceMapConsumer_ts$default.fromJSON(
				req.inputSourceMap,
			);
			const mappings = [];

			for (const mapping of formatted.mappings) {
				const actual = inputSourceMap.exactOriginalPositionFor(
					mapping.original.line,
					mapping.original.column,
				);

				if (actual !== undefined) {
					if (
						mapping.original.line !== actual.line ||
						mapping.original.column !== actual.column
					) {
						mappings.push(
							Object.assign(
								{},
								mapping,
								{
									original: {
										line: actual.line,
										column: actual.column,
									},
								},
							),
						);
					} else {
						mappings.push(mapping);
					}
				}
			}

			formatted.mappings = mappings;
		}

		const res = {
			compiledCode: formatted.code,
			mappings: formatted.mappings,
			diagnostics: [...ast.diagnostics, ...diagnostics],
			cacheDependencies,
			suppressions,
			sourceText,
		};

		___R$$priv$project$rome$$romejs$compiler$api$compile_ts$compileCache.set(
			query,
			res,
		);
		return res;
	}


  // project-rome/@romejs/compiler/api/analyzeDependencies/records.ts
class ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportRecord
		extends ___R$project$rome$$romejs$compiler$lib$Record_ts$default {
		constructor(data) {
			super();
			this.data = data;
		}
	}

	class ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord
		extends ___R$project$rome$$romejs$compiler$lib$Record_ts$default {
		constructor(data) {
			super();
			this.data = data;
		}
	}

	class ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$EscapedCJSRefRecord
		extends ___R$project$rome$$romejs$compiler$lib$Record_ts$default {
		constructor(node) {
			super();
			this.node = node;
		}
	}

	class ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$CJSExportRecord
		extends ___R$project$rome$$romejs$compiler$lib$Record_ts$default {
		constructor(node) {
			super();
			this.node = node;
		}
	}

	class ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$CJSVarRefRecord
		extends ___R$project$rome$$romejs$compiler$lib$Record_ts$default {
		constructor(node) {
			super();
			this.node = node;
		}
	}

	class ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ESExportRecord
		extends ___R$project$rome$$romejs$compiler$lib$Record_ts$default {
		constructor(kind, node) {
			super();
			this.node = node;
			this.kind = kind;
		}
	}

	class ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$TopLevelAwaitRecord
		extends ___R$project$rome$$romejs$compiler$lib$Record_ts$default {
		constructor(loc) {
			super();
			this.loc = loc;
		}
	}

	class ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportUsageRecord
		extends ___R$project$rome$$romejs$compiler$lib$Record_ts$default {
		constructor(isTop, data) {
			super();
			this.isTop = isTop;
			this.data = data;
		}
	}


  // project-rome/@romejs/compiler/api/analyzeDependencies/utils.ts
function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isOptional(
		path,
	) {
		for (const {node} of path.ancestryPaths) {
			if (node.type === "JSTryStatement") {
				return true;
			}
		}

		return false;
	}

	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isTypeKind(
		kind,
	) {
		return kind === "type" || kind === "typeof";
	}

	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getImportKind(
		kind,
	) {
		return kind === undefined ? "value" : kind;
	}

	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getExportKind(
		kind,
	) {
		return kind === undefined ? "value" : kind;
	}

	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$maybeTypeBinding(
		kind,
		scope,
		id,
	) {
		const binding = scope.getBinding(id.name);
		if (
			kind === "value" &&
			binding instanceof
			___R$project$rome$$romejs$compiler$scope$bindings_ts$TypeBinding
		) {
			return "type";
		} else {
			return kind;
		}
	}

	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getKindWithSpecifiers(
		rawKind,
		specifierKinds,
	) {
		const kind = ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getImportKind(
			rawKind,
		);
		if (
			___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isTypeKind(
				kind,
			) ||
			specifierKinds.length === 0
		) {
			return kind;
		}

		for (const specifierKind of specifierKinds) {
			if (specifierKind === "value") {
				return "value";
			}
		}
		return "type";
	}

	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getAnalyzeExportValueType(
		scope,
		node,
	) {
		if (node === undefined) {
			return "other";
		}

		if (node.type === "JSIdentifier") {
			const binding = scope.getBinding(node.name);

			if (
				binding instanceof
				___R$project$rome$$romejs$compiler$scope$bindings_ts$FunctionBinding
			) {
				return "function";
			}

			if (
				binding instanceof
				___R$project$rome$$romejs$compiler$scope$bindings_ts$ClassBinding
			) {
				return "class";
			}

			if (
				binding instanceof
				___R$project$rome$$romejs$compiler$scope$bindings_ts$TypeBinding
			) {
				const {typeKind} = binding;
				switch (typeKind) {
					case "function":
					case "class":
						return typeKind;
				}
			}
		}

		if (node.type === "JSFunctionDeclaration") {
			return "function";
		}

		if (node.type === "JSClassDeclaration" || node.type === "JSClassExpression") {
			return "class";
		}

		return "other";
	}

	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
		scope,
		node,
	) {
		if (node.type === "JSReferenceIdentifier") {
			const binding = scope.getBinding(node.name);
			if (binding !== undefined) {
				return binding.node.loc;
			}
		}

		return node.loc;
	}

	function ___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$arraySame(
		a,
		b,
		callback,
	) {
		if (a.length !== b.length) {
			return false;
		}

		for (let i = 0; i < a.length; i++) {
			if (!callback(a[i], b[i])) {
				return false;
			}
		}

		return true;
	}

	function ___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$syntaxSame(
		a,
		b,
	) {
		return a === b;
	}

	function ___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$exportsSame(
		a,
		b,
	) {
		if (a.type !== b.type) {
			return false;
		}

		if (a.kind !== b.kind) {
			return false;
		}

		switch (a.type) {
			case "local":
				return b.type === "local" && a.name === b.name;

			case "external":
				return (
					b.type === "external" &&
					a.imported === b.imported &&
					a.exported === b.exported &&
					a.source === b.source
				);

			case "externalAll":
				return b.type === "externalAll" && a.source === b.source;

			case "externalNamespace":
				return (
					b.type === "externalNamespace" &&
					a.source === b.source &&
					a.exported === b.exported
				);
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$dependencyNameSame(
		a,
		b,
	) {
		return a.kind === b.kind && a.name === b.name;
	}

	function ___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$dependenciesSame(
		a,
		b,
	) {
		return (
			a.all === b.all &&
			a.async === b.async &&
			a.optional === b.optional &&
			a.source === b.source &&
			a.type === b.type &&
			___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$arraySame(
				a.names,
				b.names,
				___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$dependencyNameSame,
			)
		);
	}

	// Check if the shape of two analyzeDependencyResults are equal. Ignoring location information
	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$areAnalyzeDependencyResultsEqual(
		a,
		b,
	) {
		if (
			(a.firstTopAwaitLocation === undefined &&
			b.firstTopAwaitLocation !== undefined) ||
			(b.firstTopAwaitLocation === undefined &&
			a.firstTopAwaitLocation !== undefined)
		) {
			return false;
		}

		if (a.moduleType !== b.moduleType) {
			return false;
		}

		if (
			!___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$arraySame(
				a.syntax,
				b.syntax,
				___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$syntaxSame,
			)
		) {
			return false;
		}

		if (
			!___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$arraySame(
				a.exports,
				b.exports,
				___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$exportsSame,
			)
		) {
			return false;
		}

		if (
			!___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$arraySame(
				a.dependencies,
				b.dependencies,
				___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$dependenciesSame,
			)
		) {
			return false;
		}

		return true;
	}


  // project-rome/@romejs/compiler/api/analyzeDependencies/visitors/es.ts
const ___R$project$rome$$romejs$compiler$api$analyzeDependencies$visitors$es_ts$default = {
		name: "analyzeDependenciesES",
		enter(path) {
			const {node, scope, context} = path;

			// import('./bar');
			if (
				node.type === "JSImportCall" &&
				node.argument.type === "JSStringLiteral"
			) {
				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportRecord({
						type: "es",
						async: true,
						kind: "value",
						names: [],
						loc: node.argument.loc,
						source: node.argument.value,
						optional: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isOptional(
							path,
						),
						all: true,
					}),
				);
			}

			// Local bindings exports:
			// export const foo
			// export function foo() {}
			// export {};
			if (node.type === "JSExportLocalDeclaration") {
				const valueType = ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getAnalyzeExportValueType(
					scope,
					node.declaration,
				);
				for (const id of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
					node,
				)) {
					const kind = ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$maybeTypeBinding(
						___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getExportKind(
							node.exportKind,
						),
						scope,
						id,
					);
					context.record(
						new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
							type: "local",
							valueType,
							kind,
							loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
								scope,
								id,
							),
							name: id.name,
						}),
					);
				}

				const {specifiers} = node;
				if (specifiers !== undefined) {
					for (const specifier of specifiers) {
						const kind = ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$maybeTypeBinding(
							___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getExportKind(
								specifier.exportKind || node.exportKind,
							),
							scope,
							specifier.local,
						);

						context.record(
							new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
								type: "local",
								loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
									scope,
									specifier.local,
								),
								valueType: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getAnalyzeExportValueType(
									scope,
									specifier.local,
								),
								kind,
								name: specifier.exported.name,
							}),
						);
					}
				}
			}

			// export default
			if (node.type === "JSExportDefaultDeclaration") {
				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
						type: "local",
						loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
							scope,
							node.declaration,
						),
						valueType: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getAnalyzeExportValueType(
							scope,
							node.declaration,
						),
						kind: "value",
						name: "default",
					}),
				);
			}

			// External binding exports:
			// export {} from '';
			if (node.type === "JSExportExternalDeclaration") {
				const {source} = node;
				const specifiersKinds = [];
				const exportedNames = [];

				const {namedSpecifiers, defaultSpecifier, namespaceSpecifier} = node;

				if (defaultSpecifier !== undefined) {
					context.record(
						new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
							type: "external",
							kind: "value",
							loc: defaultSpecifier.loc,
							imported: "default",
							exported: defaultSpecifier.exported.name,
							source: source.value,
						}),
					);
				}

				if (namespaceSpecifier !== undefined) {
					context.record(
						new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
							type: "externalNamespace",
							kind: "value",
							loc: namespaceSpecifier.loc,
							exported: namespaceSpecifier.exported.name,
							source: source.value,
						}),
					);
				}

				for (const specifier of namedSpecifiers) {
					const kind = ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getImportKind(
						specifier.exportKind || node.exportKind,
					);
					specifiersKinds.push(kind);

					exportedNames.push({
						name: specifier.local.name,
						kind,
						loc: specifier.loc,
					});

					context.record(
						new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
							type: "external",
							kind,
							loc: specifier.loc,
							imported: specifier.local.name,
							exported: specifier.exported.name,
							source: source.value,
						}),
					);
				}

				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportRecord({
						type: "es",
						async: false,
						kind: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getKindWithSpecifiers(
							node.exportKind,
							specifiersKinds,
						),
						names: exportedNames,
						loc: source.loc,
						source: source.value,
						optional: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isOptional(
							path,
						),
						all: false,
					}),
				);
			}

			// TS: import A = require('B');
			if (
				node.type === "TSImportEqualsDeclaration" &&
				node.moduleReference.type === "TSExternalModuleReference"
			) {
				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportRecord({
						type: "cjs",
						kind: "value",
						optional: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isOptional(
							path,
						),
						loc: node.loc,
						source: node.moduleReference.expression.value,
						names: [],
						all: true,
						async: false,
					}),
				);
			}

			// export * from '';
			if (node.type === "JSExportAllDeclaration") {
				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportRecord({
						type: "es",
						async: false,
						kind: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getExportKind(
							node.exportKind,
						),
						optional: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isOptional(
							path,
						),
						loc: node.source.loc,
						names: [],
						source: node.source.value,
						all: true,
					}),
				);

				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
						type: "externalAll",
						loc: node.loc,
						kind: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getExportKind(
							node.exportKind,
						),
						source: node.source.value,
					}),
				);
			}

			if (
				node.type === "JSExportAllDeclaration" ||
				node.type === "JSExportDefaultDeclaration" ||
				node.type === "JSExportLocalDeclaration"
			) {
				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ESExportRecord(
						___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getExportKind(
							node.exportKind,
						),
						node,
					),
				);
			}

			// import {} from '';

			// import * as foo from '';
			if (node.type === "JSImportDeclaration") {
				let hasNamespaceSpecifier = false;
				const specifierKinds = [];
				const names = [];

				for (const specifier of ___R$project$rome$$romejs$js$ast$utils$getImportSpecifiers_ts$default(
					node,
				)) {
					if (specifier.type === "JSImportNamespaceSpecifier") {
						hasNamespaceSpecifier = true;
						break;
					}

					const kind = ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getImportKind(
						node.importKind,
					);
					specifierKinds.push(kind);

					if (specifier.type === "JSImportDefaultSpecifier") {
						names.push({
							kind,
							loc: specifier.loc,
							name: "default",
						});
					}

					if (specifier.type === "JSImportSpecifier") {
						names.push({
							kind,
							loc: specifier.loc,
							name: specifier.imported.name,
						});
					}
				}

				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportRecord({
						type: "es",
						async: false,
						kind: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getKindWithSpecifiers(
							node.importKind,
							specifierKinds,
						),
						loc: node.source.loc,
						optional: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isOptional(
							path,
						),
						source: node.source.value,
						all: hasNamespaceSpecifier,
						names,
					}),
				);
			}

			// Detect top level await
			if (
				node.type === "JSAwaitExpression" &&
				path.findAncestry((path) =>
					___R$project$rome$$romejs$js$ast$utils$isFunctionNode_ts$default(
						path.node,
					)
				) === undefined
			) {
				const {loc} = node;
				if (loc === undefined) {
					throw new Error(
						"loc is undefined on JSAwaitExpression we want to mark",
					);
				}
				context.record(
					new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$TopLevelAwaitRecord(
						loc,
					),
				);
			}

			if (node.type === "JSReferenceIdentifier") {
				const binding = path.scope.getBinding(node.name);

				// Mark references to imports outside of functions
				if (
					binding !== undefined &&
					binding instanceof
					___R$project$rome$$romejs$compiler$scope$bindings_ts$ImportBinding
				) {
					const {meta} = binding;

					// We can skip this if it's referencing a namespace
					if (meta.type !== "name") {
						return node;
					}

					// These are nodes that will defer the execution of code outside the init path

					// (They could still be triggered with an actual function call but this is just for some basic analysis)
					const deferredExecution = path.findAncestry((path) =>
						___R$project$rome$$romejs$js$ast$utils$isFunctionNode_ts$default(
							path.node,
						) || path.node.type === "JSClassProperty"
					);
					const isTop = deferredExecution === undefined;

					let kind = ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getImportKind(
						meta.kind,
					);
					if (
						___R$project$rome$$romejs$js$ast$utils$isInTypeAnnotation_ts$default(
							path,
						)
					) {
						kind = "type";
					}

					context.record(
						new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportUsageRecord(
							isTop,
							{
								kind,
								loc: node.loc,
								local: node.name,
								imported: meta.imported,
								source: meta.source,
							},
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/api/analyzeDependencies/visitors/cjs.ts
const ___R$project$rome$$romejs$compiler$api$analyzeDependencies$visitors$cjs_ts$default = {
		name: "analyzeDependenciesCJS",
		enter(path) {
			const {node, parent, scope, context} = path;

			// Handle require()
			if (node.type === "JSCallExpression") {
				const {callee, arguments: args} = node;

				const isRequire =
					callee.type === "JSReferenceIdentifier" &&
					callee.name === "require" &&
					path.scope.hasBinding("require") === false;
				const sourceArg = args[0];

				if (
					isRequire &&
					args.length === 1 &&
					sourceArg.type === "JSStringLiteral"
				) {
					context.record(
						new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportRecord({
							type: "cjs",
							kind: "value",
							optional: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$isOptional(
								path,
							),
							loc: node.loc,
							source: sourceArg.value,
							names: [],
							all: true,
							async: false,
						}),
					);
				}
			}

			// Detect assignments to exports and module.exports as definitely being an CJS module
			if (node.type === "JSAssignmentExpression") {
				const isModuleExports =
					path.scope.getBinding("module") === undefined &&
					(___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
						node.left,
						"module.exports",
					) ||
					___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
						node.left,
						"module.exports.**",
					));
				const isExports =
					path.scope.getBinding("exports") === undefined &&
					(___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
						node.left,
						"exports",
					) ||
					___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
						node.left,
						"exports.**",
					));

				if (isModuleExports || isExports) {
					context.record(
						new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$CJSExportRecord(
							node,
						),
					);
				}

				if (isModuleExports) {
					const {right} = node;

					if (
						___R$project$rome$$romejs$ast$js$objects$JSObjectExpression_ts$jsObjectExpression.is(
							right,
						)
					) {
						context.record(
							new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
								type: "local",
								loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
									scope,
									node.right,
								),
								valueType: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getAnalyzeExportValueType(
									scope,
									node.right,
								),
								kind: "value",
								name: "default",
							}),
						);

						for (const prop of right.properties) {
							// Don't allow spread, unknown, or computed properties
							if (
								prop.type === "JSSpreadProperty" ||
								(prop.key.type === "JSComputedPropertyKey" &&
								prop.key.value.type !== "JSStringLiteral")
							) {
								context.record(
									new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$EscapedCJSRefRecord(
										prop,
									),
								);
								continue;
							}

							const key = prop.key.value;
							let name;
							if (key.type === "JSIdentifier") {
								name = key.name;
							} else if (key.type === "JSStringLiteral") {
								name = key.value;
							} else {
								// Unknown key literal
								context.record(
									new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$EscapedCJSRefRecord(
										key,
									),
								);
								continue;
							}

							let target = prop.type === "JSObjectMethod" ? prop : prop.value;

							context.record(
								new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
									type: "local",
									loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
										scope,
										target,
									),
									valueType: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getAnalyzeExportValueType(
										scope,
										target,
									),
									kind: "value",
									name,
								}),
							);
						}
					} else {
						const source = ___R$project$rome$$romejs$js$ast$utils$getRequireSource_ts$default(
							node.right,
							scope,
						);
						if (source === undefined) {
							context.record(
								new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
									type: "local",
									loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
										scope,
										node.right,
									),
									valueType: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getAnalyzeExportValueType(
										scope,
										node.right,
									),
									kind: "value",
									name: "default",
								}),
							);
						} else {
							context.record(
								new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
									type: "externalAll",
									loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
										scope,
										node.right,
									),
									kind: "value",
									source,
								}),
							);

							context.record(
								new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
									type: "external",
									kind: "value",
									loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
										scope,
										node.right,
									),
									imported: "default",
									exported: "default",
									source,
								}),
							);
						}
					}
				}

				if (isExports) {
					const {parts} = ___R$project$rome$$romejs$js$ast$utils$getNodeReferenceParts_ts$default(
						node.left,
					);

					if (parts.length >= 2) {
						// parts[0] is exports
						const name = parts[1].value;

						context.record(
							new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord({
								type: "local",
								loc: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getDeclarationLoc(
									scope,
									node.right,
								),
								valueType: ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$getAnalyzeExportValueType(
									scope,
									node.right,
								),
								kind: "value",
								name,
							}),
						);
					}
				}
			}

			if (node.type === "JSReferenceIdentifier") {
				const binding = path.scope.getBinding(node.name);

				// Detect references to exports and module
				if (binding === undefined) {
					if (
						node.name === "__filename" ||
						node.name === "__dirname" ||
						node.name === "require" ||
						node.name === "module" ||
						node.name === "exports"
					) {
						context.record(
							new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$CJSVarRefRecord(
								node,
							),
						);
					}

					if (node.name === "module" || node.name === "exports") {
						const inMemberExpression =
							parent.type === "JSMemberExpression" && parent.object === node;
						if (!inMemberExpression) {
							context.record(
								new ___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$EscapedCJSRefRecord(
									node,
								),
							);
						}
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/api/analyzeDependencies/visitors/index.ts
const ___R$project$rome$$romejs$compiler$api$analyzeDependencies$visitors$index_ts$default = [
		___R$project$rome$$romejs$compiler$api$analyzeDependencies$visitors$es_ts$default,
		___R$project$rome$$romejs$compiler$api$analyzeDependencies$visitors$cjs_ts$default,
	];


  // project-rome/@romejs/compiler/api/analyzeDependencies/index.ts
const ___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$index_ts$analyzeCache = new ___R$project$rome$$romejs$compiler$lib$Cache_ts$default();

	async function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$index_ts$default(
		req,
	) {
		let {ast, project} = req;

		const query = ___R$project$rome$$romejs$compiler$lib$Cache_ts$default.buildQuery(
			req,
		);
		const cached = ___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$index_ts$analyzeCache.get(
			query,
		);
		if (cached) {
			return cached;
		}

		const context = new ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default({
			ref: req.ref,
			sourceText: req.sourceText,
			ast,
			project,
			origin: {
				category: "analyzeDependencies",
			},
		});
		({ast} = await ___R$project$rome$$romejs$compiler$methods$transform_ts$default(
			Object.assign({}, req, {stage: "pre"}),
		));
		context.reduce(
			ast,
			___R$project$rome$$romejs$compiler$api$analyzeDependencies$visitors$index_ts$default,
		);

		//
		const importFirstUsage = [];
		const seenImportFirstUsage = new Set();

		// Extract records
		const exports = [];
		const dependenciesBySource = new Map();

		const esValueExports = [];
		const cjsExports = [];
		let firstTopAwaitLocation;

		// TODO description
		let hasCJSRef = false;

		// Whether we have a default export, used to automatically add one for CJS
		let hasDefaultExport = false;

		// Find the import sources that are only used as a type
		const sourcesUsedAsType = new Set();
		const sourcesUsedAsValue = new Set();
		for (const record of context.records) {
			let data;

			if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportUsageRecord
			) {
				data = record.data;
			}

			// This has to be a separate if or else TS wont refine it...
			if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord &&
				record.data.type !== "local"
			) {
				data = record.data;
			}

			if (data !== undefined) {
				const {kind, source} = data;
				if (kind === "type") {
					sourcesUsedAsType.add(source);
				} else {
					sourcesUsedAsValue.add(source);
				}
			}
		}
		for (const source of sourcesUsedAsValue) {
			sourcesUsedAsType.delete(source);
		}

		// Process rest of the records
		for (const record of context.records) {
			if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$EscapedCJSRefRecord
			) {
				exports.push({
					type: "local",
					loc: record.node.loc,
					kind: "value",
					valueType: "other",
					name: "*",
				});
			}

			if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportRecord
			) {
				let {data} = record;

				// If this source was only ever used as a type then convert us to a value
				if (
					data.type === "es" &&
					data.kind === "value" &&
					sourcesUsedAsType.has(data.source)
				) {
					const names = [];

					for (const name of data.names) {
						names.push(Object.assign({}, name, {kind: "type"}));
					}

					data = Object.assign({}, data, {kind: "type", names});
				}

				// If we have multiple import records for this file, then merge them together
				const existing = dependenciesBySource.get(data.source);
				if (existing === undefined) {
					dependenciesBySource.set(data.source, data);
				} else {
					let kind;
					if (data.kind === existing.kind) {
						kind = data.kind;
					} else {
						kind = "value";
					}

					const combinedRecord = {
						type: data.type === "es" && existing.type === "es" ? "es" : "cjs",
						kind,
						optional: existing.optional && data.optional,
						async: existing.async || data.async,
						source: data.source,
						all: existing.all || data.all,
						names: [...existing.names, ...data.names],
						loc: existing.loc || data.loc,
					};

					// Map ordering is by insertion time, so in the case where the previous import was a type import
					// then we don't want to place our combined record in that position, it should be at the end.
					// Inserting a type import statement at the top of the file shouldn't change the execution order
					// if it was imported later
					if (existing.kind === "type" && data.kind === "value") {
						dependenciesBySource.delete(data.source);
					}

					dependenciesBySource.set(data.source, combinedRecord);
				}
			} else if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ExportRecord
			) {
				exports.push(record.data);
			} else if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$CJSVarRefRecord
			) {
				hasCJSRef = true;
			} else if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$CJSExportRecord
			) {
				cjsExports.push(record.node);
			} else if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ESExportRecord
			) {
				// No point checking for ES imported in CJS because it would have been a syntax error
				if (record.kind === "value") {
					esValueExports.push(record.node);
				}
			} else if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$TopLevelAwaitRecord
			) {
				if (firstTopAwaitLocation === undefined) {
					firstTopAwaitLocation = record.loc;
				}
			} else if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$ImportUsageRecord &&
				record.isTop &&
				record.data.kind === "value"
			) {
				// Track the first reference to a value import that's not in a function
				// This is used to detect module cycles
				const {data} = record;
				const key = data.source + ":" + data.imported;
				if (seenImportFirstUsage.has(key)) {
					continue;
				}

				seenImportFirstUsage.add(key);
				importFirstUsage.push(data);
			}
		}

		// Build dependencies
		const dependencies = Array.from(dependenciesBySource.values());

		// Infer the module type
		let moduleType = ast.sourceType === "script" ? "cjs" : "es";

		// Infer module type in legacy mode
		if (project.config.bundler.mode === "legacy") {
			if (cjsExports.length > 0) {
				moduleType = "cjs";
			} else if (esValueExports.length > 0) {
				moduleType = "es";
			} else if (hasCJSRef) {
				moduleType = "cjs";
			} else {
				moduleType = "unknown";
			}
		}

		//
		for (const record of context.records) {
			if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$CJSVarRefRecord
			) {
				if (project.config.bundler.mode === "modern" && moduleType === "es") {
					/*context.addNodeDiagnostic(record.node, {
          category: 'analyzeDependencies',
          message: `CommonJS variable <emphasis>${
            record.node.name
          }</emphasis> is not available in an ES module`,
        });*/
				}
			} else if (
				record instanceof
				___R$project$rome$$romejs$compiler$api$analyzeDependencies$records_ts$CJSExportRecord
			) {
				if (moduleType === "es") {
					context.addNodeDiagnostic(
						record.node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.ANALYZE_DEPENDENCIES.CJS_EXPORT_IN_ES,
					);
				}
			}
		}

		// Add an implicit default import for CJS if there is none
		if (moduleType === "cjs" && !hasDefaultExport) {
			exports.push({
				type: "local",
				loc: undefined,
				kind: "value",
				valueType: "other",
				name: "default",
			});
		}

		const topLevelLocalBindings = {};

		// Get all top level bindings
		for (const [name, binding] of context.getRootScope().evaluate(ast).getOwnBindings()) {
			topLevelLocalBindings[name] = binding.node.loc;
		}

		const res = {
			topLevelLocalBindings,
			moduleType,
			firstTopAwaitLocation,
			exports,
			dependencies,
			importFirstUsage,
			syntax: ast.syntax,
			diagnostics: [...ast.diagnostics, ...context.diagnostics.getDiagnostics()],
		};
		___R$$priv$project$rome$$romejs$compiler$api$analyzeDependencies$index_ts$analyzeCache.set(
			query,
			res,
		);
		return res;
	}

	function ___R$project$rome$$romejs$compiler$api$analyzeDependencies$index_ts$mergeAnalyzeDependencies(
		main,
		second,
	) {
		const exports = [...main.exports];

		// Take only local type exports
		for (const exp of second.exports) {
			if (exp.type === "local" && exp.kind === "type") {
				exports.push(exp);
			}

			// Ensure that all external exports are only reachable with `type`
			if (exp.type === "external" || exp.type === "externalAll") {
				exports.push(Object.assign({}, exp, {kind: "type"}));
			}
		}

		return Object.assign(
			{},
			main,
			{exports, diagnostics: [...main.diagnostics, ...second.diagnostics]},
		);
	}


  // project-rome/@romejs/compiler/api/createHook.ts






	function ___R$project$rome$$romejs$compiler$api$createHook_ts$default(
		descriptor,
	) {
		return descriptor;
	}


  // project-rome/@romejs/compiler/types.ts
const ___R$project$rome$$romejs$compiler$types_ts = {};









































  // project-rome/@romejs/compiler/index.ts
const ___R$project$rome$$romejs$compiler$index_ts = {
		get CompilerContext() {
			return ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default;
		},
		get PathOptions() {
			return ___R$project$rome$$romejs$compiler$lib$Path_ts$PathOptions;
		},
		get Path() {
			return ___R$project$rome$$romejs$compiler$lib$Path_ts$default;
		},
		get Record() {
			return ___R$project$rome$$romejs$compiler$lib$Record_ts$default;
		},
		get Cache() {
			return ___R$project$rome$$romejs$compiler$lib$Cache_ts$default;
		},
		get lint() {
			return ___R$project$rome$$romejs$compiler$lint$index_ts$default;
		},
		get compile() {
			return ___R$project$rome$$romejs$compiler$api$compile_ts$default;
		},
		get analyzeDependencies() {
			return ___R$project$rome$$romejs$compiler$api$analyzeDependencies$index_ts$default;
		},
		get mergeAnalyzeDependencies() {
			return ___R$project$rome$$romejs$compiler$api$analyzeDependencies$index_ts$mergeAnalyzeDependencies;
		},
		get Scope() {
			return ___R$project$rome$$romejs$compiler$scope$Scope_ts$default;
		},
		get areAnalyzeDependencyResultsEqual() {
			return ___R$project$rome$$romejs$compiler$api$analyzeDependencies$utils_ts$areAnalyzeDependencyResultsEqual;
		},
		get getPrefixedBundleNamespace() {
			return ___R$project$rome$$romejs$compiler$transforms$compileForBundle$_utils_ts$getPrefixedNamespace;
		},
		get createHook() {
			return ___R$project$rome$$romejs$compiler$api$createHook_ts$default;
		},
		get extractSuppressionsFromProgram() {
			return ___R$project$rome$$romejs$compiler$suppressions_ts$extractSuppressionsFromProgram;
		},
		get matchesSuppression() {
			return ___R$project$rome$$romejs$compiler$suppressions_ts$matchesSuppression;
		},
		get LintResult() {
			return ___R$project$rome$$romejs$compiler$lint$index_ts$LintResult;
		},
		get CompileResult() {
			return ___R$project$rome$$romejs$compiler$api$compile_ts$CompileResult;
		},
		get HookDescriptor() {
			return ___R$project$rome$$romejs$compiler$api$createHook_ts$HookDescriptor;
		},
	};
	Object.keys(___R$project$rome$$romejs$compiler$lint$decisions_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$compiler$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$compiler$lint$decisions_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$compiler$scope$bindings_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$compiler$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$compiler$scope$bindings_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$compiler$constants_ts).forEach(function(
		key,
	) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$compiler$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$compiler$constants_ts[key];
				},
			},
		);
	});
	Object.keys(___R$project$rome$$romejs$compiler$types_ts).forEach(function(key) {
		if (key === "default") return undefined;
		Object.defineProperty(
			___R$project$rome$$romejs$compiler$index_ts,
			key,
			{
				enumerable: true,
				configurable: true,
				get: function get() {
					return ___R$project$rome$$romejs$compiler$types_ts[key];
				},
			},
		);
	});


  // project-rome/@romejs/compiler/lint/suppressions.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$suppressions_ts$getStartLine(
		node,
	) {
		const {loc} = node;
		if (loc === undefined) {
			return undefined;
		} else {
			return loc.start.line;
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$suppressions_ts$buildSuppressionCommentValue(
		categories,
	) {
		return (
			___R$project$rome$$romejs$compiler$suppressions_ts$SUPPRESSION_START +
			" " +
			Array.from(categories).join(" ")
		);
	}

	function ___R$project$rome$$romejs$compiler$lint$suppressions_ts$addSuppressions(
		context,
		ast,
	) {
		if (!context.hasLintDecisions()) {
			return ast;
		}

		const visitedLines = new Set();

		function addComment(path, node, decisions) {
			// Find all suppression decisions
			const suppressionCategories = new Set();
			for (const {category, action} of decisions) {
				if (action === "suppress") {
					suppressionCategories.add(category);
				}
			}
			if (suppressionCategories.size === 0) {
				return node;
			}

			// Find existing suppression comment
			let updateComment;
			const lastComment = context.comments.getCommentsFromIds(
				node.leadingComments,
			).pop();
			if (
				lastComment !== undefined &&
				lastComment.value.includes(
					___R$project$rome$$romejs$compiler$suppressions_ts$SUPPRESSION_START,
				)
			) {
				updateComment = lastComment;
			}

			// Insert new comment if there's none to update
			if (updateComment === undefined) {
				const id = path.callHook(
					___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$commentInjector,
					{
						type: "JSCommentLine",
						value: " " +
						___R$$priv$project$rome$$romejs$compiler$lint$suppressions_ts$buildSuppressionCommentValue(
							suppressionCategories,
						),
					},
				);

				return Object.assign(
					{},
					node,
					{leadingComments: [...(node.leadingComments || []), id]},
				);
			}

			// Remove all categories that are already included in the suppression
			for (const category of suppressionCategories) {
				if (updateComment.value.includes(category)) {
					suppressionCategories.delete(category);
				}
			}

			// We may have eliminated them all
			if (suppressionCategories.size > 0) {
				path.callHook(
					___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$commentInjector,
					Object.assign(
						{},
						updateComment,
						{
							value: updateComment.value.replace(
								___R$project$rome$$romejs$compiler$suppressions_ts$SUPPRESSION_START,
								___R$$priv$project$rome$$romejs$compiler$lint$suppressions_ts$buildSuppressionCommentValue(
									suppressionCategories,
								),
							),
						},
					),
				);
			}

			return node;
		}

		// Find the best node to attach comments to. This is generally the node with the largest range per line.
		return context.reduceRoot(
			ast,
			{
				name: "suppressionVisitor",
				enter(path) {
					const {node} = path;

					// Don't allow attaching suppression comments to a comment or program...
					if (
						node.type === "JSCommentBlock" ||
						node.type === "JSCommentLine" ||
						node.type === "JSRoot"
					) {
						return node;
					}

					const line = ___R$$priv$project$rome$$romejs$compiler$lint$suppressions_ts$getStartLine(
						node,
					);
					if (line === undefined || visitedLines.has(line)) {
						return node;
					}

					const decisions = context.getLintDecisions(
						String(___R$project$rome$$romejs$ob1$index_ts$ob1Get1(line)),
					);
					if (decisions.length === 0) {
						return node;
					}

					visitedLines.add(line);
					return addComment(path, node, decisions);
				},
			},
		);
	}


  // project-rome/@romejs/compiler/lint/rules/js/camelCase.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$normalizeCamelCase(
		name,
	) {
		if (
			!___R$project$rome$$romejs$js$ast$utils$isValidIdentifierName_ts$default(
				name,
			)
		) {
			return undefined;
		}

		if (name === "") {
			return undefined;
		}

		return name;
	}

	// Allow prefixed underscores
	function ___R$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$toVariableCamelCase(
		name,
		forceCapitalize,
	) {
		// Allow shouty constants
		if (name.toUpperCase() === name) {
			return ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$normalizeCamelCase(
				name,
			);
		}

		let prefix = "";
		let suffix = "";

		const prefixDashes = name.match(/^_+/);
		if (prefixDashes != null) {
			prefix = prefixDashes[0];
		}

		const suffixDashes = name.match(/_+$/);
		if (suffixDashes != null) {
			suffix = suffixDashes[0];
		}

		// Remove prefix and suffix
		let slicedName = name.slice(prefix.length);
		if (suffix.length > 0) {
			slicedName = slicedName.slice(0, -suffix.length);
		}

		const camelName =
			prefix +
			___R$project$rome$$romejs$string$utils$toCamelCase_ts$toCamelCase(
				slicedName,
				forceCapitalize,
			) +
			suffix;
		return ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$normalizeCamelCase(
			camelName,
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$default = {
		name: "camelCase",
		enter(path) {
			const {node, scope, context} = path;

			// Check variables
			if (node === scope.node) {
				const renames = new Map();

				for (const [name, binding] of scope.getOwnBindings()) {
					const camelName = ___R$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$toVariableCamelCase(
						name,
					);
					if (camelName !== undefined && camelName !== name) {
						const {suppressed} = context.addNodeDiagnostic(
							binding.node,
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_VARIABLE_CAMEL_CASE(
								name,
								camelName,
							),
							{fixable: true},
						);
						if (!suppressed) {
							renames.set(binding, camelName);
						}
					}
				}

				if (renames.size > 0) {
					return ___R$project$rome$$romejs$js$ast$utils$renameBindings_ts$default(
						path,
						renames,
					);
				}
			}

			// Check regular jsIdentifiers, variable jsIdentifiers have already been checked above
			if (
				___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(node) &&
				!___R$project$rome$$romejs$js$ast$utils$isVariableIdentifier_ts$default(
					node,
				)
			) {
				const {name} = node;
				const camelName = ___R$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$toVariableCamelCase(
					name,
				);
				if (camelName !== undefined && camelName !== name) {
					return context.addFixableDiagnostic(
						{
							old: node,
							suggestions: [
								{
									title: "Convert to camelCase",
									description: "This may not be safe. Are you passing this into a third party module?",
									fixed: Object.assign({}, node, {name: camelName}),
								},
							],
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_IDENTIFIER_CAMEL_CASE(
							name,
							camelName,
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/caseSingleStatement.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$caseSingleStatement_ts$default = {
		name: "caseSingleStatement",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSSwitchCase" && node.consequent.length > 1) {
				return context.addFixableDiagnostic(
					{
						old: node,
						fixed: Object.assign(
							{},
							node,
							{
								consequent: [
									___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.quick(
										node.consequent,
									),
								],
							},
						),
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_CASE_SINGLE_STATEMENT,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/confusingLanguage.json
const ___R$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_json$default = [
		{
			"description": "<emphasis>whitelist</emphasis> can be considered raciallly charged language",
			"word": "whitelist",
			"suggestion": "allowlist",
			"advice": [
				{
					"type": "log",
					"category": "info",
					"text": 'See <hyperlink target="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6148600/" /> for a more detailed explanation',
				},
			],
		},
		{
			"description": "<emphasis>blacklist</emphasis> can be considered raciallly charged language",
			"word": "blacklist",
			"suggestion": "denylist",
			"advice": [
				{
					"type": "log",
					"category": "info",
					"text": 'See <hyperlink target="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6148600/" /> for a more detailed explanation',
				},
			],
		},
	];


  // project-rome/@romejs/compiler/lint/rules/js/confusingLanguage.ts

	// Fast regex for checking if we need to validate a string
	const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_ts$regex = new RegExp(
		___R$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_json$default.map((
			term,
		) => term.word).join("|"),
		"gi",
	);



	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_ts$check(
		loc,
		input,
	) {
		let fixed = input;
		if (
			!___R$$priv$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_ts$regex.test(
				input,
			)
		) {
			return {
				fixed,
				results: [],
			};
		}

		const lower = input.toLowerCase();
		const tracker = new ___R$project$rome$$romejs$parser$core$index_ts$PositionTracker(
			lower,
			loc.start,
		);
		const results = [];

		// This is a bit more complicated since we try to do the minimal amount of work
		for (let i = 0; i < lower.length; i++) {
			const char = lower[i];

			for (const {advice, word, description, suggestion} of (___R$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_json$default)) {
				if (char === word[0] && lower.startsWith(word, i)) {
					const wordWithSourceCasing = input.slice(i, i + word.length);

					results.push({
						// We want to preserve the original casing
						word: wordWithSourceCasing,
						description,
						advice,
						suggestion: ___R$project$rome$$romejs$string$utils$preserveCasing_ts$preserveCasing(
							wordWithSourceCasing,
							suggestion,
						),
						startIndex: i,
						endIndex: i + word.length,
						// Calculate the actual location of this
						loc: Object.assign(
							{},
							loc,
							{
								start: tracker.getPositionFromIndex(
									___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(i),
								),
								end: tracker.getPositionFromIndex(
									___R$project$rome$$romejs$ob1$index_ts$ob1Coerce0(
										i + word.length,
									),
								),
							},
						),
					});

					i += word.length;
					break;
				}
			}
		}

		// Walk backwards through the results, autofixing with the suggestions
		// Walking backwards means we don't need to maintain offsets
		for (let i = results.length - 1; i >= 0; i--) {
			const result = results[i];
			fixed =
				fixed.slice(0, result.startIndex) +
				result.suggestion +
				fixed.slice(result.endIndex);
		}

		return {
			results,
			fixed,
		};
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_ts$default = {
		name: "inconsiderateLanguage",
		enter(path) {
			const {node, context} = path;

			const {loc} = node;
			if (loc !== undefined) {
				// Infer a string to check
				let value;
				if (node.type === "JSCommentBlock" || node.type === "JSCommentLine") {
					value = node.value;
				}
				if (
					___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(
						node,
					)
				) {
					value = node.name;
				}

				if (value !== undefined) {
					// Produce diagnostics
					const {results, fixed} = ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_ts$check(
						loc,
						value,
					);
					let suppressed = false;
					for (const {loc, word, description, suggestion, advice} of results) {
						({suppressed} = context.addLocDiagnostic(
							loc,
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_CONFUSING_LANGUAGE(
								description,
								word,
								suggestion,
								advice,
							),
							{fixable: true},
						));

						if (suppressed) {
							break;
						}
					}

					// Autofix if not suppressed
					if (results.length > 0 && !suppressed) {
						if (node.type === "JSCommentBlock" || node.type === "JSCommentLine") {
							return Object.assign({}, node, {value: fixed});
						}

						if (
							___R$project$rome$$romejs$js$ast$utils$isIdentifierish_ts$default(
								node,
							)
						) {
							return Object.assign({}, node, {name: fixed});
						}
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/defaultExportSameBasename.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$defaultExportSameBasename_ts$isValidDeclaration(
		node,
	) {
		return (
			node.type === "JSFunctionDeclaration" ||
			node.type === "JSClassDeclaration"
		);
	}

	function ___R$project$rome$$romejs$compiler$lint$rules$js$defaultExportSameBasename_ts$filenameToId(
		path,
		capitalize,
	) {
		let basename = path.getExtensionlessBasename();

		if (basename === "index") {
			if (!path.hasParent()) {
				return undefined;
			}

			// If the filename is `index` then use the parent directory name
			basename = path.getParent().getExtensionlessBasename();
		}

		return ___R$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$toVariableCamelCase(
			basename,
			capitalize,
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$defaultExportSameBasename_ts$default = {
		name: "defaultExportSameBasename",
		enter(path) {
			const {context, node} = path;

			if (node.type === "JSRoot") {
				let defaultExport;
				for (const bodyNode of node.body) {
					if (bodyNode.type === "JSExportDefaultDeclaration") {
						defaultExport = bodyNode;
						break;
					}
				}

				if (
					defaultExport !== undefined &&
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$defaultExportSameBasename_ts$isValidDeclaration(
						defaultExport.declaration,
					)
				) {
					const {declaration} = defaultExport;

					// Get the export default id
					const id = declaration.id;
					if (id !== undefined && context.path !== undefined) {
						const type =
							declaration.type === "JSFunctionDeclaration"
								? "function"
								: "class";
						const basename = ___R$project$rome$$romejs$compiler$lint$rules$js$defaultExportSameBasename_ts$filenameToId(
							context.path,
							type === "class",
						);

						if (basename !== undefined && basename !== id.name) {
							const correctFilename = id.name + context.path.getExtensions();

							return context.addFixableDiagnostic(
								{
									target: id,
									old: node,
									fixed: ___R$project$rome$$romejs$js$ast$utils$renameBindings_ts$default(
										path,
										new Map([[id.name, basename]]),
									),
								},
								___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_DEFAULT_EXPORT_SAME_BASENAME({
									defaultName: id.name,
									defaultType: type,
									actualFilename: basename,
									correctFilename,
								}),
							);
						}
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/doubleEquals.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$doubleEquals_ts$SUGGESTION_DESCRIPTION = "This may be unsafe if you are relying on type coercion";
	const ___R$project$rome$$romejs$compiler$lint$rules$js$doubleEquals_ts$default = {
		name: "doubleEquals",
		enter(path) {
			const {node, context} = path;

			if (
				node.type === "JSBinaryExpression" &&
				node.right.type !== "JSNullLiteral" &&
				node.left.type !== "JSNullLiteral"
			) {
				if (node.operator === "!=") {
					context.addFixableDiagnostic(
						{
							old: node,
							suggestions: [
								{
									title: "Use !==",
									description: ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$doubleEquals_ts$SUGGESTION_DESCRIPTION,
									fixed: Object.assign({}, node, {operator: "!=="}),
								},
							],
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NEGATE_DOUBLE_EQUALS,
					);
				}

				if (node.operator === "==") {
					context.addFixableDiagnostic(
						{
							old: node,
							suggestions: [
								{
									title: "Use ===",
									description: ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$doubleEquals_ts$SUGGESTION_DESCRIPTION,
									fixed: Object.assign({}, node, {operator: "==="}),
								},
							],
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_DOUBLE_EQUALS,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/duplicateImportSource.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$duplicateImportSource_ts$default = {
		name: "duplicateImport",
		enter(path) {
			const {node} = path;

			if (node.type === "JSRoot") {
				const skipImports = new Set();
				const seenSources = new Map();
				let shouldFix = false;

				for (const bodyNode of node.body) {
					if (bodyNode.type === "JSImportDeclaration") {
						const source = bodyNode.source.value;

						// Allow duplicate sources if the `importKind` is different
						const sourceKey =
							bodyNode.importKind === undefined
								? source
								: bodyNode.importKind + ":" + source;

						const seenLoc = seenSources.get(sourceKey);
						if (seenLoc === undefined) {
							seenSources.set(sourceKey, bodyNode.loc);
						} else {
							const {suppressed} = path.context.addNodeDiagnostic(
								bodyNode,
								___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_DUPLICATE_IMPORT_SOURCE(
									seenLoc,
								),
								{fixable: true},
							);

							if (suppressed) {
								skipImports.add(bodyNode);
							} else {
								shouldFix = true;
							}
						}
					}
				}

				// Defer fixing unless it's totally necessary since there's additional overhead
				if (shouldFix) {
					const newBody = [];

					for (let i = 0; i < node.body.length; i++) {
						const bodyNode = node.body[i];

						if (bodyNode.type === "JSImportDeclaration") {
							// Skip import if it's already been consumed
							if (skipImports.has(bodyNode)) {
								continue;
							}

							let {
								namedSpecifiers,
								defaultSpecifier,
								namespaceSpecifier,
							} = bodyNode;

							// Find and concat all duplicate imports
							for (let x = i + 1; x < node.body.length; x++) {
								const possibleDuplicateNode = node.body[x];

								if (
									possibleDuplicateNode.type === "JSImportDeclaration" &&
									bodyNode.source.value === possibleDuplicateNode.source.value &&
									bodyNode.importKind === possibleDuplicateNode.importKind &&
									!skipImports.has(possibleDuplicateNode)
								) {
									skipImports.add(possibleDuplicateNode);
									namedSpecifiers = [
										...namedSpecifiers,
										...possibleDuplicateNode.namedSpecifiers,
									];

									// We do not currently handle renaming duplicate namespace and default bindings
									if (defaultSpecifier === undefined) {
										defaultSpecifier = possibleDuplicateNode.defaultSpecifier;
									}
									if (namespaceSpecifier === undefined) {
										namespaceSpecifier = possibleDuplicateNode.namespaceSpecifier;
									}
								}
							}

							newBody.push(
								Object.assign(
									{},
									bodyNode,
									{defaultSpecifier, namespaceSpecifier, namedSpecifiers},
								),
							);
						} else {
							newBody.push(bodyNode);
						}
					}

					return Object.assign({}, node, {body: newBody});
				}
			}
			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/emptyBlocks.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyBlocks_ts$isEmpty(
		node,
	) {
		if (node.innerComments !== undefined && node.innerComments.length > 0) {
			return false;
		}

		if (node.type === "JSEmptyStatement") {
			return true;
		}

		if (node.type === "JSBlockStatement" && node.body.length === 0) {
			return true;
		}

		return false;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$emptyBlocks_ts$default = {
		name: "emptyBlocks",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSIfStatement") {
				if (
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyBlocks_ts$isEmpty(
						node.consequent,
					)
				) {
					context.addNodeDiagnostic(
						node.consequent,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_EMPTY_BLOCKS,
					);
				}

				if (
					node.alternate !== undefined &&
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyBlocks_ts$isEmpty(
						node.alternate,
					)
				) {
					context.addNodeDiagnostic(
						node.alternate,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_EMPTY_BLOCKS,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/emptyMatches.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$isQuantifiedMinZero(
		el,
	) {
		return el.type === "JSRegExpQuantified" && el.min === 0;
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$lintEmptyMatches(
		expr,
	) {
		if (expr.type === "JSRegExpSubExpression") {
			for (const item of expr.body) {
				let matches = false;
				if (
					item.type === "JSRegExpGroupNonCapture" ||
					item.type === "JSRegExpGroupCapture"
				) {
					matches = ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$lintEmptyMatches(
						item.expression,
					);
				} else {
					matches = ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$isQuantifiedMinZero(
						item,
					);
				}
				if (!matches) {
					return false;
				}
			}
			return true;
		} else {
			return (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$lintEmptyMatches(
					expr.left,
				) ||
				___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$lintEmptyMatches(
					expr.right,
				)
			);
		}
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$default = {
		name: "emptyMatches",
		enter(path) {
			const {context, node} = path;
			if (
				node.type === "JSRegExpLiteral" &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$lintEmptyMatches(
					node.expression,
				)
			) {
				context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_EMPTY_MATCHES,
				);
			}
			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/getterReturn.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$getterReturn_ts$default = {
		name: "getterReturn",
		enter(path) {
			const {node} = path;

			if (
				(node.type === "JSClassMethod" || node.type === "JSObjectMethod") &&
				node.kind === "get"
			) {
				for (const record of ___R$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$default(
					node.body,
				)) {
					if (record.type === "INVALID") {
						path.context.addNodeDiagnostic(
							record.node,
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_GETTER_RETURN(
								record.description,
							),
						);
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/importDefaultBasename.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$importDefaultBasename_ts$default = {
		name: "importDefaultBasename",
		enter(path) {
			const {node} = path;

			if (node.type === "JSImportDeclaration") {
				const {defaultSpecifier} = node;
				if (defaultSpecifier === undefined) {
					return node;
				}

				const expectedName = ___R$project$rome$$romejs$compiler$lint$rules$js$defaultExportSameBasename_ts$filenameToId(
					___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
						node.source.value,
					),
					false,
				);
				if (expectedName === undefined) {
					return node;
				}

				const localName = defaultSpecifier.local.name.name;
				if (localName !== expectedName) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_IMPORT_DEFAULT_BASENAME(
							localName,
							expectedName,
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/negationElse.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$negationElse_ts$isNegation(
		node,
	) {
		return (
			node.type === "JSUnaryExpression" &&
			node.prefix === true &&
			node.operator === "!"
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$negationElse_ts$default = {
		name: "negationElse",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSIfStatement" &&
				node.alternate !== undefined &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$js$negationElse_ts$isNegation(
					node.test,
				)
			) {
				return path.context.addFixableDiagnostic(
					{
						old: node,
						fixed: Object.assign(
							{},
							node,
							{
								test: node.test.argument,
								consequent: node.alternate,
								alternate: node.consequent,
							},
						),
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NEGATION_ELSE,
				);
			}

			if (
				node.type === "JSConditionalExpression" &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$js$negationElse_ts$isNegation(
					node.test,
				)
			) {
				return path.context.addFixableDiagnostic(
					{
						old: node,
						fixed: Object.assign(
							{},
							node,
							{
								test: node.test.argument,
								consequent: node.alternate,
								alternate: node.consequent,
							},
						),
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NEGATION_ELSE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noArguments.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noArguments_ts$default = {
		name: "noArguments",
		enter(path) {
			const {node, scope} = path;

			if (node.type === "JSReferenceIdentifier" && node.name === "arguments") {
				const args = scope.getBinding("arguments");
				if (args && args.kind === "arguments") {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_ARGUMENTS,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noAsyncPromiseExecutor.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noAsyncPromiseExecutor_ts$default = {
		name: "noAsyncPromiseExecutor",
		enter(path) {
			const {node, context} = path;

			if (
				node.type === "JSNewExpression" &&
				node.callee.type === "JSReferenceIdentifier" &&
				node.callee.name === "Promise" &&
				node.arguments.length > 0 &&
				(node.arguments[0].type === "JSArrowFunctionExpression" ||
				node.arguments[0].type === "JSFunctionExpression") &&
				node.arguments[0].head.async
			) {
				context.addNodeDiagnostic(
					node.arguments[0],
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_ASYNC_PROMISE_EXECUTOR,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noCatchAssign.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noCatchAssign_ts$default = {
		name: "noCatchAssign",
		enter(path) {
			const {node, context, scope} = path;

			if (node.type === "JSAssignmentIdentifier") {
				const binding = scope.getBinding(node.name);

				if (binding !== undefined && binding.kind === "catch") {
					context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_CATCH_ASSIGN,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noCommaOperator.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noCommaOperator_ts$default = {
		name: "noCommaOperator",
		enter(path) {
			const {node} = path;

			if (node.type === "JSSequenceExpression") {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_COMMA_OPERATOR,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noCompareNegZero.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noCompareNegZero_ts$OPERATORS_TO_CHECK = [
		">",
		">=",
		"<",
		"<=",
		"==",
		"===",
		"!=",
		"!==",
	];

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noCompareNegZero_ts$isNegZero(
		node,
	) {
		return (
			node.type === "JSUnaryExpression" &&
			node.operator === "-" &&
			node.argument.type === "JSNumericLiteral" &&
			node.argument.value === 0
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$noCompareNegZero_ts$default = {
		name: "noCompareNegZero",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSBinaryExpression" &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noCompareNegZero_ts$OPERATORS_TO_CHECK.includes(
					node.operator,
				) &&
				(___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noCompareNegZero_ts$isNegZero(
					node.left,
				) ||
				___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noCompareNegZero_ts$isNegZero(
					node.right,
				))
			) {
				if (node.operator === "===") {
					return path.context.addFixableDiagnostic(
						{
							old: node,
							fixed: ___R$project$rome$$romejs$js$ast$utils$template_ts$default.expression`Object.is(${node.left}, ${node.right})`,
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_COMPARE_NEG_ZERO(
							node.operator,
						),
					);
				} else {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_COMPARE_NEG_ZERO(
							node.operator,
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noCondAssign.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noCondAssign_ts$default = {
		name: "noCondAssign",
		enter(path) {
			const {node} = path;

			if (
				(node.type === "JSIfStatement" ||
				node.type === "JSForStatement" ||
				node.type === "JSWhileStatement" ||
				node.type === "JSDoWhileStatement") &&
				node.test &&
				node.test.type === "JSAssignmentExpression"
			) {
				path.context.addNodeDiagnostic(
					node.test,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_COND_ASSIGN,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noDebugger.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noDebugger_ts$default = {
		name: "noDebugger",
		enter(path) {
			const {node} = path;

			if (node.type === "JSDebuggerStatement") {
				return path.context.addFixableDiagnostic(
					{
						old: node,
						fixed: ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE,
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_DEBUGGER,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noDelete.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noDelete_ts$default = {
		name: "noDelete",
		enter(path) {
			const {context, node} = path;

			if (
				node.type === "JSUnaryExpression" &&
				node.operator === "delete" &&
				node.argument.type === "JSMemberExpression"
			) {
				const left = node.argument;
				return context.addFixableDiagnostic(
					{
						old: node,
						fixed: ___R$project$rome$$romejs$ast$js$expressions$JSAssignmentExpression_ts$jsAssignmentExpression.create(
							{
								operator: "=",
								left: ___R$project$rome$$romejs$ast$js$expressions$JSMemberExpression_ts$jsMemberExpression.create({
									object: left.object,
									property: left.property,
								}),
								right: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.create({
									name: "undefined",
								}),
							},
							node,
						),
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_DELETE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noDeleteVars.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noDeleteVars_ts$default = {
		name: "noDeleteVars",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSUnaryExpression" &&
				node.operator === "delete" &&
				node.argument.type === "JSReferenceIdentifier"
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_DELETE_VARS,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noDupeArgs.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noDupeArgs_ts$default = {
		name: "noDupeArgs",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSFunctionHead") {
				const uniqueIdentifiers = new Set();

				for (const param of node.params) {
					for (const {name} of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
						param,
					)) {
						if (uniqueIdentifiers.has(name)) {
							context.addNodeDiagnostic(
								param,
								___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_DUPE_ARGS(
									name,
								),
							);
						}

						uniqueIdentifiers.add(name);
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noDuplicateCase.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noDuplicateCase_ts$default = {
		name: "noDuplicateCase",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSSwitchStatement") {
				const uniqueSwitchCases = new Set();

				for (const param of node.cases) {
					if (param.test && param.test.type === "JSStringLiteral") {
						const {test} = param;

						if (uniqueSwitchCases.has(test.value)) {
							context.addNodeDiagnostic(
								test,
								___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_DUPLICATE_CASE(
									test.value,
								),
							);
						}

						uniqueSwitchCases.add(test.value);
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lib/DiagnosticsDuplicateHelper.ts


	class ___R$project$rome$$romejs$compiler$lib$DiagnosticsDuplicateHelper_ts$DiagnosticsDuplicateHelper {
		constructor(context, descriptionFactory) {
			this.context = context;
			this.category = descriptionFactory("").category;
			this.descriptionFactory = descriptionFactory;
			this.locations = new Map();
		}

		addLocation(key, location) {
			const isSuppressed = this.context.hasLocSuppression(
				location,
				this.category,
			);
			if (isSuppressed) {
				// If this location has had it's diagnostic suppressed then we don't want to return
				// that it was a duplicate even if there's multiple occurences
				return {duplicate: false};
			}

			let locations = this.locations.get(key);
			if (locations === undefined) {
				locations = [];
				this.locations.set(key, locations);
			}
			locations.push(location);
			return {duplicate: locations.length > 1};
		}

		process() {
			for (const [key, locations] of this.locations) {
				if (locations.length <= 1) {
					continue;
				}

				const description = this.descriptionFactory(key);
				const firstLocation = locations[0];
				const restLocations = locations.slice(1);

				this.context.addLocDiagnostic(
					firstLocation,
					Object.assign(
						{},
						description,
						{
							advice: [
								...description.advice,
								...___R$project$rome$$romejs$diagnostics$helpers_ts$buildDuplicateLocationAdvice(
									restLocations,
								),
							],
						},
					),
				);
			}
		}
	}


  // project-rome/@romejs/compiler/lint/rules/js/noDuplicateGroupNamesInRegularExpressions.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noDuplicateGroupNamesInRegularExpressions_ts$default = {
		name: "noDuplicateGroupNamesInRegularExpressions",
		enter(path) {
			const {context, node} = path;

			if (node.type === "JSRegExpSubExpression") {
				const duplicates = new ___R$project$rome$$romejs$compiler$lib$DiagnosticsDuplicateHelper_ts$DiagnosticsDuplicateHelper(
					context,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_DUPLICATE_REGEX_GROUP_NAME,
				);

				for (const bodyItem of node.body) {
					if (bodyItem.type === "JSRegExpGroupCapture") {
						const groupName = bodyItem.name;

						if (groupName !== undefined) {
							duplicates.addLocation(groupName, bodyItem.loc);
						}
					}
				}

				duplicates.process();
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noDuplicateKeys.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noDuplicateKeys_ts$extractPropertyKey(
		node,
	) {
		if (node.key.type === "JSStaticPropertyKey") {
			const {value} = node.key;

			if (value.type === "JSPrivateName") {
				return value.id.name;
			}

			if (value.type === "JSIdentifier") {
				return value.name;
			}

			return String(value.value);
		}

		return undefined;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$noDuplicateKeys_ts$default = {
		name: "noDuplicateKeys",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSObjectExpression") {
				const duplicates = new ___R$project$rome$$romejs$compiler$lib$DiagnosticsDuplicateHelper_ts$DiagnosticsDuplicateHelper(
					context,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_DUPLICATE_KEYS,
				);

				for (const prop of node.properties) {
					if (prop.type === "JSSpreadProperty") {
						continue;
					}

					const key = ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noDuplicateKeys_ts$extractPropertyKey(
						prop,
					);
					if (key !== undefined) {
						duplicates.addLocation(key, prop.key.loc);
					}
				}

				duplicates.process();
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noEmptyCharacterClass.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noEmptyCharacterClass_ts$default = {
		name: "noEmptyCharacterClass",
		enter(path) {
			const {context, node} = path;

			if (
				node.type === "JSRegExpCharSet" &&
				node.body.length === 0 &&
				!node.invert
			) {
				context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_EMPTY_CHAR_SET,
				);
				return ___R$project$rome$$romejs$compiler$constants_ts$REDUCE_REMOVE;
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noExtraBooleanCast.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$isBooleanConstructorCall(
		node,
	) {
		return (
			node.type === "JSNewExpression" &&
			node.callee.type === "JSReferenceIdentifier" &&
			node.callee.name === "Boolean"
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$isConditionalStatement(
		node,
	) {
		return node.type === "JSConditionalExpression";
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$isInBooleanContext(
		node,
	) {
		return (
			node.type === "JSIfStatement" ||
			node.type === "JSDoWhileStatement" ||
			node.type === "JSWhileStatement" ||
			node.type === "JSForStatement"
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$getNode(
		path,
	) {
		let {node} = path;

		if (
			___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$isBooleanConstructorCall(
				node,
			)
		) {
			if (node.type === "JSNewExpression" && node.arguments.length > 0) {
				return node.arguments[0];
			}
		}

		if (
			___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$isInBooleanContext(
				node,
			) ||
			___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$isConditionalStatement(
				node,
			)
		) {
			return node.test;
		}

		return undefined;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$default = {
		name: "noExtraBooleanCast",
		enter(path) {
			const {context} = path;

			let node = ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$getNode(
				path,
			);

			if (node !== undefined) {
				if (
					(node.type === "JSUnaryExpression" &&
					node.operator === "!" &&
					node.argument.type === "JSUnaryExpression" &&
					node.argument.operator === "!") ||
					(node.type === "JSCallExpression" &&
					node.callee.type === "JSReferenceIdentifier" &&
					node.callee.name === "Boolean")
				) {
					context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_EXTRA_BOOLEAN_CAST,
					);
				}
			}

			return path.node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noFunctionAssign.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noFunctionAssign_ts$default = {
		name: "noFunctionAssign",
		enter(path) {
			const {node, scope} = path;

			if (
				node.type === "JSAssignmentIdentifier" &&
				scope.getBinding(node.name) instanceof
				___R$project$rome$$romejs$compiler$scope$bindings_ts$FunctionBinding
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_FUNCTION_ASSIGN,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noImportAssign.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noImportAssign_ts$isAssignment(
		path,
	) {
		switch (path.parentPath.node.type) {
			case "JSAssignmentExpression":
			case "JSAssignmentArrayPattern":
			case "JSAssignmentObjectPatternProperty":
			case "JSUpdateExpression":
			case "JSAssignmentObjectPattern":
			case "JSForInStatement":
				return true;

			default:
				return false;
		}
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$noImportAssign_ts$default = {
		name: "noImportAssign",
		enter(path) {
			const {node, scope} = path;

			if (
				(node.type === "JSAssignmentIdentifier" &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noImportAssign_ts$isAssignment(
					path,
				)) ||
				(node.type === "JSReferenceIdentifier" &&
				path.parentPath.node.type === "JSUpdateExpression")
			) {
				const binding = scope.getBinding(node.name);
				if (binding !== undefined && binding.kind === "import") {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_IMPORT_ASSIGN(
							node.name,
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noLabelVar.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noLabelVar_ts$default = {
		name: "noLabelVar",
		enter(path) {
			const {node, scope} = path;

			if (node.type === "JSLabeledStatement") {
				const name = node.label.name;
				const binding = scope.getBinding(name);
				const isDefined =
					binding !== undefined || scope.getRootScope().isGlobal(name);

				if (isDefined) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_LABEL_VAR,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noMultipleSpacesInRegularExpressionLiterals.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$isSpaceChar(
		node,
	) {
		return (
			node !== undefined &&
			node.type === "JSRegExpCharacter" &&
			node.value === " "
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$checkRegex(
		node,
		context,
	) {
		for (let i = 0; i < node.body.length; i++) {
			const item = node.body[i];

			// Do some quick checks to see if we'll produce an error
			if (
				!___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$isSpaceChar(
					item,
				) ||
				!___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$isSpaceChar(
					node.body[i + 1],
				)
			) {
				continue;
			}

			const spaceNodes = [];

			// Get all the space nodes
			for (let x = i; x < node.body.length; x++) {
				const item = node.body[i];
				if (
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$isSpaceChar(
						item,
					)
				) {
					spaceNodes.push(item);
					x++;
				} else {
					break;
				}
			}

			const quantifiedSpace = ___R$project$rome$$romejs$ast$js$regex$JSRegExpQuantified_ts$jsRegExpQuantified.create({
				min: spaceNodes.length,
				max: spaceNodes.length,
				target: item,
			});

			const newRegex = Object.assign(
				{},
				node,
				{
					body: [
						// Get start
						...node.body.slice(0, i - 1),
						// Inject quantifier
						quantifiedSpace,
						// Get end
						...node.body.slice(i + spaceNodes.length),
					],
				},
			);

			return context.addFixableDiagnostic(
				{
					target: spaceNodes,
					old: node,
					fixed: ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$checkRegex(
						newRegex,
						context,
					),
				},
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_MULTIPLE_SPACES_IN_REGEX_LITERAL(
					spaceNodes.length,
				),
			);
		}

		return node;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$default = {
		name: "noMultipleSpacesInRegularExpressionLiterals",
		enter(path) {
			const {context, node} = path;

			if (node.type === "JSRegExpSubExpression") {
				return ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$checkRegex(
					node,
					context,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noPosixInRegularExpression.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noPosixInRegularExpression_ts$checkRegEx(
		node,
		context,
	) {
		node.body.forEach((currNode, i) => {
			const nextNode = node.body[i + 1];
			const lastNode = node.body[node.body.length - 1];
			if (
				currNode.type === "JSRegExpCharacter" &&
				currNode.value === "[" &&
				nextNode &&
				nextNode.type === "JSRegExpCharacter" &&
				(nextNode.value === ":" || nextNode.value === ".") &&
				lastNode.type === "JSRegExpCharacter" &&
				lastNode.value === nextNode.value
			) {
				context.addNodeDiagnostic(
					currNode,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_POSIX_IN_REGULAR_EXPRESSION,
					{fixable: false},
				);
			}
		});

		return node;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$noPosixInRegularExpression_ts$default = {
		name: "noPosixInRegularExpression",
		enter(path) {
			const {context, node} = path;

			if (node.type === "JSRegExpCharSet" && node.body.length > 2) {
				return ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noPosixInRegularExpression_ts$checkRegEx(
					node,
					context,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noReferenceToNonExistingGroup.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noReferenceToNonExistingGroup_ts$findCaptureGroups(
		path,
	) {
		const regexLiteral = path.findAncestry((path) =>
			path.node.type === "JSRegExpLiteral"
		);
		if (regexLiteral === undefined) {
			return regexLiteral;
		}
		let captureGroups = [];
		regexLiteral.traverse(
			"JSRegExpLiteral",
			(path) => {
				if (path.node.type === "JSRegExpGroupCapture") {
					captureGroups.push(path.node);
				}
			},
		);
		return captureGroups;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$noReferenceToNonExistingGroup_ts$default = {
		name: "noReferenceToNonExistingGroup",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSRegExpNumericBackReference") {
				const allCaptureGroups = ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noReferenceToNonExistingGroup_ts$findCaptureGroups(
					path,
				);
				if (allCaptureGroups === undefined) {
					context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_REFERENCE_TO_NON_EXISTING_GROUP(
							String(node.value),
						),
					);
				} else {
					if (node.value > allCaptureGroups.length) {
						context.addNodeDiagnostic(
							node,
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_REFERENCE_TO_NON_EXISTING_GROUP(
								String(node.value),
							),
						);
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noSetterReturn.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noSetterReturn_ts$default = {
		name: "noSetterReturn",
		enter(path) {
			const {node} = path;

			if (
				(node.type === "JSClassMethod" || node.type === "JSObjectMethod") &&
				node.kind === "set"
			) {
				for (const record of ___R$project$rome$$romejs$js$ast$utils$getCompletionRecords_ts$default(
					node.body,
				)) {
					if (
						record.type === "COMPLETION" &&
						record.node.type === "JSReturnStatement" &&
						record.node.argument !== undefined
					) {
						path.context.addNodeDiagnostic(
							record.node,
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_SETTER_RETURN,
						);
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noShadowRestrictedNames.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noShadowRestrictedNames_ts$restrictedNames = new Set([
		...___R$project$rome$$romejs$compiler$scope$globals_ts$builtin,
		...___R$project$rome$$romejs$compiler$scope$globals_ts$es5,
		...___R$project$rome$$romejs$compiler$scope$globals_ts$es2015,
		...___R$project$rome$$romejs$compiler$scope$globals_ts$es2017,
	]);
	const ___R$project$rome$$romejs$compiler$lint$rules$js$noShadowRestrictedNames_ts$default = {
		name: "noShadowRestrictedNames",
		enter(path) {
			const {node, context, scope} = path;

			if (scope.node === node) {
				for (const [name, binding] of scope.getOwnBindings()) {
					if (
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$noShadowRestrictedNames_ts$restrictedNames.has(
							name,
						)
					) {
						context.addNodeDiagnostic(
							binding.node,
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_SHADOW_RESTRICTED_NAMES(
								name,
							),
						);
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noShorthandArrayType.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noShorthandArrayType_ts$default = {
		name: "noShorthandArrayType",
		enter(path) {
			const {node, context} = path;

			if (node.type === "TSArrayType") {
				return context.addFixableDiagnostic(
					{
						old: node,
						fixed: ___R$project$rome$$romejs$ast$js$typescript$TSTypeReference_ts$tsTypeReference.create({
							typeName: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.quick(
								"Array",
							),
							typeParameters: ___R$project$rome$$romejs$ast$js$typescript$TSTypeParameterInstantiation_ts$tsTypeParameterInstantiation.create({
								params: [node.elementType],
							}),
						}),
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_SHORTHAND_ARRAY_TYPE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noTemplateCurlyInString.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noTemplateCurlyInString_ts$default = {
		name: "noTemplateCurlyInString",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSStringLiteral") {
				const regex = /\$\{[^}]+\}/u;

				if (regex.test(node.value)) {
					context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_TEMPLATE_CURLY_IN_STRING,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noUnsafeFinally.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noUnsafeFinally_ts$default = {
		name: "noUnsafeFinally",
		enter(path) {
			const {node, context} = path;

			if (node.type === "JSTryStatement") {
				const {finalizer} = node;

				if (finalizer && finalizer.type === "JSBlockStatement") {
					for (const statement of finalizer.body) {
						if (
							statement.type === "JSThrowStatement" ||
							statement.type === "JSContinueStatement" ||
							statement.type === "JSBreakStatement" ||
							statement.type === "JSReturnStatement"
						) {
							context.addNodeDiagnostic(
								statement,
								___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_UNSAFE_FINALLY(
									statement.type,
								),
							);
						}
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/noVar.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$noVar_ts$default = {
		name: "noVar",
		enter(path) {
			const {context, node: declaration} = path;

			if (
				declaration.type === "JSVariableDeclaration" &&
				declaration.kind === "var"
			) {
				context.addNodeDiagnostic(
					declaration,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_NO_VAR,
				);
			}

			return declaration;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/preferBlockStatements.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$preferBlockStatements_ts$default = {
		name: "preferBlockStatements",
		enter(path) {
			const {context, node} = path;

			if (node.type === "JSIfStatement") {
				let shouldFix = false;
				let consequent = node.consequent;
				let alternate = node.alternate;

				if (node.consequent.type !== "JSBlockStatement") {
					consequent = ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.quick([
						node.consequent,
					]);
					shouldFix = true;
				}

				if (
					node.alternate !== undefined &&
					node.alternate.type !== "JSBlockStatement" &&
					node.alternate.type !== "JSIfStatement"
				) {
					alternate = ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.quick([
						node.alternate,
					]);
					shouldFix = true;
				}

				if (shouldFix) {
					return context.addFixableDiagnostic(
						{
							old: node,
							fixed: Object.assign({}, node, {consequent, alternate}),
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_PREFER_BLOCK_STATEMENT,
					);
				}
			} else if (
				node.type === "JSForStatement" ||
				node.type === "JSForInStatement" ||
				node.type === "JSForOfStatement" ||
				node.type === "JSDoWhileStatement" ||
				node.type === "JSWhileStatement" ||
				node.type === "JSWithStatement"
			) {
				if (node.body.type === "JSEmptyStatement") {
					const id = path.callHook(
						___R$project$rome$$romejs$compiler$transforms$defaultHooks$index_ts$commentInjector,
						{
							type: "JSCommentLine",
							value: " empty",
						},
					);

					return context.addFixableDiagnostic(
						{
							old: node,
							fixed: Object.assign(
								{},
								node,
								{
									body: ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.create({
										innerComments: [id],
										body: [],
									}),
								},
							),
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_PREFER_BLOCK_STATEMENT,
					);
				}

				if (node.body.type !== "JSBlockStatement") {
					return context.addFixableDiagnostic(
						{
							old: node,
							fixed: Object.assign(
								{},
								node,
								{
									body: ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.quick([
										node.body,
									]),
								},
							),
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_PREFER_BLOCK_STATEMENT,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/preferFunctionDeclarations.ts



	// This hook is created with a list of initial JSVariableDeclarators that contain functions we want to convert
	// We then remove any JSArrowFunctionExpression JSVariableDeclarators that contain a valid JSThisExpression
	const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$preferFunctionDeclarations_ts$hook = ___R$project$rome$$romejs$compiler$api$createHook_ts$default({
		name: "preferFunctionDeclarationsHook",
		initialState: {
			declarators: [],
		},
		call(path, state, {declarator, node}) {
			return {
				bubble: !state.declarators.includes(declarator),
				value: node,
				state: {
					declarators: state.declarators.filter((decl) => decl !== declarator),
				},
			};
		},
		exit(path, state) {
			const node = ___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.assert(
				path.node,
			);

			// We may have invalidated all declarations
			if (state.declarators.length === 0) {
				return node;
			}

			const nodes = [];

			const newNode = Object.assign(
				{},
				node,
				{
					declaration: Object.assign(
						{},
						node.declaration,
						{
							declarations: node.declaration.declarations.filter((decl) =>
								!state.declarators.includes(decl)
							),
						},
					),
				},
			);

			// We may have removed all the declarators
			if (newNode.declaration.declarations.length > 0) {
				nodes.push(newNode);
			}

			// Convert functions
			for (const decl of state.declarators) {
				// Could have been changed under us. Ignore it, we'll get it in another pass
				if (!node.declaration.declarations.includes(decl)) {
					continue;
				}

				const id = ___R$project$rome$$romejs$ast$js$patterns$JSBindingIdentifier_ts$jsBindingIdentifier.assert(
					decl.id,
				);
				const {init} = decl;

				if (
					init === undefined ||
					(init.type !== "JSFunctionExpression" &&
					init.type !== "JSArrowFunctionExpression")
				) {
					throw new Error("Invalid declarator put into state");
				}

				// TODO if this is suppressed then don't transform
				path.context.addNodeDiagnostic(
					init,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_PREFER_FUNCTION_DECLARATIONS,
					{fixable: true},
				);

				// Convert arrow function body if necessary
				const body =
					init.body.type === "JSBlockStatement"
						? init.body
						: ___R$project$rome$$romejs$ast$js$statements$JSBlockStatement_ts$jsBlockStatement.create({
								body: [
									___R$project$rome$$romejs$ast$js$statements$JSReturnStatement_ts$jsReturnStatement.quick(
										init.body,
									),
								],
							});

				nodes.push(
					___R$project$rome$$romejs$ast$js$statements$JSFunctionDeclaration_ts$jsFunctionDeclaration.create({
						id,
						head: init.head,
						body,
					}),
				);
			}

			if (nodes.length === 1) {
				return nodes[0];
			}

			return nodes;
		},
	});
	const ___R$project$rome$$romejs$compiler$lint$rules$js$preferFunctionDeclarations_ts$default = {
		name: "preferFunctionDeclarations",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSVariableDeclarationStatement" &&
				node.declaration.kind === "const"
			) {
				// Get all declarators that are function expressions, have no type annotation, and have a binding jsIdentifier id
				const declarators = node.declaration.declarations.filter((decl) => {
					return (
						decl.id.type === "JSBindingIdentifier" &&
						(decl.id.meta === undefined ||
						decl.id.meta.typeAnnotation === undefined) &&
						decl.init !== undefined &&
						(decl.init.type === "JSFunctionExpression" ||
						decl.init.type === "JSArrowFunctionExpression")
					);
				});
				if (declarators.length > 0) {
					return path.provideHook(
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$preferFunctionDeclarations_ts$hook,
						{
							declarators,
						},
					);
				}
			}

			// If we have a `this` inside of an arrow function attached as a variable declarator then we should consider
			// it valid
			if (node.type === "JSThisExpression") {
				// Try to find the arrow function owner, or stop if we get to another function
				const func = path.findAncestry((path) => {
					if (path.node.type === "JSArrowFunctionExpression") {
						return path.parent.type === "JSVariableDeclarator";
					}

					if (
						___R$project$rome$$romejs$js$ast$utils$isFunctionNode_ts$default(
							path.node,
						)
					) {
						return true;
					}

					return false;
				});

				// We'll only return an JSArrowFunctionExpression if it was inside of a JSVariableDeclarator
				if (func !== undefined && func.node.type === "JSArrowFunctionExpression") {
					return path.callHook(
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$preferFunctionDeclarations_ts$hook,
						{
							declarator: ___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclarator_ts$jsVariableDeclarator.assert(
								func.parent,
							),
							node,
						},
						node,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/preferTemplate.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$preferTemplate_ts$default = {
		name: "preferTemplate",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSBinaryExpression" &&
				node.operator === "+" &&
				((node.left.type === "JSStringLiteral" && !node.left.value.includes("`")) ||
				(node.right.type === "JSStringLiteral" &&
				!node.right.value.includes("`")))
			) {
				let autofix;

				if (node.right.type === "JSStringLiteral") {
					const quasis = [
						___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts$jsTemplateElement.create({
							raw: "",
							cooked: "",
						}),
						___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts$jsTemplateElement.create({
							raw: node.right.value,
							cooked: node.right.value,
						}),
					];
					const expressions = [
						___R$project$rome$$romejs$js$ast$utils$removeShallowLoc_ts$default(
							node.left,
						),
					];
					autofix = ___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts$jsTemplateLiteral.create({
						expressions,
						quasis,
						loc: node.loc,
					});
				}

				if (node.left.type === "JSStringLiteral") {
					const quasis = [
						___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts$jsTemplateElement.create({
							raw: node.left.value,
							cooked: node.left.value,
						}),
						___R$project$rome$$romejs$ast$js$auxiliary$JSTemplateElement_ts$jsTemplateElement.create({
							raw: "",
							cooked: "",
						}),
					];

					// We need to remove the location or else if we were to show a preview the source map would resolve to the end of
					// this node
					const expressions = [
						___R$project$rome$$romejs$js$ast$utils$removeShallowLoc_ts$default(
							node.right,
						),
					];
					autofix = ___R$project$rome$$romejs$ast$js$literals$JSTemplateLiteral_ts$jsTemplateLiteral.create({
						expressions,
						quasis,
						loc: node.loc,
					});
				}

				if (autofix === undefined) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_PREFER_TEMPLATE,
					);
				} else {
					return path.context.addFixableDiagnostic(
						{
							old: node,
							fixed: autofix,
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_PREFER_TEMPLATE,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/preferWhile.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$preferWhile_ts$default = {
		name: "preferWhile",
		enter(path) {
			const {context, node} = path;

			if (
				node.type === "JSForStatement" &&
				node.init === undefined &&
				node.update === undefined
			) {
				return context.addFixableDiagnostic(
					{
						old: node,
						fixed: ___R$project$rome$$romejs$ast$js$statements$JSWhileStatement_ts$jsWhileStatement.create(
							{
								test: node.test !== undefined
									? node.test
									: ___R$project$rome$$romejs$ast$js$literals$JSBooleanLiteral_ts$jsBooleanLiteral.quick(
											true,
										),
								body: node.body,
								leadingComments: node.leadingComments,
								trailingComments: node.trailingComments,
							},
							node,
						),
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_PREFER_WHILE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/restrictedGlobals.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$restrictedGlobals_ts$RESTRICTED_GLOBALS = [
		"event",
		"error",
	];
	const ___R$project$rome$$romejs$compiler$lint$rules$js$restrictedGlobals_ts$default = {
		name: "restrictedGlobal",
		enter(path) {
			const {node, scope} = path;

			if (
				(node.type === "JSReferenceIdentifier" ||
				node.type === "JSXReferenceIdentifier") &&
				!___R$project$rome$$romejs$js$ast$utils$isInTypeAnnotation_ts$default(
					path,
				)
			) {
				const {name} = node;
				const binding = scope.getBinding(name);

				const isDefined = binding !== undefined;
				const isAGlobal = scope.getRootScope().isGlobal(name);

				if (
					!isDefined &&
					isAGlobal &&
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$restrictedGlobals_ts$RESTRICTED_GLOBALS.includes(
						name,
					)
				) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_RESTRICTED_GLOBALS(
							name,
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/singleVarDeclarator.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$singleVarDeclarator_ts$default = {
		name: "singleVarDeclarator",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSVariableDeclarationStatement" &&
				node.declaration.declarations.length > 1
			) {
				const fixed = [];
				const {kind} = node.declaration;

				for (const declarator of node.declaration.declarations) {
					fixed.push(
						___R$project$rome$$romejs$ast$js$statements$JSVariableDeclarationStatement_ts$jsVariableDeclarationStatement.quick(
							___R$project$rome$$romejs$ast$js$auxiliary$JSVariableDeclaration_ts$jsVariableDeclaration.create({
								kind,
								declarations: [declarator],
							}),
						),
					);
				}

				return path.context.addFixableDiagnostic(
					{old: node, fixed},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_SINGLE_VAR_DECLARATOR,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/sortImportExportSpecifiers.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$compareImportSpecifiers(
		a,
		b,
	) {
		const order = ___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare(
			a.local.name.name,
			b.local.name.name,
			false,
		);
		if (order === 0) {
			return ___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare(
				a.imported.name,
				b.imported.name,
				false,
			);
		} else {
			return order;
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$compareExportSpecifiers(
		a,
		b,
	) {
		const order = ___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare(
			a.local.name,
			b.local.name,
			false,
		);
		if (order === 0) {
			return ___R$project$rome$$romejs$string$utils$naturalCompare_ts$naturalCompare(
				a.exported.name,
				b.exported.name,
				false,
			);
		} else {
			return order;
		}
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$shouldReorder(
		a,
		b,
	) {
		for (let i = 0; i < a.length && i < b.length; i++) {
			if (a[i] !== b[i]) {
				return true;
			}
		}

		return false;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$default = {
		name: "sortImportExportSpecifiers",
		enter(path) {
			const {context, node} = path;

			if (node.type === "JSImportDeclaration") {
				if (node.namedSpecifiers.length > 1) {
					const specifiers = node.namedSpecifiers;
					const sortedSpecifiers = specifiers.slice().sort(
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$compareImportSpecifiers,
					);
					if (
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$shouldReorder(
							specifiers,
							sortedSpecifiers,
						)
					) {
						return context.addFixableDiagnostic(
							{
								old: node,
								fixed: Object.assign(
									{},
									node,
									{namedSpecifiers: sortedSpecifiers},
								),
							},
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_SORT_IMPORT_SPECIFIERS,
						);
					}
				}
			} else if (node.type === "JSExportExternalDeclaration") {
				if (node.namedSpecifiers.length > 1) {
					const specifiers = node.namedSpecifiers;
					const sortedSpecifiers = specifiers.slice().sort(
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$compareExportSpecifiers,
					);
					if (
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$shouldReorder(
							specifiers,
							sortedSpecifiers,
						)
					) {
						return context.addFixableDiagnostic(
							{
								old: node,
								fixed: Object.assign(
									{},
									node,
									{namedSpecifiers: sortedSpecifiers},
								),
							},
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_SORT_EXPORT_SPECIFIERS,
						);
					}
				}
			} else if (node.type === "JSExportLocalDeclaration") {
				if (node.specifiers !== undefined && node.specifiers.length > 1) {
					const specifiers = node.specifiers;
					const sortedSpecifiers = specifiers.slice().sort(
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$compareExportSpecifiers,
					);
					if (
						___R$$priv$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$shouldReorder(
							specifiers,
							sortedSpecifiers,
						)
					) {
						return context.addFixableDiagnostic(
							{
								old: node,
								fixed: Object.assign({}, node, {specifiers: sortedSpecifiers}),
							},
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_SORT_EXPORT_SPECIFIERS,
						);
					}
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/sparseArray.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$sparseArray_ts$default = {
		name: "sparseArray",
		enter(path) {
			const {node, parent} = path;

			if (node.type === "JSArrayHole" && parent.type === "JSArrayExpression") {
				return path.context.addFixableDiagnostic(
					{
						old: node,
						fixed: ___R$project$rome$$romejs$ast$js$expressions$JSReferenceIdentifier_ts$jsReferenceIdentifier.create({
							name: "undefined",
						}),
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_SPARSE_ARRAY,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/undeclaredVariables.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$undeclaredVariables_ts$NODE_VARIABLES = [
		"require",
		"__dirname",
		"__filename",
		"module",
		"exports",
	];

	const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$undeclaredVariables_ts$BROWSER_VARIABLES = [
		"fetch",
		"document",
		"window",
		"Worker",
		"cancelAnimationFrame",
		"requestAnimationFrame",
		"WebSocket",
		"alert",
		"Blob",
		"navigator",
		"Element",
		"Text",
		"Document",
		"performance",
	];
	const ___R$project$rome$$romejs$compiler$lint$rules$js$undeclaredVariables_ts$default = {
		name: "undeclaredVariables",
		enter(path) {
			const {node, scope} = path;

			if (
				(node.type === "JSReferenceIdentifier" ||
				node.type === "JSXReferenceIdentifier") &&
				!___R$project$rome$$romejs$js$ast$utils$isInTypeAnnotation_ts$default(
					path,
				)
			) {
				const {name} = node;
				const binding = scope.getBinding(name);

				const isDefined =
					binding !== undefined ||
					scope.getRootScope().isGlobal(name) ||
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$undeclaredVariables_ts$BROWSER_VARIABLES.includes(
						name,
					) ||
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$undeclaredVariables_ts$NODE_VARIABLES.includes(
						name,
					);

				if (!isDefined) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_UNDECLARED_VARIABLES(
							name,
						),
						{
							meta: {
								identifierName: name,
							},
						},
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/unsafeNegation.ts
const ___R$project$rome$$romejs$compiler$lint$rules$js$unsafeNegation_ts$default = {
		name: "unsafeNegation",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSBinaryExpression" &&
				(node.operator === "in" || node.operator === "instanceof") &&
				node.left.type === "JSUnaryExpression" &&
				node.left.operator === "!"
			) {
				return path.context.addFixableDiagnostic(
					{
						old: node,
						fixed: ___R$project$rome$$romejs$ast$js$expressions$JSUnaryExpression_ts$jsUnaryExpression.create({
							operator: node.left.operator,
							argument: Object.assign({}, node, {left: node.left.argument}),
						}),
					},
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_UNSAFE_NEGATION,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/js/unusedVariables.ts


	const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$unusedVariables_ts$initialState = {
		usedBindings: {},
		scope: undefined,
	};

	const ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$unusedVariables_ts$provider = ___R$project$rome$$romejs$compiler$api$createHook_ts$default({
		name: "unusedVariablesProvider",
		initialState: ___R$$priv$project$rome$$romejs$compiler$lint$rules$js$unusedVariables_ts$initialState,
		call(path, state) {
			const {node} = path;
			if (
				node.type !== "JSReferenceIdentifier" &&
				node.type !== "JSXReferenceIdentifier"
			) {
				throw new Error("Expected only JSIdentifier to be dispatched");
			}

			const binding = path.scope.getBindingFromPath(path);

			// Check if this binding belongs to the scope we're tracking
			if (binding === undefined || binding.scope !== state.scope) {
				return {
					bubble: true,
					value: node,
					state,
				};
			}

			// Mark this binding as used
			return {
				value: node,
				state: Object.assign(
					{},
					state,
					{
						usedBindings: Object.assign(
							{},
							state.usedBindings,
							{[node.name]: true},
						),
					},
				),
			};
		},
		exit(path, state) {
			for (const name in state.usedBindings) {
				const used = state.usedBindings[name];
				const binding = path.scope.getBinding(name);

				if (used === false && binding !== undefined) {
					path.context.addNodeDiagnostic(
						binding.node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JS_UNUSED_VARIABLES(
							binding.kind,
							name,
						),
					);
				}
			}

			return path.node;
		},
	});
	const ___R$project$rome$$romejs$compiler$lint$rules$js$unusedVariables_ts$default = {
		name: "unusedVariables",
		enter(path) {
			const {node, scope} = path;

			if (scope.node === node) {
				let hasBindings = false;
				const usedBindings = {};

				// Get all the non-exported bindings in this file and mark them as unused
				for (const [name, binding] of scope.getOwnBindings()) {
					if (
						binding instanceof
						___R$project$rome$$romejs$compiler$scope$bindings_ts$ArgumentsBinding
					) {
						continue;
					}

					if (binding.isExported) {
						continue;
					}

					hasBindings = true;
					usedBindings[name] = false;
				}

				if (!hasBindings) {
					return node;
				}

				// For functions, consider all parameters except the last to be used
				if (
					node.type === "JSFunctionDeclaration" ||
					node.type === "JSFunctionExpression" ||
					node.type === "JSObjectMethod" ||
					node.type === "JSClassMethod" ||
					node.type === "JSArrowFunctionExpression"
				) {
					for (const {name} of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
						node.head.params.slice(0, -1),
					)) {
						usedBindings[name] = true;
					}

					// For functions that have a single throw statement in the body, consider all their arguments
					// to be used as this is typically an interface definition
					const {body: block} = node;
					if (
						block.type === "JSBlockStatement" &&
						block.body.length === 1 &&
						block.body[0].type === "JSThrowStatement"
					) {
						for (const {name} of ___R$project$rome$$romejs$js$ast$utils$getBindingIdentifiers_ts$default(
							node.head.params,
						)) {
							usedBindings[name] = true;
						}
					}
				}

				if (
					node.type === "JSCatchClause" &&
					node.param &&
					node.param.type === "JSBindingIdentifier"
				) {
					// Mark error param as used as they are required
					usedBindings[node.param.name] = true;
				}

				// For a named function expression, don't consider the id to be unused
				if (node.type === "JSFunctionExpression" && node.id !== undefined) {
					usedBindings[node.id.name] = true;
				}

				return path.provideHook(
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$unusedVariables_ts$provider,
					{
						usedBindings,
						scope,
					},
				);
			}

			if (
				node.type === "JSXReferenceIdentifier" ||
				node.type === "JSReferenceIdentifier"
			) {
				return path.callHook(
					___R$$priv$project$rome$$romejs$compiler$lint$rules$js$unusedVariables_ts$provider,
					undefined,
					node,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/altText.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasImgAltText(
		node,
	) {
		const attr = ___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
			node,
			"alt",
			true,
		);
		if (attr === undefined) {
			return false;
		}
		return (
			!!(attr.value &&
			attr.value.type === "JSStringLiteral" &&
			attr.value.value === "") ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"alt",
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasObjectAltText(
		node,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"aria-label",
			) ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"aria-labelledby",
			) ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"title",
			) ||
			node.children.length > 0
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasAreaAltText(
		node,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"aria-label",
			) ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"aria-labelledby",
			) ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"alt",
			) ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"title",
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasInputAltText(
		node,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"aria-label",
			) ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"aria-labelledby",
			) ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"alt",
			) ||
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"title",
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasTypeImage(
		node,
	) {
		const attr = ___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
			node,
			"type",
		);
		if (attr === undefined) {
			return false;
		}
		return !!(attr.value &&
		attr.value.type === "JSStringLiteral" &&
		attr.value.value === "image");
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$default = {
		name: "jsxA11YAltText",
		enter(path) {
			const {node} = path;

			if (node.type === "JSXElement" && node.name.type === "JSXIdentifier") {
				if (!/(img)|(area)|(input)|(object)/.test(node.name.name)) {
					return node;
				}

				if (
					(___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
						node,
						"img",
					) &&
					!___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasImgAltText(
						node,
					)) ||
					(___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
						node,
						"object",
					) &&
					!___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasObjectAltText(
						node,
					)) ||
					(___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
						node,
						"area",
					) &&
					!___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasAreaAltText(
						node,
					)) ||
					(___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
						node,
						"input",
					) &&
					___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasTypeImage(
						node,
					) &&
					!___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$hasInputAltText(
						node,
					))
				) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_ALT_TEXT,
					);
				}
			}
			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/anchorHasContent.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$anchorHasContent_ts$hasAnchorContent(
		node,
	) {
		const dangerouslySetInnerHTML = ___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
			node,
			"dangerouslySetInnerHTML",
		);

		return (
			(node.children.length > 0 &&
			!node.children.some((child) =>
				child.type === "JSXElement" &&
				___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
					child,
					"aria-hidden",
				)
			)) ||
			dangerouslySetInnerHTML
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$anchorHasContent_ts$default = {
		name: "jsxA11YAnchorHasContent",
		enter(path) {
			const {node} = path;
			if (
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"a",
				) &&
				!___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$anchorHasContent_ts$hasAnchorContent(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_ANCHOR_HAS_CONTENT,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/aria-helpers.ts








	const ___R$project$rome$$romejs$compiler$lint$rules$aria$helpers_ts$ariaPropsMap = new Map([
		[
			"aria-activedescendant",
			{
				"type": "id",
			},
		],
		[
			"aria-atomic",
			{
				"type": "boolean",
			},
		],
		[
			"aria-autocomplete",
			{
				"type": "token",
				"values": ["inline", "list", "both", "none"],
			},
		],
		[
			"aria-busy",
			{
				"type": "boolean",
			},
		],
		[
			"aria-checked",
			{
				"type": "tristate",
			},
		],
		[
			"aria-colcount",
			{
				type: "integer",
			},
		],
		[
			"aria-colindex",
			{
				type: "integer",
			},
		],
		[
			"aria-colspan",
			{
				type: "integer",
			},
		],
		[
			"aria-controls",
			{
				"type": "idlist",
			},
		],
		[
			"aria-current",
			{
				type: "token",
				values: ["page", "step", "location", "date", "time", true, false],
			},
		],
		[
			"aria-describedby",
			{
				"type": "idlist",
			},
		],
		[
			"aria-details",
			{
				"type": "id",
			},
		],
		[
			"aria-disabled",
			{
				"type": "boolean",
			},
		],
		[
			"aria-dropeffect",
			{
				"type": "tokenlist",
				"values": ["copy", "execute", "link", "move", "none", "popup"],
			},
		],
		[
			"aria-errormessage",
			{
				"type": "id",
			},
		],
		[
			"aria-expanded",
			{
				"type": "boolean",
				"allowundefined": true,
			},
		],
		[
			"aria-flowto",
			{
				"type": "idlist",
			},
		],
		[
			"aria-grabbed",
			{
				"type": "boolean",
				"allowundefined": true,
			},
		],
		[
			"aria-haspopup",
			{
				"type": "token",
				"values": [false, true, "menu", "listbox", "tree", "grid", "dialog"],
			},
		],
		[
			"aria-hidden",
			{
				"type": "boolean",
				"allowundefined": true,
			},
		],
		[
			"aria-invalid",
			{
				"type": "token",
				"values": ["grammar", false, "spelling", true],
			},
		],
		[
			"aria-keyshortcuts",
			{
				type: "string",
			},
		],
		[
			"aria-label",
			{
				"type": "string",
			},
		],
		[
			"aria-labelledby",
			{
				"type": "idlist",
			},
		],
		[
			"aria-level",
			{
				"type": "integer",
			},
		],
		[
			"aria-live",
			{
				"type": "token",
				"values": ["assertive", "off", "polite"],
			},
		],
		[
			"aria-modal",
			{
				type: "boolean",
			},
		],
		[
			"aria-multiline",
			{
				"type": "boolean",
			},
		],
		[
			"aria-multiselectable",
			{
				"type": "boolean",
			},
		],
		[
			"aria-orientation",
			{
				"type": "token",
				"values": ["vertical", "undefined", "horizontal"],
			},
		],
		[
			"aria-owns",
			{
				"type": "idlist",
			},
		],
		[
			"aria-placeholder",
			{
				type: "string",
			},
		],
		[
			"aria-posinset",
			{
				"type": "integer",
			},
		],
		[
			"aria-pressed",
			{
				"type": "tristate",
			},
		],
		[
			"aria-readonly",
			{
				"type": "boolean",
			},
		],
		[
			"aria-relevant",
			{
				"type": "tokenlist",
				"values": ["additions", "all", "removals", "text"],
			},
		],
		[
			"aria-required",
			{
				"type": "boolean",
			},
		],
		[
			"aria-roledescription",
			{
				type: "string",
			},
		],
		[
			"aria-rowcount",
			{
				type: "integer",
			},
		],
		[
			"aria-rowindex",
			{
				type: "integer",
			},
		],
		[
			"aria-rowspan",
			{
				type: "integer",
			},
		],
		[
			"aria-selected",
			{
				"type": "boolean",
				"allowundefined": true,
			},
		],
		[
			"aria-setsize",
			{
				"type": "integer",
			},
		],
		[
			"aria-sort",
			{
				"type": "token",
				"values": ["ascending", "descending", "none", "other"],
			},
		],
		[
			"aria-valuemax",
			{
				"type": "number",
			},
		],
		[
			"aria-valuemin",
			{
				"type": "number",
			},
		],
		[
			"aria-valuenow",
			{
				"type": "number",
			},
		],
		[
			"aria-valuetext",
			{
				"type": "string",
			},
		],
	]);


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/ariaUnsupportedElements.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$ariaUnsupportedElements_ts$hasAriaAttributes(
		node,
	) {
		const hasRole = ___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
			node,
			"role",
		);

		return (
			hasRole ||
			node.attributes.some((attr) =>
				attr.type === "JSXAttribute" &&
				attr.name.type === "JSXIdentifier" &&
				___R$project$rome$$romejs$compiler$lint$rules$aria$helpers_ts$ariaPropsMap.has(
					(attr.name.name),
				)
			)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$ariaUnsupportedElements_ts$default = {
		name: "ariaUnsupportedElements",
		enter(path) {
			const {node} = path;

			if (
				!(___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"meta",
				) ||
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"html",
				) ||
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"script",
				) ||
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"style",
				))
			) {
				return node;
			}

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$ariaUnsupportedElements_ts$hasAriaAttributes(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_ARIA_UNSUPPORTED_ELEMENTS,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/headingHasContent.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$headingHasContent_ts$HEADINGS = [
		"h1",
		"h2",
		"h3",
		"h4",
		"h5",
		"h6",
	];

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$headingHasContent_ts$isInvalidHeading(
		node,
	) {
		if (!___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node)) {
			return false;
		}

		return (
			___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$headingHasContent_ts$HEADINGS.some((
				heading,
			) =>
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					heading,
				)
			) &&
			((node.children.length === 0 &&
			!___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"dangerouslySetInnerHTML",
			)) ||
			(node.children.length > 0 &&
			___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
				node.children[0],
			) &&
			___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node.children[0],
				"aria-hidden",
			)))
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$headingHasContent_ts$default = {
		name: "jsxA11YHeadingHasContent",
		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$headingHasContent_ts$isInvalidHeading(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_HEADING_HAS_CONTENT,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/htmlHasLang.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$htmlHasLang_ts$jsxHTMLMissingLang(
		node,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
				node,
				"html",
			) &&
			!___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"lang",
			)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$htmlHasLang_ts$default = {
		name: "jsxA11YHTMLHasLang",

		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$htmlHasLang_ts$jsxHTMLMissingLang(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_HTML_HAS_LANG,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/iframeHasTitle.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$iframeHasTitle_ts$jsxIframeMissingTitle(
		node,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
				node,
				"iframe",
			) &&
			!___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"title",
			)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$iframeHasTitle_ts$default = {
		name: "jsxA11YIframeHasTitle",

		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$iframeHasTitle_ts$jsxIframeMissingTitle(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_IFRAME_HAS_TITLE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/imgRedundantAlt.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$imgRedundantAlt_ts$jsxImgRedundantAlt(
		node,
	) {
		if (
			!___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
				node,
				"img",
			)
		) {
			return false;
		}

		const attr = ___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
			node,
			"alt",
		);
		return (
			attr !== undefined &&
			attr.value &&
			attr.value.type === "JSStringLiteral" &&
			/(image)|(picture)|(photo)/i.test(attr.value.value)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$imgRedundantAlt_ts$default = {
		name: "jsxA11YImgRedundantAlt",

		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$imgRedundantAlt_ts$jsxImgRedundantAlt(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_IMG_REDUNDANT_ALT,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/lang.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$ISO = {
		"countries": [
			"AF",
			"AL",
			"DZ",
			"AS",
			"AD",
			"AO",
			"AI",
			"AQ",
			"AG",
			"AR",
			"AM",
			"AW",
			"AU",
			"AT",
			"AZ",
			"BS",
			"BH",
			"BD",
			"BB",
			"BY",
			"BE",
			"BZ",
			"BJ",
			"BM",
			"BT",
			"BO",
			"BA",
			"BW",
			"BR",
			"IO",
			"VG",
			"BN",
			"BG",
			"BF",
			"MM",
			"BI",
			"KH",
			"CM",
			"CA",
			"CV",
			"KY",
			"CF",
			"TD",
			"CL",
			"CN",
			"CX",
			"CC",
			"CO",
			"KM",
			"CK",
			"CR",
			"HR",
			"CU",
			"CY",
			"CZ",
			"CD",
			"DK",
			"DJ",
			"DM",
			"DO",
			"EC",
			"EG",
			"SV",
			"GQ",
			"ER",
			"EE",
			"ET",
			"FK",
			"FO",
			"FJ",
			"FI",
			"FR",
			"PF",
			"GA",
			"GM",
			"GE",
			"DE",
			"GH",
			"GI",
			"GR",
			"GL",
			"GD",
			"GU",
			"GT",
			"GN",
			"GW",
			"GY",
			"HT",
			"VA",
			"HN",
			"HK",
			"HU",
			"IS",
			"IN",
			"ID",
			"IR",
			"IQ",
			"IE",
			"IM",
			"IL",
			"IT",
			"CI",
			"JM",
			"JP",
			"JE",
			"JO",
			"KZ",
			"KE",
			"KI",
			"KW",
			"KG",
			"LA",
			"LV",
			"LB",
			"LS",
			"LR",
			"LY",
			"LI",
			"LT",
			"LU",
			"MO",
			"MK",
			"MG",
			"MW",
			"MY",
			"MV",
			"ML",
			"MT",
			"MH",
			"MR",
			"MU",
			"YT",
			"MX",
			"FM",
			"MD",
			"MC",
			"MN",
			"ME",
			"MS",
			"MA",
			"MZ",
			"NA",
			"NR",
			"NP",
			"NL",
			"AN",
			"NC",
			"NZ",
			"NI",
			"NE",
			"NG",
			"NU",
			"KP",
			"MP",
			"NO",
			"OM",
			"PK",
			"PW",
			"PA",
			"PG",
			"PY",
			"PE",
			"PH",
			"PN",
			"PL",
			"PT",
			"PR",
			"QA",
			"CG",
			"RO",
			"RU",
			"RW",
			"BL",
			"SH",
			"KN",
			"LC",
			"MF",
			"PM",
			"VC",
			"WS",
			"SM",
			"ST",
			"SA",
			"SN",
			"RS",
			"SC",
			"SL",
			"SG",
			"SK",
			"SI",
			"SB",
			"SO",
			"ZA",
			"KR",
			"ES",
			"LK",
			"SD",
			"SR",
			"SJ",
			"SZ",
			"SE",
			"CH",
			"SY",
			"TW",
			"TJ",
			"TZ",
			"TH",
			"TL",
			"TG",
			"TK",
			"TO",
			"TT",
			"TN",
			"TR",
			"TM",
			"TC",
			"TV",
			"UG",
			"UA",
			"AE",
			"GB",
			"US",
			"UY",
			"VI",
			"UZ",
			"VU",
			"VE",
			"VN",
			"WF",
			"EH",
			"YE",
			"ZM",
			"ZW",
		],
		"languages": [
			"ab",
			"aa",
			"af",
			"sq",
			"am",
			"ar",
			"an",
			"hy",
			"as",
			"ay",
			"az",
			"ba",
			"eu",
			"bn",
			"dz",
			"bh",
			"bi",
			"br",
			"bg",
			"my",
			"be",
			"km",
			"ca",
			"zh",
			"zh-Hans",
			"zh-Hant",
			"co",
			"hr",
			"cs",
			"da",
			"nl",
			"en",
			"eo",
			"et",
			"fo",
			"fa",
			"fj",
			"fi",
			"fr",
			"fy",
			"gl",
			"gd",
			"gv",
			"ka",
			"de",
			"el",
			"kl",
			"gn",
			"gu",
			"ht",
			"ha",
			"he",
			"iw",
			"hi",
			"hu",
			"is",
			"io",
			"id",
			"in",
			"ia",
			"ie",
			"iu",
			"ik",
			"ga",
			"it",
			"ja",
			"jv",
			"kn",
			"ks",
			"kk",
			"rw",
			"ky",
			"rn",
			"ko",
			"ku",
			"lo",
			"la",
			"lv",
			"li",
			"ln",
			"lt",
			"mk",
			"mg",
			"ms",
			"ml",
			"mt",
			"mi",
			"mr",
			"mo",
			"mn",
			"na",
			"ne",
			"no",
			"oc",
			"or",
			"om",
			"ps",
			"pl",
			"pt",
			"pa",
			"qu",
			"rm",
			"ro",
			"ru",
			"sm",
			"sg",
			"sa",
			"sr",
			"sh",
			"st",
			"tn",
			"sn",
			"ii",
			"sd",
			"si",
			"ss",
			"sk",
			"sl",
			"so",
			"es",
			"su",
			"sw",
			"sv",
			"tl",
			"tg",
			"ta",
			"tt",
			"te",
			"th",
			"bo",
			"ti",
			"to",
			"ts",
			"tr",
			"tk",
			"tw",
			"ug",
			"uk",
			"ur",
			"uz",
			"vi",
			"vo",
			"wa",
			"cy",
			"wo",
			"xh",
			"yi",
			"ji",
			"yo",
			"zu",
		],
	};

	// We lazily build this suggestions list as it is massive
	let ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$suggestions;
	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$getSuggestions() {
		if (
			___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$suggestions !==
			undefined
		) {
			return ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$suggestions;
		}

		___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$suggestions = [
			...___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$ISO.countries,
		];

		for (const language of ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$ISO.languages) {
			for (const country of ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$ISO.countries) {
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$suggestions.push(
					language + "-" + country,
				);
			}
		}

		return ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$suggestions;
	}

	const ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$COUNTRY_AND_REGION_REGEX = new RegExp(
		/([a-z]{2})-([A-Z]{2})/,
	);
	const ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$COUNTRY_REGEX = new RegExp(
		/([a-z]{2})-([A-Z]{2})/,
	);

	// Will return the attribute value if invalid
	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$jsxSupportedLang(
		node,
	) {
		const attr = ___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
			node,
			"lang",
		);

		if (!attr || !attr.value) {
			return "undefined";
		}

		if (attr.value.type === "JSStringLiteral") {
			const {value} = attr.value;
			if (
				!___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$langSupported(
					value,
				)
			) {
				return value;
			}
		}

		return undefined;
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$langSupported(
		lang,
	) {
		const countryAndRegionMatches = ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$COUNTRY_AND_REGION_REGEX.exec(
			lang,
		);
		if (countryAndRegionMatches && countryAndRegionMatches.length > 0) {
			return (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$ISO.languages.includes(
					countryAndRegionMatches[1],
				) &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$ISO.countries.includes(
					countryAndRegionMatches[2],
				)
			);
		}

		const countryMatches = ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$COUNTRY_REGEX.exec(
			lang,
		);
		if (countryMatches && countryMatches.length > 0) {
			return ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$ISO.languages.includes(
				countryMatches[1],
			);
		}

		return false;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$default = {
		name: "jsxA11YLang",
		enter(path) {
			const {node} = path;

			if (
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"html",
				) &&
				___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
					node,
					"lang",
				)
			) {
				const invalidValue = ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$jsxSupportedLang(
					node,
				);
				if (invalidValue !== undefined) {
					// TODO add an autofix suggestion
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_LANG(
							invalidValue,
							___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$getSuggestions(),
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/mediaHasCaption.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$mediaHasCaption_ts$hasMuted(
		node,
	) {
		return ___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
			node,
			"muted",
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$mediaHasCaption_ts$hasTrack(
		node,
	) {
		return node.children.some((child) =>
			___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
				child,
				"track",
			)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$mediaHasCaption_ts$default = {
		name: "mediaHasCaption",
		enter(path) {
			const {node} = path;

			if (
				!(___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"video",
				) ||
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"audio",
				))
			) {
				return node;
			}

			if (
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"video",
				) &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$mediaHasCaption_ts$hasMuted(
					node,
				)
			) {
				return node;
			}

			if (
				!___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$mediaHasCaption_ts$hasTrack(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_MEDIA_HAS_CAPTION,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/mouseEventsHaveKeyEvents.ts
const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$mouseEventsHaveKeyEvents_ts$default = {
		name: "mouseEventsHaveKeyEvents",
		enter(path) {
			const {node} = path;

			if (___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node)) {
				if (
					___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
						node,
						"onMouseOver",
					) &&
					!___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
						node,
						"onFocus",
					)
				) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_MOUSE_EVENTS_HAVE_KEY_EVENTS(
							"onMouseOver",
							"onFocus",
						),
					);
				}

				if (
					___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
						node,
						"onMouseOut",
					) &&
					!___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
						node,
						"onBlur",
					)
				) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_MOUSE_EVENTS_HAVE_KEY_EVENTS(
							"onMouseOut",
							"onBlur",
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/noAccessKey.ts
const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noAccessKey_ts$default = {
		name: "jsxA11YNoAccessKey",

		enter(path) {
			const {node} = path;

			if (
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node) &&
				___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
					node,
					"accessKey",
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_NO_ACCESS_KEY,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/noAutofocus.ts
const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noAutofocus_ts$default = {
		name: "jsxA11YNoAutofocus",

		enter(path) {
			const {node} = path;

			if (
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node) &&
				___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
					node,
					"autoFocus",
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_NO_AUTOFOCUS,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/noDistractingElements.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noDistractingElements_ts$DISTRACTING_TYPES = [
		"blink",
		"marquee",
	];
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noDistractingElements_ts$default = {
		name: "jsxA11YNoDistractingElements",

		enter(path) {
			const {node} = path;

			const distractingType =
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node) &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noDistractingElements_ts$DISTRACTING_TYPES.find((
					name,
				) =>
					___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
						node,
						name,
					)
				);

			if (distractingType) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_NO_DISTRACTING_ELEMENTS(
						distractingType,
					),
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/noOnChange.ts
const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noOnChange_ts$default = {
		name: "noOnChange",
		enter(path) {
			const {context, node} = path;

			if (
				!___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"select",
				) &&
				!___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"option",
				)
			) {
				return node;
			}

			if (
				!___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
					node,
					"onChange",
				)
			) {
				return node;
			}

			if (
				___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
					node,
					"onBlur",
				)
			) {
				return node;
			}

			context.addNodeDiagnostic(
				node,
				___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_NO_ON_CHANGE,
			);

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/noTargetBlank.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noTargetBlank_ts$jsxAnchorHasBlankTarget(
		node,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node, "a") &&
			node.attributes.some((attribute) =>
				attribute.type === "JSXAttribute" &&
				attribute.name.name === "target" &&
				attribute.value &&
				attribute.value.type === "JSStringLiteral" &&
				attribute.value.value === "_blank"
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noTargetBlank_ts$jsxAnchorHasNoReferrer(
		node,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node, "a") &&
			node.attributes.some((attribute) =>
				attribute.type === "JSXAttribute" &&
				attribute.name.name === "rel" &&
				attribute.value &&
				attribute.value.type === "JSStringLiteral" &&
				attribute.value.value.includes("noreferrer")
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noTargetBlank_ts$jsxAnchorHasExternalLink(
		node,
	) {
		return (
			___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node, "a") &&
			node.attributes.some((attribute) =>
				attribute.type === "JSXAttribute" &&
				attribute.name.name === "href" &&
				attribute.value &&
				((attribute.value.type === "JSStringLiteral" &&
				/^(?:\w+:|\/\/)/.test(attribute.value.value)) ||
				attribute.value.type === "JSXExpressionContainer")
			)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noTargetBlank_ts$default = {
		name: "jsxA11YNoTargetBlank",

		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noTargetBlank_ts$jsxAnchorHasBlankTarget(
					node,
				) &&
				!___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noTargetBlank_ts$jsxAnchorHasNoReferrer(
					node,
				) &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noTargetBlank_ts$jsxAnchorHasExternalLink(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_NO_TARGET_BLANK,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/scope.ts
const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$scope_ts$default = {
		name: "jsxA11YScope",

		enter(path) {
			const {node} = path;

			if (
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node) &&
				___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
					node,
					"scope",
				) &&
				!___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
					node,
					"th",
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_NO_SCOPE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/jsx-a11y/tabindexNoPositive.ts
const ___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$tabindexNoPositive_ts$default = {
		name: "tabindexNoPositive",
		enter(path) {
			const {node} = path;

			if (
				___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(node) &&
				___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
					node,
					"tabIndex",
				)
			) {
				const attribute = ___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
					node,
					"tabIndex",
				);
				if (
					attribute &&
					attribute.value &&
					attribute.value.type === "JSStringLiteral"
				) {
					const tabIndexValue = attribute.value.value;
					if (Number(tabIndexValue) > 0) {
						path.context.addNodeDiagnostic(
							node,
							___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_TABINDEX_NO_POSITIVE,
						);
					}
				}

				if (
					attribute &&
					attribute.value &&
					attribute.value.type === "JSXExpressionContainer"
				) {
					const expression = attribute.value.expression;
					if (expression.type === "JSNumericLiteral") {
						const tabIndexValue = expression.value;
						if (Number(tabIndexValue) > 0) {
							path.context.addNodeDiagnostic(
								node,
								___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.JSX_A11Y_TABINDEX_NO_POSITIVE,
							);
						}
					}
				}
			}
			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/buttonHasType.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$BUTTON_TYPE_REGEX = /^(reset)|(submit)|(button)$/;

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$createElementMissingType(
		node,
	) {
		if (node.type !== "JSCallExpression") {
			return false;
		}
		if (
			(___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
				node.callee,
				"React.createElement",
			) ||
			___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
				node.callee,
				"createElement",
			)) &&
			node.arguments[0].type === "JSStringLiteral" &&
			node.arguments[0].value === "button" &&
			node.arguments[1].type === "JSObjectExpression" &&
			!node.arguments[1].properties.find((prop) =>
				prop.type === "JSObjectProperty" &&
				prop.key.value.type === "JSIdentifier" &&
				prop.key.value.name === "type" &&
				prop.value.type === "JSStringLiteral" &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$BUTTON_TYPE_REGEX.test(
					prop.value.value,
				)
			)
		) {
			return true;
		}
		return false;
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$jsxMissingType(
		node,
	) {
		if (
			!___R$project$rome$$romejs$js$ast$utils$isJSXElement_ts$default(
				node,
				"button",
			)
		) {
			return false;
		}
		if (
			!___R$project$rome$$romejs$js$ast$utils$hasJSXAttribute_ts$default(
				node,
				"type",
			)
		) {
			return true;
		}
		const valueNode =
			___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
				node,
				"type",
			) == null
				? undefined
				: ___R$project$rome$$romejs$js$ast$utils$getJSXAttribute_ts$default(
						node,
						"type",
					).value;
		if (
			(valueNode == null ? undefined : valueNode.type) === "JSStringLiteral" &&
			!___R$$priv$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$BUTTON_TYPE_REGEX.test(
				valueNode.value,
			)
		) {
			return true;
		}
		return false;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$default = {
		name: "buttonHasType",
		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$createElementMissingType(
					node,
				) ||
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$jsxMissingType(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_BUTTON_HAS_TYPE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/jsxKey.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$jsxKey_ts$containsKeyAttr(
		node,
	) {
		const ATTR_NAME = "key";
		return !!node.attributes.find((attr) =>
			attr.type === "JSXAttribute" && attr.name.name === ATTR_NAME
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$jsxKey_ts$default = {
		name: "jsxKey",
		enter(path) {
			const {node, context} = path;

			// JSXElement in array literal
			if (
				node.type === "JSXElement" &&
				!___R$$priv$project$rome$$romejs$compiler$lint$rules$react$jsxKey_ts$containsKeyAttr(
					node,
				) &&
				path.parentPath.node.type === "JSArrayExpression"
			) {
				context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_JSX_KEY(
						"array",
					),
				);
			}

			// Array.prototype.map
			if (
				node.type === "JSCallExpression" &&
				node.callee.type === "JSMemberExpression" &&
				node.callee.property.value.type === "JSIdentifier" &&
				node.callee.property.value.name === "map"
			) {
				const fn = node.arguments[0];

				// Short hand arrow function
				if (
					fn.type === "JSArrowFunctionExpression" &&
					fn.body.type === "JSXElement" &&
					!___R$$priv$project$rome$$romejs$compiler$lint$rules$react$jsxKey_ts$containsKeyAttr(
						fn.body,
					)
				) {
					context.addNodeDiagnostic(
						fn.body,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_JSX_KEY(
							"iterator",
						),
					);
				}

				// Function or arrow function with block statement
				if (
					fn &&
					(fn.type === "JSFunctionExpression" ||
					fn.type === "JSArrowFunctionExpression") &&
					fn.body.type === "JSBlockStatement"
				) {
					fn.body.body.forEach((statement) => {
						if (
							statement.type === "JSReturnStatement" &&
							(statement.argument == null ? undefined : statement.argument.type) ===
							"JSXElement" &&
							!___R$$priv$project$rome$$romejs$compiler$lint$rules$react$jsxKey_ts$containsKeyAttr(
								statement.argument,
							)
						) {
							context.addNodeDiagnostic(
								statement.argument,
								___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_JSX_KEY(
									"iterator",
								),
							);
						}
					});
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/jsxNoCommentText.ts
const ___R$project$rome$$romejs$compiler$lint$rules$react$jsxNoCommentText_ts$default = {
		name: "jsxNoCommentText",
		enter(path) {
			const {node} = path;

			if (node.type === "JSXText") {
				if (/^\s*\/(\/|\*)/m.test(node.value)) {
					path.context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_JSX_NO_COMMENT_TEXT,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noChildrenProp.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noChildrenProp_ts$isAttributePassingChildrenProp(
		attribute,
	) {
		return (
			attribute.type === "JSXAttribute" && attribute.name.name === "children"
		);
	}
	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noChildrenProp_ts$isCreateElementPassingChildrenProp(
		property,
	) {
		return (
			property.type === "JSObjectProperty" &&
			property.key.value.type === "JSIdentifier" &&
			property.key.value.name === "children"
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$noChildrenProp_ts$default = {
		name: "noChildrenProp",
		enter(path) {
			const {node} = path;
			if (
				(node.type === "JSXElement" &&
				node.attributes.find(
					___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noChildrenProp_ts$isAttributePassingChildrenProp,
				)) ||
				(node.type === "JSCallExpression" &&
				___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node.callee,
					"React.createElement",
				) &&
				node.arguments[1].type === "JSObjectExpression" &&
				node.arguments[1].properties.find(
					___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noChildrenProp_ts$isCreateElementPassingChildrenProp,
				))
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_CHILDREN_PROP,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noDanger.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDanger_ts$jsxDanger(
		node,
	) {
		if (node.type !== "JSXElement") {
			return false;
		}
		const hasDangerAttribute = !!node.attributes.find((attribute) =>
			attribute.type === "JSXAttribute" &&
			attribute.name.name === "dangerouslySetInnerHTML"
		);
		return hasDangerAttribute;
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$noDanger_ts$default = {
		name: "noDanger",
		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDanger_ts$jsxDanger(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_DANGER,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noDangerWithChildren.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$jsxDangerWithChildren(
		node,
	) {
		if (node.type !== "JSXElement") {
			return false;
		}

		const hasAttribute = !!node.attributes.find((attribute) =>
			attribute.type === "JSXAttribute" &&
			attribute.name.name === "dangerouslySetInnerHTML"
		);

		return hasAttribute && node.children && node.children.length > 0;
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$jsxDangerWithPropChildren(
		node,
	) {
		if (node.type !== "JSXElement") {
			return false;
		}

		const hasDangerAttribute = !!node.attributes.find((attribute) =>
			attribute.type === "JSXAttribute" &&
			attribute.name.name === "dangerouslySetInnerHTML"
		);

		const hasChildrenAttribute = !!node.attributes.find((attribute) =>
			attribute.type === "JSXAttribute" && attribute.name.name === "children"
		);

		return hasDangerAttribute && hasChildrenAttribute;
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$createElementDangerWithChildren(
		node,
	) {
		if (node.type !== "JSCallExpression") {
			return false;
		}

		const propsArgument = node.arguments[node.arguments.length - 2];

		return (
			___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
				node.callee,
				"React.createElement",
			) &&
			node.arguments.length === 3 &&
			propsArgument.type === "JSObjectExpression" &&
			propsArgument.properties.some((prop) =>
				prop.type === "JSObjectProperty" &&
				prop.key.type === "JSStaticPropertyKey" &&
				prop.key.value.type === "JSIdentifier" &&
				prop.key.value.name === "dangerouslySetInnerHTML"
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$createElementDangerWithPropChildren(
		node,
	) {
		if (node.type !== "JSCallExpression") {
			return false;
		}

		const propsArgument = node.arguments[1];

		function hasDangerAttribute(node) {
			return node.properties.some((prop) =>
				prop.type === "JSObjectProperty" &&
				prop.key.type === "JSStaticPropertyKey" &&
				prop.key.value.type === "JSIdentifier" &&
				prop.key.value.name === "dangerouslySetInnerHTML"
			);
		}

		function hasChildrenAttribute(node) {
			return node.properties.some((prop) =>
				prop.type === "JSObjectProperty" &&
				prop.key.type === "JSStaticPropertyKey" &&
				prop.key.value.type === "JSIdentifier" &&
				prop.key.value.name === "children"
			);
		}

		return (
			___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
				node.callee,
				"React.createElement",
			) &&
			propsArgument.type === "JSObjectExpression" &&
			hasDangerAttribute(propsArgument) &&
			hasChildrenAttribute(propsArgument)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$default = {
		name: "noDangerWithChildren",

		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$jsxDangerWithChildren(
					node,
				) ||
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$jsxDangerWithPropChildren(
					node,
				) ||
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$createElementDangerWithChildren(
					node,
				) ||
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$createElementDangerWithPropChildren(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_DANGER_WITH_CHILDREN,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noDidMountSetState.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDidMountSetState_ts$inComponentDidMount(
		path,
	) {
		const func =
			path.findAncestry(({node}) =>
				___R$project$rome$$romejs$js$ast$utils$isConditional_ts$default(node)
			) !== undefined;
		return (
			!func &&
			!!path.findAncestry(({node}) =>
				node.type === "JSClassMethod" &&
				node.key.type === "JSStaticPropertyKey" &&
				node.key.value.type === "JSIdentifier" &&
				node.key.value.name === "componentDidMount"
			)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$noDidMountSetState_ts$default = {
		name: "noDidMountSetState",
		enter(path) {
			const {node} = path;

			if (
				___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node,
					"this.setState",
				) &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDidMountSetState_ts$inComponentDidMount(
					path,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_DID_MOUNT_SET_STATE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noDidUpdateSetState.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDidUpdateSetState_ts$inComponentDidUpdate(
		path,
	) {
		const func =
			path.findAncestry(({node}) =>
				___R$project$rome$$romejs$js$ast$utils$isConditional_ts$default(node)
			) !== undefined;
		return (
			!func &&
			path.findAncestry(({node}) =>
				node.type === "JSClassMethod" &&
				node.key.type === "JSStaticPropertyKey" &&
				node.key.value.type === "JSIdentifier" &&
				node.key.value.name === "componentDidUpdate"
			) !== undefined
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$noDidUpdateSetState_ts$default = {
		name: "noDidUpdateSetState",
		enter(path) {
			const {node} = path;

			if (
				___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node,
					"this.setState",
				) &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noDidUpdateSetState_ts$inComponentDidUpdate(
					path,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_DID_UPDATE_SET_STATE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noFindDOMNode.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noFindDOMNode_ts$hasFindMemberProperty(
		node,
	) {
		return (
			node.type === "JSStaticMemberProperty" &&
			___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
				node.value,
				"findDOMNode",
			)
		);
	}

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noFindDOMNode_ts$hasFindCallExpression(
		node,
	) {
		return (
			node.type === "JSCallExpression" &&
			___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
				node.callee,
				"findDOMNode",
			)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$noFindDOMNode_ts$default = {
		name: "noFindDOMNode",

		enter(path) {
			const {node} = path;

			if (
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noFindDOMNode_ts$hasFindMemberProperty(
					node,
				) ||
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noFindDOMNode_ts$hasFindCallExpression(
					node,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_FIND_DOM_NODE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noRedundantShouldComponentUpdate.ts
const ___R$project$rome$$romejs$compiler$lint$rules$react$noRedundantShouldComponentUpdate_ts$default = {
		name: "noRedundantShouldComponentUpdate",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSClassDeclaration" &&
				!!node.meta.body.find((member) =>
					member.type === "JSClassMethod" &&
					member.key.type === "JSStaticPropertyKey" &&
					member.key.value.type === "JSIdentifier" &&
					member.key.value.name === "componentShouldUpdate"
				) &&
				(___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node.meta.superClass,
					"React.PureComponent",
				) ||
				___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node.meta.superClass,
					"PureComponent",
				))
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_REDUNDANT_SHOULD_COMPONENT_UPDATE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noUnsafe.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noUnsafe_ts$UNSAFE_METHODS = [
		{
			oldMethod: "UNSAFE_componentWillMount",
			newMethod: "componentDidMount",
			details: 'See <hyperlink target="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html" />.',
		},
		{
			oldMethod: "UNSAFE_componentWillReceiveProps",
			newMethod: "getDerivedStateFromProps",
			details: 'See <hyperlink target="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html" />.',
		},
		{
			oldMethod: "UNSAFE_componentWillUpdate",
			newMethod: "componentDidUpdate",
			details: 'See <hyperlink target="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html" />.',
		},
	];

	function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noUnsafe_ts$getUnsafeDef(
		node,
	) {
		return (
			node.type === "JSClassMethod" &&
			node.key.type === "JSStaticPropertyKey" &&
			node.key.value.type === "JSIdentifier" &&
			___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noUnsafe_ts$UNSAFE_METHODS.find((
				def,
			) => def.oldMethod === (node.key.value).name)
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$noUnsafe_ts$default = {
		name: "noUnsafe",

		enter(path) {
			const {node} = path;

			const unsafeDef = ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noUnsafe_ts$getUnsafeDef(
				node,
			);

			if (unsafeDef) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_UNSAFE(
						unsafeDef.oldMethod,
						unsafeDef.newMethod,
						unsafeDef.details,
					),
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/noWillUpdateSetState.ts
function ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noWillUpdateSetState_ts$inComponentWillUpdate(
		path,
	) {
		return (
			path.findAncestry(({node}) =>
				node.type === "JSClassMethod" &&
				node.key.type === "JSStaticPropertyKey" &&
				node.key.value.type === "JSIdentifier" &&
				(node.key.value.name === "componentWillUpdate" ||
				node.key.value.name === "UNSAFE_componentWillUpdate")
			) !== undefined
		);
	}
	const ___R$project$rome$$romejs$compiler$lint$rules$react$noWillUpdateSetState_ts$default = {
		name: "noWillUpdateSetState",
		enter(path) {
			const {node} = path;

			if (
				___R$project$rome$$romejs$js$ast$utils$doesNodeMatchPattern_ts$default(
					node,
					"this.setState",
				) &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$noWillUpdateSetState_ts$inComponentWillUpdate(
					path,
				)
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_NO_WILL_UPDATE_SET_STATE,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/reactInJsxScope.ts
const ___R$project$rome$$romejs$compiler$lint$rules$react$reactInJsxScope_ts$default = {
		name: "reactInJsxScope",
		enter(path) {
			const {node, scope, context} = path;

			if (node.type === "JSXElement") {
				const reactIsInScope = scope.getBinding("React") !== undefined;

				if (!reactIsInScope) {
					context.addNodeDiagnostic(
						node,
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_REACT_IN_JSX_SCOPE,
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/stylePropObject.ts
const ___R$project$rome$$romejs$compiler$lint$rules$react$stylePropObject_ts$default = {
		name: "stylePropObject",
		enter(path) {
			const {node} = path;

			if (
				node.type === "JSXAttribute" &&
				node.name.name === "style" &&
				node.value !== undefined &&
				((node.value.type === "JSXExpressionContainer" &&
				node.value.expression.type !== "JSObjectExpression") ||
				node.value.type !== "JSXExpressionContainer")
			) {
				path.context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_STYLE_PROP_OBJECT,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/react/voidDomElementsNoChildren.ts
const ___R$$priv$project$rome$$romejs$compiler$lint$rules$react$voidDomElementsNoChildren_ts$VOID_DOM_ELEMENTS = new Set([
		"area",
		"base",
		"br",
		"col",
		"embed",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"menuitem",
		"meta",
		"param",
		"source",
		"track",
		"wbr",
	]);
	const ___R$project$rome$$romejs$compiler$lint$rules$react$voidDomElementsNoChildren_ts$default = {
		name: "voidDomElementsNoChildren",
		enter(path) {
			const {node, context} = path;

			if (
				node.type === "JSXElement" &&
				node.name.type === "JSXIdentifier" &&
				___R$$priv$project$rome$$romejs$compiler$lint$rules$react$voidDomElementsNoChildren_ts$VOID_DOM_ELEMENTS.has(
					node.name.name,
				)
			) {
				const element = node.name.name;

				let properties = new Set();

				if (node.children.length !== 0) {
					properties.add("children");
				}

				const newAttributes = [];
				for (const attribute of node.attributes) {
					if (attribute.type === "JSXAttribute") {
						const property = attribute.name.name;
						if (property === "children") {
							properties.add("children");
						} else if (property === "dangerouslySetInnerHTML") {
							properties.add("dangerouslySetInnerHTML");
						} else {
							newAttributes.push(attribute);
						}
					}
				}

				if (properties.size > 0) {
					return context.addFixableDiagnostic(
						{
							old: node,
							fixed: Object.assign(
								{},
								node,
								{attributes: newAttributes, children: [], selfClosing: true},
							),
						},
						___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.REACT_VOID_DOM_ELEMENTS_NO_CHILDREN(
							element,
							Array.from(properties),
						),
					);
				}
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/ts/noExplicitAny.ts
const ___R$project$rome$$romejs$compiler$lint$rules$ts$noExplicitAny_ts$default = {
		name: "noExplicitAny",
		enter(path) {
			const {context, node} = path;

			if (node.type === "TSAnyKeywordTypeAnnotation") {
				context.addNodeDiagnostic(
					node,
					___R$project$rome$$romejs$diagnostics$descriptions$index_ts$descriptions.LINT.TS_NO_EXPLICIT_ANY,
				);
			}

			return node;
		},
	};


  // project-rome/@romejs/compiler/lint/rules/index.ts
const ___R$project$rome$$romejs$compiler$lint$rules$index_ts$lintTransforms = [
		___R$project$rome$$romejs$compiler$lint$rules$js$camelCase_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$caseSingleStatement_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$confusingLanguage_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$defaultExportSameBasename_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$doubleEquals_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$duplicateImportSource_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$emptyBlocks_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$emptyMatches_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$getterReturn_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$importDefaultBasename_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$negationElse_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noArguments_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noAsyncPromiseExecutor_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noCatchAssign_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noCommaOperator_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noCompareNegZero_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noCondAssign_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noDebugger_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noDelete_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noDeleteVars_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noDupeArgs_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noDuplicateCase_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noDuplicateGroupNamesInRegularExpressions_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noDuplicateKeys_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noEmptyCharacterClass_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noExtraBooleanCast_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noFunctionAssign_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noImportAssign_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noLabelVar_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noMultipleSpacesInRegularExpressionLiterals_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noPosixInRegularExpression_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noReferenceToNonExistingGroup_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noSetterReturn_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noShadowRestrictedNames_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noShorthandArrayType_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noTemplateCurlyInString_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noUnsafeFinally_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$noVar_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$preferBlockStatements_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$preferFunctionDeclarations_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$preferTemplate_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$preferWhile_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$restrictedGlobals_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$singleVarDeclarator_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$sortImportExportSpecifiers_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$sparseArray_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$undeclaredVariables_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$unsafeNegation_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$js$unusedVariables_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$altText_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$anchorHasContent_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$ariaUnsupportedElements_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$headingHasContent_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$htmlHasLang_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$iframeHasTitle_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$imgRedundantAlt_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$lang_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$mediaHasCaption_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$mouseEventsHaveKeyEvents_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noAccessKey_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noAutofocus_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noDistractingElements_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noOnChange_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$noTargetBlank_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$scope_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$jsx$a11y$tabindexNoPositive_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$buttonHasType_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$jsxKey_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$jsxNoCommentText_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noChildrenProp_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noDanger_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noDangerWithChildren_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noDidMountSetState_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noDidUpdateSetState_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noFindDOMNode_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noRedundantShouldComponentUpdate_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noUnsafe_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$noWillUpdateSetState_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$reactInJsxScope_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$stylePropObject_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$react$voidDomElementsNoChildren_ts$default,
		___R$project$rome$$romejs$compiler$lint$rules$ts$noExplicitAny_ts$default,
	];


  // project-rome/@romejs/compiler/lint/index.ts


	const ___R$$priv$project$rome$$romejs$compiler$lint$index_ts$lintCache = new ___R$project$rome$$romejs$compiler$lib$Cache_ts$default();

	async function ___R$project$rome$$romejs$compiler$lint$index_ts$default(req) {
		const {ast, sourceText, project, applyFixes, options} = req;

		const query = ___R$project$rome$$romejs$compiler$lib$Cache_ts$default.buildQuery(
			req,
			{applyFixes},
		);
		const cached = ___R$$priv$project$rome$$romejs$compiler$lint$index_ts$lintCache.get(
			query,
		);
		if (cached) {
			return cached;
		}

		// Perform autofixes
		const formatContext = new ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default({
			ref: req.ref,
			sourceText: req.sourceText,
			options,
			ast,
			project,
			frozen: false,
			origin: {
				category: "lint",
			},
		});

		let formatAst = ast;
		if (applyFixes) {
			formatAst = formatContext.reduceRoot(
				ast,
				___R$project$rome$$romejs$compiler$lint$rules$index_ts$lintTransforms,
			);
			formatAst = ___R$project$rome$$romejs$compiler$lint$suppressions_ts$addSuppressions(
				formatContext,
				formatAst,
			);
		}
		const formattedCode = ___R$project$rome$$romejs$formatter$index_ts$formatAST(
			formatAst,
			{
				typeAnnotations: true,
				sourceMaps: true,
				format: "pretty",
				sourceText,
			},
		).code;

		// Run lints (could be with the autofixed AST)
		const context = new ___R$project$rome$$romejs$compiler$lib$CompilerContext_ts$default({
			ref: req.ref,
			sourceText: req.sourceText,
			ast,
			project,
			options,
			origin: {
				category: "lint",
			},
			frozen: true,
		});
		context.reduceRoot(
			ast,
			___R$project$rome$$romejs$compiler$lint$rules$index_ts$lintTransforms,
		);

		const diagnostics = context.diagnostics.getDiagnostics();
		const result = {
			suppressions: context.suppressions,
			diagnostics: [...ast.diagnostics, ...diagnostics],
			src: formattedCode,
		};
		___R$$priv$project$rome$$romejs$compiler$lint$index_ts$lintCache.set(
			query,
			result,
		);
		return result;
	}


  // project-rome/@romejs/compiler/lint/rules/testHelpers.ts


	async function ___R$project$rome$$romejs$compiler$lint$rules$testHelpers_ts$testLintMultiple(
		t,
		inputs,
		opts,
	) {
		for (const input of inputs) {
			await ___R$project$rome$$romejs$compiler$lint$rules$testHelpers_ts$testLint(
				t,
				input,
				opts,
			);
		}
	}

	async function ___R$project$rome$$romejs$compiler$lint$rules$testHelpers_ts$testLint(
		t,
		input,
		{syntax = ["jsx", "ts"], category, sourceType = "module"},
	) {
		t.addToAdvice({
			type: "log",
			category: "info",
			text: "Lint options",
		});

		t.addToAdvice({
			type: "inspect",
			data: {
				category,
				syntax,
				sourceType,
			},
		});

		t.addToAdvice({
			type: "log",
			category: "info",
			text: "Input",
		});

		t.addToAdvice({
			type: "code",
			code: input,
		});

		const ast = ___R$project$rome$$romejs$js$parser$index_ts$parseJS({
			input,
			sourceType,
			path: ___R$project$rome$$romejs$path$index_ts$createUnknownFilePath(
				"unknown",
			),
			syntax,
		});

		const res = await ___R$project$rome$$romejs$compiler$lint$index_ts$default({
			applyFixes: true,
			options: {},
			ast,
			sourceText: input,
			project: {
				folder: undefined,
				config: ___R$project$rome$$romejs$project$types_ts$DEFAULT_PROJECT_CONFIG,
			},
		});

		const diagnostics = res.diagnostics.filter((diag) => {
			return diag.description.category === category;
		}).map((diag) => {
			return Object.assign(
				{},
				diag,
				{location: Object.assign({}, diag.location, {sourceText: input})},
			);
		});

		const snapshotName = t.snapshot(
			___R$project$rome$$romejs$cli$diagnostics$index_ts$printDiagnosticsToString({
				diagnostics,
				suppressions: res.suppressions,
			}),
		);

		t.namedSnapshot(snapshotName + ": formatted", res.src);

		t.clearAdvice();
	}


  // project-rome/rome/index.ts
const ___R$project$rome$rome$index_ts = {
		get test() {
			return ___R$project$rome$$romejs$compiler$lint$rules$testHelpers_ts$testLint;
		},
		get parse() {
			return ___R$project$rome$$romejs$js$parser$index_ts$parseJS;
		},
	};


  return ___R$project$rome$rome$index_ts;
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);


}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},_dereq_("buffer").Buffer)
},{"_process":156,"buffer":66,"crypto":75,"fs":2,"inspector":2,"os":144,"readline":2,"stream":191}],2:[function(_dereq_,module,exports){

},{}],3:[function(_dereq_,module,exports){
var asn1 = exports;

asn1.bignum = _dereq_('bn.js');

asn1.define = _dereq_('./asn1/api').define;
asn1.base = _dereq_('./asn1/base');
asn1.constants = _dereq_('./asn1/constants');
asn1.decoders = _dereq_('./asn1/decoders');
asn1.encoders = _dereq_('./asn1/encoders');

},{"./asn1/api":4,"./asn1/base":6,"./asn1/constants":10,"./asn1/decoders":12,"./asn1/encoders":15,"bn.js":17}],4:[function(_dereq_,module,exports){
var asn1 = _dereq_('../asn1');
var inherits = _dereq_('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = _dereq_('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":3,"inherits":136,"vm":195}],5:[function(_dereq_,module,exports){
var inherits = _dereq_('inherits');
var Reporter = _dereq_('../base').Reporter;
var Buffer = _dereq_('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":6,"buffer":66,"inherits":136}],6:[function(_dereq_,module,exports){
var base = exports;

base.Reporter = _dereq_('./reporter').Reporter;
base.DecoderBuffer = _dereq_('./buffer').DecoderBuffer;
base.EncoderBuffer = _dereq_('./buffer').EncoderBuffer;
base.Node = _dereq_('./node');

},{"./buffer":5,"./node":7,"./reporter":8}],7:[function(_dereq_,module,exports){
var Reporter = _dereq_('../base').Reporter;
var EncoderBuffer = _dereq_('../base').EncoderBuffer;
var DecoderBuffer = _dereq_('../base').DecoderBuffer;
var assert = _dereq_('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":6,"minimalistic-assert":142}],8:[function(_dereq_,module,exports){
var inherits = _dereq_('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":136}],9:[function(_dereq_,module,exports){
var constants = _dereq_('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":10}],10:[function(_dereq_,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = _dereq_('./der');

},{"./der":9}],11:[function(_dereq_,module,exports){
var inherits = _dereq_('inherits');

var asn1 = _dereq_('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":3,"inherits":136}],12:[function(_dereq_,module,exports){
var decoders = exports;

decoders.der = _dereq_('./der');
decoders.pem = _dereq_('./pem');

},{"./der":11,"./pem":13}],13:[function(_dereq_,module,exports){
var inherits = _dereq_('inherits');
var Buffer = _dereq_('buffer').Buffer;

var DERDecoder = _dereq_('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":11,"buffer":66,"inherits":136}],14:[function(_dereq_,module,exports){
var inherits = _dereq_('inherits');
var Buffer = _dereq_('buffer').Buffer;

var asn1 = _dereq_('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":3,"buffer":66,"inherits":136}],15:[function(_dereq_,module,exports){
var encoders = exports;

encoders.der = _dereq_('./der');
encoders.pem = _dereq_('./pem');

},{"./der":14,"./pem":16}],16:[function(_dereq_,module,exports){
var inherits = _dereq_('inherits');

var DEREncoder = _dereq_('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":14,"inherits":136}],17:[function(_dereq_,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = _dereq_('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":21}],18:[function(_dereq_,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],19:[function(_dereq_,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = _dereq_('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this._strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    var z = 0;
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      var b;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        b = c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }

      r |= b;
      z |= b;
    }

    assert(!(z & 0xf0), 'Invalid character in ' + str);
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r._strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":21}],20:[function(_dereq_,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = _dereq_('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":21}],21:[function(_dereq_,module,exports){
arguments[4][2][0].apply(exports,arguments)
},{"dup":2}],22:[function(_dereq_,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = _dereq_('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":182}],23:[function(_dereq_,module,exports){
var aes = _dereq_('./aes')
var Buffer = _dereq_('safe-buffer').Buffer
var Transform = _dereq_('cipher-base')
var inherits = _dereq_('inherits')
var GHASH = _dereq_('./ghash')
var xor = _dereq_('buffer-xor')
var incr32 = _dereq_('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":22,"./ghash":27,"./incr32":28,"buffer-xor":65,"cipher-base":67,"inherits":136,"safe-buffer":182}],24:[function(_dereq_,module,exports){
var ciphers = _dereq_('./encrypter')
var deciphers = _dereq_('./decrypter')
var modes = _dereq_('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":25,"./encrypter":26,"./modes/list.json":36}],25:[function(_dereq_,module,exports){
var AuthCipher = _dereq_('./authCipher')
var Buffer = _dereq_('safe-buffer').Buffer
var MODES = _dereq_('./modes')
var StreamCipher = _dereq_('./streamCipher')
var Transform = _dereq_('cipher-base')
var aes = _dereq_('./aes')
var ebtk = _dereq_('evp_bytestokey')
var inherits = _dereq_('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":22,"./authCipher":23,"./modes":35,"./streamCipher":38,"cipher-base":67,"evp_bytestokey":105,"inherits":136,"safe-buffer":182}],26:[function(_dereq_,module,exports){
var MODES = _dereq_('./modes')
var AuthCipher = _dereq_('./authCipher')
var Buffer = _dereq_('safe-buffer').Buffer
var StreamCipher = _dereq_('./streamCipher')
var Transform = _dereq_('cipher-base')
var aes = _dereq_('./aes')
var ebtk = _dereq_('evp_bytestokey')
var inherits = _dereq_('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":22,"./authCipher":23,"./modes":35,"./streamCipher":38,"cipher-base":67,"evp_bytestokey":105,"inherits":136,"safe-buffer":182}],27:[function(_dereq_,module,exports){
var Buffer = _dereq_('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":182}],28:[function(_dereq_,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],29:[function(_dereq_,module,exports){
var xor = _dereq_('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":65}],30:[function(_dereq_,module,exports){
var Buffer = _dereq_('safe-buffer').Buffer
var xor = _dereq_('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":65,"safe-buffer":182}],31:[function(_dereq_,module,exports){
var Buffer = _dereq_('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":182}],32:[function(_dereq_,module,exports){
var Buffer = _dereq_('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":182}],33:[function(_dereq_,module,exports){
var xor = _dereq_('buffer-xor')
var Buffer = _dereq_('safe-buffer').Buffer
var incr32 = _dereq_('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":28,"buffer-xor":65,"safe-buffer":182}],34:[function(_dereq_,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],35:[function(_dereq_,module,exports){
var modeModules = {
  ECB: _dereq_('./ecb'),
  CBC: _dereq_('./cbc'),
  CFB: _dereq_('./cfb'),
  CFB8: _dereq_('./cfb8'),
  CFB1: _dereq_('./cfb1'),
  OFB: _dereq_('./ofb'),
  CTR: _dereq_('./ctr'),
  GCM: _dereq_('./ctr')
}

var modes = _dereq_('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":29,"./cfb":30,"./cfb1":31,"./cfb8":32,"./ctr":33,"./ecb":34,"./list.json":36,"./ofb":37}],36:[function(_dereq_,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],37:[function(_dereq_,module,exports){
(function (Buffer){
var xor = _dereq_('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,_dereq_("buffer").Buffer)
},{"buffer":66,"buffer-xor":65}],38:[function(_dereq_,module,exports){
var aes = _dereq_('./aes')
var Buffer = _dereq_('safe-buffer').Buffer
var Transform = _dereq_('cipher-base')
var inherits = _dereq_('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":22,"cipher-base":67,"inherits":136,"safe-buffer":182}],39:[function(_dereq_,module,exports){
var DES = _dereq_('browserify-des')
var aes = _dereq_('browserify-aes/browser')
var aesModes = _dereq_('browserify-aes/modes')
var desModes = _dereq_('browserify-des/modes')
var ebtk = _dereq_('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":24,"browserify-aes/modes":35,"browserify-des":40,"browserify-des/modes":41,"evp_bytestokey":105}],40:[function(_dereq_,module,exports){
var CipherBase = _dereq_('cipher-base')
var des = _dereq_('des.js')
var inherits = _dereq_('inherits')
var Buffer = _dereq_('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":67,"des.js":76,"inherits":136,"safe-buffer":182}],41:[function(_dereq_,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],42:[function(_dereq_,module,exports){
(function (Buffer){
var bn = _dereq_('bn.js');
var randomBytes = _dereq_('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,_dereq_("buffer").Buffer)
},{"bn.js":43,"buffer":66,"randombytes":164}],43:[function(_dereq_,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"buffer":21,"dup":17}],44:[function(_dereq_,module,exports){
module.exports = _dereq_('./browser/algorithms.json')

},{"./browser/algorithms.json":45}],45:[function(_dereq_,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],46:[function(_dereq_,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],47:[function(_dereq_,module,exports){
var Buffer = _dereq_('buffer').Buffer
var createHash = _dereq_('create-hash')
var stream = _dereq_('readable-stream')
var inherits = _dereq_('inherits')
var sign = _dereq_('./sign')
var verify = _dereq_('./verify')

var algorithms = _dereq_('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"./algorithms.json":45,"./sign":48,"./verify":49,"buffer":66,"create-hash":71,"inherits":136,"readable-stream":64}],48:[function(_dereq_,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = _dereq_('buffer').Buffer
var createHmac = _dereq_('create-hmac')
var crt = _dereq_('browserify-rsa')
var EC = _dereq_('elliptic').ec
var BN = _dereq_('bn.js')
var parseKeys = _dereq_('parse-asn1')
var curves = _dereq_('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"./curves.json":46,"bn.js":19,"browserify-rsa":42,"buffer":66,"create-hmac":73,"elliptic":87,"parse-asn1":149}],49:[function(_dereq_,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = _dereq_('buffer').Buffer
var BN = _dereq_('bn.js')
var EC = _dereq_('elliptic').ec
var parseKeys = _dereq_('parse-asn1')
var curves = _dereq_('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"./curves.json":46,"bn.js":19,"buffer":66,"elliptic":87,"parse-asn1":149}],50:[function(_dereq_,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],51:[function(_dereq_,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = _dereq_('./_stream_readable');

var Writable = _dereq_('./_stream_writable');

_dereq_('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this,_dereq_('_process'))
},{"./_stream_readable":53,"./_stream_writable":55,"_process":156,"inherits":136}],52:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = _dereq_('./_stream_transform');

_dereq_('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":54,"inherits":136}],53:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = _dereq_('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = _dereq_('./internal/streams/stream');
/*</replacement>*/


var Buffer = _dereq_('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = _dereq_('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = _dereq_('./internal/streams/buffer_list');

var destroyImpl = _dereq_('./internal/streams/destroy');

var _require = _dereq_('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = _dereq_('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

_dereq_('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || _dereq_('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = _dereq_('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = _dereq_('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":50,"./_stream_duplex":51,"./internal/streams/async_iterator":56,"./internal/streams/buffer_list":57,"./internal/streams/destroy":58,"./internal/streams/from":60,"./internal/streams/state":62,"./internal/streams/stream":63,"_process":156,"buffer":66,"events":104,"inherits":136,"string_decoder/":192,"util":21}],54:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = _dereq_('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = _dereq_('./_stream_duplex');

_dereq_('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":50,"./_stream_duplex":51,"inherits":136}],55:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: _dereq_('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = _dereq_('./internal/streams/stream');
/*</replacement>*/


var Buffer = _dereq_('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = _dereq_('./internal/streams/destroy');

var _require = _dereq_('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = _dereq_('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

_dereq_('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || _dereq_('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":50,"./_stream_duplex":51,"./internal/streams/destroy":58,"./internal/streams/state":62,"./internal/streams/stream":63,"_process":156,"buffer":66,"inherits":136,"util-deprecate":194}],56:[function(_dereq_,module,exports){
(function (process){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = _dereq_('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this,_dereq_('_process'))
},{"./end-of-stream":59,"_process":156}],57:[function(_dereq_,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = _dereq_('buffer'),
    Buffer = _require.Buffer;

var _require2 = _dereq_('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":66,"util":21}],58:[function(_dereq_,module,exports){
(function (process){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this,_dereq_('_process'))
},{"_process":156}],59:[function(_dereq_,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = _dereq_('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":50}],60:[function(_dereq_,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],61:[function(_dereq_,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = _dereq_('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = _dereq_('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":50,"./end-of-stream":59}],62:[function(_dereq_,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = _dereq_('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":50}],63:[function(_dereq_,module,exports){
module.exports = _dereq_('events').EventEmitter;

},{"events":104}],64:[function(_dereq_,module,exports){
exports = module.exports = _dereq_('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = _dereq_('./lib/_stream_writable.js');
exports.Duplex = _dereq_('./lib/_stream_duplex.js');
exports.Transform = _dereq_('./lib/_stream_transform.js');
exports.PassThrough = _dereq_('./lib/_stream_passthrough.js');
exports.finished = _dereq_('./lib/internal/streams/end-of-stream.js');
exports.pipeline = _dereq_('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":51,"./lib/_stream_passthrough.js":52,"./lib/_stream_readable.js":53,"./lib/_stream_transform.js":54,"./lib/_stream_writable.js":55,"./lib/internal/streams/end-of-stream.js":59,"./lib/internal/streams/pipeline.js":61}],65:[function(_dereq_,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,_dereq_("buffer").Buffer)
},{"buffer":66}],66:[function(_dereq_,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = _dereq_('base64-js')
var ieee754 = _dereq_('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,_dereq_("buffer").Buffer)
},{"base64-js":18,"buffer":66,"ieee754":135}],67:[function(_dereq_,module,exports){
var Buffer = _dereq_('safe-buffer').Buffer
var Transform = _dereq_('stream').Transform
var StringDecoder = _dereq_('string_decoder').StringDecoder
var inherits = _dereq_('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":136,"safe-buffer":182,"stream":191,"string_decoder":192}],68:[function(_dereq_,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":_dereq_("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":137}],69:[function(_dereq_,module,exports){
(function (Buffer){
var elliptic = _dereq_('elliptic')
var BN = _dereq_('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this,_dereq_("buffer").Buffer)
},{"bn.js":70,"buffer":66,"elliptic":87}],70:[function(_dereq_,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"buffer":21,"dup":17}],71:[function(_dereq_,module,exports){
'use strict'
var inherits = _dereq_('inherits')
var MD5 = _dereq_('md5.js')
var RIPEMD160 = _dereq_('ripemd160')
var sha = _dereq_('sha.js')
var Base = _dereq_('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":67,"inherits":136,"md5.js":139,"ripemd160":181,"sha.js":184}],72:[function(_dereq_,module,exports){
var MD5 = _dereq_('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":139}],73:[function(_dereq_,module,exports){
'use strict'
var inherits = _dereq_('inherits')
var Legacy = _dereq_('./legacy')
var Base = _dereq_('cipher-base')
var Buffer = _dereq_('safe-buffer').Buffer
var md5 = _dereq_('create-hash/md5')
var RIPEMD160 = _dereq_('ripemd160')

var sha = _dereq_('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":74,"cipher-base":67,"create-hash/md5":72,"inherits":136,"ripemd160":181,"safe-buffer":182,"sha.js":184}],74:[function(_dereq_,module,exports){
'use strict'
var inherits = _dereq_('inherits')
var Buffer = _dereq_('safe-buffer').Buffer

var Base = _dereq_('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":67,"inherits":136,"safe-buffer":182}],75:[function(_dereq_,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = _dereq_('randombytes')
exports.createHash = exports.Hash = _dereq_('create-hash')
exports.createHmac = exports.Hmac = _dereq_('create-hmac')

var algos = _dereq_('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = _dereq_('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = _dereq_('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = _dereq_('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = _dereq_('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = _dereq_('create-ecdh')

var publicEncrypt = _dereq_('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = _dereq_('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":39,"browserify-sign":47,"browserify-sign/algos":44,"create-ecdh":69,"create-hash":71,"create-hmac":73,"diffie-hellman":82,"pbkdf2":150,"public-encrypt":157,"randombytes":164,"randomfill":165}],76:[function(_dereq_,module,exports){
'use strict';

exports.utils = _dereq_('./des/utils');
exports.Cipher = _dereq_('./des/cipher');
exports.DES = _dereq_('./des/des');
exports.CBC = _dereq_('./des/cbc');
exports.EDE = _dereq_('./des/ede');

},{"./des/cbc":77,"./des/cipher":78,"./des/des":79,"./des/ede":80,"./des/utils":81}],77:[function(_dereq_,module,exports){
'use strict';

var assert = _dereq_('minimalistic-assert');
var inherits = _dereq_('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":136,"minimalistic-assert":142}],78:[function(_dereq_,module,exports){
'use strict';

var assert = _dereq_('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":142}],79:[function(_dereq_,module,exports){
'use strict';

var assert = _dereq_('minimalistic-assert');
var inherits = _dereq_('inherits');

var utils = _dereq_('./utils');
var Cipher = _dereq_('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":78,"./utils":81,"inherits":136,"minimalistic-assert":142}],80:[function(_dereq_,module,exports){
'use strict';

var assert = _dereq_('minimalistic-assert');
var inherits = _dereq_('inherits');

var Cipher = _dereq_('./cipher');
var DES = _dereq_('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":78,"./des":79,"inherits":136,"minimalistic-assert":142}],81:[function(_dereq_,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],82:[function(_dereq_,module,exports){
(function (Buffer){
var generatePrime = _dereq_('./lib/generatePrime')
var primes = _dereq_('./lib/primes.json')

var DH = _dereq_('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this,_dereq_("buffer").Buffer)
},{"./lib/dh":83,"./lib/generatePrime":84,"./lib/primes.json":85,"buffer":66}],83:[function(_dereq_,module,exports){
(function (Buffer){
var BN = _dereq_('bn.js');
var MillerRabin = _dereq_('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = _dereq_('./generatePrime');
var randomBytes = _dereq_('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,_dereq_("buffer").Buffer)
},{"./generatePrime":84,"bn.js":86,"buffer":66,"miller-rabin":140,"randombytes":164}],84:[function(_dereq_,module,exports){
var randomBytes = _dereq_('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = _dereq_('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = _dereq_('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":86,"miller-rabin":140,"randombytes":164}],85:[function(_dereq_,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],86:[function(_dereq_,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"buffer":21,"dup":17}],87:[function(_dereq_,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = _dereq_('../package.json').version;
elliptic.utils = _dereq_('./elliptic/utils');
elliptic.rand = _dereq_('brorand');
elliptic.curve = _dereq_('./elliptic/curve');
elliptic.curves = _dereq_('./elliptic/curves');

// Protocols
elliptic.ec = _dereq_('./elliptic/ec');
elliptic.eddsa = _dereq_('./elliptic/eddsa');

},{"../package.json":103,"./elliptic/curve":90,"./elliptic/curves":93,"./elliptic/ec":94,"./elliptic/eddsa":97,"./elliptic/utils":101,"brorand":20}],88:[function(_dereq_,module,exports){
'use strict';

var BN = _dereq_('bn.js');
var utils = _dereq_('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":101,"bn.js":102}],89:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');
var BN = _dereq_('bn.js');
var inherits = _dereq_('inherits');
var Base = _dereq_('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":101,"./base":88,"bn.js":102,"inherits":136}],90:[function(_dereq_,module,exports){
'use strict';

var curve = exports;

curve.base = _dereq_('./base');
curve.short = _dereq_('./short');
curve.mont = _dereq_('./mont');
curve.edwards = _dereq_('./edwards');

},{"./base":88,"./edwards":89,"./mont":91,"./short":92}],91:[function(_dereq_,module,exports){
'use strict';

var BN = _dereq_('bn.js');
var inherits = _dereq_('inherits');
var Base = _dereq_('./base');

var utils = _dereq_('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":101,"./base":88,"bn.js":102,"inherits":136}],92:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');
var BN = _dereq_('bn.js');
var inherits = _dereq_('inherits');
var Base = _dereq_('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":101,"./base":88,"bn.js":102,"inherits":136}],93:[function(_dereq_,module,exports){
'use strict';

var curves = exports;

var hash = _dereq_('hash.js');
var curve = _dereq_('./curve');
var utils = _dereq_('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = _dereq_('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"./curve":90,"./precomputed/secp256k1":100,"./utils":101,"hash.js":122}],94:[function(_dereq_,module,exports){
'use strict';

var BN = _dereq_('bn.js');
var HmacDRBG = _dereq_('hmac-drbg');
var utils = _dereq_('../utils');
var curves = _dereq_('../curves');
var rand = _dereq_('brorand');
var assert = utils.assert;

var KeyPair = _dereq_('./key');
var Signature = _dereq_('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":93,"../utils":101,"./key":95,"./signature":96,"bn.js":102,"brorand":20,"hmac-drbg":134}],95:[function(_dereq_,module,exports){
'use strict';

var BN = _dereq_('bn.js');
var utils = _dereq_('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":101,"bn.js":102}],96:[function(_dereq_,module,exports){
'use strict';

var BN = _dereq_('bn.js');

var utils = _dereq_('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":101,"bn.js":102}],97:[function(_dereq_,module,exports){
'use strict';

var hash = _dereq_('hash.js');
var curves = _dereq_('../curves');
var utils = _dereq_('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = _dereq_('./key');
var Signature = _dereq_('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":93,"../utils":101,"./key":98,"./signature":99,"hash.js":122}],98:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":101}],99:[function(_dereq_,module,exports){
'use strict';

var BN = _dereq_('bn.js');
var utils = _dereq_('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":101,"bn.js":102}],100:[function(_dereq_,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],101:[function(_dereq_,module,exports){
'use strict';

var utils = exports;
var BN = _dereq_('bn.js');
var minAssert = _dereq_('minimalistic-assert');
var minUtils = _dereq_('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":102,"minimalistic-assert":142,"minimalistic-crypto-utils":143}],102:[function(_dereq_,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"buffer":21,"dup":17}],103:[function(_dereq_,module,exports){
module.exports={
  "_from": "elliptic@^6.5.2",
  "_id": "elliptic@6.5.2",
  "_inBundle": false,
  "_integrity": "sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==",
  "_location": "/browserify/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.5.2",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.5.2",
    "saveSpec": null,
    "fetchSpec": "^6.5.2"
  },
  "_requiredBy": [
    "/browserify/browserify-sign",
    "/browserify/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz",
  "_shasum": "05c5678d7173c049d8ca433552224a495d0e3762",
  "_spec": "elliptic@^6.5.2",
  "_where": "/usr/local/lib/node_modules/browserify/node_modules/browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^3.0.8",
    "grunt": "^1.0.4",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^3.0.7",
    "jshint": "^2.10.3",
    "mocha": "^6.2.2"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.2"
}

},{}],104:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],105:[function(_dereq_,module,exports){
var Buffer = _dereq_('safe-buffer').Buffer
var MD5 = _dereq_('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":139,"safe-buffer":182}],106:[function(_dereq_,module,exports){
'use strict'
var Buffer = _dereq_('safe-buffer').Buffer
var Transform = _dereq_('readable-stream').Transform
var inherits = _dereq_('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":136,"readable-stream":121,"safe-buffer":182}],107:[function(_dereq_,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"dup":50}],108:[function(_dereq_,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"./_stream_readable":110,"./_stream_writable":112,"_process":156,"dup":51,"inherits":136}],109:[function(_dereq_,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./_stream_transform":111,"dup":52,"inherits":136}],110:[function(_dereq_,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":107,"./_stream_duplex":108,"./internal/streams/async_iterator":113,"./internal/streams/buffer_list":114,"./internal/streams/destroy":115,"./internal/streams/from":117,"./internal/streams/state":119,"./internal/streams/stream":120,"_process":156,"buffer":66,"dup":53,"events":104,"inherits":136,"string_decoder/":192,"util":21}],111:[function(_dereq_,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"../errors":107,"./_stream_duplex":108,"dup":54,"inherits":136}],112:[function(_dereq_,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"../errors":107,"./_stream_duplex":108,"./internal/streams/destroy":115,"./internal/streams/state":119,"./internal/streams/stream":120,"_process":156,"buffer":66,"dup":55,"inherits":136,"util-deprecate":194}],113:[function(_dereq_,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"./end-of-stream":116,"_process":156,"dup":56}],114:[function(_dereq_,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"buffer":66,"dup":57,"util":21}],115:[function(_dereq_,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"_process":156,"dup":58}],116:[function(_dereq_,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../../../errors":107,"dup":59}],117:[function(_dereq_,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"dup":60}],118:[function(_dereq_,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../../../errors":107,"./end-of-stream":116,"dup":61}],119:[function(_dereq_,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"../../../errors":107,"dup":62}],120:[function(_dereq_,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"dup":63,"events":104}],121:[function(_dereq_,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":108,"./lib/_stream_passthrough.js":109,"./lib/_stream_readable.js":110,"./lib/_stream_transform.js":111,"./lib/_stream_writable.js":112,"./lib/internal/streams/end-of-stream.js":116,"./lib/internal/streams/pipeline.js":118,"dup":64}],122:[function(_dereq_,module,exports){
var hash = exports;

hash.utils = _dereq_('./hash/utils');
hash.common = _dereq_('./hash/common');
hash.sha = _dereq_('./hash/sha');
hash.ripemd = _dereq_('./hash/ripemd');
hash.hmac = _dereq_('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":123,"./hash/hmac":124,"./hash/ripemd":125,"./hash/sha":126,"./hash/utils":133}],123:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('./utils');
var assert = _dereq_('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":133,"minimalistic-assert":142}],124:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('./utils');
var assert = _dereq_('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":133,"minimalistic-assert":142}],125:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('./utils');
var common = _dereq_('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":123,"./utils":133}],126:[function(_dereq_,module,exports){
'use strict';

exports.sha1 = _dereq_('./sha/1');
exports.sha224 = _dereq_('./sha/224');
exports.sha256 = _dereq_('./sha/256');
exports.sha384 = _dereq_('./sha/384');
exports.sha512 = _dereq_('./sha/512');

},{"./sha/1":127,"./sha/224":128,"./sha/256":129,"./sha/384":130,"./sha/512":131}],127:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');
var common = _dereq_('../common');
var shaCommon = _dereq_('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":123,"../utils":133,"./common":132}],128:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');
var SHA256 = _dereq_('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":133,"./256":129}],129:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');
var common = _dereq_('../common');
var shaCommon = _dereq_('./common');
var assert = _dereq_('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":123,"../utils":133,"./common":132,"minimalistic-assert":142}],130:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');

var SHA512 = _dereq_('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":133,"./512":131}],131:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');
var common = _dereq_('../common');
var assert = _dereq_('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":123,"../utils":133,"minimalistic-assert":142}],132:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":133}],133:[function(_dereq_,module,exports){
'use strict';

var assert = _dereq_('minimalistic-assert');
var inherits = _dereq_('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":136,"minimalistic-assert":142}],134:[function(_dereq_,module,exports){
'use strict';

var hash = _dereq_('hash.js');
var utils = _dereq_('minimalistic-crypto-utils');
var assert = _dereq_('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":122,"minimalistic-assert":142,"minimalistic-crypto-utils":143}],135:[function(_dereq_,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],136:[function(_dereq_,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],137:[function(_dereq_,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],138:[function(_dereq_,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],139:[function(_dereq_,module,exports){
'use strict'
var inherits = _dereq_('inherits')
var HashBase = _dereq_('hash-base')
var Buffer = _dereq_('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":106,"inherits":136,"safe-buffer":182}],140:[function(_dereq_,module,exports){
var bn = _dereq_('bn.js');
var brorand = _dereq_('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":141,"brorand":20}],141:[function(_dereq_,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"buffer":21,"dup":17}],142:[function(_dereq_,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],143:[function(_dereq_,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],144:[function(_dereq_,module,exports){
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};

},{}],145:[function(_dereq_,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],146:[function(_dereq_,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = _dereq_('asn1.js')

exports.certificate = _dereq_('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":147,"asn1.js":3}],147:[function(_dereq_,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = _dereq_('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":3}],148:[function(_dereq_,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = _dereq_('evp_bytestokey')
var ciphers = _dereq_('browserify-aes')
var Buffer = _dereq_('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":24,"evp_bytestokey":105,"safe-buffer":182}],149:[function(_dereq_,module,exports){
var asn1 = _dereq_('./asn1')
var aesid = _dereq_('./aesid.json')
var fixProc = _dereq_('./fixProc')
var ciphers = _dereq_('browserify-aes')
var compat = _dereq_('pbkdf2')
var Buffer = _dereq_('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":145,"./asn1":146,"./fixProc":148,"browserify-aes":24,"pbkdf2":150,"safe-buffer":182}],150:[function(_dereq_,module,exports){
exports.pbkdf2 = _dereq_('./lib/async')
exports.pbkdf2Sync = _dereq_('./lib/sync')

},{"./lib/async":151,"./lib/sync":154}],151:[function(_dereq_,module,exports){
(function (process,global){
var checkParameters = _dereq_('./precondition')
var defaultEncoding = _dereq_('./default-encoding')
var sync = _dereq_('./sync')
var Buffer = _dereq_('safe-buffer').Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":152,"./precondition":153,"./sync":154,"_process":156,"safe-buffer":182}],152:[function(_dereq_,module,exports){
(function (process){
var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

}).call(this,_dereq_('_process'))
},{"_process":156}],153:[function(_dereq_,module,exports){
(function (Buffer){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

}).call(this,{"isBuffer":_dereq_("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":137}],154:[function(_dereq_,module,exports){
var md5 = _dereq_('create-hash/md5')
var RIPEMD160 = _dereq_('ripemd160')
var sha = _dereq_('sha.js')

var checkParameters = _dereq_('./precondition')
var defaultEncoding = _dereq_('./default-encoding')
var Buffer = _dereq_('safe-buffer').Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":152,"./precondition":153,"create-hash/md5":72,"ripemd160":181,"safe-buffer":182,"sha.js":184}],155:[function(_dereq_,module,exports){
(function (process){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,_dereq_('_process'))
},{"_process":156}],156:[function(_dereq_,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],157:[function(_dereq_,module,exports){
exports.publicEncrypt = _dereq_('./publicEncrypt')
exports.privateDecrypt = _dereq_('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":160,"./publicEncrypt":161}],158:[function(_dereq_,module,exports){
var createHash = _dereq_('create-hash')
var Buffer = _dereq_('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":71,"safe-buffer":182}],159:[function(_dereq_,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"buffer":21,"dup":17}],160:[function(_dereq_,module,exports){
var parseKeys = _dereq_('parse-asn1')
var mgf = _dereq_('./mgf')
var xor = _dereq_('./xor')
var BN = _dereq_('bn.js')
var crt = _dereq_('browserify-rsa')
var createHash = _dereq_('create-hash')
var withPublic = _dereq_('./withPublic')
var Buffer = _dereq_('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":158,"./withPublic":162,"./xor":163,"bn.js":159,"browserify-rsa":42,"create-hash":71,"parse-asn1":149,"safe-buffer":182}],161:[function(_dereq_,module,exports){
var parseKeys = _dereq_('parse-asn1')
var randomBytes = _dereq_('randombytes')
var createHash = _dereq_('create-hash')
var mgf = _dereq_('./mgf')
var xor = _dereq_('./xor')
var BN = _dereq_('bn.js')
var withPublic = _dereq_('./withPublic')
var crt = _dereq_('browserify-rsa')
var Buffer = _dereq_('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":158,"./withPublic":162,"./xor":163,"bn.js":159,"browserify-rsa":42,"create-hash":71,"parse-asn1":149,"randombytes":164,"safe-buffer":182}],162:[function(_dereq_,module,exports){
var BN = _dereq_('bn.js')
var Buffer = _dereq_('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":159,"safe-buffer":182}],163:[function(_dereq_,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],164:[function(_dereq_,module,exports){
(function (process,global){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = _dereq_('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":156,"safe-buffer":182}],165:[function(_dereq_,module,exports){
(function (process,global){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = _dereq_('safe-buffer')
var randombytes = _dereq_('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":156,"randombytes":164,"safe-buffer":182}],166:[function(_dereq_,module,exports){
module.exports = _dereq_('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":167}],167:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = _dereq_('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(_dereq_('core-util-is'));
util.inherits = _dereq_('inherits');
/*</replacement>*/

var Readable = _dereq_('./_stream_readable');
var Writable = _dereq_('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":169,"./_stream_writable":171,"core-util-is":68,"inherits":136,"process-nextick-args":155}],168:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = _dereq_('./_stream_transform');

/*<replacement>*/
var util = Object.create(_dereq_('core-util-is'));
util.inherits = _dereq_('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":170,"core-util-is":68,"inherits":136}],169:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = _dereq_('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = _dereq_('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = _dereq_('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = _dereq_('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = _dereq_('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(_dereq_('core-util-is'));
util.inherits = _dereq_('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = _dereq_('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = _dereq_('./internal/streams/BufferList');
var destroyImpl = _dereq_('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":167,"./internal/streams/BufferList":172,"./internal/streams/destroy":173,"./internal/streams/stream":174,"_process":156,"core-util-is":68,"events":104,"inherits":136,"isarray":138,"process-nextick-args":155,"safe-buffer":175,"string_decoder/":176,"util":21}],170:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = _dereq_('./_stream_duplex');

/*<replacement>*/
var util = Object.create(_dereq_('core-util-is'));
util.inherits = _dereq_('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":167,"core-util-is":68,"inherits":136}],171:[function(_dereq_,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = _dereq_('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(_dereq_('core-util-is'));
util.inherits = _dereq_('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: _dereq_('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = _dereq_('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = _dereq_('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = _dereq_('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},_dereq_("timers").setImmediate)
},{"./_stream_duplex":167,"./internal/streams/destroy":173,"./internal/streams/stream":174,"_process":156,"core-util-is":68,"inherits":136,"process-nextick-args":155,"safe-buffer":175,"timers":193,"util-deprecate":194}],172:[function(_dereq_,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = _dereq_('safe-buffer').Buffer;
var util = _dereq_('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":175,"util":21}],173:[function(_dereq_,module,exports){
'use strict';

/*<replacement>*/

var pna = _dereq_('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":155}],174:[function(_dereq_,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"dup":63,"events":104}],175:[function(_dereq_,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = _dereq_('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":66}],176:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = _dereq_('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":175}],177:[function(_dereq_,module,exports){
module.exports = _dereq_('./readable').PassThrough

},{"./readable":178}],178:[function(_dereq_,module,exports){
exports = module.exports = _dereq_('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = _dereq_('./lib/_stream_writable.js');
exports.Duplex = _dereq_('./lib/_stream_duplex.js');
exports.Transform = _dereq_('./lib/_stream_transform.js');
exports.PassThrough = _dereq_('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":167,"./lib/_stream_passthrough.js":168,"./lib/_stream_readable.js":169,"./lib/_stream_transform.js":170,"./lib/_stream_writable.js":171}],179:[function(_dereq_,module,exports){
module.exports = _dereq_('./readable').Transform

},{"./readable":178}],180:[function(_dereq_,module,exports){
module.exports = _dereq_('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":171}],181:[function(_dereq_,module,exports){
'use strict'
var Buffer = _dereq_('buffer').Buffer
var inherits = _dereq_('inherits')
var HashBase = _dereq_('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":66,"hash-base":106,"inherits":136}],182:[function(_dereq_,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = _dereq_('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":66}],183:[function(_dereq_,module,exports){
var Buffer = _dereq_('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":182}],184:[function(_dereq_,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = _dereq_('./sha')
exports.sha1 = _dereq_('./sha1')
exports.sha224 = _dereq_('./sha224')
exports.sha256 = _dereq_('./sha256')
exports.sha384 = _dereq_('./sha384')
exports.sha512 = _dereq_('./sha512')

},{"./sha":185,"./sha1":186,"./sha224":187,"./sha256":188,"./sha384":189,"./sha512":190}],185:[function(_dereq_,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = _dereq_('inherits')
var Hash = _dereq_('./hash')
var Buffer = _dereq_('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":183,"inherits":136,"safe-buffer":182}],186:[function(_dereq_,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = _dereq_('inherits')
var Hash = _dereq_('./hash')
var Buffer = _dereq_('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":183,"inherits":136,"safe-buffer":182}],187:[function(_dereq_,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = _dereq_('inherits')
var Sha256 = _dereq_('./sha256')
var Hash = _dereq_('./hash')
var Buffer = _dereq_('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":183,"./sha256":188,"inherits":136,"safe-buffer":182}],188:[function(_dereq_,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = _dereq_('inherits')
var Hash = _dereq_('./hash')
var Buffer = _dereq_('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":183,"inherits":136,"safe-buffer":182}],189:[function(_dereq_,module,exports){
var inherits = _dereq_('inherits')
var SHA512 = _dereq_('./sha512')
var Hash = _dereq_('./hash')
var Buffer = _dereq_('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":183,"./sha512":190,"inherits":136,"safe-buffer":182}],190:[function(_dereq_,module,exports){
var inherits = _dereq_('inherits')
var Hash = _dereq_('./hash')
var Buffer = _dereq_('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":183,"inherits":136,"safe-buffer":182}],191:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = _dereq_('events').EventEmitter;
var inherits = _dereq_('inherits');

inherits(Stream, EE);
Stream.Readable = _dereq_('readable-stream/readable.js');
Stream.Writable = _dereq_('readable-stream/writable.js');
Stream.Duplex = _dereq_('readable-stream/duplex.js');
Stream.Transform = _dereq_('readable-stream/transform.js');
Stream.PassThrough = _dereq_('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":104,"inherits":136,"readable-stream/duplex.js":166,"readable-stream/passthrough.js":177,"readable-stream/readable.js":178,"readable-stream/transform.js":179,"readable-stream/writable.js":180}],192:[function(_dereq_,module,exports){
arguments[4][176][0].apply(exports,arguments)
},{"dup":176,"safe-buffer":182}],193:[function(_dereq_,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = _dereq_('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,_dereq_("timers").setImmediate,_dereq_("timers").clearImmediate)
},{"process/browser.js":156,"timers":193}],194:[function(_dereq_,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],195:[function(_dereq_,module,exports){
var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{}]},{},[1])(1)
});
