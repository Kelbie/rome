"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const AnyT_1 = require("./AnyT");
const BooleanLiteralT_1 = require("./BooleanLiteralT");
const BooleanT_1 = require("./BooleanT");
const CallT_1 = require("./CallT");
const ClassT_1 = require("./ClassT");
const EmptyT_1 = require("./EmptyT");
const FunctionT_1 = require("./FunctionT");
const GetPropT_1 = require("./GetPropT");
const IntersectionT_1 = require("./IntersectionT");
const MaybeT_1 = require("./MaybeT");
const MixedT_1 = require("./MixedT");
const NullT_1 = require("./NullT");
const NumericLiteralT_1 = require("./NumericLiteralT");
const NumericT_1 = require("./NumericT");
const ObjPropT_1 = require("./ObjPropT");
const ObjT_1 = require("./ObjT");
const OpenIntrinsicT_1 = require("./OpenIntrinsicT");
const ImportT_1 = require("./ImportT");
const OpenT_1 = require("./OpenT");
const StringLiteralT_1 = require("./StringLiteralT");
const StringT_1 = require("./StringT");
const UnionT_1 = require("./UnionT");
const UnknownT_1 = require("./UnknownT");
const VoidT_1 = require("./VoidT");
const ExhaustiveT_1 = require("./ExhaustiveT");
const InstanceT_1 = require("./InstanceT");
const GenericT_1 = require("./GenericT");
const ObjIndexPropT_1 = require("./ObjIndexPropT");
const BinaryOpT_1 = require("./BinaryOpT");
const RefinedT_1 = require("./RefinedT");
const RefineTypeofT_1 = require("./RefineTypeofT");
const TypeofT_1 = require("./TypeofT");
const SideEffectT_1 = require("./SideEffectT");
const BlockT_1 = require("./BlockT");
const E_1 = require("./errors/E");
const NotCallableE_1 = require("./errors/NotCallableE");
const UndeclaredVarE_1 = require("./errors/UndeclaredVarE");
const UnknownPropE_1 = require("./errors/UnknownPropE");
const UnknownImportE_1 = require("./errors/UnknownImportE");
const MissingUnionE_1 = require("./errors/MissingUnionE");
const types = new Map();
exports.default = types;
types.set('AnyT', AnyT_1.default);
types.set('BooleanLiteralT', BooleanLiteralT_1.default);
types.set('BooleanT', BooleanT_1.default);
types.set('CallT', CallT_1.default);
types.set('ClassT', ClassT_1.default);
types.set('EmptyT', EmptyT_1.default);
types.set('FunctionT', FunctionT_1.default);
types.set('GetPropT', GetPropT_1.default);
types.set('IntersectionT', IntersectionT_1.default);
types.set('MaybeT', MaybeT_1.default);
types.set('MixedT', MixedT_1.default);
types.set('NullT', NullT_1.default);
types.set('NumericLiteralT', NumericLiteralT_1.default);
types.set('NumericT', NumericT_1.default);
types.set('ObjPropT', ObjPropT_1.default);
types.set('ObjT', ObjT_1.default);
types.set('OpenIntrinsicT', OpenIntrinsicT_1.default);
types.set('ImportT', ImportT_1.default);
types.set('OpenT', OpenT_1.default);
types.set('StringLiteralT', StringLiteralT_1.default);
types.set('StringT', StringT_1.default);
types.set('UnionT', UnionT_1.default);
types.set('UnknownT', UnknownT_1.default);
types.set('VoidT', VoidT_1.default);
types.set('ExhaustiveT', ExhaustiveT_1.default);
types.set('InstanceT', InstanceT_1.default);
types.set('GenericT', GenericT_1.default);
types.set('ObjIndexPropT', ObjIndexPropT_1.default);
types.set('BinaryOpT', BinaryOpT_1.default);
types.set('RefinedT', RefinedT_1.default);
types.set('RefineTypeofT', RefineTypeofT_1.default);
types.set('TypeofT', TypeofT_1.default);
types.set('SideEffectT', SideEffectT_1.default);
types.set('BlockT', BlockT_1.default);
types.set('E', E_1.default);
types.set('NotCallableE', NotCallableE_1.default);
types.set('UndeclaredVarE', UndeclaredVarE_1.default);
types.set('UnknownPropE', UnknownPropE_1.default);
types.set('UnknownImportE', UnknownImportE_1.default);
types.set('MissingUnionE', MissingUnionE_1.default);
